===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest:::OBJECT
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.ExtendedFieldElementAbstractTest():::EXIT
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.checkRelative(double, org.apache.commons.math3.RealFieldElement):::ENTER
obtained != null
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.checkRelative(double, org.apache.commons.math3.RealFieldElement):::EXIT
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.generateDouble(org.apache.commons.math3.random.RandomGenerator, int):::ENTER
r != null
r.getClass().getName() == org.apache.commons.math3.random.Well1024a.class
n == 10
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.generateDouble(org.apache.commons.math3.random.RandomGenerator, int):::EXIT
return != null
size(return[]) == 10
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.testLinearCombinationDaFa():::ENTER
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.testLinearCombinationDaFa():::EXIT
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.testLinearCombinationFaFa():::ENTER
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.testLinearCombinationFaFa():::EXIT
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.toFieldArray(double[]):::ENTER
a != null
size(a[]) == 10
===========================================================================
org.apache.commons.math3.ExtendedFieldElementAbstractTest.toFieldArray(double[]):::EXIT
a[] == orig(a[])
return != null
return[] elements != null
size(return[]) == 10
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler:::CLASS
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers has only one value
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers != null
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler:::OBJECT
this.parameters >= 0
this.order one of { 0, 1 }
this.sizes != null
this.sizes.getClass().getName() == int[][].class
this.sizes[] elements != null
this.derivativesIndirection != null
this.derivativesIndirection.getClass().getName() == int[][].class
this.derivativesIndirection[] elements != null
this.lowerIndirection != null
this.lowerIndirection[] == [0]
this.lowerIndirection[] elements == 0
this.multIndirection != null
this.multIndirection.getClass().getName() == int[][][].class
this.multIndirection[] elements != null
this.compIndirection != null
this.compIndirection.getClass().getName() == int[][][].class
this.compIndirection[] elements != null
size(this.sizes[]) >= 1
size(this.derivativesIndirection[]) >= 1
size(this.lowerIndirection[]) == 1
size(this.multIndirection[]) >= 1
size(this.compIndirection[]) >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.DSCompiler(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::ENTER
order one of { 0, 1 }
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers has only one value
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers != null
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.DSCompiler(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
valueCompiler.parameters == orig(valueCompiler.parameters)
valueCompiler.order == orig(valueCompiler.order)
valueCompiler.sizes == orig(valueCompiler.sizes)
valueCompiler.sizes.getClass().getName() == orig(valueCompiler.sizes.getClass().getName())
valueCompiler.sizes[] == orig(valueCompiler.sizes[])
valueCompiler.derivativesIndirection == orig(valueCompiler.derivativesIndirection)
valueCompiler.derivativesIndirection.getClass().getName() == orig(valueCompiler.derivativesIndirection.getClass().getName())
valueCompiler.derivativesIndirection[] == orig(valueCompiler.derivativesIndirection[])
valueCompiler.lowerIndirection == orig(valueCompiler.lowerIndirection)
valueCompiler.lowerIndirection[] == orig(valueCompiler.lowerIndirection[])
valueCompiler.multIndirection == orig(valueCompiler.multIndirection)
valueCompiler.multIndirection.getClass().getName() == orig(valueCompiler.multIndirection.getClass().getName())
valueCompiler.multIndirection[] == orig(valueCompiler.multIndirection[])
valueCompiler.compIndirection == orig(valueCompiler.compIndirection)
valueCompiler.compIndirection.getClass().getName() == orig(valueCompiler.compIndirection.getClass().getName())
valueCompiler.compIndirection[] == orig(valueCompiler.compIndirection[])
derivativeCompiler.parameters == orig(derivativeCompiler.parameters)
derivativeCompiler.order == orig(derivativeCompiler.order)
derivativeCompiler.sizes == orig(derivativeCompiler.sizes)
derivativeCompiler.sizes.getClass().getName() == orig(derivativeCompiler.sizes.getClass().getName())
derivativeCompiler.sizes[] == orig(derivativeCompiler.sizes[])
derivativeCompiler.derivativesIndirection == orig(derivativeCompiler.derivativesIndirection)
derivativeCompiler.derivativesIndirection.getClass().getName() == orig(derivativeCompiler.derivativesIndirection.getClass().getName())
derivativeCompiler.derivativesIndirection[] == orig(derivativeCompiler.derivativesIndirection[])
derivativeCompiler.lowerIndirection == orig(derivativeCompiler.lowerIndirection)
derivativeCompiler.lowerIndirection[] == orig(derivativeCompiler.lowerIndirection[])
derivativeCompiler.multIndirection == orig(derivativeCompiler.multIndirection)
derivativeCompiler.multIndirection.getClass().getName() == orig(derivativeCompiler.multIndirection.getClass().getName())
derivativeCompiler.multIndirection[] == orig(derivativeCompiler.multIndirection[])
derivativeCompiler.compIndirection == orig(derivativeCompiler.compIndirection)
derivativeCompiler.compIndirection.getClass().getName() == orig(derivativeCompiler.compIndirection.getClass().getName())
derivativeCompiler.compIndirection[] == orig(derivativeCompiler.compIndirection[])
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.add(double[], int, double[], int, double[], int):::ENTER
this.parameters one of { 2, 3, 6 }
this.order == 1
lhs != null
lhsOffset == 0
rhs != null
rhsOffset == 0
result != null
resultOffset == 0
size(this.sizes[]) one of { 3, 4, 7 }
size(this.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.multIndirection[]) one of { 3, 4, 7 }
size(this.compIndirection[]) one of { 3, 4, 7 }
size(lhs[]) one of { 3, 4, 7 }
size(rhs[]) one of { 3, 4, 7 }
size(result[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.add(double[], int, double[], int, double[], int):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.parameters == orig(this.parameters)
this.order == orig(this.order)
this.sizes == orig(this.sizes)
this.sizes.getClass().getName() == orig(this.sizes.getClass().getName())
this.sizes[] == orig(this.sizes[])
this.derivativesIndirection == orig(this.derivativesIndirection)
this.derivativesIndirection.getClass().getName() == orig(this.derivativesIndirection.getClass().getName())
this.derivativesIndirection[] == orig(this.derivativesIndirection[])
this.lowerIndirection == orig(this.lowerIndirection)
this.lowerIndirection[] == orig(this.lowerIndirection[])
this.multIndirection == orig(this.multIndirection)
this.multIndirection.getClass().getName() == orig(this.multIndirection.getClass().getName())
this.multIndirection[] == orig(this.multIndirection[])
this.compIndirection == orig(this.compIndirection)
this.compIndirection.getClass().getName() == orig(this.compIndirection.getClass().getName())
this.compIndirection[] == orig(this.compIndirection[])
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
this.parameters one of { 2, 3, 6 }
this.order == 1
size(this.sizes[]) one of { 3, 4, 7 }
size(this.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.multIndirection[]) one of { 3, 4, 7 }
size(this.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler):::ENTER
this.parameters one of { 2, 3, 6 }
this.order == 1
compiler != null
compiler.parameters one of { 2, 3, 6 }
compiler.order == 1
compiler.sizes != null
compiler.sizes.getClass().getName() == int[][].class
compiler.sizes[] elements != null
compiler.derivativesIndirection != null
compiler.derivativesIndirection.getClass().getName() == int[][].class
compiler.derivativesIndirection[] elements != null
compiler.lowerIndirection != null
compiler.lowerIndirection[] == [0]
compiler.lowerIndirection[] elements == 0
compiler.multIndirection != null
compiler.multIndirection.getClass().getName() == int[][][].class
compiler.multIndirection[] elements != null
compiler.compIndirection != null
compiler.compIndirection.getClass().getName() == int[][][].class
compiler.compIndirection[] elements != null
size(this.sizes[]) one of { 3, 4, 7 }
size(this.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.multIndirection[]) one of { 3, 4, 7 }
size(this.compIndirection[]) one of { 3, 4, 7 }
size(compiler.sizes[]) one of { 3, 4, 7 }
size(compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(compiler.lowerIndirection[]) == 1
size(compiler.multIndirection[]) one of { 3, 4, 7 }
size(compiler.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.parameters == orig(this.parameters)
this.order == orig(this.order)
this.sizes == orig(this.sizes)
this.sizes.getClass().getName() == orig(this.sizes.getClass().getName())
this.sizes[] == orig(this.sizes[])
this.derivativesIndirection == orig(this.derivativesIndirection)
this.derivativesIndirection.getClass().getName() == orig(this.derivativesIndirection.getClass().getName())
this.derivativesIndirection[] == orig(this.derivativesIndirection[])
this.lowerIndirection == orig(this.lowerIndirection)
this.lowerIndirection[] == orig(this.lowerIndirection[])
this.multIndirection == orig(this.multIndirection)
this.multIndirection.getClass().getName() == orig(this.multIndirection.getClass().getName())
this.multIndirection[] == orig(this.multIndirection[])
this.compIndirection == orig(this.compIndirection)
this.compIndirection.getClass().getName() == orig(this.compIndirection.getClass().getName())
this.compIndirection[] == orig(this.compIndirection[])
compiler.parameters == orig(compiler.parameters)
compiler.order == orig(compiler.order)
compiler.sizes == orig(compiler.sizes)
compiler.sizes.getClass().getName() == orig(compiler.sizes.getClass().getName())
compiler.sizes[] == orig(compiler.sizes[])
compiler.derivativesIndirection == orig(compiler.derivativesIndirection)
compiler.derivativesIndirection.getClass().getName() == orig(compiler.derivativesIndirection.getClass().getName())
compiler.derivativesIndirection[] == orig(compiler.derivativesIndirection[])
compiler.lowerIndirection == orig(compiler.lowerIndirection)
compiler.lowerIndirection[] == orig(compiler.lowerIndirection[])
compiler.multIndirection == orig(compiler.multIndirection)
compiler.multIndirection.getClass().getName() == orig(compiler.multIndirection.getClass().getName())
compiler.multIndirection[] == orig(compiler.multIndirection[])
compiler.compIndirection == orig(compiler.compIndirection)
compiler.compIndirection.getClass().getName() == orig(compiler.compIndirection.getClass().getName())
compiler.compIndirection[] == orig(compiler.compIndirection[])
this.parameters one of { 2, 3, 6 }
this.order == 1
compiler.parameters one of { 2, 3, 6 }
compiler.order == 1
compiler.sizes != null
compiler.sizes.getClass().getName() == int[][].class
compiler.sizes[] elements != null
compiler.derivativesIndirection != null
compiler.derivativesIndirection.getClass().getName() == int[][].class
compiler.derivativesIndirection[] elements != null
compiler.lowerIndirection != null
compiler.lowerIndirection[] == [0]
compiler.lowerIndirection[] elements == 0
compiler.multIndirection != null
compiler.multIndirection.getClass().getName() == int[][][].class
compiler.multIndirection[] elements != null
compiler.compIndirection != null
compiler.compIndirection.getClass().getName() == int[][][].class
compiler.compIndirection[] elements != null
size(this.sizes[]) one of { 3, 4, 7 }
size(this.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.multIndirection[]) one of { 3, 4, 7 }
size(this.compIndirection[]) one of { 3, 4, 7 }
size(compiler.sizes[]) one of { 3, 4, 7 }
size(compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(compiler.lowerIndirection[]) == 1
size(compiler.multIndirection[]) one of { 3, 4, 7 }
size(compiler.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[][], int[][]):::ENTER
order one of { 0, 1 }
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
sizes != null
sizes.getClass().getName() == int[][].class
sizes[] elements != null
derivativesIndirection != null
derivativesIndirection.getClass().getName() == int[][].class
derivativesIndirection[] elements != null
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
size(derivativesIndirection[]) >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[][], int[][]):::EXIT419
valueCompiler.order == 0
derivativeCompiler.parameters == 0
derivativeCompiler.sizes has only one value
derivativeCompiler.sizes[] contains no nulls and has only one value, of length 1
derivativeCompiler.sizes[] elements has only one value
derivativeCompiler.derivativesIndirection has only one value
derivativeCompiler.derivativesIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.derivativesIndirection[] elements has only one value
derivativeCompiler.lowerIndirection has only one value
derivativeCompiler.multIndirection has only one value
derivativeCompiler.multIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.multIndirection[] elements has only one value
derivativeCompiler.compIndirection has only one value
derivativeCompiler.compIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.compIndirection[] elements has only one value
size(valueCompiler.derivativesIndirection[]) == 1
size(valueCompiler.multIndirection[]) == 1
size(valueCompiler.compIndirection[]) == 1
size(derivativeCompiler.sizes[]) == 1
size(return[]) == 1
orig(size(derivativesIndirection[])) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[][], int[][]):::EXIT506
valueCompiler.order == 1
orig(order) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[][], int[][]):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
valueCompiler.parameters == orig(valueCompiler.parameters)
valueCompiler.order == orig(valueCompiler.order)
valueCompiler.sizes == orig(valueCompiler.sizes)
valueCompiler.sizes.getClass().getName() == orig(valueCompiler.sizes.getClass().getName())
valueCompiler.sizes[] == orig(valueCompiler.sizes[])
valueCompiler.derivativesIndirection == orig(valueCompiler.derivativesIndirection)
valueCompiler.derivativesIndirection.getClass().getName() == orig(valueCompiler.derivativesIndirection.getClass().getName())
valueCompiler.derivativesIndirection[] == orig(valueCompiler.derivativesIndirection[])
valueCompiler.lowerIndirection == orig(valueCompiler.lowerIndirection)
valueCompiler.lowerIndirection[] == orig(valueCompiler.lowerIndirection[])
valueCompiler.multIndirection == orig(valueCompiler.multIndirection)
valueCompiler.multIndirection.getClass().getName() == orig(valueCompiler.multIndirection.getClass().getName())
valueCompiler.multIndirection[] == orig(valueCompiler.multIndirection[])
valueCompiler.compIndirection == orig(valueCompiler.compIndirection)
valueCompiler.compIndirection.getClass().getName() == orig(valueCompiler.compIndirection.getClass().getName())
valueCompiler.compIndirection[] == orig(valueCompiler.compIndirection[])
derivativeCompiler.parameters == orig(derivativeCompiler.parameters)
derivativeCompiler.order == orig(derivativeCompiler.order)
derivativeCompiler.sizes == orig(derivativeCompiler.sizes)
derivativeCompiler.sizes.getClass().getName() == orig(derivativeCompiler.sizes.getClass().getName())
derivativeCompiler.sizes[] == orig(derivativeCompiler.sizes[])
derivativeCompiler.derivativesIndirection == orig(derivativeCompiler.derivativesIndirection)
derivativeCompiler.derivativesIndirection.getClass().getName() == orig(derivativeCompiler.derivativesIndirection.getClass().getName())
derivativeCompiler.derivativesIndirection[] == orig(derivativeCompiler.derivativesIndirection[])
derivativeCompiler.lowerIndirection == orig(derivativeCompiler.lowerIndirection)
derivativeCompiler.lowerIndirection[] == orig(derivativeCompiler.lowerIndirection[])
derivativeCompiler.multIndirection == orig(derivativeCompiler.multIndirection)
derivativeCompiler.multIndirection.getClass().getName() == orig(derivativeCompiler.multIndirection.getClass().getName())
derivativeCompiler.multIndirection[] == orig(derivativeCompiler.multIndirection[])
derivativeCompiler.compIndirection == orig(derivativeCompiler.compIndirection)
derivativeCompiler.compIndirection.getClass().getName() == orig(derivativeCompiler.compIndirection.getClass().getName())
derivativeCompiler.compIndirection[] == orig(derivativeCompiler.compIndirection[])
sizes[] == orig(sizes[])
derivativesIndirection[] == orig(derivativesIndirection[])
(valueCompiler.order == 0)  <==>  (derivativeCompiler.parameters == 0)
(valueCompiler.order == 0)  <==>  (orig(size(derivativesIndirection[])) == 1)
(valueCompiler.order == 0)  <==>  (size(derivativeCompiler.sizes[]) == 1)
(valueCompiler.order == 0)  <==>  (size(return[]) == 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.lowerIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes[] elements has only one value)
(valueCompiler.order == 0)  ==>  (orig(order) one of { 0, 1 })
(valueCompiler.order == 0)  ==>  (size(valueCompiler.compIndirection[]) == 1)
(valueCompiler.order == 0)  ==>  (size(valueCompiler.derivativesIndirection[]) == 1)
(valueCompiler.order == 0)  ==>  (size(valueCompiler.multIndirection[]) == 1)
(valueCompiler.order == 1)  ==>  (orig(order) == 1)
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
sizes[] elements != null
derivativesIndirection[] elements != null
return != null
return.getClass().getName() == int[][][].class
return[] elements != null
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
size(return[]) >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::ENTER
order one of { 0, 1 }
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT269
valueCompiler.order == 0
derivativeCompiler.parameters == 0
derivativeCompiler.sizes has only one value
derivativeCompiler.sizes[] contains no nulls and has only one value, of length 1
derivativeCompiler.sizes[] elements has only one value
derivativeCompiler.derivativesIndirection has only one value
derivativeCompiler.derivativesIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.derivativesIndirection[] elements has only one value
derivativeCompiler.lowerIndirection has only one value
derivativeCompiler.multIndirection has only one value
derivativeCompiler.multIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.multIndirection[] elements has only one value
derivativeCompiler.compIndirection has only one value
derivativeCompiler.compIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.compIndirection[] elements has only one value
size(valueCompiler.derivativesIndirection[]) == 1
size(valueCompiler.multIndirection[]) == 1
size(valueCompiler.compIndirection[]) == 1
size(derivativeCompiler.sizes[]) == 1
size(return[]) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT297
valueCompiler.order == 1
orig(order) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
valueCompiler.parameters == orig(valueCompiler.parameters)
valueCompiler.order == orig(valueCompiler.order)
valueCompiler.sizes == orig(valueCompiler.sizes)
valueCompiler.sizes.getClass().getName() == orig(valueCompiler.sizes.getClass().getName())
valueCompiler.sizes[] == orig(valueCompiler.sizes[])
valueCompiler.derivativesIndirection == orig(valueCompiler.derivativesIndirection)
valueCompiler.derivativesIndirection.getClass().getName() == orig(valueCompiler.derivativesIndirection.getClass().getName())
valueCompiler.derivativesIndirection[] == orig(valueCompiler.derivativesIndirection[])
valueCompiler.lowerIndirection == orig(valueCompiler.lowerIndirection)
valueCompiler.lowerIndirection[] == orig(valueCompiler.lowerIndirection[])
valueCompiler.multIndirection == orig(valueCompiler.multIndirection)
valueCompiler.multIndirection.getClass().getName() == orig(valueCompiler.multIndirection.getClass().getName())
valueCompiler.multIndirection[] == orig(valueCompiler.multIndirection[])
valueCompiler.compIndirection == orig(valueCompiler.compIndirection)
valueCompiler.compIndirection.getClass().getName() == orig(valueCompiler.compIndirection.getClass().getName())
valueCompiler.compIndirection[] == orig(valueCompiler.compIndirection[])
derivativeCompiler.parameters == orig(derivativeCompiler.parameters)
derivativeCompiler.order == orig(derivativeCompiler.order)
derivativeCompiler.sizes == orig(derivativeCompiler.sizes)
derivativeCompiler.sizes.getClass().getName() == orig(derivativeCompiler.sizes.getClass().getName())
derivativeCompiler.sizes[] == orig(derivativeCompiler.sizes[])
derivativeCompiler.derivativesIndirection == orig(derivativeCompiler.derivativesIndirection)
derivativeCompiler.derivativesIndirection.getClass().getName() == orig(derivativeCompiler.derivativesIndirection.getClass().getName())
derivativeCompiler.derivativesIndirection[] == orig(derivativeCompiler.derivativesIndirection[])
derivativeCompiler.lowerIndirection == orig(derivativeCompiler.lowerIndirection)
derivativeCompiler.lowerIndirection[] == orig(derivativeCompiler.lowerIndirection[])
derivativeCompiler.multIndirection == orig(derivativeCompiler.multIndirection)
derivativeCompiler.multIndirection.getClass().getName() == orig(derivativeCompiler.multIndirection.getClass().getName())
derivativeCompiler.multIndirection[] == orig(derivativeCompiler.multIndirection[])
derivativeCompiler.compIndirection == orig(derivativeCompiler.compIndirection)
derivativeCompiler.compIndirection.getClass().getName() == orig(derivativeCompiler.compIndirection.getClass().getName())
derivativeCompiler.compIndirection[] == orig(derivativeCompiler.compIndirection[])
(valueCompiler.order == 0)  <==>  (derivativeCompiler.parameters == 0)
(valueCompiler.order == 0)  <==>  (size(derivativeCompiler.sizes[]) == 1)
(valueCompiler.order == 0)  <==>  (size(return[]) == 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.lowerIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes[] elements has only one value)
(valueCompiler.order == 0)  ==>  (orig(order) one of { 0, 1 })
(valueCompiler.order == 0)  ==>  (size(valueCompiler.compIndirection[]) == 1)
(valueCompiler.order == 0)  ==>  (size(valueCompiler.derivativesIndirection[]) == 1)
(valueCompiler.order == 0)  ==>  (size(valueCompiler.multIndirection[]) == 1)
(valueCompiler.order == 1)  ==>  (orig(order) == 1)
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
return != null
return.getClass().getName() == int[][].class
return[] elements != null
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
size(return[]) >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::ENTER
order one of { 0, 1 }
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT317
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
valueCompiler.parameters == orig(valueCompiler.parameters)
valueCompiler.order == orig(valueCompiler.order)
valueCompiler.sizes == orig(valueCompiler.sizes)
valueCompiler.sizes.getClass().getName() == orig(valueCompiler.sizes.getClass().getName())
valueCompiler.sizes[] == orig(valueCompiler.sizes[])
valueCompiler.derivativesIndirection == orig(valueCompiler.derivativesIndirection)
valueCompiler.derivativesIndirection.getClass().getName() == orig(valueCompiler.derivativesIndirection.getClass().getName())
valueCompiler.derivativesIndirection[] == orig(valueCompiler.derivativesIndirection[])
valueCompiler.lowerIndirection == orig(valueCompiler.lowerIndirection)
valueCompiler.lowerIndirection[] == orig(valueCompiler.lowerIndirection[])
valueCompiler.multIndirection == orig(valueCompiler.multIndirection)
valueCompiler.multIndirection.getClass().getName() == orig(valueCompiler.multIndirection.getClass().getName())
valueCompiler.multIndirection[] == orig(valueCompiler.multIndirection[])
valueCompiler.compIndirection == orig(valueCompiler.compIndirection)
valueCompiler.compIndirection.getClass().getName() == orig(valueCompiler.compIndirection.getClass().getName())
valueCompiler.compIndirection[] == orig(valueCompiler.compIndirection[])
derivativeCompiler.parameters == orig(derivativeCompiler.parameters)
derivativeCompiler.order == orig(derivativeCompiler.order)
derivativeCompiler.sizes == orig(derivativeCompiler.sizes)
derivativeCompiler.sizes.getClass().getName() == orig(derivativeCompiler.sizes.getClass().getName())
derivativeCompiler.sizes[] == orig(derivativeCompiler.sizes[])
derivativeCompiler.derivativesIndirection == orig(derivativeCompiler.derivativesIndirection)
derivativeCompiler.derivativesIndirection.getClass().getName() == orig(derivativeCompiler.derivativesIndirection.getClass().getName())
derivativeCompiler.derivativesIndirection[] == orig(derivativeCompiler.derivativesIndirection[])
derivativeCompiler.lowerIndirection == orig(derivativeCompiler.lowerIndirection)
derivativeCompiler.lowerIndirection[] == orig(derivativeCompiler.lowerIndirection[])
derivativeCompiler.multIndirection == orig(derivativeCompiler.multIndirection)
derivativeCompiler.multIndirection.getClass().getName() == orig(derivativeCompiler.multIndirection.getClass().getName())
derivativeCompiler.multIndirection[] == orig(derivativeCompiler.multIndirection[])
derivativeCompiler.compIndirection == orig(derivativeCompiler.compIndirection)
derivativeCompiler.compIndirection.getClass().getName() == orig(derivativeCompiler.compIndirection.getClass().getName())
derivativeCompiler.compIndirection[] == orig(derivativeCompiler.compIndirection[])
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
return != null
return[] == [0]
return[] elements == 0
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
size(return[]) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[]):::ENTER
order one of { 0, 1 }
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
lowerIndirection != null
lowerIndirection[] == [0]
lowerIndirection[] elements == 0
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
size(lowerIndirection[]) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[]):::EXIT352
valueCompiler.order == 0
derivativeCompiler.parameters == 0
derivativeCompiler.sizes has only one value
derivativeCompiler.sizes[] contains no nulls and has only one value, of length 1
derivativeCompiler.sizes[] elements has only one value
derivativeCompiler.derivativesIndirection has only one value
derivativeCompiler.derivativesIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.derivativesIndirection[] elements has only one value
derivativeCompiler.lowerIndirection has only one value
derivativeCompiler.multIndirection has only one value
derivativeCompiler.multIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.multIndirection[] elements has only one value
derivativeCompiler.compIndirection has only one value
derivativeCompiler.compIndirection[] contains no nulls and has only one value, of length 1
derivativeCompiler.compIndirection[] elements has only one value
size(valueCompiler.derivativesIndirection[]) == 1
size(valueCompiler.multIndirection[]) == 1
size(valueCompiler.compIndirection[]) == 1
size(derivativeCompiler.sizes[]) == 1
size(return[]) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[]):::EXIT392
valueCompiler.order == 1
orig(order) == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[]):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
valueCompiler.parameters == orig(valueCompiler.parameters)
valueCompiler.order == orig(valueCompiler.order)
valueCompiler.sizes == orig(valueCompiler.sizes)
valueCompiler.sizes.getClass().getName() == orig(valueCompiler.sizes.getClass().getName())
valueCompiler.sizes[] == orig(valueCompiler.sizes[])
valueCompiler.derivativesIndirection == orig(valueCompiler.derivativesIndirection)
valueCompiler.derivativesIndirection.getClass().getName() == orig(valueCompiler.derivativesIndirection.getClass().getName())
valueCompiler.derivativesIndirection[] == orig(valueCompiler.derivativesIndirection[])
valueCompiler.lowerIndirection == orig(valueCompiler.lowerIndirection)
valueCompiler.lowerIndirection[] == orig(valueCompiler.lowerIndirection[])
valueCompiler.multIndirection == orig(valueCompiler.multIndirection)
valueCompiler.multIndirection.getClass().getName() == orig(valueCompiler.multIndirection.getClass().getName())
valueCompiler.multIndirection[] == orig(valueCompiler.multIndirection[])
valueCompiler.compIndirection == orig(valueCompiler.compIndirection)
valueCompiler.compIndirection.getClass().getName() == orig(valueCompiler.compIndirection.getClass().getName())
valueCompiler.compIndirection[] == orig(valueCompiler.compIndirection[])
derivativeCompiler.parameters == orig(derivativeCompiler.parameters)
derivativeCompiler.order == orig(derivativeCompiler.order)
derivativeCompiler.sizes == orig(derivativeCompiler.sizes)
derivativeCompiler.sizes.getClass().getName() == orig(derivativeCompiler.sizes.getClass().getName())
derivativeCompiler.sizes[] == orig(derivativeCompiler.sizes[])
derivativeCompiler.derivativesIndirection == orig(derivativeCompiler.derivativesIndirection)
derivativeCompiler.derivativesIndirection.getClass().getName() == orig(derivativeCompiler.derivativesIndirection.getClass().getName())
derivativeCompiler.derivativesIndirection[] == orig(derivativeCompiler.derivativesIndirection[])
derivativeCompiler.lowerIndirection == orig(derivativeCompiler.lowerIndirection)
derivativeCompiler.lowerIndirection[] == orig(derivativeCompiler.lowerIndirection[])
derivativeCompiler.multIndirection == orig(derivativeCompiler.multIndirection)
derivativeCompiler.multIndirection.getClass().getName() == orig(derivativeCompiler.multIndirection.getClass().getName())
derivativeCompiler.multIndirection[] == orig(derivativeCompiler.multIndirection[])
derivativeCompiler.compIndirection == orig(derivativeCompiler.compIndirection)
derivativeCompiler.compIndirection.getClass().getName() == orig(derivativeCompiler.compIndirection.getClass().getName())
derivativeCompiler.compIndirection[] == orig(derivativeCompiler.compIndirection[])
lowerIndirection[] == orig(lowerIndirection[])
(valueCompiler.order == 0)  <==>  (derivativeCompiler.parameters == 0)
(valueCompiler.order == 0)  <==>  (size(derivativeCompiler.sizes[]) == 1)
(valueCompiler.order == 0)  <==>  (size(return[]) == 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.compIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.derivativesIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.lowerIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.multIndirection[] elements has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes has only one value)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes[] contains no nulls and has only one value, of length 1)
(valueCompiler.order == 0)  ==>  (derivativeCompiler.sizes[] elements has only one value)
(valueCompiler.order == 0)  ==>  (orig(order) one of { 0, 1 })
(valueCompiler.order == 0)  ==>  (size(valueCompiler.compIndirection[]) == 1)
(valueCompiler.order == 0)  ==>  (size(valueCompiler.derivativesIndirection[]) == 1)
(valueCompiler.order == 0)  ==>  (size(valueCompiler.multIndirection[]) == 1)
(valueCompiler.order == 1)  ==>  (orig(order) == 1)
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
derivativeCompiler.order == 0
derivativeCompiler.sizes.getClass().getName() == int[][].class
derivativeCompiler.derivativesIndirection.getClass().getName() == int[][].class
derivativeCompiler.lowerIndirection[] == [0]
derivativeCompiler.lowerIndirection[] elements == 0
derivativeCompiler.multIndirection.getClass().getName() == int[][][].class
derivativeCompiler.compIndirection.getClass().getName() == int[][][].class
lowerIndirection[] == [0]
lowerIndirection[] elements == 0
return != null
return.getClass().getName() == int[][][].class
return[] elements != null
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
size(derivativeCompiler.derivativesIndirection[]) == 1
size(derivativeCompiler.lowerIndirection[]) == 1
size(derivativeCompiler.multIndirection[]) == 1
size(derivativeCompiler.compIndirection[]) == 1
size(return[]) >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler):::ENTER
order one of { 0, 1 }
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
valueCompiler.parameters == orig(valueCompiler.parameters)
valueCompiler.order == orig(valueCompiler.order)
valueCompiler.sizes == orig(valueCompiler.sizes)
valueCompiler.sizes.getClass().getName() == orig(valueCompiler.sizes.getClass().getName())
valueCompiler.sizes[] == orig(valueCompiler.sizes[])
valueCompiler.derivativesIndirection == orig(valueCompiler.derivativesIndirection)
valueCompiler.derivativesIndirection.getClass().getName() == orig(valueCompiler.derivativesIndirection.getClass().getName())
valueCompiler.derivativesIndirection[] == orig(valueCompiler.derivativesIndirection[])
valueCompiler.lowerIndirection == orig(valueCompiler.lowerIndirection)
valueCompiler.lowerIndirection[] == orig(valueCompiler.lowerIndirection[])
valueCompiler.multIndirection == orig(valueCompiler.multIndirection)
valueCompiler.multIndirection.getClass().getName() == orig(valueCompiler.multIndirection.getClass().getName())
valueCompiler.multIndirection[] == orig(valueCompiler.multIndirection[])
valueCompiler.compIndirection == orig(valueCompiler.compIndirection)
valueCompiler.compIndirection.getClass().getName() == orig(valueCompiler.compIndirection.getClass().getName())
valueCompiler.compIndirection[] == orig(valueCompiler.compIndirection[])
valueCompiler.order one of { 0, 1 }
valueCompiler.sizes != null
valueCompiler.sizes.getClass().getName() == int[][].class
valueCompiler.sizes[] elements != null
valueCompiler.derivativesIndirection != null
valueCompiler.derivativesIndirection.getClass().getName() == int[][].class
valueCompiler.derivativesIndirection[] elements != null
valueCompiler.lowerIndirection != null
valueCompiler.lowerIndirection[] == [0]
valueCompiler.lowerIndirection[] elements == 0
valueCompiler.multIndirection != null
valueCompiler.multIndirection.getClass().getName() == int[][][].class
valueCompiler.multIndirection[] elements != null
valueCompiler.compIndirection != null
valueCompiler.compIndirection.getClass().getName() == int[][][].class
valueCompiler.compIndirection[] elements != null
return != null
return.getClass().getName() == int[][].class
return[] elements != null
size(valueCompiler.derivativesIndirection[]) >= 1
size(valueCompiler.lowerIndirection[]) == 1
size(valueCompiler.multIndirection[]) >= 1
size(valueCompiler.compIndirection[]) >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(int, int):::ENTER
parameters >= 0
order == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(int, int):::EXIT199
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(int, int):::EXIT229
return.parameters one of { 2, 6 }
orig(parameters) one of { 2, 6 }
size(return.sizes[]) one of { 3, 7 }
size(return.derivativesIndirection[]) one of { 3, 7 }
size(return.multIndirection[]) one of { 3, 7 }
size(return.compIndirection[]) one of { 3, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(int, int):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
return != null
return.parameters >= 0
return.order == 1
return.sizes != null
return.sizes.getClass().getName() == int[][].class
return.sizes[] elements != null
return.derivativesIndirection != null
return.derivativesIndirection.getClass().getName() == int[][].class
return.derivativesIndirection[] elements != null
return.lowerIndirection != null
return.lowerIndirection[] == [0]
return.lowerIndirection[] elements == 0
return.multIndirection != null
return.multIndirection.getClass().getName() == int[][][].class
return.multIndirection[] elements != null
return.compIndirection != null
return.compIndirection.getClass().getName() == int[][][].class
return.compIndirection[] elements != null
size(return.sizes[]) >= 1
size(return.derivativesIndirection[]) >= 1
size(return.lowerIndirection[]) == 1
size(return.multIndirection[]) >= 1
size(return.compIndirection[]) >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getFreeParameters():::ENTER
this.parameters one of { 2, 3, 6 }
this.order == 1
size(this.sizes[]) one of { 3, 4, 7 }
size(this.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.multIndirection[]) one of { 3, 4, 7 }
size(this.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getFreeParameters():::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.parameters == orig(this.parameters)
this.order == orig(this.order)
this.sizes == orig(this.sizes)
this.sizes.getClass().getName() == orig(this.sizes.getClass().getName())
this.sizes[] == orig(this.sizes[])
this.derivativesIndirection == orig(this.derivativesIndirection)
this.derivativesIndirection.getClass().getName() == orig(this.derivativesIndirection.getClass().getName())
this.derivativesIndirection[] == orig(this.derivativesIndirection[])
this.lowerIndirection == orig(this.lowerIndirection)
this.lowerIndirection[] == orig(this.lowerIndirection[])
this.multIndirection == orig(this.multIndirection)
this.multIndirection.getClass().getName() == orig(this.multIndirection.getClass().getName())
this.multIndirection[] == orig(this.multIndirection[])
this.compIndirection == orig(this.compIndirection)
this.compIndirection.getClass().getName() == orig(this.compIndirection.getClass().getName())
this.compIndirection[] == orig(this.compIndirection[])
this.parameters one of { 2, 3, 6 }
this.order == 1
return one of { 2, 3, 6 }
size(this.sizes[]) one of { 3, 4, 7 }
size(this.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.multIndirection[]) one of { 3, 4, 7 }
size(this.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getOrder():::ENTER
this.parameters one of { 2, 3, 6 }
this.order == 1
size(this.sizes[]) one of { 3, 4, 7 }
size(this.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.multIndirection[]) one of { 3, 4, 7 }
size(this.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getOrder():::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.parameters == orig(this.parameters)
this.order == orig(this.order)
this.sizes == orig(this.sizes)
this.sizes.getClass().getName() == orig(this.sizes.getClass().getName())
this.sizes[] == orig(this.sizes[])
this.derivativesIndirection == orig(this.derivativesIndirection)
this.derivativesIndirection.getClass().getName() == orig(this.derivativesIndirection.getClass().getName())
this.derivativesIndirection[] == orig(this.derivativesIndirection[])
this.lowerIndirection == orig(this.lowerIndirection)
this.lowerIndirection[] == orig(this.lowerIndirection[])
this.multIndirection == orig(this.multIndirection)
this.multIndirection.getClass().getName() == orig(this.multIndirection.getClass().getName())
this.multIndirection[] == orig(this.multIndirection[])
this.compIndirection == orig(this.compIndirection)
this.compIndirection.getClass().getName() == orig(this.compIndirection.getClass().getName())
this.compIndirection[] == orig(this.compIndirection[])
this.parameters one of { 2, 3, 6 }
this.order == 1
return == 1
size(this.sizes[]) one of { 3, 4, 7 }
size(this.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.multIndirection[]) one of { 3, 4, 7 }
size(this.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(int, int, int[][], int[]):::ENTER
order == 1
sizes != null
sizes.getClass().getName() == int[][].class
sizes[] elements != null
orders != null
orders[] elements one of { 0, 1 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(int, int, int[][], int[]):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
sizes[] == orig(sizes[])
orders[] == orig(orders[])
sizes[] elements != null
orders[] elements one of { 0, 1 }
return >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(int[]):::ENTER
this.parameters one of { 3, 6 }
this.order == 1
orders[] elements one of { 0, 1 }
size(this.sizes[]) one of { 4, 7 }
size(this.derivativesIndirection[]) one of { 4, 7 }
size(this.multIndirection[]) one of { 4, 7 }
size(this.compIndirection[]) one of { 4, 7 }
size(orders[]) one of { 3, 6 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(int[]):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.parameters == orig(this.parameters)
this.order == orig(this.order)
this.sizes == orig(this.sizes)
this.sizes.getClass().getName() == orig(this.sizes.getClass().getName())
this.sizes[] == orig(this.sizes[])
this.derivativesIndirection == orig(this.derivativesIndirection)
this.derivativesIndirection.getClass().getName() == orig(this.derivativesIndirection.getClass().getName())
this.derivativesIndirection[] == orig(this.derivativesIndirection[])
this.lowerIndirection == orig(this.lowerIndirection)
this.lowerIndirection[] == orig(this.lowerIndirection[])
this.multIndirection == orig(this.multIndirection)
this.multIndirection.getClass().getName() == orig(this.multIndirection.getClass().getName())
this.multIndirection[] == orig(this.multIndirection[])
this.compIndirection == orig(this.compIndirection)
this.compIndirection.getClass().getName() == orig(this.compIndirection.getClass().getName())
this.compIndirection[] == orig(this.compIndirection[])
orders[] == orig(orders[])
this.parameters one of { 3, 6 }
this.order == 1
orders[] elements one of { 0, 1 }
size(this.sizes[]) one of { 4, 7 }
size(this.derivativesIndirection[]) one of { 4, 7 }
size(this.multIndirection[]) one of { 4, 7 }
size(this.compIndirection[]) one of { 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getSize():::ENTER
this.order == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.getSize():::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.parameters == orig(this.parameters)
this.order == orig(this.order)
this.sizes == orig(this.sizes)
this.sizes.getClass().getName() == orig(this.sizes.getClass().getName())
this.sizes[] == orig(this.sizes[])
this.derivativesIndirection == orig(this.derivativesIndirection)
this.derivativesIndirection.getClass().getName() == orig(this.derivativesIndirection.getClass().getName())
this.derivativesIndirection[] == orig(this.derivativesIndirection[])
this.lowerIndirection == orig(this.lowerIndirection)
this.lowerIndirection[] == orig(this.lowerIndirection[])
this.multIndirection == orig(this.multIndirection)
this.multIndirection.getClass().getName() == orig(this.multIndirection.getClass().getName())
this.multIndirection[] == orig(this.multIndirection[])
this.compIndirection == orig(this.compIndirection)
this.compIndirection.getClass().getName() == orig(this.compIndirection.getClass().getName())
this.compIndirection[] == orig(this.compIndirection[])
this.order == 1
return >= 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.multiply(double[], int, double[], int, double[], int):::ENTER
this.parameters one of { 2, 6 }
this.order == 1
lhs != null
lhs[] elements <= 1.0
lhsOffset == 0
rhs != null
rhsOffset == 0
result != null
result[] elements == 0.0
result[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
resultOffset == 0
size(this.sizes[]) one of { 3, 7 }
size(this.derivativesIndirection[]) one of { 3, 7 }
size(this.multIndirection[]) one of { 3, 7 }
size(this.compIndirection[]) one of { 3, 7 }
size(lhs[]) one of { 3, 7 }
size(rhs[]) one of { 3, 7 }
size(result[]) one of { 3, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DSCompiler.multiply(double[], int, double[], int, double[], int):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.parameters == orig(this.parameters)
this.order == orig(this.order)
this.sizes == orig(this.sizes)
this.sizes.getClass().getName() == orig(this.sizes.getClass().getName())
this.sizes[] == orig(this.sizes[])
this.derivativesIndirection == orig(this.derivativesIndirection)
this.derivativesIndirection.getClass().getName() == orig(this.derivativesIndirection.getClass().getName())
this.derivativesIndirection[] == orig(this.derivativesIndirection[])
this.lowerIndirection == orig(this.lowerIndirection)
this.lowerIndirection[] == orig(this.lowerIndirection[])
this.multIndirection == orig(this.multIndirection)
this.multIndirection.getClass().getName() == orig(this.multIndirection.getClass().getName())
this.multIndirection[] == orig(this.multIndirection[])
this.compIndirection == orig(this.compIndirection)
this.compIndirection.getClass().getName() == orig(this.compIndirection.getClass().getName())
this.compIndirection[] == orig(this.compIndirection[])
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
this.parameters one of { 2, 6 }
this.order == 1
lhs[] elements <= 1.0
size(this.sizes[]) one of { 3, 7 }
size(this.derivativesIndirection[]) one of { 3, 7 }
size(this.multIndirection[]) one of { 3, 7 }
size(this.compIndirection[]) one of { 3, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1:::OBJECT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters one of { 2, 3, 6 }
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.order == 1
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes.getClass().getName() == int[][].class
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[] elements != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection.getClass().getName() == int[][].class
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[] elements != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[] == [0]
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[] elements == 0
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection.getClass().getName() == int[][][].class
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[] elements != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection.getClass().getName() == int[][][].class
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[] elements != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] elements <= 1.0
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[]) one of { 3, 4, 7 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[]) == 1
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[]) one of { 3, 4, 7 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[]) one of { 3, 4, 7 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1.(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::ENTER
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler != null
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers has only one value
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters one of { 2, 3, 6 }
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.order == 1
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes.getClass().getName() == int[][].class
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[] elements != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection.getClass().getName() == int[][].class
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[] elements != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[] == [0]
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[] elements == 0
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection.getClass().getName() == int[][][].class
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[] elements != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection.getClass().getName() == int[][][].class
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[] elements != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data != null
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] elements <= 1.0
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[]) one of { 3, 4, 7 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[]) == 1
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[]) one of { 3, 4, 7 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[]) one of { 3, 4, 7 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1.(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::EXIT
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.order == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.order)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[]) (elementwise)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[]) (elementwise)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[]) (elementwise)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[] is the reverse of orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[]) (elementwise)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[]) (elementwise)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[]) (elementwise)
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1.getRuntimeClass():::ENTER
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters == 2
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] == [0.0, 1.0, 0.0]
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] elements one of { 0.0, 1.0 }
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[]) == 3
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[]) == 3
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[]) == 3
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[]) == 3
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[]) == 3
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1.getRuntimeClass():::EXIT
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.order == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.order)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters == 2
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection has only one value
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] == [0.0, 1.0, 0.0]
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] elements one of { 0.0, 1.0 }
return has only one value
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[]) == 3
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[]) == 3
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[]) == 3
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[]) == 3
size(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[]) == 3
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1.getZero():::ENTER
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1.getZero():::EXIT
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.parameters)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.order == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.order)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.sizes[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.derivativesIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.lowerIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.multIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection.getClass().getName() == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection.getClass().getName())
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.compiler.compIndirection[])
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data)
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[] == orig(org.apache.commons.math3.analysis.differentiation.DerivativeStructure.this.data[])
return.compiler.parameters one of { 2, 3, 6 }
return.compiler.order == 1
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] elements != null
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] elements != null
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] elements != null
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] elements != null
return.data[] elements == 0.0
return.data[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
size(return.compiler.sizes[]) one of { 3, 4, 7 }
size(return.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) one of { 3, 4, 7 }
size(return.compiler.compIndirection[]) one of { 3, 4, 7 }
size(return.data[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure:::CLASS
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure:::OBJECT
this.compiler != null
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers has only one value
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers != null
this.compiler.parameters one of { 2, 3, 6 }
this.compiler.order == 1
this.compiler.sizes != null
this.compiler.sizes.getClass().getName() == int[][].class
this.compiler.sizes[] elements != null
this.compiler.derivativesIndirection != null
this.compiler.derivativesIndirection.getClass().getName() == int[][].class
this.compiler.derivativesIndirection[] elements != null
this.compiler.lowerIndirection != null
this.compiler.lowerIndirection[] == [0]
this.compiler.lowerIndirection[] elements == 0
this.compiler.multIndirection != null
this.compiler.multIndirection.getClass().getName() == int[][][].class
this.compiler.multIndirection[] elements != null
this.compiler.compIndirection != null
this.compiler.compIndirection.getClass().getName() == int[][][].class
this.compiler.compIndirection[] elements != null
this.data != null
size(this.compiler.sizes[]) one of { 3, 4, 7 }
size(this.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(this.compiler.lowerIndirection[]) == 1
size(this.compiler.multIndirection[]) one of { 3, 4, 7 }
size(this.compiler.compIndirection[]) one of { 3, 4, 7 }
size(this.data[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(int, int):::ENTER
parameters one of { 2, 3, 6 }
order == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(int, int):::EXIT
this.data[] elements == 0.0
this.data[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(int, int, double):::ENTER
parameters one of { 2, 3, 6 }
order == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(int, int, double):::EXIT
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(int, int, double[]):::ENTER
parameters one of { 2, 3, 6 }
order == 1
derivatives != null
size(derivatives[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(int, int, double[]):::EXIT
derivatives[] == orig(derivatives[])
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(int, int, int, double):::ENTER
parameters one of { 2, 3, 6 }
order == 1
index >= 0
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(int, int, int, double):::EXIT
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler):::ENTER
compiler != null
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers has only one value
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers != null
compiler.parameters one of { 2, 3, 6 }
compiler.order == 1
compiler.sizes != null
compiler.sizes.getClass().getName() == int[][].class
compiler.sizes[] elements != null
compiler.derivativesIndirection != null
compiler.derivativesIndirection.getClass().getName() == int[][].class
compiler.derivativesIndirection[] elements != null
compiler.lowerIndirection != null
compiler.lowerIndirection[] == [0]
compiler.lowerIndirection[] elements == 0
compiler.multIndirection != null
compiler.multIndirection.getClass().getName() == int[][][].class
compiler.multIndirection[] elements != null
compiler.compIndirection != null
compiler.compIndirection.getClass().getName() == int[][][].class
compiler.compIndirection[] elements != null
size(compiler.sizes[]) one of { 3, 4, 7 }
size(compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(compiler.lowerIndirection[]) == 1
size(compiler.multIndirection[]) one of { 3, 4, 7 }
size(compiler.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
compiler.parameters == orig(compiler.parameters)
compiler.order == orig(compiler.order)
compiler.sizes == orig(compiler.sizes)
compiler.sizes.getClass().getName() == orig(compiler.sizes.getClass().getName())
compiler.sizes[] == orig(compiler.sizes[])
compiler.derivativesIndirection == orig(compiler.derivativesIndirection)
compiler.derivativesIndirection.getClass().getName() == orig(compiler.derivativesIndirection.getClass().getName())
compiler.derivativesIndirection[] == orig(compiler.derivativesIndirection[])
compiler.lowerIndirection == orig(compiler.lowerIndirection)
compiler.lowerIndirection[] == orig(compiler.lowerIndirection[])
compiler.multIndirection == orig(compiler.multIndirection)
compiler.multIndirection.getClass().getName() == orig(compiler.multIndirection.getClass().getName())
compiler.multIndirection[] == orig(compiler.multIndirection[])
compiler.compIndirection == orig(compiler.compIndirection)
compiler.compIndirection.getClass().getName() == orig(compiler.compIndirection.getClass().getName())
compiler.compIndirection[] == orig(compiler.compIndirection[])
this.data[] elements == 0.0
this.data[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
compiler.parameters one of { 2, 3, 6 }
compiler.order == 1
compiler.sizes != null
compiler.sizes.getClass().getName() == int[][].class
compiler.sizes[] elements != null
compiler.derivativesIndirection != null
compiler.derivativesIndirection.getClass().getName() == int[][].class
compiler.derivativesIndirection[] elements != null
compiler.lowerIndirection != null
compiler.lowerIndirection[] == [0]
compiler.lowerIndirection[] elements == 0
compiler.multIndirection != null
compiler.multIndirection.getClass().getName() == int[][][].class
compiler.multIndirection[] elements != null
compiler.compIndirection != null
compiler.compIndirection.getClass().getName() == int[][][].class
compiler.compIndirection[] elements != null
size(compiler.sizes[]) one of { 3, 4, 7 }
size(compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(compiler.lowerIndirection[]) == 1
size(compiler.multIndirection[]) one of { 3, 4, 7 }
size(compiler.compIndirection[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::ENTER
ds != null
ds.compiler != null
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers has only one value
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers != null
ds.compiler.parameters one of { 2, 3, 6 }
ds.compiler.order == 1
ds.compiler.sizes != null
ds.compiler.sizes.getClass().getName() == int[][].class
ds.compiler.sizes[] elements != null
ds.compiler.derivativesIndirection != null
ds.compiler.derivativesIndirection.getClass().getName() == int[][].class
ds.compiler.derivativesIndirection[] elements != null
ds.compiler.lowerIndirection != null
ds.compiler.lowerIndirection[] == [0]
ds.compiler.lowerIndirection[] elements == 0
ds.compiler.multIndirection != null
ds.compiler.multIndirection.getClass().getName() == int[][][].class
ds.compiler.multIndirection[] elements != null
ds.compiler.compIndirection != null
ds.compiler.compIndirection.getClass().getName() == int[][][].class
ds.compiler.compIndirection[] elements != null
ds.data != null
size(ds.compiler.sizes[]) one of { 3, 4, 7 }
size(ds.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(ds.compiler.lowerIndirection[]) == 1
size(ds.compiler.multIndirection[]) one of { 3, 4, 7 }
size(ds.compiler.compIndirection[]) one of { 3, 4, 7 }
size(ds.data[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::EXIT
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
ds.compiler == orig(ds.compiler)
ds.compiler.parameters == orig(ds.compiler.parameters)
ds.compiler.order == orig(ds.compiler.order)
ds.compiler.sizes == orig(ds.compiler.sizes)
ds.compiler.sizes.getClass().getName() == orig(ds.compiler.sizes.getClass().getName())
ds.compiler.sizes[] == orig(ds.compiler.sizes[])
ds.compiler.derivativesIndirection == orig(ds.compiler.derivativesIndirection)
ds.compiler.derivativesIndirection.getClass().getName() == orig(ds.compiler.derivativesIndirection.getClass().getName())
ds.compiler.derivativesIndirection[] == orig(ds.compiler.derivativesIndirection[])
ds.compiler.lowerIndirection == orig(ds.compiler.lowerIndirection)
ds.compiler.lowerIndirection[] == orig(ds.compiler.lowerIndirection[])
ds.compiler.multIndirection == orig(ds.compiler.multIndirection)
ds.compiler.multIndirection.getClass().getName() == orig(ds.compiler.multIndirection.getClass().getName())
ds.compiler.multIndirection[] == orig(ds.compiler.multIndirection[])
ds.compiler.compIndirection == orig(ds.compiler.compIndirection)
ds.compiler.compIndirection.getClass().getName() == orig(ds.compiler.compIndirection.getClass().getName())
ds.compiler.compIndirection[] == orig(ds.compiler.compIndirection[])
ds.data == orig(ds.data)
ds.data[] == orig(ds.data[])
ds.compiler != null
ds.compiler.parameters one of { 2, 3, 6 }
ds.compiler.order == 1
ds.compiler.sizes != null
ds.compiler.sizes.getClass().getName() == int[][].class
ds.compiler.sizes[] elements != null
ds.compiler.derivativesIndirection != null
ds.compiler.derivativesIndirection.getClass().getName() == int[][].class
ds.compiler.derivativesIndirection[] elements != null
ds.compiler.lowerIndirection != null
ds.compiler.lowerIndirection[] == [0]
ds.compiler.lowerIndirection[] elements == 0
ds.compiler.multIndirection != null
ds.compiler.multIndirection.getClass().getName() == int[][][].class
ds.compiler.multIndirection[] elements != null
ds.compiler.compIndirection != null
ds.compiler.compIndirection.getClass().getName() == int[][][].class
ds.compiler.compIndirection[] elements != null
ds.data != null
size(ds.compiler.sizes[]) one of { 3, 4, 7 }
size(ds.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(ds.compiler.lowerIndirection[]) == 1
size(ds.compiler.multIndirection[]) one of { 3, 4, 7 }
size(ds.compiler.compIndirection[]) one of { 3, 4, 7 }
size(ds.data[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::ENTER
a != null
a.compiler != null
a.compiler.parameters one of { 2, 3, 6 }
a.compiler.order == 1
a.compiler.sizes != null
a.compiler.sizes.getClass().getName() == int[][].class
a.compiler.sizes[] elements != null
a.compiler.derivativesIndirection != null
a.compiler.derivativesIndirection.getClass().getName() == int[][].class
a.compiler.derivativesIndirection[] elements != null
a.compiler.lowerIndirection != null
a.compiler.lowerIndirection[] == [0]
a.compiler.lowerIndirection[] elements == 0
a.compiler.multIndirection != null
a.compiler.multIndirection.getClass().getName() == int[][][].class
a.compiler.multIndirection[] elements != null
a.compiler.compIndirection != null
a.compiler.compIndirection.getClass().getName() == int[][][].class
a.compiler.compIndirection[] elements != null
a.data != null
size(a.compiler.sizes[]) one of { 3, 4, 7 }
size(a.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(a.compiler.lowerIndirection[]) == 1
size(a.compiler.multIndirection[]) one of { 3, 4, 7 }
size(a.compiler.compIndirection[]) one of { 3, 4, 7 }
size(a.data[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
a.compiler == orig(a.compiler)
a.compiler.parameters == orig(a.compiler.parameters)
a.compiler.order == orig(a.compiler.order)
a.compiler.sizes == orig(a.compiler.sizes)
a.compiler.sizes.getClass().getName() == orig(a.compiler.sizes.getClass().getName())
a.compiler.sizes[] == orig(a.compiler.sizes[])
a.compiler.derivativesIndirection == orig(a.compiler.derivativesIndirection)
a.compiler.derivativesIndirection.getClass().getName() == orig(a.compiler.derivativesIndirection.getClass().getName())
a.compiler.derivativesIndirection[] == orig(a.compiler.derivativesIndirection[])
a.compiler.lowerIndirection == orig(a.compiler.lowerIndirection)
a.compiler.lowerIndirection[] == orig(a.compiler.lowerIndirection[])
a.compiler.multIndirection == orig(a.compiler.multIndirection)
a.compiler.multIndirection.getClass().getName() == orig(a.compiler.multIndirection.getClass().getName())
a.compiler.multIndirection[] == orig(a.compiler.multIndirection[])
a.compiler.compIndirection == orig(a.compiler.compIndirection)
a.compiler.compIndirection.getClass().getName() == orig(a.compiler.compIndirection.getClass().getName())
a.compiler.compIndirection[] == orig(a.compiler.compIndirection[])
a.data == orig(a.data)
a.data[] == orig(a.data[])
a.compiler != null
a.compiler.parameters one of { 2, 3, 6 }
a.compiler.order == 1
a.compiler.sizes != null
a.compiler.sizes.getClass().getName() == int[][].class
a.compiler.sizes[] elements != null
a.compiler.derivativesIndirection != null
a.compiler.derivativesIndirection.getClass().getName() == int[][].class
a.compiler.derivativesIndirection[] elements != null
a.compiler.lowerIndirection != null
a.compiler.lowerIndirection[] == [0]
a.compiler.lowerIndirection[] elements == 0
a.compiler.multIndirection != null
a.compiler.multIndirection.getClass().getName() == int[][][].class
a.compiler.multIndirection[] elements != null
a.compiler.compIndirection != null
a.compiler.compIndirection.getClass().getName() == int[][][].class
a.compiler.compIndirection[] elements != null
a.data != null
return != null
return.compiler != null
return.compiler.parameters one of { 2, 3, 6 }
return.compiler.order == 1
return.compiler.sizes != null
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] elements != null
return.compiler.derivativesIndirection != null
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] elements != null
return.compiler.lowerIndirection != null
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection != null
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] elements != null
return.compiler.compIndirection != null
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] elements != null
return.data != null
size(a.compiler.sizes[]) one of { 3, 4, 7 }
size(a.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(a.compiler.lowerIndirection[]) == 1
size(a.compiler.multIndirection[]) one of { 3, 4, 7 }
size(a.compiler.compIndirection[]) one of { 3, 4, 7 }
size(a.data[]) one of { 3, 4, 7 }
size(return.compiler.sizes[]) one of { 3, 4, 7 }
size(return.compiler.derivativesIndirection[]) one of { 3, 4, 7 }
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) one of { 3, 4, 7 }
size(return.compiler.compIndirection[]) one of { 3, 4, 7 }
size(return.data[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getAllDerivatives():::ENTER
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getAllDerivatives():::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
return != null
size(return[]) one of { 3, 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getField():::ENTER
this.data[] elements <= 1.0
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getField():::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements <= 1.0
return != null
return.getClass().getName() == org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1.class
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getFreeParameters():::ENTER
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getFreeParameters():::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
return one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getOrder():::ENTER
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getOrder():::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
return == 1
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getPartialDerivative(int[]):::ENTER
this.compiler.parameters one of { 3, 6 }
this.data[] one of { [-1.8551294182586249, -2.7238580938724895E9, -2.1696649213418756E9, 6.7496887088853004E10, -4921140.837095533, -2.1512094250440013E7, -890093.2794263769], [-1.8551294182586249, -4921140.837095533, -2.1512094250440013E7, -890093.2794263769] }
orders[] elements one of { 0, 1 }
size(this.compiler.sizes[]) one of { 4, 7 }
size(this.compiler.derivativesIndirection[]) one of { 4, 7 }
size(this.compiler.multIndirection[]) one of { 4, 7 }
size(this.compiler.compIndirection[]) one of { 4, 7 }
size(this.data[]) one of { 4, 7 }
size(orders[]) one of { 3, 6 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getPartialDerivative(int[]):::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
orders[] == orig(orders[])
this.compiler.parameters one of { 3, 6 }
this.data[] one of { [-1.8551294182586249, -2.7238580938724895E9, -2.1696649213418756E9, 6.7496887088853004E10, -4921140.837095533, -2.1512094250440013E7, -890093.2794263769], [-1.8551294182586249, -4921140.837095533, -2.1512094250440013E7, -890093.2794263769] }
orders[] elements one of { 0, 1 }
size(this.compiler.sizes[]) one of { 4, 7 }
size(this.compiler.derivativesIndirection[]) one of { 4, 7 }
size(this.compiler.multIndirection[]) one of { 4, 7 }
size(this.compiler.compIndirection[]) one of { 4, 7 }
size(this.data[]) one of { 4, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getReal():::ENTER
this.compiler has only one value
this.compiler.parameters == 2
this.compiler.sizes has only one value
this.compiler.sizes[] contains no nulls and has only one value, of length 3
this.compiler.derivativesIndirection has only one value
this.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 3
this.compiler.lowerIndirection has only one value
this.compiler.multIndirection has only one value
this.compiler.multIndirection[] contains no nulls and has only one value, of length 3
this.compiler.compIndirection has only one value
this.compiler.compIndirection[] contains no nulls and has only one value, of length 3
this.data[] elements >= 0.0
size(this.compiler.sizes[]) == 3
size(this.compiler.derivativesIndirection[]) == 3
size(this.compiler.multIndirection[]) == 3
size(this.compiler.compIndirection[]) == 3
size(this.data[]) == 3
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getReal():::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.compiler has only one value
this.compiler.parameters == 2
this.compiler.sizes has only one value
this.compiler.sizes[] contains no nulls and has only one value, of length 3
this.compiler.derivativesIndirection has only one value
this.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 3
this.compiler.lowerIndirection has only one value
this.compiler.multIndirection has only one value
this.compiler.multIndirection[] contains no nulls and has only one value, of length 3
this.compiler.compIndirection has only one value
this.compiler.compIndirection[] contains no nulls and has only one value, of length 3
this.data[] elements >= 0.0
size(this.compiler.sizes[]) == 3
size(this.compiler.derivativesIndirection[]) == 3
size(this.compiler.multIndirection[]) == 3
size(this.compiler.compIndirection[]) == 3
size(this.data[]) == 3
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getValue():::ENTER
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getValue():::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
return != 0
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.linearCombination(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::ENTER
this has only one value
this.compiler has only one value
this.compiler.parameters == 3
this.compiler.sizes has only one value
this.compiler.sizes[] contains no nulls and has only one value, of length 4
this.compiler.derivativesIndirection has only one value
this.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
this.compiler.lowerIndirection has only one value
this.compiler.multIndirection has only one value
this.compiler.multIndirection[] contains no nulls and has only one value, of length 4
this.compiler.compIndirection has only one value
this.compiler.compIndirection[] contains no nulls and has only one value, of length 4
this.data has only one value
this.data[] == [-2.7238580938724895E9, 1.0, 0.0, 0.0]
this.data[] elements one of { -2.7238580938724895E9, 0.0, 1.0 }
a1 == -4921140.837095533
b1 has only one value
b1.compiler has only one value
b1.compiler.parameters == 3
b1.compiler.order == 1
b1.compiler.sizes has only one value
b1.compiler.sizes.getClass().getName() == int[][].class
b1.compiler.sizes[] contains no nulls and has only one value, of length 4
b1.compiler.derivativesIndirection has only one value
b1.compiler.derivativesIndirection.getClass().getName() == int[][].class
b1.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
b1.compiler.lowerIndirection has only one value
b1.compiler.lowerIndirection[] == [0]
b1.compiler.lowerIndirection[] elements == 0
b1.compiler.multIndirection has only one value
b1.compiler.multIndirection.getClass().getName() == int[][][].class
b1.compiler.multIndirection[] contains no nulls and has only one value, of length 4
b1.compiler.compIndirection has only one value
b1.compiler.compIndirection.getClass().getName() == int[][][].class
b1.compiler.compIndirection[] contains no nulls and has only one value, of length 4
b1.data has only one value
b1.data[] == [-2.7238580938724895E9, 1.0, 0.0, 0.0]
b1.data[] elements one of { -2.7238580938724895E9, 0.0, 1.0 }
a2 == -2.1512094250440013E7
b2 has only one value
b2.compiler has only one value
b2.compiler.parameters == 3
b2.compiler.order == 1
b2.compiler.sizes has only one value
b2.compiler.sizes.getClass().getName() == int[][].class
b2.compiler.sizes[] contains no nulls and has only one value, of length 4
b2.compiler.derivativesIndirection has only one value
b2.compiler.derivativesIndirection.getClass().getName() == int[][].class
b2.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
b2.compiler.lowerIndirection has only one value
b2.compiler.lowerIndirection[] == [0]
b2.compiler.lowerIndirection[] elements == 0
b2.compiler.multIndirection has only one value
b2.compiler.multIndirection.getClass().getName() == int[][][].class
b2.compiler.multIndirection[] contains no nulls and has only one value, of length 4
b2.compiler.compIndirection has only one value
b2.compiler.compIndirection.getClass().getName() == int[][][].class
b2.compiler.compIndirection[] contains no nulls and has only one value, of length 4
b2.data has only one value
b2.data[] == [-2.1696649213418756E9, 0.0, 1.0, 0.0]
b2.data[] elements one of { -2.1696649213418756E9, 0.0, 1.0 }
a3 == -890093.2794263769
b3 has only one value
b3.compiler has only one value
b3.compiler.parameters == 3
b3.compiler.order == 1
b3.compiler.sizes has only one value
b3.compiler.sizes.getClass().getName() == int[][].class
b3.compiler.sizes[] contains no nulls and has only one value, of length 4
b3.compiler.derivativesIndirection has only one value
b3.compiler.derivativesIndirection.getClass().getName() == int[][].class
b3.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
b3.compiler.lowerIndirection has only one value
b3.compiler.lowerIndirection[] == [0]
b3.compiler.lowerIndirection[] elements == 0
b3.compiler.multIndirection has only one value
b3.compiler.multIndirection.getClass().getName() == int[][][].class
b3.compiler.multIndirection[] contains no nulls and has only one value, of length 4
b3.compiler.compIndirection has only one value
b3.compiler.compIndirection.getClass().getName() == int[][][].class
b3.compiler.compIndirection[] contains no nulls and has only one value, of length 4
b3.data has only one value
b3.data[] == [6.7496887088853004E10, 0.0, 0.0, 1.0]
b3.data[] elements one of { 0.0, 1.0, 6.7496887088853004E10 }
size(this.compiler.sizes[]) == 4
size(this.compiler.derivativesIndirection[]) == 4
size(this.compiler.multIndirection[]) == 4
size(this.compiler.compIndirection[]) == 4
size(this.data[]) == 4
size(b1.compiler.sizes[]) == 4
size(b1.compiler.derivativesIndirection[]) == 4
size(b1.compiler.lowerIndirection[]) == 1
size(b1.compiler.multIndirection[]) == 4
size(b1.compiler.compIndirection[]) == 4
size(b1.data[]) == 4
size(b2.compiler.sizes[]) == 4
size(b2.compiler.derivativesIndirection[]) == 4
size(b2.compiler.lowerIndirection[]) == 1
size(b2.compiler.multIndirection[]) == 4
size(b2.compiler.compIndirection[]) == 4
size(b2.data[]) == 4
size(b3.compiler.sizes[]) == 4
size(b3.compiler.derivativesIndirection[]) == 4
size(b3.compiler.lowerIndirection[]) == 1
size(b3.compiler.multIndirection[]) == 4
size(b3.compiler.compIndirection[]) == 4
size(b3.data[]) == 4
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.linearCombination(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
b1.compiler == orig(b1.compiler)
b1.compiler.parameters == orig(b1.compiler.parameters)
b1.compiler.order == orig(b1.compiler.order)
b1.compiler.sizes == orig(b1.compiler.sizes)
b1.compiler.sizes.getClass().getName() == orig(b1.compiler.sizes.getClass().getName())
b1.compiler.sizes[] == orig(b1.compiler.sizes[])
b1.compiler.derivativesIndirection == orig(b1.compiler.derivativesIndirection)
b1.compiler.derivativesIndirection.getClass().getName() == orig(b1.compiler.derivativesIndirection.getClass().getName())
b1.compiler.derivativesIndirection[] == orig(b1.compiler.derivativesIndirection[])
b1.compiler.lowerIndirection == orig(b1.compiler.lowerIndirection)
b1.compiler.lowerIndirection[] == orig(b1.compiler.lowerIndirection[])
b1.compiler.multIndirection == orig(b1.compiler.multIndirection)
b1.compiler.multIndirection.getClass().getName() == orig(b1.compiler.multIndirection.getClass().getName())
b1.compiler.multIndirection[] == orig(b1.compiler.multIndirection[])
b1.compiler.compIndirection == orig(b1.compiler.compIndirection)
b1.compiler.compIndirection.getClass().getName() == orig(b1.compiler.compIndirection.getClass().getName())
b1.compiler.compIndirection[] == orig(b1.compiler.compIndirection[])
b1.data == orig(b1.data)
b1.data[] == orig(b1.data[])
b2.compiler == orig(b2.compiler)
b2.compiler.parameters == orig(b2.compiler.parameters)
b2.compiler.order == orig(b2.compiler.order)
b2.compiler.sizes == orig(b2.compiler.sizes)
b2.compiler.sizes.getClass().getName() == orig(b2.compiler.sizes.getClass().getName())
b2.compiler.sizes[] == orig(b2.compiler.sizes[])
b2.compiler.derivativesIndirection == orig(b2.compiler.derivativesIndirection)
b2.compiler.derivativesIndirection.getClass().getName() == orig(b2.compiler.derivativesIndirection.getClass().getName())
b2.compiler.derivativesIndirection[] == orig(b2.compiler.derivativesIndirection[])
b2.compiler.lowerIndirection == orig(b2.compiler.lowerIndirection)
b2.compiler.lowerIndirection[] == orig(b2.compiler.lowerIndirection[])
b2.compiler.multIndirection == orig(b2.compiler.multIndirection)
b2.compiler.multIndirection.getClass().getName() == orig(b2.compiler.multIndirection.getClass().getName())
b2.compiler.multIndirection[] == orig(b2.compiler.multIndirection[])
b2.compiler.compIndirection == orig(b2.compiler.compIndirection)
b2.compiler.compIndirection.getClass().getName() == orig(b2.compiler.compIndirection.getClass().getName())
b2.compiler.compIndirection[] == orig(b2.compiler.compIndirection[])
b2.data == orig(b2.data)
b2.data[] == orig(b2.data[])
b3.compiler == orig(b3.compiler)
b3.compiler.parameters == orig(b3.compiler.parameters)
b3.compiler.order == orig(b3.compiler.order)
b3.compiler.sizes == orig(b3.compiler.sizes)
b3.compiler.sizes.getClass().getName() == orig(b3.compiler.sizes.getClass().getName())
b3.compiler.sizes[] == orig(b3.compiler.sizes[])
b3.compiler.derivativesIndirection == orig(b3.compiler.derivativesIndirection)
b3.compiler.derivativesIndirection.getClass().getName() == orig(b3.compiler.derivativesIndirection.getClass().getName())
b3.compiler.derivativesIndirection[] == orig(b3.compiler.derivativesIndirection[])
b3.compiler.lowerIndirection == orig(b3.compiler.lowerIndirection)
b3.compiler.lowerIndirection[] == orig(b3.compiler.lowerIndirection[])
b3.compiler.multIndirection == orig(b3.compiler.multIndirection)
b3.compiler.multIndirection.getClass().getName() == orig(b3.compiler.multIndirection.getClass().getName())
b3.compiler.multIndirection[] == orig(b3.compiler.multIndirection[])
b3.compiler.compIndirection == orig(b3.compiler.compIndirection)
b3.compiler.compIndirection.getClass().getName() == orig(b3.compiler.compIndirection.getClass().getName())
b3.compiler.compIndirection[] == orig(b3.compiler.compIndirection[])
b3.data == orig(b3.data)
b3.data[] == orig(b3.data[])
this.compiler has only one value
this.compiler.parameters == 3
this.compiler.sizes has only one value
this.compiler.sizes[] contains no nulls and has only one value, of length 4
this.compiler.derivativesIndirection has only one value
this.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
this.compiler.lowerIndirection has only one value
this.compiler.multIndirection has only one value
this.compiler.multIndirection[] contains no nulls and has only one value, of length 4
this.compiler.compIndirection has only one value
this.compiler.compIndirection[] contains no nulls and has only one value, of length 4
this.data has only one value
this.data[] == [-2.7238580938724895E9, 1.0, 0.0, 0.0]
this.data[] elements one of { -2.7238580938724895E9, 0.0, 1.0 }
b1.compiler has only one value
b1.compiler.parameters == 3
b1.compiler.order == 1
b1.compiler.sizes has only one value
b1.compiler.sizes.getClass().getName() == int[][].class
b1.compiler.sizes[] contains no nulls and has only one value, of length 4
b1.compiler.derivativesIndirection has only one value
b1.compiler.derivativesIndirection.getClass().getName() == int[][].class
b1.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
b1.compiler.lowerIndirection has only one value
b1.compiler.lowerIndirection[] == [0]
b1.compiler.lowerIndirection[] elements == 0
b1.compiler.multIndirection has only one value
b1.compiler.multIndirection.getClass().getName() == int[][][].class
b1.compiler.multIndirection[] contains no nulls and has only one value, of length 4
b1.compiler.compIndirection has only one value
b1.compiler.compIndirection.getClass().getName() == int[][][].class
b1.compiler.compIndirection[] contains no nulls and has only one value, of length 4
b1.data has only one value
b1.data[] == [-2.7238580938724895E9, 1.0, 0.0, 0.0]
b1.data[] elements one of { -2.7238580938724895E9, 0.0, 1.0 }
b2.compiler has only one value
b2.compiler.parameters == 3
b2.compiler.order == 1
b2.compiler.sizes has only one value
b2.compiler.sizes.getClass().getName() == int[][].class
b2.compiler.sizes[] contains no nulls and has only one value, of length 4
b2.compiler.derivativesIndirection has only one value
b2.compiler.derivativesIndirection.getClass().getName() == int[][].class
b2.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
b2.compiler.lowerIndirection has only one value
b2.compiler.lowerIndirection[] == [0]
b2.compiler.lowerIndirection[] elements == 0
b2.compiler.multIndirection has only one value
b2.compiler.multIndirection.getClass().getName() == int[][][].class
b2.compiler.multIndirection[] contains no nulls and has only one value, of length 4
b2.compiler.compIndirection has only one value
b2.compiler.compIndirection.getClass().getName() == int[][][].class
b2.compiler.compIndirection[] contains no nulls and has only one value, of length 4
b2.data has only one value
b2.data[] == [-2.1696649213418756E9, 0.0, 1.0, 0.0]
b2.data[] elements one of { -2.1696649213418756E9, 0.0, 1.0 }
b3.compiler has only one value
b3.compiler.parameters == 3
b3.compiler.order == 1
b3.compiler.sizes has only one value
b3.compiler.sizes.getClass().getName() == int[][].class
b3.compiler.sizes[] contains no nulls and has only one value, of length 4
b3.compiler.derivativesIndirection has only one value
b3.compiler.derivativesIndirection.getClass().getName() == int[][].class
b3.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
b3.compiler.lowerIndirection has only one value
b3.compiler.lowerIndirection[] == [0]
b3.compiler.lowerIndirection[] elements == 0
b3.compiler.multIndirection has only one value
b3.compiler.multIndirection.getClass().getName() == int[][][].class
b3.compiler.multIndirection[] contains no nulls and has only one value, of length 4
b3.compiler.compIndirection has only one value
b3.compiler.compIndirection.getClass().getName() == int[][][].class
b3.compiler.compIndirection[] contains no nulls and has only one value, of length 4
b3.data has only one value
b3.data[] == [6.7496887088853004E10, 0.0, 0.0, 1.0]
b3.data[] elements one of { 0.0, 1.0, 6.7496887088853004E10 }
return has only one value
return.compiler has only one value
return.compiler.parameters == 3
return.compiler.order == 1
return.compiler.sizes has only one value
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] contains no nulls and has only one value, of length 4
return.compiler.derivativesIndirection has only one value
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 4
return.compiler.lowerIndirection has only one value
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection has only one value
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] contains no nulls and has only one value, of length 4
return.compiler.compIndirection has only one value
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] contains no nulls and has only one value, of length 4
return.data has only one value
return.data[] == [-1.8551294182586249, -4921140.837095533, -2.1512094250440013E7, -890093.2794263769]
size(this.compiler.sizes[]) == 4
size(this.compiler.derivativesIndirection[]) == 4
size(this.compiler.multIndirection[]) == 4
size(this.compiler.compIndirection[]) == 4
size(this.data[]) == 4
size(b1.compiler.sizes[]) == 4
size(b1.compiler.derivativesIndirection[]) == 4
size(b1.compiler.lowerIndirection[]) == 1
size(b1.compiler.multIndirection[]) == 4
size(b1.compiler.compIndirection[]) == 4
size(b1.data[]) == 4
size(b2.compiler.sizes[]) == 4
size(b2.compiler.derivativesIndirection[]) == 4
size(b2.compiler.lowerIndirection[]) == 1
size(b2.compiler.multIndirection[]) == 4
size(b2.compiler.compIndirection[]) == 4
size(b2.data[]) == 4
size(b3.compiler.sizes[]) == 4
size(b3.compiler.derivativesIndirection[]) == 4
size(b3.compiler.lowerIndirection[]) == 1
size(b3.compiler.multIndirection[]) == 4
size(b3.compiler.compIndirection[]) == 4
size(b3.data[]) == 4
size(return.compiler.sizes[]) == 4
size(return.compiler.derivativesIndirection[]) == 4
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) == 4
size(return.compiler.compIndirection[]) == 4
size(return.data[]) == 4
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.linearCombination(double[], org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]):::ENTER
this.compiler.parameters one of { 2, 3 }
this.data[] elements <= 1.0
a != null
b != null
b.getClass().getName() == org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class
b[] elements != null
b[].compiler elements != null
b[].compiler elements are equal
b[].compiler.parameters elements one of { 2, 3 }
b[].compiler.parameters one of { [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3] }
b[].compiler.parameters elements are equal
b[].compiler.order elements == 1
b[].compiler.order one of { [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }
b[].compiler.sizes elements are equal
b[].compiler.sizes.getClass().getName() elements == int[][].class
b[].compiler.sizes.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
b[].compiler.derivativesIndirection elements are equal
b[].compiler.derivativesIndirection.getClass().getName() elements == int[][].class
b[].compiler.derivativesIndirection.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
b[].compiler.lowerIndirection elements are equal
b[].compiler.multIndirection elements are equal
b[].compiler.multIndirection.getClass().getName() elements == int[][][].class
b[].compiler.multIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
b[].compiler.compIndirection elements are equal
b[].compiler.compIndirection.getClass().getName() elements == int[][][].class
b[].compiler.compIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
b[].data elements != null
size(this.compiler.sizes[]) one of { 3, 4 }
size(this.compiler.derivativesIndirection[]) one of { 3, 4 }
size(this.compiler.multIndirection[]) one of { 3, 4 }
size(this.compiler.compIndirection[]) one of { 3, 4 }
size(this.data[]) one of { 3, 4 }
size(a[]) one of { 3, 10 }
size(b[]) one of { 3, 10 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.linearCombination(double[], org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]):::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
a[] == orig(a[])
b[] == orig(b[])
b[].compiler == orig(b[].compiler)
b[].compiler.parameters == orig(b[].compiler.parameters)
b[].compiler.order == orig(b[].compiler.order)
b[].compiler.sizes == orig(b[].compiler.sizes)
b[].compiler.derivativesIndirection == orig(b[].compiler.derivativesIndirection)
b[].compiler.lowerIndirection == orig(b[].compiler.lowerIndirection)
b[].compiler.multIndirection == orig(b[].compiler.multIndirection)
b[].compiler.compIndirection == orig(b[].compiler.compIndirection)
b[].data == orig(b[].data)
this.compiler.parameters one of { 2, 3 }
this.data[] elements <= 1.0
b[] elements != null
b[].compiler elements != null
b[].compiler elements are equal
b[].compiler.parameters elements one of { 2, 3 }
b[].compiler.parameters one of { [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3] }
b[].compiler.parameters elements are equal
b[].compiler.order elements == 1
b[].compiler.order one of { [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }
b[].compiler.sizes elements are equal
b[].compiler.sizes.getClass().getName() elements == int[][].class
b[].compiler.sizes.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
b[].compiler.derivativesIndirection elements are equal
b[].compiler.derivativesIndirection.getClass().getName() elements == int[][].class
b[].compiler.derivativesIndirection.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
b[].compiler.lowerIndirection elements are equal
b[].compiler.multIndirection elements are equal
b[].compiler.multIndirection.getClass().getName() elements == int[][][].class
b[].compiler.multIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
b[].compiler.compIndirection elements are equal
b[].compiler.compIndirection.getClass().getName() elements == int[][][].class
b[].compiler.compIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
b[].data elements != null
return != null
return.compiler != null
return.compiler.parameters one of { 2, 3 }
return.compiler.order == 1
return.compiler.sizes != null
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] elements != null
return.compiler.derivativesIndirection != null
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] elements != null
return.compiler.lowerIndirection != null
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection != null
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] elements != null
return.compiler.compIndirection != null
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] elements != null
return.data != null
size(this.compiler.sizes[]) one of { 3, 4 }
size(this.compiler.derivativesIndirection[]) one of { 3, 4 }
size(this.compiler.multIndirection[]) one of { 3, 4 }
size(this.compiler.compIndirection[]) one of { 3, 4 }
size(this.data[]) one of { 3, 4 }
size(return.compiler.sizes[]) one of { 3, 4 }
size(return.compiler.derivativesIndirection[]) one of { 3, 4 }
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) one of { 3, 4 }
size(return.compiler.compIndirection[]) one of { 3, 4 }
size(return.data[]) one of { 3, 4 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::ENTER
this has only one value
this.compiler has only one value
this.compiler.parameters == 6
this.compiler.sizes has only one value
this.compiler.sizes[] contains no nulls and has only one value, of length 7
this.compiler.derivativesIndirection has only one value
this.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
this.compiler.lowerIndirection has only one value
this.compiler.multIndirection has only one value
this.compiler.multIndirection[] contains no nulls and has only one value, of length 7
this.compiler.compIndirection has only one value
this.compiler.compIndirection[] contains no nulls and has only one value, of length 7
this.data has only one value
this.data[] == [-4921140.837095533, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.data[] elements one of { -4921140.837095533, 0.0, 1.0 }
a1 has only one value
a1.compiler has only one value
a1.compiler.parameters == 6
a1.compiler.order == 1
a1.compiler.sizes has only one value
a1.compiler.sizes.getClass().getName() == int[][].class
a1.compiler.sizes[] contains no nulls and has only one value, of length 7
a1.compiler.derivativesIndirection has only one value
a1.compiler.derivativesIndirection.getClass().getName() == int[][].class
a1.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
a1.compiler.lowerIndirection has only one value
a1.compiler.lowerIndirection[] == [0]
a1.compiler.lowerIndirection[] elements == 0
a1.compiler.multIndirection has only one value
a1.compiler.multIndirection.getClass().getName() == int[][][].class
a1.compiler.multIndirection[] contains no nulls and has only one value, of length 7
a1.compiler.compIndirection has only one value
a1.compiler.compIndirection.getClass().getName() == int[][][].class
a1.compiler.compIndirection[] contains no nulls and has only one value, of length 7
a1.data has only one value
a1.data[] == [-4921140.837095533, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
a1.data[] elements one of { -4921140.837095533, 0.0, 1.0 }
b1 has only one value
b1.compiler has only one value
b1.compiler.parameters == 6
b1.compiler.order == 1
b1.compiler.sizes has only one value
b1.compiler.sizes.getClass().getName() == int[][].class
b1.compiler.sizes[] contains no nulls and has only one value, of length 7
b1.compiler.derivativesIndirection has only one value
b1.compiler.derivativesIndirection.getClass().getName() == int[][].class
b1.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
b1.compiler.lowerIndirection has only one value
b1.compiler.lowerIndirection[] == [0]
b1.compiler.lowerIndirection[] elements == 0
b1.compiler.multIndirection has only one value
b1.compiler.multIndirection.getClass().getName() == int[][][].class
b1.compiler.multIndirection[] contains no nulls and has only one value, of length 7
b1.compiler.compIndirection has only one value
b1.compiler.compIndirection.getClass().getName() == int[][][].class
b1.compiler.compIndirection[] contains no nulls and has only one value, of length 7
b1.data has only one value
b1.data[] == [-2.7238580938724895E9, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]
b1.data[] elements one of { -2.7238580938724895E9, 0.0, 1.0 }
a2 has only one value
a2.compiler has only one value
a2.compiler.parameters == 6
a2.compiler.order == 1
a2.compiler.sizes has only one value
a2.compiler.sizes.getClass().getName() == int[][].class
a2.compiler.sizes[] contains no nulls and has only one value, of length 7
a2.compiler.derivativesIndirection has only one value
a2.compiler.derivativesIndirection.getClass().getName() == int[][].class
a2.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
a2.compiler.lowerIndirection has only one value
a2.compiler.lowerIndirection[] == [0]
a2.compiler.lowerIndirection[] elements == 0
a2.compiler.multIndirection has only one value
a2.compiler.multIndirection.getClass().getName() == int[][][].class
a2.compiler.multIndirection[] contains no nulls and has only one value, of length 7
a2.compiler.compIndirection has only one value
a2.compiler.compIndirection.getClass().getName() == int[][][].class
a2.compiler.compIndirection[] contains no nulls and has only one value, of length 7
a2.data has only one value
a2.data[] == [-2.1512094250440013E7, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
a2.data[] elements one of { -2.1512094250440013E7, 0.0, 1.0 }
b2 has only one value
b2.compiler has only one value
b2.compiler.parameters == 6
b2.compiler.order == 1
b2.compiler.sizes has only one value
b2.compiler.sizes.getClass().getName() == int[][].class
b2.compiler.sizes[] contains no nulls and has only one value, of length 7
b2.compiler.derivativesIndirection has only one value
b2.compiler.derivativesIndirection.getClass().getName() == int[][].class
b2.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
b2.compiler.lowerIndirection has only one value
b2.compiler.lowerIndirection[] == [0]
b2.compiler.lowerIndirection[] elements == 0
b2.compiler.multIndirection has only one value
b2.compiler.multIndirection.getClass().getName() == int[][][].class
b2.compiler.multIndirection[] contains no nulls and has only one value, of length 7
b2.compiler.compIndirection has only one value
b2.compiler.compIndirection.getClass().getName() == int[][][].class
b2.compiler.compIndirection[] contains no nulls and has only one value, of length 7
b2.data has only one value
b2.data[] == [-2.1696649213418756E9, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
b2.data[] elements one of { -2.1696649213418756E9, 0.0, 1.0 }
a3 has only one value
a3.compiler has only one value
a3.compiler.parameters == 6
a3.compiler.order == 1
a3.compiler.sizes has only one value
a3.compiler.sizes.getClass().getName() == int[][].class
a3.compiler.sizes[] contains no nulls and has only one value, of length 7
a3.compiler.derivativesIndirection has only one value
a3.compiler.derivativesIndirection.getClass().getName() == int[][].class
a3.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
a3.compiler.lowerIndirection has only one value
a3.compiler.lowerIndirection[] == [0]
a3.compiler.lowerIndirection[] elements == 0
a3.compiler.multIndirection has only one value
a3.compiler.multIndirection.getClass().getName() == int[][][].class
a3.compiler.multIndirection[] contains no nulls and has only one value, of length 7
a3.compiler.compIndirection has only one value
a3.compiler.compIndirection.getClass().getName() == int[][][].class
a3.compiler.compIndirection[] contains no nulls and has only one value, of length 7
a3.data has only one value
a3.data[] == [-890093.2794263769, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
a3.data[] elements one of { -890093.2794263769, 0.0, 1.0 }
b3 has only one value
b3.compiler has only one value
b3.compiler.parameters == 6
b3.compiler.order == 1
b3.compiler.sizes has only one value
b3.compiler.sizes.getClass().getName() == int[][].class
b3.compiler.sizes[] contains no nulls and has only one value, of length 7
b3.compiler.derivativesIndirection has only one value
b3.compiler.derivativesIndirection.getClass().getName() == int[][].class
b3.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
b3.compiler.lowerIndirection has only one value
b3.compiler.lowerIndirection[] == [0]
b3.compiler.lowerIndirection[] elements == 0
b3.compiler.multIndirection has only one value
b3.compiler.multIndirection.getClass().getName() == int[][][].class
b3.compiler.multIndirection[] contains no nulls and has only one value, of length 7
b3.compiler.compIndirection has only one value
b3.compiler.compIndirection.getClass().getName() == int[][][].class
b3.compiler.compIndirection[] contains no nulls and has only one value, of length 7
b3.data has only one value
b3.data[] == [6.7496887088853004E10, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
b3.data[] elements one of { 0.0, 1.0, 6.7496887088853004E10 }
size(this.compiler.sizes[]) == 7
size(this.compiler.derivativesIndirection[]) == 7
size(this.compiler.multIndirection[]) == 7
size(this.compiler.compIndirection[]) == 7
size(this.data[]) == 7
size(a1.compiler.sizes[]) == 7
size(a1.compiler.derivativesIndirection[]) == 7
size(a1.compiler.lowerIndirection[]) == 1
size(a1.compiler.multIndirection[]) == 7
size(a1.compiler.compIndirection[]) == 7
size(a1.data[]) == 7
size(b1.compiler.sizes[]) == 7
size(b1.compiler.derivativesIndirection[]) == 7
size(b1.compiler.lowerIndirection[]) == 1
size(b1.compiler.multIndirection[]) == 7
size(b1.compiler.compIndirection[]) == 7
size(b1.data[]) == 7
size(a2.compiler.sizes[]) == 7
size(a2.compiler.derivativesIndirection[]) == 7
size(a2.compiler.lowerIndirection[]) == 1
size(a2.compiler.multIndirection[]) == 7
size(a2.compiler.compIndirection[]) == 7
size(a2.data[]) == 7
size(b2.compiler.sizes[]) == 7
size(b2.compiler.derivativesIndirection[]) == 7
size(b2.compiler.lowerIndirection[]) == 1
size(b2.compiler.multIndirection[]) == 7
size(b2.compiler.compIndirection[]) == 7
size(b2.data[]) == 7
size(a3.compiler.sizes[]) == 7
size(a3.compiler.derivativesIndirection[]) == 7
size(a3.compiler.lowerIndirection[]) == 1
size(a3.compiler.multIndirection[]) == 7
size(a3.compiler.compIndirection[]) == 7
size(a3.data[]) == 7
size(b3.compiler.sizes[]) == 7
size(b3.compiler.derivativesIndirection[]) == 7
size(b3.compiler.lowerIndirection[]) == 1
size(b3.compiler.multIndirection[]) == 7
size(b3.compiler.compIndirection[]) == 7
size(b3.data[]) == 7
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
a1.compiler == orig(a1.compiler)
a1.compiler.parameters == orig(a1.compiler.parameters)
a1.compiler.order == orig(a1.compiler.order)
a1.compiler.sizes == orig(a1.compiler.sizes)
a1.compiler.sizes.getClass().getName() == orig(a1.compiler.sizes.getClass().getName())
a1.compiler.sizes[] == orig(a1.compiler.sizes[])
a1.compiler.derivativesIndirection == orig(a1.compiler.derivativesIndirection)
a1.compiler.derivativesIndirection.getClass().getName() == orig(a1.compiler.derivativesIndirection.getClass().getName())
a1.compiler.derivativesIndirection[] == orig(a1.compiler.derivativesIndirection[])
a1.compiler.lowerIndirection == orig(a1.compiler.lowerIndirection)
a1.compiler.lowerIndirection[] == orig(a1.compiler.lowerIndirection[])
a1.compiler.multIndirection == orig(a1.compiler.multIndirection)
a1.compiler.multIndirection.getClass().getName() == orig(a1.compiler.multIndirection.getClass().getName())
a1.compiler.multIndirection[] == orig(a1.compiler.multIndirection[])
a1.compiler.compIndirection == orig(a1.compiler.compIndirection)
a1.compiler.compIndirection.getClass().getName() == orig(a1.compiler.compIndirection.getClass().getName())
a1.compiler.compIndirection[] == orig(a1.compiler.compIndirection[])
a1.data == orig(a1.data)
a1.data[] == orig(a1.data[])
b1.compiler == orig(b1.compiler)
b1.compiler.parameters == orig(b1.compiler.parameters)
b1.compiler.order == orig(b1.compiler.order)
b1.compiler.sizes == orig(b1.compiler.sizes)
b1.compiler.sizes.getClass().getName() == orig(b1.compiler.sizes.getClass().getName())
b1.compiler.sizes[] == orig(b1.compiler.sizes[])
b1.compiler.derivativesIndirection == orig(b1.compiler.derivativesIndirection)
b1.compiler.derivativesIndirection.getClass().getName() == orig(b1.compiler.derivativesIndirection.getClass().getName())
b1.compiler.derivativesIndirection[] == orig(b1.compiler.derivativesIndirection[])
b1.compiler.lowerIndirection == orig(b1.compiler.lowerIndirection)
b1.compiler.lowerIndirection[] == orig(b1.compiler.lowerIndirection[])
b1.compiler.multIndirection == orig(b1.compiler.multIndirection)
b1.compiler.multIndirection.getClass().getName() == orig(b1.compiler.multIndirection.getClass().getName())
b1.compiler.multIndirection[] == orig(b1.compiler.multIndirection[])
b1.compiler.compIndirection == orig(b1.compiler.compIndirection)
b1.compiler.compIndirection.getClass().getName() == orig(b1.compiler.compIndirection.getClass().getName())
b1.compiler.compIndirection[] == orig(b1.compiler.compIndirection[])
b1.data == orig(b1.data)
b1.data[] == orig(b1.data[])
a2.compiler == orig(a2.compiler)
a2.compiler.parameters == orig(a2.compiler.parameters)
a2.compiler.order == orig(a2.compiler.order)
a2.compiler.sizes == orig(a2.compiler.sizes)
a2.compiler.sizes.getClass().getName() == orig(a2.compiler.sizes.getClass().getName())
a2.compiler.sizes[] == orig(a2.compiler.sizes[])
a2.compiler.derivativesIndirection == orig(a2.compiler.derivativesIndirection)
a2.compiler.derivativesIndirection.getClass().getName() == orig(a2.compiler.derivativesIndirection.getClass().getName())
a2.compiler.derivativesIndirection[] == orig(a2.compiler.derivativesIndirection[])
a2.compiler.lowerIndirection == orig(a2.compiler.lowerIndirection)
a2.compiler.lowerIndirection[] == orig(a2.compiler.lowerIndirection[])
a2.compiler.multIndirection == orig(a2.compiler.multIndirection)
a2.compiler.multIndirection.getClass().getName() == orig(a2.compiler.multIndirection.getClass().getName())
a2.compiler.multIndirection[] == orig(a2.compiler.multIndirection[])
a2.compiler.compIndirection == orig(a2.compiler.compIndirection)
a2.compiler.compIndirection.getClass().getName() == orig(a2.compiler.compIndirection.getClass().getName())
a2.compiler.compIndirection[] == orig(a2.compiler.compIndirection[])
a2.data == orig(a2.data)
a2.data[] == orig(a2.data[])
b2.compiler == orig(b2.compiler)
b2.compiler.parameters == orig(b2.compiler.parameters)
b2.compiler.order == orig(b2.compiler.order)
b2.compiler.sizes == orig(b2.compiler.sizes)
b2.compiler.sizes.getClass().getName() == orig(b2.compiler.sizes.getClass().getName())
b2.compiler.sizes[] == orig(b2.compiler.sizes[])
b2.compiler.derivativesIndirection == orig(b2.compiler.derivativesIndirection)
b2.compiler.derivativesIndirection.getClass().getName() == orig(b2.compiler.derivativesIndirection.getClass().getName())
b2.compiler.derivativesIndirection[] == orig(b2.compiler.derivativesIndirection[])
b2.compiler.lowerIndirection == orig(b2.compiler.lowerIndirection)
b2.compiler.lowerIndirection[] == orig(b2.compiler.lowerIndirection[])
b2.compiler.multIndirection == orig(b2.compiler.multIndirection)
b2.compiler.multIndirection.getClass().getName() == orig(b2.compiler.multIndirection.getClass().getName())
b2.compiler.multIndirection[] == orig(b2.compiler.multIndirection[])
b2.compiler.compIndirection == orig(b2.compiler.compIndirection)
b2.compiler.compIndirection.getClass().getName() == orig(b2.compiler.compIndirection.getClass().getName())
b2.compiler.compIndirection[] == orig(b2.compiler.compIndirection[])
b2.data == orig(b2.data)
b2.data[] == orig(b2.data[])
a3.compiler == orig(a3.compiler)
a3.compiler.parameters == orig(a3.compiler.parameters)
a3.compiler.order == orig(a3.compiler.order)
a3.compiler.sizes == orig(a3.compiler.sizes)
a3.compiler.sizes.getClass().getName() == orig(a3.compiler.sizes.getClass().getName())
a3.compiler.sizes[] == orig(a3.compiler.sizes[])
a3.compiler.derivativesIndirection == orig(a3.compiler.derivativesIndirection)
a3.compiler.derivativesIndirection.getClass().getName() == orig(a3.compiler.derivativesIndirection.getClass().getName())
a3.compiler.derivativesIndirection[] == orig(a3.compiler.derivativesIndirection[])
a3.compiler.lowerIndirection == orig(a3.compiler.lowerIndirection)
a3.compiler.lowerIndirection[] == orig(a3.compiler.lowerIndirection[])
a3.compiler.multIndirection == orig(a3.compiler.multIndirection)
a3.compiler.multIndirection.getClass().getName() == orig(a3.compiler.multIndirection.getClass().getName())
a3.compiler.multIndirection[] == orig(a3.compiler.multIndirection[])
a3.compiler.compIndirection == orig(a3.compiler.compIndirection)
a3.compiler.compIndirection.getClass().getName() == orig(a3.compiler.compIndirection.getClass().getName())
a3.compiler.compIndirection[] == orig(a3.compiler.compIndirection[])
a3.data == orig(a3.data)
a3.data[] == orig(a3.data[])
b3.compiler == orig(b3.compiler)
b3.compiler.parameters == orig(b3.compiler.parameters)
b3.compiler.order == orig(b3.compiler.order)
b3.compiler.sizes == orig(b3.compiler.sizes)
b3.compiler.sizes.getClass().getName() == orig(b3.compiler.sizes.getClass().getName())
b3.compiler.sizes[] == orig(b3.compiler.sizes[])
b3.compiler.derivativesIndirection == orig(b3.compiler.derivativesIndirection)
b3.compiler.derivativesIndirection.getClass().getName() == orig(b3.compiler.derivativesIndirection.getClass().getName())
b3.compiler.derivativesIndirection[] == orig(b3.compiler.derivativesIndirection[])
b3.compiler.lowerIndirection == orig(b3.compiler.lowerIndirection)
b3.compiler.lowerIndirection[] == orig(b3.compiler.lowerIndirection[])
b3.compiler.multIndirection == orig(b3.compiler.multIndirection)
b3.compiler.multIndirection.getClass().getName() == orig(b3.compiler.multIndirection.getClass().getName())
b3.compiler.multIndirection[] == orig(b3.compiler.multIndirection[])
b3.compiler.compIndirection == orig(b3.compiler.compIndirection)
b3.compiler.compIndirection.getClass().getName() == orig(b3.compiler.compIndirection.getClass().getName())
b3.compiler.compIndirection[] == orig(b3.compiler.compIndirection[])
b3.data == orig(b3.data)
b3.data[] == orig(b3.data[])
this.compiler has only one value
this.compiler.parameters == 6
this.compiler.sizes has only one value
this.compiler.sizes[] contains no nulls and has only one value, of length 7
this.compiler.derivativesIndirection has only one value
this.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
this.compiler.lowerIndirection has only one value
this.compiler.multIndirection has only one value
this.compiler.multIndirection[] contains no nulls and has only one value, of length 7
this.compiler.compIndirection has only one value
this.compiler.compIndirection[] contains no nulls and has only one value, of length 7
this.data has only one value
this.data[] == [-4921140.837095533, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.data[] elements one of { -4921140.837095533, 0.0, 1.0 }
a1.compiler has only one value
a1.compiler.parameters == 6
a1.compiler.order == 1
a1.compiler.sizes has only one value
a1.compiler.sizes.getClass().getName() == int[][].class
a1.compiler.sizes[] contains no nulls and has only one value, of length 7
a1.compiler.derivativesIndirection has only one value
a1.compiler.derivativesIndirection.getClass().getName() == int[][].class
a1.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
a1.compiler.lowerIndirection has only one value
a1.compiler.lowerIndirection[] == [0]
a1.compiler.lowerIndirection[] elements == 0
a1.compiler.multIndirection has only one value
a1.compiler.multIndirection.getClass().getName() == int[][][].class
a1.compiler.multIndirection[] contains no nulls and has only one value, of length 7
a1.compiler.compIndirection has only one value
a1.compiler.compIndirection.getClass().getName() == int[][][].class
a1.compiler.compIndirection[] contains no nulls and has only one value, of length 7
a1.data has only one value
a1.data[] == [-4921140.837095533, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
a1.data[] elements one of { -4921140.837095533, 0.0, 1.0 }
b1.compiler has only one value
b1.compiler.parameters == 6
b1.compiler.order == 1
b1.compiler.sizes has only one value
b1.compiler.sizes.getClass().getName() == int[][].class
b1.compiler.sizes[] contains no nulls and has only one value, of length 7
b1.compiler.derivativesIndirection has only one value
b1.compiler.derivativesIndirection.getClass().getName() == int[][].class
b1.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
b1.compiler.lowerIndirection has only one value
b1.compiler.lowerIndirection[] == [0]
b1.compiler.lowerIndirection[] elements == 0
b1.compiler.multIndirection has only one value
b1.compiler.multIndirection.getClass().getName() == int[][][].class
b1.compiler.multIndirection[] contains no nulls and has only one value, of length 7
b1.compiler.compIndirection has only one value
b1.compiler.compIndirection.getClass().getName() == int[][][].class
b1.compiler.compIndirection[] contains no nulls and has only one value, of length 7
b1.data has only one value
b1.data[] == [-2.7238580938724895E9, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]
b1.data[] elements one of { -2.7238580938724895E9, 0.0, 1.0 }
a2.compiler has only one value
a2.compiler.parameters == 6
a2.compiler.order == 1
a2.compiler.sizes has only one value
a2.compiler.sizes.getClass().getName() == int[][].class
a2.compiler.sizes[] contains no nulls and has only one value, of length 7
a2.compiler.derivativesIndirection has only one value
a2.compiler.derivativesIndirection.getClass().getName() == int[][].class
a2.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
a2.compiler.lowerIndirection has only one value
a2.compiler.lowerIndirection[] == [0]
a2.compiler.lowerIndirection[] elements == 0
a2.compiler.multIndirection has only one value
a2.compiler.multIndirection.getClass().getName() == int[][][].class
a2.compiler.multIndirection[] contains no nulls and has only one value, of length 7
a2.compiler.compIndirection has only one value
a2.compiler.compIndirection.getClass().getName() == int[][][].class
a2.compiler.compIndirection[] contains no nulls and has only one value, of length 7
a2.data has only one value
a2.data[] == [-2.1512094250440013E7, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
a2.data[] elements one of { -2.1512094250440013E7, 0.0, 1.0 }
b2.compiler has only one value
b2.compiler.parameters == 6
b2.compiler.order == 1
b2.compiler.sizes has only one value
b2.compiler.sizes.getClass().getName() == int[][].class
b2.compiler.sizes[] contains no nulls and has only one value, of length 7
b2.compiler.derivativesIndirection has only one value
b2.compiler.derivativesIndirection.getClass().getName() == int[][].class
b2.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
b2.compiler.lowerIndirection has only one value
b2.compiler.lowerIndirection[] == [0]
b2.compiler.lowerIndirection[] elements == 0
b2.compiler.multIndirection has only one value
b2.compiler.multIndirection.getClass().getName() == int[][][].class
b2.compiler.multIndirection[] contains no nulls and has only one value, of length 7
b2.compiler.compIndirection has only one value
b2.compiler.compIndirection.getClass().getName() == int[][][].class
b2.compiler.compIndirection[] contains no nulls and has only one value, of length 7
b2.data has only one value
b2.data[] == [-2.1696649213418756E9, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
b2.data[] elements one of { -2.1696649213418756E9, 0.0, 1.0 }
a3.compiler has only one value
a3.compiler.parameters == 6
a3.compiler.order == 1
a3.compiler.sizes has only one value
a3.compiler.sizes.getClass().getName() == int[][].class
a3.compiler.sizes[] contains no nulls and has only one value, of length 7
a3.compiler.derivativesIndirection has only one value
a3.compiler.derivativesIndirection.getClass().getName() == int[][].class
a3.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
a3.compiler.lowerIndirection has only one value
a3.compiler.lowerIndirection[] == [0]
a3.compiler.lowerIndirection[] elements == 0
a3.compiler.multIndirection has only one value
a3.compiler.multIndirection.getClass().getName() == int[][][].class
a3.compiler.multIndirection[] contains no nulls and has only one value, of length 7
a3.compiler.compIndirection has only one value
a3.compiler.compIndirection.getClass().getName() == int[][][].class
a3.compiler.compIndirection[] contains no nulls and has only one value, of length 7
a3.data has only one value
a3.data[] == [-890093.2794263769, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
a3.data[] elements one of { -890093.2794263769, 0.0, 1.0 }
b3.compiler has only one value
b3.compiler.parameters == 6
b3.compiler.order == 1
b3.compiler.sizes has only one value
b3.compiler.sizes.getClass().getName() == int[][].class
b3.compiler.sizes[] contains no nulls and has only one value, of length 7
b3.compiler.derivativesIndirection has only one value
b3.compiler.derivativesIndirection.getClass().getName() == int[][].class
b3.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
b3.compiler.lowerIndirection has only one value
b3.compiler.lowerIndirection[] == [0]
b3.compiler.lowerIndirection[] elements == 0
b3.compiler.multIndirection has only one value
b3.compiler.multIndirection.getClass().getName() == int[][][].class
b3.compiler.multIndirection[] contains no nulls and has only one value, of length 7
b3.compiler.compIndirection has only one value
b3.compiler.compIndirection.getClass().getName() == int[][][].class
b3.compiler.compIndirection[] contains no nulls and has only one value, of length 7
b3.data has only one value
b3.data[] == [6.7496887088853004E10, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
b3.data[] elements one of { 0.0, 1.0, 6.7496887088853004E10 }
return has only one value
return.compiler has only one value
return.compiler.parameters == 6
return.compiler.order == 1
return.compiler.sizes has only one value
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] contains no nulls and has only one value, of length 7
return.compiler.derivativesIndirection has only one value
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 7
return.compiler.lowerIndirection has only one value
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection has only one value
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] contains no nulls and has only one value, of length 7
return.compiler.compIndirection has only one value
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] contains no nulls and has only one value, of length 7
return.data has only one value
return.data[] == [-1.8551294182586249, -2.7238580938724895E9, -2.1696649213418756E9, 6.7496887088853004E10, -4921140.837095533, -2.1512094250440013E7, -890093.2794263769]
size(this.compiler.sizes[]) == 7
size(this.compiler.derivativesIndirection[]) == 7
size(this.compiler.multIndirection[]) == 7
size(this.compiler.compIndirection[]) == 7
size(this.data[]) == 7
size(a1.compiler.sizes[]) == 7
size(a1.compiler.derivativesIndirection[]) == 7
size(a1.compiler.lowerIndirection[]) == 1
size(a1.compiler.multIndirection[]) == 7
size(a1.compiler.compIndirection[]) == 7
size(a1.data[]) == 7
size(b1.compiler.sizes[]) == 7
size(b1.compiler.derivativesIndirection[]) == 7
size(b1.compiler.lowerIndirection[]) == 1
size(b1.compiler.multIndirection[]) == 7
size(b1.compiler.compIndirection[]) == 7
size(b1.data[]) == 7
size(a2.compiler.sizes[]) == 7
size(a2.compiler.derivativesIndirection[]) == 7
size(a2.compiler.lowerIndirection[]) == 1
size(a2.compiler.multIndirection[]) == 7
size(a2.compiler.compIndirection[]) == 7
size(a2.data[]) == 7
size(b2.compiler.sizes[]) == 7
size(b2.compiler.derivativesIndirection[]) == 7
size(b2.compiler.lowerIndirection[]) == 1
size(b2.compiler.multIndirection[]) == 7
size(b2.compiler.compIndirection[]) == 7
size(b2.data[]) == 7
size(a3.compiler.sizes[]) == 7
size(a3.compiler.derivativesIndirection[]) == 7
size(a3.compiler.lowerIndirection[]) == 1
size(a3.compiler.multIndirection[]) == 7
size(a3.compiler.compIndirection[]) == 7
size(a3.data[]) == 7
size(b3.compiler.sizes[]) == 7
size(b3.compiler.derivativesIndirection[]) == 7
size(b3.compiler.lowerIndirection[]) == 1
size(b3.compiler.multIndirection[]) == 7
size(b3.compiler.compIndirection[]) == 7
size(b3.data[]) == 7
size(return.compiler.sizes[]) == 7
size(return.compiler.derivativesIndirection[]) == 7
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) == 7
size(return.compiler.compIndirection[]) == 7
size(return.data[]) == 7
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[], org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]):::ENTER
this.compiler.parameters one of { 2, 6 }
this.data[] elements <= 1.0
a != null
a.getClass().getName() == org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class
a[] elements != null
a[].compiler elements != null
a[].compiler elements are equal
a[].compiler.parameters elements one of { 2, 6 }
a[].compiler.parameters one of { [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [6, 6, 6] }
a[].compiler.parameters elements are equal
a[].compiler.order elements == 1
a[].compiler.order one of { [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }
a[].compiler.sizes elements are equal
a[].compiler.sizes.getClass().getName() elements == int[][].class
a[].compiler.sizes.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
a[].compiler.derivativesIndirection elements are equal
a[].compiler.derivativesIndirection.getClass().getName() elements == int[][].class
a[].compiler.derivativesIndirection.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
a[].compiler.lowerIndirection elements are equal
a[].compiler.multIndirection elements are equal
a[].compiler.multIndirection.getClass().getName() elements == int[][][].class
a[].compiler.multIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
a[].compiler.compIndirection elements are equal
a[].compiler.compIndirection.getClass().getName() elements == int[][][].class
a[].compiler.compIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
a[].data elements != null
b != null
b.getClass().getName() == org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class
b[] elements != null
b[].compiler elements != null
b[].compiler elements are equal
b[].compiler.parameters elements one of { 2, 6 }
b[].compiler.parameters one of { [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [6, 6, 6] }
b[].compiler.parameters elements are equal
b[].compiler.order elements == 1
b[].compiler.order one of { [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }
b[].compiler.sizes elements are equal
b[].compiler.sizes.getClass().getName() elements == int[][].class
b[].compiler.sizes.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
b[].compiler.derivativesIndirection elements are equal
b[].compiler.derivativesIndirection.getClass().getName() elements == int[][].class
b[].compiler.derivativesIndirection.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
b[].compiler.lowerIndirection elements are equal
b[].compiler.multIndirection elements are equal
b[].compiler.multIndirection.getClass().getName() elements == int[][][].class
b[].compiler.multIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
b[].compiler.compIndirection elements are equal
b[].compiler.compIndirection.getClass().getName() elements == int[][][].class
b[].compiler.compIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
b[].data elements != null
size(this.compiler.sizes[]) one of { 3, 7 }
size(this.compiler.derivativesIndirection[]) one of { 3, 7 }
size(this.compiler.multIndirection[]) one of { 3, 7 }
size(this.compiler.compIndirection[]) one of { 3, 7 }
size(this.data[]) one of { 3, 7 }
size(a[]) one of { 3, 10 }
size(b[]) one of { 3, 10 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[], org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]):::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
a[] == orig(a[])
a[].compiler == orig(a[].compiler)
a[].compiler.parameters == orig(a[].compiler.parameters)
a[].compiler.order == orig(a[].compiler.order)
a[].compiler.sizes == orig(a[].compiler.sizes)
a[].compiler.derivativesIndirection == orig(a[].compiler.derivativesIndirection)
a[].compiler.lowerIndirection == orig(a[].compiler.lowerIndirection)
a[].compiler.multIndirection == orig(a[].compiler.multIndirection)
a[].compiler.compIndirection == orig(a[].compiler.compIndirection)
a[].data == orig(a[].data)
b[] == orig(b[])
b[].compiler == orig(b[].compiler)
b[].compiler.parameters == orig(b[].compiler.parameters)
b[].compiler.order == orig(b[].compiler.order)
b[].compiler.sizes == orig(b[].compiler.sizes)
b[].compiler.derivativesIndirection == orig(b[].compiler.derivativesIndirection)
b[].compiler.lowerIndirection == orig(b[].compiler.lowerIndirection)
b[].compiler.multIndirection == orig(b[].compiler.multIndirection)
b[].compiler.compIndirection == orig(b[].compiler.compIndirection)
b[].data == orig(b[].data)
this.compiler.parameters one of { 2, 6 }
this.data[] elements <= 1.0
a[] elements != null
a[].compiler elements != null
a[].compiler elements are equal
a[].compiler.parameters elements one of { 2, 6 }
a[].compiler.parameters one of { [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [6, 6, 6] }
a[].compiler.parameters elements are equal
a[].compiler.order elements == 1
a[].compiler.order one of { [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }
a[].compiler.sizes elements are equal
a[].compiler.sizes.getClass().getName() elements == int[][].class
a[].compiler.sizes.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
a[].compiler.derivativesIndirection elements are equal
a[].compiler.derivativesIndirection.getClass().getName() elements == int[][].class
a[].compiler.derivativesIndirection.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
a[].compiler.lowerIndirection elements are equal
a[].compiler.multIndirection elements are equal
a[].compiler.multIndirection.getClass().getName() elements == int[][][].class
a[].compiler.multIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
a[].compiler.compIndirection elements are equal
a[].compiler.compIndirection.getClass().getName() elements == int[][][].class
a[].compiler.compIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
a[].data elements != null
b[] elements != null
b[].compiler elements != null
b[].compiler elements are equal
b[].compiler.parameters elements one of { 2, 6 }
b[].compiler.parameters one of { [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [6, 6, 6] }
b[].compiler.parameters elements are equal
b[].compiler.order elements == 1
b[].compiler.order one of { [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }
b[].compiler.sizes elements are equal
b[].compiler.sizes.getClass().getName() elements == int[][].class
b[].compiler.sizes.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
b[].compiler.derivativesIndirection elements are equal
b[].compiler.derivativesIndirection.getClass().getName() elements == int[][].class
b[].compiler.derivativesIndirection.getClass().getName() one of { [int[][], int[][], int[][]], [int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][], int[][]] }
b[].compiler.lowerIndirection elements are equal
b[].compiler.multIndirection elements are equal
b[].compiler.multIndirection.getClass().getName() elements == int[][][].class
b[].compiler.multIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
b[].compiler.compIndirection elements are equal
b[].compiler.compIndirection.getClass().getName() elements == int[][][].class
b[].compiler.compIndirection.getClass().getName() one of { [int[][][], int[][][], int[][][]], [int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][], int[][][]] }
b[].data elements != null
return != null
return.compiler != null
return.compiler.parameters one of { 2, 6 }
return.compiler.order == 1
return.compiler.sizes != null
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] elements != null
return.compiler.derivativesIndirection != null
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] elements != null
return.compiler.lowerIndirection != null
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection != null
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] elements != null
return.compiler.compIndirection != null
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] elements != null
return.data != null
size(this.compiler.sizes[]) one of { 3, 7 }
size(this.compiler.derivativesIndirection[]) one of { 3, 7 }
size(this.compiler.multIndirection[]) one of { 3, 7 }
size(this.compiler.compIndirection[]) one of { 3, 7 }
size(this.data[]) one of { 3, 7 }
size(return.compiler.sizes[]) one of { 3, 7 }
size(return.compiler.derivativesIndirection[]) one of { 3, 7 }
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) one of { 3, 7 }
size(return.compiler.compIndirection[]) one of { 3, 7 }
size(return.data[]) one of { 3, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.multiply(double):::ENTER
this.compiler.parameters one of { 2, 3 }
a != 0
size(this.compiler.sizes[]) one of { 3, 4 }
size(this.compiler.derivativesIndirection[]) one of { 3, 4 }
size(this.compiler.multIndirection[]) one of { 3, 4 }
size(this.compiler.compIndirection[]) one of { 3, 4 }
size(this.data[]) one of { 3, 4 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.multiply(double):::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.compiler.parameters one of { 2, 3 }
return != null
return.compiler != null
return.compiler.parameters one of { 2, 3 }
return.compiler.order == 1
return.compiler.sizes != null
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] elements != null
return.compiler.derivativesIndirection != null
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] elements != null
return.compiler.lowerIndirection != null
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection != null
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] elements != null
return.compiler.compIndirection != null
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] elements != null
return.data != null
size(this.compiler.sizes[]) one of { 3, 4 }
size(this.compiler.derivativesIndirection[]) one of { 3, 4 }
size(this.compiler.multIndirection[]) one of { 3, 4 }
size(this.compiler.compIndirection[]) one of { 3, 4 }
size(this.data[]) one of { 3, 4 }
size(return.compiler.sizes[]) one of { 3, 4 }
size(return.compiler.derivativesIndirection[]) one of { 3, 4 }
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) one of { 3, 4 }
size(return.compiler.compIndirection[]) one of { 3, 4 }
size(return.data[]) one of { 3, 4 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::ENTER
this.compiler.parameters one of { 2, 6 }
this.data[] elements <= 1.0
a != null
a.compiler != null
a.compiler.parameters one of { 2, 6 }
a.compiler.order == 1
a.compiler.sizes != null
a.compiler.sizes.getClass().getName() == int[][].class
a.compiler.sizes[] elements != null
a.compiler.derivativesIndirection != null
a.compiler.derivativesIndirection.getClass().getName() == int[][].class
a.compiler.derivativesIndirection[] elements != null
a.compiler.lowerIndirection != null
a.compiler.lowerIndirection[] == [0]
a.compiler.lowerIndirection[] elements == 0
a.compiler.multIndirection != null
a.compiler.multIndirection.getClass().getName() == int[][][].class
a.compiler.multIndirection[] elements != null
a.compiler.compIndirection != null
a.compiler.compIndirection.getClass().getName() == int[][][].class
a.compiler.compIndirection[] elements != null
a.data != null
size(this.compiler.sizes[]) one of { 3, 7 }
size(this.compiler.derivativesIndirection[]) one of { 3, 7 }
size(this.compiler.multIndirection[]) one of { 3, 7 }
size(this.compiler.compIndirection[]) one of { 3, 7 }
size(this.data[]) one of { 3, 7 }
size(a.compiler.sizes[]) one of { 3, 7 }
size(a.compiler.derivativesIndirection[]) one of { 3, 7 }
size(a.compiler.lowerIndirection[]) == 1
size(a.compiler.multIndirection[]) one of { 3, 7 }
size(a.compiler.compIndirection[]) one of { 3, 7 }
size(a.data[]) one of { 3, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructure.multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure):::EXIT
this.compiler == orig(this.compiler)
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers == orig(org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers)
this.compiler.parameters == orig(this.compiler.parameters)
this.compiler.order == orig(this.compiler.order)
this.compiler.sizes == orig(this.compiler.sizes)
this.compiler.sizes.getClass().getName() == orig(this.compiler.sizes.getClass().getName())
this.compiler.sizes[] == orig(this.compiler.sizes[])
this.compiler.derivativesIndirection == orig(this.compiler.derivativesIndirection)
this.compiler.derivativesIndirection.getClass().getName() == orig(this.compiler.derivativesIndirection.getClass().getName())
this.compiler.derivativesIndirection[] == orig(this.compiler.derivativesIndirection[])
this.compiler.lowerIndirection == orig(this.compiler.lowerIndirection)
this.compiler.lowerIndirection[] == orig(this.compiler.lowerIndirection[])
this.compiler.multIndirection == orig(this.compiler.multIndirection)
this.compiler.multIndirection.getClass().getName() == orig(this.compiler.multIndirection.getClass().getName())
this.compiler.multIndirection[] == orig(this.compiler.multIndirection[])
this.compiler.compIndirection == orig(this.compiler.compIndirection)
this.compiler.compIndirection.getClass().getName() == orig(this.compiler.compIndirection.getClass().getName())
this.compiler.compIndirection[] == orig(this.compiler.compIndirection[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
a.compiler == orig(a.compiler)
a.compiler.parameters == orig(a.compiler.parameters)
a.compiler.order == orig(a.compiler.order)
a.compiler.sizes == orig(a.compiler.sizes)
a.compiler.sizes.getClass().getName() == orig(a.compiler.sizes.getClass().getName())
a.compiler.sizes[] == orig(a.compiler.sizes[])
a.compiler.derivativesIndirection == orig(a.compiler.derivativesIndirection)
a.compiler.derivativesIndirection.getClass().getName() == orig(a.compiler.derivativesIndirection.getClass().getName())
a.compiler.derivativesIndirection[] == orig(a.compiler.derivativesIndirection[])
a.compiler.lowerIndirection == orig(a.compiler.lowerIndirection)
a.compiler.lowerIndirection[] == orig(a.compiler.lowerIndirection[])
a.compiler.multIndirection == orig(a.compiler.multIndirection)
a.compiler.multIndirection.getClass().getName() == orig(a.compiler.multIndirection.getClass().getName())
a.compiler.multIndirection[] == orig(a.compiler.multIndirection[])
a.compiler.compIndirection == orig(a.compiler.compIndirection)
a.compiler.compIndirection.getClass().getName() == orig(a.compiler.compIndirection.getClass().getName())
a.compiler.compIndirection[] == orig(a.compiler.compIndirection[])
a.data == orig(a.data)
a.data[] == orig(a.data[])
this.compiler.parameters one of { 2, 6 }
this.data[] elements <= 1.0
a.compiler != null
a.compiler.parameters one of { 2, 6 }
a.compiler.order == 1
a.compiler.sizes != null
a.compiler.sizes.getClass().getName() == int[][].class
a.compiler.sizes[] elements != null
a.compiler.derivativesIndirection != null
a.compiler.derivativesIndirection.getClass().getName() == int[][].class
a.compiler.derivativesIndirection[] elements != null
a.compiler.lowerIndirection != null
a.compiler.lowerIndirection[] == [0]
a.compiler.lowerIndirection[] elements == 0
a.compiler.multIndirection != null
a.compiler.multIndirection.getClass().getName() == int[][][].class
a.compiler.multIndirection[] elements != null
a.compiler.compIndirection != null
a.compiler.compIndirection.getClass().getName() == int[][][].class
a.compiler.compIndirection[] elements != null
a.data != null
return != null
return.compiler != null
return.compiler.parameters one of { 2, 6 }
return.compiler.order == 1
return.compiler.sizes != null
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] elements != null
return.compiler.derivativesIndirection != null
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] elements != null
return.compiler.lowerIndirection != null
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection != null
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] elements != null
return.compiler.compIndirection != null
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] elements != null
return.data != null
size(this.compiler.sizes[]) one of { 3, 7 }
size(this.compiler.derivativesIndirection[]) one of { 3, 7 }
size(this.compiler.multIndirection[]) one of { 3, 7 }
size(this.compiler.compIndirection[]) one of { 3, 7 }
size(this.data[]) one of { 3, 7 }
size(a.compiler.sizes[]) one of { 3, 7 }
size(a.compiler.derivativesIndirection[]) one of { 3, 7 }
size(a.compiler.lowerIndirection[]) == 1
size(a.compiler.multIndirection[]) one of { 3, 7 }
size(a.compiler.compIndirection[]) one of { 3, 7 }
size(a.data[]) one of { 3, 7 }
size(return.compiler.sizes[]) one of { 3, 7 }
size(return.compiler.derivativesIndirection[]) one of { 3, 7 }
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) one of { 3, 7 }
size(return.compiler.compIndirection[]) one of { 3, 7 }
size(return.data[]) one of { 3, 7 }
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest:::OBJECT
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.DerivativeStructureTest():::EXIT
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.build(double):::ENTER
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.build(double):::EXIT
return != null
return.compiler has only one value
return.compiler != null
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers has only one value
org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers != null
return.compiler.parameters == 2
return.compiler.order == 1
return.compiler.sizes has only one value
return.compiler.sizes != null
return.compiler.sizes.getClass().getName() == int[][].class
return.compiler.sizes[] contains no nulls and has only one value, of length 3
return.compiler.sizes[] elements != null
return.compiler.derivativesIndirection has only one value
return.compiler.derivativesIndirection != null
return.compiler.derivativesIndirection.getClass().getName() == int[][].class
return.compiler.derivativesIndirection[] contains no nulls and has only one value, of length 3
return.compiler.derivativesIndirection[] elements != null
return.compiler.lowerIndirection has only one value
return.compiler.lowerIndirection != null
return.compiler.lowerIndirection[] == [0]
return.compiler.lowerIndirection[] elements == 0
return.compiler.multIndirection has only one value
return.compiler.multIndirection != null
return.compiler.multIndirection.getClass().getName() == int[][][].class
return.compiler.multIndirection[] contains no nulls and has only one value, of length 3
return.compiler.multIndirection[] elements != null
return.compiler.compIndirection has only one value
return.compiler.compIndirection != null
return.compiler.compIndirection.getClass().getName() == int[][][].class
return.compiler.compIndirection[] contains no nulls and has only one value, of length 3
return.compiler.compIndirection[] elements != null
return.data != null
return.data[] elements <= 1.0
return.data[] elements >= 0.0
size(return.compiler.sizes[]) == 3
size(return.compiler.derivativesIndirection[]) == 3
size(return.compiler.lowerIndirection[]) == 1
size(return.compiler.multIndirection[]) == 3
size(return.compiler.compIndirection[]) == 3
size(return.data[]) == 3
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLinearCombination1DSDS():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLinearCombination1DSDS():::EXIT
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLinearCombination1DoubleDS():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLinearCombination1DoubleDS():::EXIT
===========================================================================
org.apache.commons.math3.dfp.Dfp:::CLASS
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
===========================================================================
org.apache.commons.math3.dfp.Dfp:::OBJECT
this.mant[] elements >= 0
this.sign one of { -1, 1 }
this.nans >= 0
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
this.field.radixDigits one of { 5, 50 }
this.field.zero.mant[] elements == 0
this.field.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.field.zero.sign == 1
this.field.zero.exp == 0
this.field.zero.nans == 0
this.field.one.mant[] elements one of { 0, 1 }
this.field.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] }
this.field.one.mant[] sorted by <=
this.field.one.sign == 1
this.field.one.exp == 1
this.field.one.nans == 0
this.field.two.mant[] elements one of { 0, 2 }
this.field.two.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2] }
this.field.two.mant[] sorted by <=
this.field.two.sign == 1
this.field.two.exp == 1
this.field.two.nans == 0
this.field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
this.field.sqr2.mant[] elements >= 1
this.field.sqr2.sign == 1
this.field.sqr2.exp == 1
this.field.sqr2.nans == 0
this.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.sqr2Split[] elements != null
this.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.sqr2Split[].sign == [1, 1]
this.field.sqr2Split[].sign elements == 1
this.field.sqr2Split[].exp == [1, -1]
this.field.sqr2Split[].exp elements one of { -1, 1 }
this.field.sqr2Split[].exp elements != 0
this.field.sqr2Split[].exp sorted by >
this.field.sqr2Split[].nans == [0, 0]
this.field.sqr2Split[].nans elements == 0
this.field.sqr2Split[].field elements != null
this.field.sqr2Split[].field elements are equal
this.field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
this.field.sqr2Reciprocal.sign == 1
this.field.sqr2Reciprocal.exp == 0
this.field.sqr2Reciprocal.nans == 0
this.field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
this.field.sqr3.mant[] elements >= 1
this.field.sqr3.sign == 1
this.field.sqr3.exp == 1
this.field.sqr3.nans == 0
this.field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
this.field.sqr3Reciprocal.sign == 1
this.field.sqr3Reciprocal.exp == 0
this.field.sqr3Reciprocal.nans == 0
this.field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
this.field.pi.sign == 1
this.field.pi.exp == 1
this.field.pi.nans == 0
this.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.piSplit[] elements != null
this.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.piSplit[].mant sorted by <
this.field.piSplit[].sign == [1, 1]
this.field.piSplit[].sign elements == 1
this.field.piSplit[].exp == [1, -1]
this.field.piSplit[].exp elements one of { -1, 1 }
this.field.piSplit[].exp elements != 0
this.field.piSplit[].exp sorted by >
this.field.piSplit[].nans == [0, 0]
this.field.piSplit[].nans elements == 0
this.field.piSplit[].field elements != null
this.field.piSplit[].field elements are equal
this.field.e.mant[] == [452, 8459, 8182, 7182, 2]
this.field.e.mant[] elements >= 2
this.field.e.sign == 1
this.field.e.exp == 1
this.field.e.nans == 0
this.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.eSplit[] elements != null
this.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.eSplit[].sign == [1, 1]
this.field.eSplit[].sign elements == 1
this.field.eSplit[].exp == [1, -1]
this.field.eSplit[].exp elements one of { -1, 1 }
this.field.eSplit[].exp elements != 0
this.field.eSplit[].exp sorted by >
this.field.eSplit[].nans == [0, 0]
this.field.eSplit[].nans elements == 0
this.field.eSplit[].field elements != null
this.field.eSplit[].field elements are equal
this.field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
this.field.ln2.sign == 1
this.field.ln2.exp == 0
this.field.ln2.nans == 0
this.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.ln2Split[] elements != null
this.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.ln2Split[].mant sorted by >
this.field.ln2Split[].sign == [1, 1]
this.field.ln2Split[].sign elements == 1
this.field.ln2Split[].exp == [0, -2]
this.field.ln2Split[].exp elements one of { -2, 0 }
this.field.ln2Split[].exp sorted by >
this.field.ln2Split[].nans == [0, 0]
this.field.ln2Split[].nans elements == 0
this.field.ln2Split[].field elements != null
this.field.ln2Split[].field elements are equal
this.field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
this.field.ln5.mant[] elements >= 1
this.field.ln5.sign == 1
this.field.ln5.exp == 1
this.field.ln5.nans == 0
this.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.ln5Split[] elements != null
this.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.ln5Split[].mant sorted by >
this.field.ln5Split[].sign == [1, 1]
this.field.ln5Split[].sign elements == 1
this.field.ln5Split[].exp == [1, -1]
this.field.ln5Split[].exp elements one of { -1, 1 }
this.field.ln5Split[].exp elements != 0
this.field.ln5Split[].exp sorted by >
this.field.ln5Split[].nans == [0, 0]
this.field.ln5Split[].nans elements == 0
this.field.ln5Split[].field elements != null
this.field.ln5Split[].field elements are equal
this.field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
this.field.ln10.mant[] elements >= 2
this.field.ln10.sign == 1
this.field.ln10.exp == 1
this.field.ln10.nans == 0
this.field.rMode has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] elements != null
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
this.field.ieeeFlags one of { 0, 16, 18 }
size(this.mant[]) one of { 5, 50 }
size(this.field.zero.mant[]) one of { 5, 50 }
size(this.field.one.mant[]) one of { 5, 50 }
size(this.field.two.mant[]) one of { 5, 50 }
size(this.field.sqr2.mant[]) == 5
size(this.field.sqr2Split[]) == 2
size(this.field.sqr2Reciprocal.mant[]) == 5
size(this.field.sqr3.mant[]) == 5
size(this.field.sqr3Reciprocal.mant[]) == 5
size(this.field.pi.mant[]) == 5
size(this.field.piSplit[]) == 2
size(this.field.e.mant[]) == 5
size(this.field.eSplit[]) == 2
size(this.field.ln2.mant[]) == 5
size(this.field.ln2Split[]) == 2
size(this.field.ln5.mant[]) == 5
size(this.field.ln5Split[]) == 2
size(this.field.ln10.mant[]) == 5
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.Dfp):::ENTER
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
d.mant[] elements >= 0
d.sign one of { -1, 1 }
d.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
d.field.radixDigits one of { 5, 50 }
d.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.sqr2Split[] elements != null
d.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.sqr2Split[].sign == [1, 1]
d.field.sqr2Split[].sign elements == 1
d.field.sqr2Split[].exp == [1, -1]
d.field.sqr2Split[].exp elements one of { -1, 1 }
d.field.sqr2Split[].exp elements != 0
d.field.sqr2Split[].exp sorted by >
d.field.sqr2Split[].nans == [0, 0]
d.field.sqr2Split[].nans elements == 0
d.field.sqr2Split[].field elements != null
d.field.sqr2Split[].field elements are equal
d.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.piSplit[] elements != null
d.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.piSplit[].mant sorted by <
d.field.piSplit[].sign == [1, 1]
d.field.piSplit[].sign elements == 1
d.field.piSplit[].exp == [1, -1]
d.field.piSplit[].exp elements one of { -1, 1 }
d.field.piSplit[].exp elements != 0
d.field.piSplit[].exp sorted by >
d.field.piSplit[].nans == [0, 0]
d.field.piSplit[].nans elements == 0
d.field.piSplit[].field elements != null
d.field.piSplit[].field elements are equal
d.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.eSplit[] elements != null
d.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.eSplit[].sign == [1, 1]
d.field.eSplit[].sign elements == 1
d.field.eSplit[].exp == [1, -1]
d.field.eSplit[].exp elements one of { -1, 1 }
d.field.eSplit[].exp elements != 0
d.field.eSplit[].exp sorted by >
d.field.eSplit[].nans == [0, 0]
d.field.eSplit[].nans elements == 0
d.field.eSplit[].field elements != null
d.field.eSplit[].field elements are equal
d.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.ln2Split[] elements != null
d.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.ln2Split[].mant sorted by >
d.field.ln2Split[].sign == [1, 1]
d.field.ln2Split[].sign elements == 1
d.field.ln2Split[].exp == [0, -2]
d.field.ln2Split[].exp elements one of { -2, 0 }
d.field.ln2Split[].exp sorted by >
d.field.ln2Split[].nans == [0, 0]
d.field.ln2Split[].nans elements == 0
d.field.ln2Split[].field elements != null
d.field.ln2Split[].field elements are equal
d.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.ln5Split[] elements != null
d.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.ln5Split[].mant sorted by >
d.field.ln5Split[].sign == [1, 1]
d.field.ln5Split[].sign elements == 1
d.field.ln5Split[].exp == [1, -1]
d.field.ln5Split[].exp elements one of { -1, 1 }
d.field.ln5Split[].exp elements != 0
d.field.ln5Split[].exp sorted by >
d.field.ln5Split[].nans == [0, 0]
d.field.ln5Split[].nans elements == 0
d.field.ln5Split[].field elements != null
d.field.ln5Split[].field elements are equal
d.field.rMode has only one value
d.field.ieeeFlags one of { 0, 16, 18 }
size(d.mant[]) one of { 5, 50 }
size(d.field.sqr2Split[]) == 2
size(d.field.piSplit[]) == 2
size(d.field.eSplit[]) == 2
size(d.field.ln2Split[]) == 2
size(d.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
d.mant == orig(d.mant)
d.mant[] == orig(d.mant[])
d.sign == orig(d.sign)
d.exp == orig(d.exp)
d.nans == orig(d.nans)
d.field == orig(d.field)
d.field.radixDigits == orig(d.field.radixDigits)
d.field.zero == orig(d.field.zero)
d.field.one == orig(d.field.one)
d.field.two == orig(d.field.two)
d.field.sqr2 == orig(d.field.sqr2)
d.field.sqr2Split == orig(d.field.sqr2Split)
d.field.sqr2Split.getClass().getName() == orig(d.field.sqr2Split.getClass().getName())
d.field.sqr2Split[] == orig(d.field.sqr2Split[])
d.field.sqr2Split[].mant == orig(d.field.sqr2Split[].mant)
d.field.sqr2Split[].sign == orig(d.field.sqr2Split[].sign)
d.field.sqr2Split[].exp == orig(d.field.sqr2Split[].exp)
d.field.sqr2Split[].nans == orig(d.field.sqr2Split[].nans)
d.field.sqr2Split[].field == orig(d.field.sqr2Split[].field)
d.field.sqr2Reciprocal == orig(d.field.sqr2Reciprocal)
d.field.sqr3 == orig(d.field.sqr3)
d.field.sqr3Reciprocal == orig(d.field.sqr3Reciprocal)
d.field.pi == orig(d.field.pi)
d.field.piSplit == orig(d.field.piSplit)
d.field.piSplit.getClass().getName() == orig(d.field.piSplit.getClass().getName())
d.field.piSplit[] == orig(d.field.piSplit[])
d.field.piSplit[].mant == orig(d.field.piSplit[].mant)
d.field.piSplit[].sign == orig(d.field.piSplit[].sign)
d.field.piSplit[].exp == orig(d.field.piSplit[].exp)
d.field.piSplit[].nans == orig(d.field.piSplit[].nans)
d.field.piSplit[].field == orig(d.field.piSplit[].field)
d.field.e == orig(d.field.e)
d.field.eSplit == orig(d.field.eSplit)
d.field.eSplit.getClass().getName() == orig(d.field.eSplit.getClass().getName())
d.field.eSplit[] == orig(d.field.eSplit[])
d.field.eSplit[].mant == orig(d.field.eSplit[].mant)
d.field.eSplit[].sign == orig(d.field.eSplit[].sign)
d.field.eSplit[].exp == orig(d.field.eSplit[].exp)
d.field.eSplit[].nans == orig(d.field.eSplit[].nans)
d.field.eSplit[].field == orig(d.field.eSplit[].field)
d.field.ln2 == orig(d.field.ln2)
d.field.ln2Split == orig(d.field.ln2Split)
d.field.ln2Split.getClass().getName() == orig(d.field.ln2Split.getClass().getName())
d.field.ln2Split[] == orig(d.field.ln2Split[])
d.field.ln2Split[].mant == orig(d.field.ln2Split[].mant)
d.field.ln2Split[].sign == orig(d.field.ln2Split[].sign)
d.field.ln2Split[].exp == orig(d.field.ln2Split[].exp)
d.field.ln2Split[].nans == orig(d.field.ln2Split[].nans)
d.field.ln2Split[].field == orig(d.field.ln2Split[].field)
d.field.ln5 == orig(d.field.ln5)
d.field.ln5Split == orig(d.field.ln5Split)
d.field.ln5Split.getClass().getName() == orig(d.field.ln5Split.getClass().getName())
d.field.ln5Split[] == orig(d.field.ln5Split[])
d.field.ln5Split[].mant == orig(d.field.ln5Split[].mant)
d.field.ln5Split[].sign == orig(d.field.ln5Split[].sign)
d.field.ln5Split[].exp == orig(d.field.ln5Split[].exp)
d.field.ln5Split[].nans == orig(d.field.ln5Split[].nans)
d.field.ln5Split[].field == orig(d.field.ln5Split[].field)
d.field.ln10 == orig(d.field.ln10)
d.field.rMode == orig(d.field.rMode)
d.field.ieeeFlags == orig(d.field.ieeeFlags)
this.nans == 0
d.mant[] elements >= 0
d.sign one of { -1, 1 }
d.nans == 0
d.field.radixDigits one of { 5, 50 }
d.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.sqr2Split[] elements != null
d.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.sqr2Split[].sign == [1, 1]
d.field.sqr2Split[].sign elements == 1
d.field.sqr2Split[].exp == [1, -1]
d.field.sqr2Split[].exp elements one of { -1, 1 }
d.field.sqr2Split[].exp elements != 0
d.field.sqr2Split[].exp sorted by >
d.field.sqr2Split[].nans == [0, 0]
d.field.sqr2Split[].nans elements == 0
d.field.sqr2Split[].field elements != null
d.field.sqr2Split[].field elements are equal
d.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.piSplit[] elements != null
d.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.piSplit[].mant sorted by <
d.field.piSplit[].sign == [1, 1]
d.field.piSplit[].sign elements == 1
d.field.piSplit[].exp == [1, -1]
d.field.piSplit[].exp elements one of { -1, 1 }
d.field.piSplit[].exp elements != 0
d.field.piSplit[].exp sorted by >
d.field.piSplit[].nans == [0, 0]
d.field.piSplit[].nans elements == 0
d.field.piSplit[].field elements != null
d.field.piSplit[].field elements are equal
d.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.eSplit[] elements != null
d.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.eSplit[].sign == [1, 1]
d.field.eSplit[].sign elements == 1
d.field.eSplit[].exp == [1, -1]
d.field.eSplit[].exp elements one of { -1, 1 }
d.field.eSplit[].exp elements != 0
d.field.eSplit[].exp sorted by >
d.field.eSplit[].nans == [0, 0]
d.field.eSplit[].nans elements == 0
d.field.eSplit[].field elements != null
d.field.eSplit[].field elements are equal
d.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.ln2Split[] elements != null
d.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.ln2Split[].mant sorted by >
d.field.ln2Split[].sign == [1, 1]
d.field.ln2Split[].sign elements == 1
d.field.ln2Split[].exp == [0, -2]
d.field.ln2Split[].exp elements one of { -2, 0 }
d.field.ln2Split[].exp sorted by >
d.field.ln2Split[].nans == [0, 0]
d.field.ln2Split[].nans elements == 0
d.field.ln2Split[].field elements != null
d.field.ln2Split[].field elements are equal
d.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.ln5Split[] elements != null
d.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.ln5Split[].mant sorted by >
d.field.ln5Split[].sign == [1, 1]
d.field.ln5Split[].sign elements == 1
d.field.ln5Split[].exp == [1, -1]
d.field.ln5Split[].exp elements one of { -1, 1 }
d.field.ln5Split[].exp elements != 0
d.field.ln5Split[].exp sorted by >
d.field.ln5Split[].nans == [0, 0]
d.field.ln5Split[].nans elements == 0
d.field.ln5Split[].field elements != null
d.field.ln5Split[].field elements are equal
d.field.rMode has only one value
d.field.ieeeFlags one of { 0, 16, 18 }
size(d.mant[]) one of { 5, 50 }
size(d.field.sqr2Split[]) == 2
size(d.field.piSplit[]) == 2
size(d.field.eSplit[]) == 2
size(d.field.ln2Split[]) == 2
size(d.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, byte, byte):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
field.radixDigits == 5
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
field.zero.mant[] == [0, 0, 0, 0, 0]
field.zero.mant[] elements == 0
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] == [0, 0, 0, 0, 1]
field.one.mant[] elements one of { 0, 1 }
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant[] == [0, 0, 0, 0, 2]
field.two.mant[] elements one of { 0, 2 }
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
field.sqr2.mant[] elements >= 1
field.sqr2.sign == 1
field.sqr2.exp == 1
field.sqr2.nans == 0
field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.sqr2Split[].sign == [1, 1]
field.sqr2Split[].sign elements == 1
field.sqr2Split[].exp == [1, -1]
field.sqr2Split[].exp elements one of { -1, 1 }
field.sqr2Split[].nans == [0, 0]
field.sqr2Split[].nans elements == 0
field.sqr2Split[].field elements are equal
field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
field.sqr2Reciprocal.sign == 1
field.sqr2Reciprocal.exp == 0
field.sqr2Reciprocal.nans == 0
field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
field.sqr3.mant[] elements >= 1
field.sqr3.sign == 1
field.sqr3.exp == 1
field.sqr3.nans == 0
field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
field.sqr3Reciprocal.sign == 1
field.sqr3Reciprocal.exp == 0
field.sqr3Reciprocal.nans == 0
field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
field.pi.sign == 1
field.pi.exp == 1
field.pi.nans == 0
field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.piSplit[].sign == [1, 1]
field.piSplit[].sign elements == 1
field.piSplit[].exp == [1, -1]
field.piSplit[].exp elements one of { -1, 1 }
field.piSplit[].nans == [0, 0]
field.piSplit[].nans elements == 0
field.piSplit[].field elements are equal
field.e.mant[] == [452, 8459, 8182, 7182, 2]
field.e.mant[] elements >= 2
field.e.sign == 1
field.e.exp == 1
field.e.nans == 0
field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.eSplit[].sign == [1, 1]
field.eSplit[].sign elements == 1
field.eSplit[].exp == [1, -1]
field.eSplit[].exp elements one of { -1, 1 }
field.eSplit[].nans == [0, 0]
field.eSplit[].nans elements == 0
field.eSplit[].field elements are equal
field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
field.ln2.sign == 1
field.ln2.exp == 0
field.ln2.nans == 0
field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln2Split[].sign == [1, 1]
field.ln2Split[].sign elements == 1
field.ln2Split[].exp == [0, -2]
field.ln2Split[].exp elements one of { -2, 0 }
field.ln2Split[].nans == [0, 0]
field.ln2Split[].nans elements == 0
field.ln2Split[].field elements are equal
field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
field.ln5.mant[] elements >= 1
field.ln5.sign == 1
field.ln5.exp == 1
field.ln5.nans == 0
field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln5Split[].sign == [1, 1]
field.ln5Split[].sign elements == 1
field.ln5Split[].exp == [1, -1]
field.ln5Split[].exp elements one of { -1, 1 }
field.ln5Split[].nans == [0, 0]
field.ln5Split[].nans elements == 0
field.ln5Split[].field elements are equal
field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
field.ln10.mant[] elements >= 2
field.ln10.sign == 1
field.ln10.exp == 1
field.ln10.nans == 0
field.rMode has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
field.ieeeFlags == 18
sign == 1
nans one of { 2, 3 }
size(field.zero.mant[]) == 5
size(field.one.mant[]) == 5
size(field.two.mant[]) == 5
size(field.sqr2.mant[]) == 5
size(field.sqr2Split[]) == 2
size(field.sqr2Reciprocal.mant[]) == 5
size(field.sqr3.mant[]) == 5
size(field.sqr3Reciprocal.mant[]) == 5
size(field.pi.mant[]) == 5
size(field.piSplit[]) == 2
size(field.e.mant[]) == 5
size(field.eSplit[]) == 2
size(field.ln2.mant[]) == 5
size(field.ln2Split[]) == 2
size(field.ln5.mant[]) == 5
size(field.ln5Split[]) == 2
size(field.ln10.mant[]) == 5
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, byte, byte):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
field.radixDigits == orig(field.radixDigits)
field.zero == orig(field.zero)
field.zero.mant == orig(field.zero.mant)
field.zero.mant[] == orig(field.zero.mant[])
field.zero.sign == orig(field.zero.sign)
field.zero.exp == orig(field.zero.exp)
field.zero.nans == orig(field.zero.nans)
field.zero.field == orig(field.zero.field)
field.one == orig(field.one)
field.one.mant == orig(field.one.mant)
field.one.mant[] == orig(field.one.mant[])
field.one.sign == orig(field.one.sign)
field.one.exp == orig(field.one.exp)
field.one.nans == orig(field.one.nans)
field.one.field == orig(field.one.field)
field.two == orig(field.two)
field.two.mant == orig(field.two.mant)
field.two.mant[] == orig(field.two.mant[])
field.two.sign == orig(field.two.sign)
field.two.exp == orig(field.two.exp)
field.two.nans == orig(field.two.nans)
field.two.field == orig(field.two.field)
field.sqr2 == orig(field.sqr2)
field.sqr2.mant == orig(field.sqr2.mant)
field.sqr2.mant[] == orig(field.sqr2.mant[])
field.sqr2.sign == orig(field.sqr2.sign)
field.sqr2.exp == orig(field.sqr2.exp)
field.sqr2.nans == orig(field.sqr2.nans)
field.sqr2.field == orig(field.sqr2.field)
field.sqr2Split == orig(field.sqr2Split)
field.sqr2Split.getClass().getName() == orig(field.sqr2Split.getClass().getName())
field.sqr2Split[] == orig(field.sqr2Split[])
field.sqr2Split[].mant == orig(field.sqr2Split[].mant)
field.sqr2Split[].sign == orig(field.sqr2Split[].sign)
field.sqr2Split[].exp == orig(field.sqr2Split[].exp)
field.sqr2Split[].nans == orig(field.sqr2Split[].nans)
field.sqr2Split[].field == orig(field.sqr2Split[].field)
field.sqr2Reciprocal == orig(field.sqr2Reciprocal)
field.sqr2Reciprocal.mant == orig(field.sqr2Reciprocal.mant)
field.sqr2Reciprocal.mant[] == orig(field.sqr2Reciprocal.mant[])
field.sqr2Reciprocal.sign == orig(field.sqr2Reciprocal.sign)
field.sqr2Reciprocal.exp == orig(field.sqr2Reciprocal.exp)
field.sqr2Reciprocal.nans == orig(field.sqr2Reciprocal.nans)
field.sqr2Reciprocal.field == orig(field.sqr2Reciprocal.field)
field.sqr3 == orig(field.sqr3)
field.sqr3.mant == orig(field.sqr3.mant)
field.sqr3.mant[] == orig(field.sqr3.mant[])
field.sqr3.sign == orig(field.sqr3.sign)
field.sqr3.exp == orig(field.sqr3.exp)
field.sqr3.nans == orig(field.sqr3.nans)
field.sqr3.field == orig(field.sqr3.field)
field.sqr3Reciprocal == orig(field.sqr3Reciprocal)
field.sqr3Reciprocal.mant == orig(field.sqr3Reciprocal.mant)
field.sqr3Reciprocal.mant[] == orig(field.sqr3Reciprocal.mant[])
field.sqr3Reciprocal.sign == orig(field.sqr3Reciprocal.sign)
field.sqr3Reciprocal.exp == orig(field.sqr3Reciprocal.exp)
field.sqr3Reciprocal.nans == orig(field.sqr3Reciprocal.nans)
field.sqr3Reciprocal.field == orig(field.sqr3Reciprocal.field)
field.pi == orig(field.pi)
field.pi.mant == orig(field.pi.mant)
field.pi.mant[] == orig(field.pi.mant[])
field.pi.sign == orig(field.pi.sign)
field.pi.exp == orig(field.pi.exp)
field.pi.nans == orig(field.pi.nans)
field.pi.field == orig(field.pi.field)
field.piSplit == orig(field.piSplit)
field.piSplit.getClass().getName() == orig(field.piSplit.getClass().getName())
field.piSplit[] == orig(field.piSplit[])
field.piSplit[].mant == orig(field.piSplit[].mant)
field.piSplit[].sign == orig(field.piSplit[].sign)
field.piSplit[].exp == orig(field.piSplit[].exp)
field.piSplit[].nans == orig(field.piSplit[].nans)
field.piSplit[].field == orig(field.piSplit[].field)
field.e == orig(field.e)
field.e.mant == orig(field.e.mant)
field.e.mant[] == orig(field.e.mant[])
field.e.sign == orig(field.e.sign)
field.e.exp == orig(field.e.exp)
field.e.nans == orig(field.e.nans)
field.e.field == orig(field.e.field)
field.eSplit == orig(field.eSplit)
field.eSplit.getClass().getName() == orig(field.eSplit.getClass().getName())
field.eSplit[] == orig(field.eSplit[])
field.eSplit[].mant == orig(field.eSplit[].mant)
field.eSplit[].sign == orig(field.eSplit[].sign)
field.eSplit[].exp == orig(field.eSplit[].exp)
field.eSplit[].nans == orig(field.eSplit[].nans)
field.eSplit[].field == orig(field.eSplit[].field)
field.ln2 == orig(field.ln2)
field.ln2.mant == orig(field.ln2.mant)
field.ln2.mant[] == orig(field.ln2.mant[])
field.ln2.sign == orig(field.ln2.sign)
field.ln2.exp == orig(field.ln2.exp)
field.ln2.nans == orig(field.ln2.nans)
field.ln2.field == orig(field.ln2.field)
field.ln2Split == orig(field.ln2Split)
field.ln2Split.getClass().getName() == orig(field.ln2Split.getClass().getName())
field.ln2Split[] == orig(field.ln2Split[])
field.ln2Split[].mant == orig(field.ln2Split[].mant)
field.ln2Split[].sign == orig(field.ln2Split[].sign)
field.ln2Split[].exp == orig(field.ln2Split[].exp)
field.ln2Split[].nans == orig(field.ln2Split[].nans)
field.ln2Split[].field == orig(field.ln2Split[].field)
field.ln5 == orig(field.ln5)
field.ln5.mant == orig(field.ln5.mant)
field.ln5.mant[] == orig(field.ln5.mant[])
field.ln5.sign == orig(field.ln5.sign)
field.ln5.exp == orig(field.ln5.exp)
field.ln5.nans == orig(field.ln5.nans)
field.ln5.field == orig(field.ln5.field)
field.ln5Split == orig(field.ln5Split)
field.ln5Split.getClass().getName() == orig(field.ln5Split.getClass().getName())
field.ln5Split[] == orig(field.ln5Split[])
field.ln5Split[].mant == orig(field.ln5Split[].mant)
field.ln5Split[].sign == orig(field.ln5Split[].sign)
field.ln5Split[].exp == orig(field.ln5Split[].exp)
field.ln5Split[].nans == orig(field.ln5Split[].nans)
field.ln5Split[].field == orig(field.ln5Split[].field)
field.ln10 == orig(field.ln10)
field.ln10.mant == orig(field.ln10.mant)
field.ln10.mant[] == orig(field.ln10.mant[])
field.ln10.sign == orig(field.ln10.sign)
field.ln10.exp == orig(field.ln10.exp)
field.ln10.nans == orig(field.ln10.nans)
field.ln10.field == orig(field.ln10.field)
field.rMode == orig(field.rMode)
field.ieeeFlags == orig(field.ieeeFlags)
this.mant[] == [0, 0, 0, 0, 0]
this.mant[] elements == 0
this.sign == 1
this.exp == 0
this.nans one of { 2, 3 }
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 18
field.radixDigits == 5
field.zero.mant[] == [0, 0, 0, 0, 0]
field.zero.mant[] elements == 0
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] == [0, 0, 0, 0, 1]
field.one.mant[] elements one of { 0, 1 }
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant[] == [0, 0, 0, 0, 2]
field.two.mant[] elements one of { 0, 2 }
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
field.sqr2.mant[] elements >= 1
field.sqr2.sign == 1
field.sqr2.exp == 1
field.sqr2.nans == 0
field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.sqr2Split[].sign == [1, 1]
field.sqr2Split[].sign elements == 1
field.sqr2Split[].exp == [1, -1]
field.sqr2Split[].exp elements one of { -1, 1 }
field.sqr2Split[].nans == [0, 0]
field.sqr2Split[].nans elements == 0
field.sqr2Split[].field elements are equal
field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
field.sqr2Reciprocal.sign == 1
field.sqr2Reciprocal.exp == 0
field.sqr2Reciprocal.nans == 0
field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
field.sqr3.mant[] elements >= 1
field.sqr3.sign == 1
field.sqr3.exp == 1
field.sqr3.nans == 0
field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
field.sqr3Reciprocal.sign == 1
field.sqr3Reciprocal.exp == 0
field.sqr3Reciprocal.nans == 0
field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
field.pi.sign == 1
field.pi.exp == 1
field.pi.nans == 0
field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.piSplit[].sign == [1, 1]
field.piSplit[].sign elements == 1
field.piSplit[].exp == [1, -1]
field.piSplit[].exp elements one of { -1, 1 }
field.piSplit[].nans == [0, 0]
field.piSplit[].nans elements == 0
field.piSplit[].field elements are equal
field.e.mant[] == [452, 8459, 8182, 7182, 2]
field.e.mant[] elements >= 2
field.e.sign == 1
field.e.exp == 1
field.e.nans == 0
field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.eSplit[].sign == [1, 1]
field.eSplit[].sign elements == 1
field.eSplit[].exp == [1, -1]
field.eSplit[].exp elements one of { -1, 1 }
field.eSplit[].nans == [0, 0]
field.eSplit[].nans elements == 0
field.eSplit[].field elements are equal
field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
field.ln2.sign == 1
field.ln2.exp == 0
field.ln2.nans == 0
field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln2Split[].sign == [1, 1]
field.ln2Split[].sign elements == 1
field.ln2Split[].exp == [0, -2]
field.ln2Split[].exp elements one of { -2, 0 }
field.ln2Split[].nans == [0, 0]
field.ln2Split[].nans elements == 0
field.ln2Split[].field elements are equal
field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
field.ln5.mant[] elements >= 1
field.ln5.sign == 1
field.ln5.exp == 1
field.ln5.nans == 0
field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln5Split[].sign == [1, 1]
field.ln5Split[].sign elements == 1
field.ln5Split[].exp == [1, -1]
field.ln5Split[].exp elements one of { -1, 1 }
field.ln5Split[].nans == [0, 0]
field.ln5Split[].nans elements == 0
field.ln5Split[].field elements are equal
field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
field.ln10.mant[] elements >= 2
field.ln10.sign == 1
field.ln10.exp == 1
field.ln10.nans == 0
field.rMode has only one value
field.ieeeFlags == 18
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(field.zero.mant[]) == 5
size(field.one.mant[]) == 5
size(field.two.mant[]) == 5
size(field.sqr2.mant[]) == 5
size(field.sqr2Split[]) == 2
size(field.sqr2Reciprocal.mant[]) == 5
size(field.sqr3.mant[]) == 5
size(field.sqr3Reciprocal.mant[]) == 5
size(field.pi.mant[]) == 5
size(field.piSplit[]) == 2
size(field.e.mant[]) == 5
size(field.eSplit[]) == 2
size(field.ln2.mant[]) == 5
size(field.ln2Split[]) == 2
size(field.ln5.mant[]) == 5
size(field.ln5Split[]) == 2
size(field.ln10.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, double):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
field.radixDigits == 5
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
field.zero.mant[] == [0, 0, 0, 0, 0]
field.zero.mant[] elements == 0
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] == [0, 0, 0, 0, 1]
field.one.mant[] elements one of { 0, 1 }
field.one.mant[] sorted by <=
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant[] == [0, 0, 0, 0, 2]
field.two.mant[] elements one of { 0, 2 }
field.two.mant[] sorted by <=
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
field.sqr2.mant[] elements >= 1
field.sqr2.sign == 1
field.sqr2.exp == 1
field.sqr2.nans == 0
field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.sqr2Split[] elements != null
field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.sqr2Split[].sign == [1, 1]
field.sqr2Split[].sign elements == 1
field.sqr2Split[].exp == [1, -1]
field.sqr2Split[].exp elements one of { -1, 1 }
field.sqr2Split[].exp elements != 0
field.sqr2Split[].exp sorted by >
field.sqr2Split[].nans == [0, 0]
field.sqr2Split[].nans elements == 0
field.sqr2Split[].field elements != null
field.sqr2Split[].field elements are equal
field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
field.sqr2Reciprocal.sign == 1
field.sqr2Reciprocal.exp == 0
field.sqr2Reciprocal.nans == 0
field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
field.sqr3.mant[] elements >= 1
field.sqr3.sign == 1
field.sqr3.exp == 1
field.sqr3.nans == 0
field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
field.sqr3Reciprocal.sign == 1
field.sqr3Reciprocal.exp == 0
field.sqr3Reciprocal.nans == 0
field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
field.pi.sign == 1
field.pi.exp == 1
field.pi.nans == 0
field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.piSplit[] elements != null
field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.piSplit[].mant sorted by <
field.piSplit[].sign == [1, 1]
field.piSplit[].sign elements == 1
field.piSplit[].exp == [1, -1]
field.piSplit[].exp elements one of { -1, 1 }
field.piSplit[].exp elements != 0
field.piSplit[].exp sorted by >
field.piSplit[].nans == [0, 0]
field.piSplit[].nans elements == 0
field.piSplit[].field elements != null
field.piSplit[].field elements are equal
field.e.mant[] == [452, 8459, 8182, 7182, 2]
field.e.mant[] elements >= 2
field.e.sign == 1
field.e.exp == 1
field.e.nans == 0
field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.eSplit[] elements != null
field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.eSplit[].sign == [1, 1]
field.eSplit[].sign elements == 1
field.eSplit[].exp == [1, -1]
field.eSplit[].exp elements one of { -1, 1 }
field.eSplit[].exp elements != 0
field.eSplit[].exp sorted by >
field.eSplit[].nans == [0, 0]
field.eSplit[].nans elements == 0
field.eSplit[].field elements != null
field.eSplit[].field elements are equal
field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
field.ln2.sign == 1
field.ln2.exp == 0
field.ln2.nans == 0
field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln2Split[] elements != null
field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln2Split[].mant sorted by >
field.ln2Split[].sign == [1, 1]
field.ln2Split[].sign elements == 1
field.ln2Split[].exp == [0, -2]
field.ln2Split[].exp elements one of { -2, 0 }
field.ln2Split[].exp sorted by >
field.ln2Split[].nans == [0, 0]
field.ln2Split[].nans elements == 0
field.ln2Split[].field elements != null
field.ln2Split[].field elements are equal
field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
field.ln5.mant[] elements >= 1
field.ln5.sign == 1
field.ln5.exp == 1
field.ln5.nans == 0
field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln5Split[] elements != null
field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln5Split[].mant sorted by >
field.ln5Split[].sign == [1, 1]
field.ln5Split[].sign elements == 1
field.ln5Split[].exp == [1, -1]
field.ln5Split[].exp elements one of { -1, 1 }
field.ln5Split[].exp elements != 0
field.ln5Split[].exp sorted by >
field.ln5Split[].nans == [0, 0]
field.ln5Split[].nans elements == 0
field.ln5Split[].field elements != null
field.ln5Split[].field elements are equal
field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
field.ln10.mant[] elements >= 2
field.ln10.sign == 1
field.ln10.exp == 1
field.ln10.nans == 0
field.rMode has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] elements != null
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
field.ieeeFlags one of { 0, 16 }
size(field.zero.mant[]) == 5
size(field.one.mant[]) == 5
size(field.two.mant[]) == 5
size(field.sqr2.mant[]) == 5
size(field.sqr2Split[]) == 2
size(field.sqr2Reciprocal.mant[]) == 5
size(field.sqr3.mant[]) == 5
size(field.sqr3Reciprocal.mant[]) == 5
size(field.pi.mant[]) == 5
size(field.piSplit[]) == 2
size(field.e.mant[]) == 5
size(field.eSplit[]) == 2
size(field.ln2.mant[]) == 5
size(field.ln2Split[]) == 2
size(field.ln5.mant[]) == 5
size(field.ln5Split[]) == 2
size(field.ln10.mant[]) == 5
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, double):::EXIT278
field.ieeeFlags == orig(field.ieeeFlags)
this.mant[] == [0, 0, 0, 0, 0]
this.mant[] elements == 0
this.exp == 0
orig(x) == 0.0
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, double):::EXIT319
this.field.ieeeFlags == 16
field.ieeeFlags == 16
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, double):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
field.radixDigits == orig(field.radixDigits)
field.zero == orig(field.zero)
field.zero.mant == orig(field.zero.mant)
field.zero.mant[] == orig(field.zero.mant[])
field.zero.sign == orig(field.zero.sign)
field.zero.exp == orig(field.zero.exp)
field.zero.nans == orig(field.zero.nans)
field.zero.field == orig(field.zero.field)
field.one == orig(field.one)
field.one.mant == orig(field.one.mant)
field.one.mant[] == orig(field.one.mant[])
field.one.sign == orig(field.one.sign)
field.one.exp == orig(field.one.exp)
field.one.nans == orig(field.one.nans)
field.one.field == orig(field.one.field)
field.two == orig(field.two)
field.two.mant == orig(field.two.mant)
field.two.mant[] == orig(field.two.mant[])
field.two.sign == orig(field.two.sign)
field.two.exp == orig(field.two.exp)
field.two.nans == orig(field.two.nans)
field.two.field == orig(field.two.field)
field.sqr2 == orig(field.sqr2)
field.sqr2.mant == orig(field.sqr2.mant)
field.sqr2.mant[] == orig(field.sqr2.mant[])
field.sqr2.sign == orig(field.sqr2.sign)
field.sqr2.exp == orig(field.sqr2.exp)
field.sqr2.nans == orig(field.sqr2.nans)
field.sqr2.field == orig(field.sqr2.field)
field.sqr2Split == orig(field.sqr2Split)
field.sqr2Split.getClass().getName() == orig(field.sqr2Split.getClass().getName())
field.sqr2Split[] == orig(field.sqr2Split[])
field.sqr2Split[].mant == orig(field.sqr2Split[].mant)
field.sqr2Split[].sign == orig(field.sqr2Split[].sign)
field.sqr2Split[].exp == orig(field.sqr2Split[].exp)
field.sqr2Split[].nans == orig(field.sqr2Split[].nans)
field.sqr2Split[].field == orig(field.sqr2Split[].field)
field.sqr2Reciprocal == orig(field.sqr2Reciprocal)
field.sqr2Reciprocal.mant == orig(field.sqr2Reciprocal.mant)
field.sqr2Reciprocal.mant[] == orig(field.sqr2Reciprocal.mant[])
field.sqr2Reciprocal.sign == orig(field.sqr2Reciprocal.sign)
field.sqr2Reciprocal.exp == orig(field.sqr2Reciprocal.exp)
field.sqr2Reciprocal.nans == orig(field.sqr2Reciprocal.nans)
field.sqr2Reciprocal.field == orig(field.sqr2Reciprocal.field)
field.sqr3 == orig(field.sqr3)
field.sqr3.mant == orig(field.sqr3.mant)
field.sqr3.mant[] == orig(field.sqr3.mant[])
field.sqr3.sign == orig(field.sqr3.sign)
field.sqr3.exp == orig(field.sqr3.exp)
field.sqr3.nans == orig(field.sqr3.nans)
field.sqr3.field == orig(field.sqr3.field)
field.sqr3Reciprocal == orig(field.sqr3Reciprocal)
field.sqr3Reciprocal.mant == orig(field.sqr3Reciprocal.mant)
field.sqr3Reciprocal.mant[] == orig(field.sqr3Reciprocal.mant[])
field.sqr3Reciprocal.sign == orig(field.sqr3Reciprocal.sign)
field.sqr3Reciprocal.exp == orig(field.sqr3Reciprocal.exp)
field.sqr3Reciprocal.nans == orig(field.sqr3Reciprocal.nans)
field.sqr3Reciprocal.field == orig(field.sqr3Reciprocal.field)
field.pi == orig(field.pi)
field.pi.mant == orig(field.pi.mant)
field.pi.mant[] == orig(field.pi.mant[])
field.pi.sign == orig(field.pi.sign)
field.pi.exp == orig(field.pi.exp)
field.pi.nans == orig(field.pi.nans)
field.pi.field == orig(field.pi.field)
field.piSplit == orig(field.piSplit)
field.piSplit.getClass().getName() == orig(field.piSplit.getClass().getName())
field.piSplit[] == orig(field.piSplit[])
field.piSplit[].mant == orig(field.piSplit[].mant)
field.piSplit[].sign == orig(field.piSplit[].sign)
field.piSplit[].exp == orig(field.piSplit[].exp)
field.piSplit[].nans == orig(field.piSplit[].nans)
field.piSplit[].field == orig(field.piSplit[].field)
field.e == orig(field.e)
field.e.mant == orig(field.e.mant)
field.e.mant[] == orig(field.e.mant[])
field.e.sign == orig(field.e.sign)
field.e.exp == orig(field.e.exp)
field.e.nans == orig(field.e.nans)
field.e.field == orig(field.e.field)
field.eSplit == orig(field.eSplit)
field.eSplit.getClass().getName() == orig(field.eSplit.getClass().getName())
field.eSplit[] == orig(field.eSplit[])
field.eSplit[].mant == orig(field.eSplit[].mant)
field.eSplit[].sign == orig(field.eSplit[].sign)
field.eSplit[].exp == orig(field.eSplit[].exp)
field.eSplit[].nans == orig(field.eSplit[].nans)
field.eSplit[].field == orig(field.eSplit[].field)
field.ln2 == orig(field.ln2)
field.ln2.mant == orig(field.ln2.mant)
field.ln2.mant[] == orig(field.ln2.mant[])
field.ln2.sign == orig(field.ln2.sign)
field.ln2.exp == orig(field.ln2.exp)
field.ln2.nans == orig(field.ln2.nans)
field.ln2.field == orig(field.ln2.field)
field.ln2Split == orig(field.ln2Split)
field.ln2Split.getClass().getName() == orig(field.ln2Split.getClass().getName())
field.ln2Split[] == orig(field.ln2Split[])
field.ln2Split[].mant == orig(field.ln2Split[].mant)
field.ln2Split[].sign == orig(field.ln2Split[].sign)
field.ln2Split[].exp == orig(field.ln2Split[].exp)
field.ln2Split[].nans == orig(field.ln2Split[].nans)
field.ln2Split[].field == orig(field.ln2Split[].field)
field.ln5 == orig(field.ln5)
field.ln5.mant == orig(field.ln5.mant)
field.ln5.mant[] == orig(field.ln5.mant[])
field.ln5.sign == orig(field.ln5.sign)
field.ln5.exp == orig(field.ln5.exp)
field.ln5.nans == orig(field.ln5.nans)
field.ln5.field == orig(field.ln5.field)
field.ln5Split == orig(field.ln5Split)
field.ln5Split.getClass().getName() == orig(field.ln5Split.getClass().getName())
field.ln5Split[] == orig(field.ln5Split[])
field.ln5Split[].mant == orig(field.ln5Split[].mant)
field.ln5Split[].sign == orig(field.ln5Split[].sign)
field.ln5Split[].exp == orig(field.ln5Split[].exp)
field.ln5Split[].nans == orig(field.ln5Split[].nans)
field.ln5Split[].field == orig(field.ln5Split[].field)
field.ln10 == orig(field.ln10)
field.ln10.mant == orig(field.ln10.mant)
field.ln10.mant[] == orig(field.ln10.mant[])
field.ln10.sign == orig(field.ln10.sign)
field.ln10.exp == orig(field.ln10.exp)
field.ln10.nans == orig(field.ln10.nans)
field.ln10.field == orig(field.ln10.field)
field.rMode == orig(field.rMode)
this.sign == 1
this.exp one of { -1, 0 }
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags one of { 0, 16 }
field.radixDigits == 5
field.zero.mant[] == [0, 0, 0, 0, 0]
field.zero.mant[] elements == 0
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] == [0, 0, 0, 0, 1]
field.one.mant[] elements one of { 0, 1 }
field.one.mant[] sorted by <=
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant[] == [0, 0, 0, 0, 2]
field.two.mant[] elements one of { 0, 2 }
field.two.mant[] sorted by <=
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
field.sqr2.mant[] elements >= 1
field.sqr2.sign == 1
field.sqr2.exp == 1
field.sqr2.nans == 0
field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.sqr2Split[] elements != null
field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.sqr2Split[].sign == [1, 1]
field.sqr2Split[].sign elements == 1
field.sqr2Split[].exp == [1, -1]
field.sqr2Split[].exp elements one of { -1, 1 }
field.sqr2Split[].exp elements != 0
field.sqr2Split[].exp sorted by >
field.sqr2Split[].nans == [0, 0]
field.sqr2Split[].nans elements == 0
field.sqr2Split[].field elements != null
field.sqr2Split[].field elements are equal
field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
field.sqr2Reciprocal.sign == 1
field.sqr2Reciprocal.exp == 0
field.sqr2Reciprocal.nans == 0
field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
field.sqr3.mant[] elements >= 1
field.sqr3.sign == 1
field.sqr3.exp == 1
field.sqr3.nans == 0
field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
field.sqr3Reciprocal.sign == 1
field.sqr3Reciprocal.exp == 0
field.sqr3Reciprocal.nans == 0
field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
field.pi.sign == 1
field.pi.exp == 1
field.pi.nans == 0
field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.piSplit[] elements != null
field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.piSplit[].mant sorted by <
field.piSplit[].sign == [1, 1]
field.piSplit[].sign elements == 1
field.piSplit[].exp == [1, -1]
field.piSplit[].exp elements one of { -1, 1 }
field.piSplit[].exp elements != 0
field.piSplit[].exp sorted by >
field.piSplit[].nans == [0, 0]
field.piSplit[].nans elements == 0
field.piSplit[].field elements != null
field.piSplit[].field elements are equal
field.e.mant[] == [452, 8459, 8182, 7182, 2]
field.e.mant[] elements >= 2
field.e.sign == 1
field.e.exp == 1
field.e.nans == 0
field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.eSplit[] elements != null
field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.eSplit[].sign == [1, 1]
field.eSplit[].sign elements == 1
field.eSplit[].exp == [1, -1]
field.eSplit[].exp elements one of { -1, 1 }
field.eSplit[].exp elements != 0
field.eSplit[].exp sorted by >
field.eSplit[].nans == [0, 0]
field.eSplit[].nans elements == 0
field.eSplit[].field elements != null
field.eSplit[].field elements are equal
field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
field.ln2.sign == 1
field.ln2.exp == 0
field.ln2.nans == 0
field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln2Split[] elements != null
field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln2Split[].mant sorted by >
field.ln2Split[].sign == [1, 1]
field.ln2Split[].sign elements == 1
field.ln2Split[].exp == [0, -2]
field.ln2Split[].exp elements one of { -2, 0 }
field.ln2Split[].exp sorted by >
field.ln2Split[].nans == [0, 0]
field.ln2Split[].nans elements == 0
field.ln2Split[].field elements != null
field.ln2Split[].field elements are equal
field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
field.ln5.mant[] elements >= 1
field.ln5.sign == 1
field.ln5.exp == 1
field.ln5.nans == 0
field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln5Split[] elements != null
field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln5Split[].mant sorted by >
field.ln5Split[].sign == [1, 1]
field.ln5Split[].sign elements == 1
field.ln5Split[].exp == [1, -1]
field.ln5Split[].exp elements one of { -1, 1 }
field.ln5Split[].exp elements != 0
field.ln5Split[].exp sorted by >
field.ln5Split[].nans == [0, 0]
field.ln5Split[].nans elements == 0
field.ln5Split[].field elements != null
field.ln5Split[].field elements are equal
field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
field.ln10.mant[] elements >= 2
field.ln10.sign == 1
field.ln10.exp == 1
field.ln10.nans == 0
field.rMode has only one value
field.ieeeFlags one of { 0, 16 }
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(field.zero.mant[]) == 5
size(field.one.mant[]) == 5
size(field.two.mant[]) == 5
size(field.sqr2.mant[]) == 5
size(field.sqr2Split[]) == 2
size(field.sqr2Reciprocal.mant[]) == 5
size(field.sqr3.mant[]) == 5
size(field.sqr3Reciprocal.mant[]) == 5
size(field.pi.mant[]) == 5
size(field.piSplit[]) == 2
size(field.e.mant[]) == 5
size(field.eSplit[]) == 2
size(field.ln2.mant[]) == 5
size(field.ln2Split[]) == 2
size(field.ln5.mant[]) == 5
size(field.ln5Split[]) == 2
size(field.ln10.mant[]) == 5
field.ieeeFlags >= orig(field.ieeeFlags)
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, int):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
field.radixDigits one of { 5, 50 }
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
field.zero.mant[] elements == 0
field.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] elements one of { 0, 1 }
field.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] }
field.one.mant[] sorted by <=
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant has only one value
field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
field.two.mant[] elements one of { 0, 2 }
field.two.mant[] sorted by <=
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.two.field has only one value
field.sqr2 == null
field.sqr2Split == null
field.sqr2Reciprocal == null
field.sqr3 == null
field.sqr3Reciprocal == null
field.pi == null
field.piSplit == null
field.e == null
field.eSplit == null
field.ln2 == null
field.ln2Split == null
field.ln5 == null
field.ln5Split == null
field.ln10 == null
field.rMode has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] elements != null
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
field.ieeeFlags one of { 0, 16 }
x >= -1
size(field.zero.mant[]) one of { 5, 50 }
size(field.one.mant[]) one of { 5, 50 }
size(field.two.mant[]) == 50
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, int):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
field.radixDigits == orig(field.radixDigits)
field.zero == orig(field.zero)
field.zero.mant == orig(field.zero.mant)
field.zero.mant[] == orig(field.zero.mant[])
field.zero.sign == orig(field.zero.sign)
field.zero.exp == orig(field.zero.exp)
field.zero.nans == orig(field.zero.nans)
field.zero.field == orig(field.zero.field)
field.one == orig(field.one)
field.one.mant == orig(field.one.mant)
field.one.mant[] == orig(field.one.mant[])
field.one.sign == orig(field.one.sign)
field.one.exp == orig(field.one.exp)
field.one.nans == orig(field.one.nans)
field.one.field == orig(field.one.field)
field.two == orig(field.two)
field.two.mant == orig(field.two.mant)
field.two.mant[] == orig(field.two.mant[])
field.two.sign == orig(field.two.sign)
field.two.exp == orig(field.two.exp)
field.two.nans == orig(field.two.nans)
field.two.field == orig(field.two.field)
field.sqr2 == orig(field.sqr2)
field.sqr2Split == orig(field.sqr2Split)
field.sqr2Reciprocal == orig(field.sqr2Reciprocal)
field.sqr3 == orig(field.sqr3)
field.sqr3Reciprocal == orig(field.sqr3Reciprocal)
field.pi == orig(field.pi)
field.piSplit == orig(field.piSplit)
field.e == orig(field.e)
field.eSplit == orig(field.eSplit)
field.ln2 == orig(field.ln2)
field.ln2Split == orig(field.ln2Split)
field.ln5 == orig(field.ln5)
field.ln5Split == orig(field.ln5Split)
field.ln10 == orig(field.ln10)
field.rMode == orig(field.rMode)
field.ieeeFlags == orig(field.ieeeFlags)
this.mant[] sorted by <=
this.exp one of { 0, 1 }
this.nans == 0
this.field.two.mant has only one value
this.field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
this.field.two.field has only one value
this.field.sqr2 == null
this.field.sqr2Split == null
this.field.sqr2Reciprocal == null
this.field.sqr3 == null
this.field.sqr3Reciprocal == null
this.field.pi == null
this.field.piSplit == null
this.field.e == null
this.field.eSplit == null
this.field.ln2 == null
this.field.ln2Split == null
this.field.ln5 == null
this.field.ln5Split == null
this.field.ln10 == null
this.field.ieeeFlags one of { 0, 16 }
field.radixDigits one of { 5, 50 }
field.zero.mant[] elements == 0
field.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] elements one of { 0, 1 }
field.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] }
field.one.mant[] sorted by <=
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant has only one value
field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
field.two.mant[] elements one of { 0, 2 }
field.two.mant[] sorted by <=
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.two.field has only one value
field.sqr2 == null
field.sqr2Split == null
field.sqr2Reciprocal == null
field.sqr3 == null
field.sqr3Reciprocal == null
field.pi == null
field.piSplit == null
field.e == null
field.eSplit == null
field.ln2 == null
field.ln2Split == null
field.ln5 == null
field.ln5Split == null
field.ln10 == null
field.rMode has only one value
field.ieeeFlags one of { 0, 16 }
size(this.field.two.mant[]) == 50
size(field.zero.mant[]) one of { 5, 50 }
size(field.one.mant[]) one of { 5, 50 }
size(field.two.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, java.lang.String):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
field.radixDigits == 5
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
field.zero.mant[] == [0, 0, 0, 0, 0]
field.zero.mant[] elements == 0
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] == [0, 0, 0, 0, 1]
field.one.mant[] elements one of { 0, 1 }
field.one.mant[] sorted by <=
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant[] == [0, 0, 0, 0, 2]
field.two.mant[] elements one of { 0, 2 }
field.two.mant[] sorted by <=
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
field.sqr2.mant[] elements >= 1
field.sqr2.sign == 1
field.sqr2.exp == 1
field.sqr2.nans == 0
field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.sqr2Split[] elements != null
field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.sqr2Split[].sign == [1, 1]
field.sqr2Split[].sign elements == 1
field.sqr2Split[].exp == [1, -1]
field.sqr2Split[].exp elements one of { -1, 1 }
field.sqr2Split[].exp elements != 0
field.sqr2Split[].exp sorted by >
field.sqr2Split[].nans == [0, 0]
field.sqr2Split[].nans elements == 0
field.sqr2Split[].field elements != null
field.sqr2Split[].field elements are equal
field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
field.sqr2Reciprocal.sign == 1
field.sqr2Reciprocal.exp == 0
field.sqr2Reciprocal.nans == 0
field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
field.sqr3.mant[] elements >= 1
field.sqr3.sign == 1
field.sqr3.exp == 1
field.sqr3.nans == 0
field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
field.sqr3Reciprocal.sign == 1
field.sqr3Reciprocal.exp == 0
field.sqr3Reciprocal.nans == 0
field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
field.pi.sign == 1
field.pi.exp == 1
field.pi.nans == 0
field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.piSplit[] elements != null
field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.piSplit[].mant sorted by <
field.piSplit[].sign == [1, 1]
field.piSplit[].sign elements == 1
field.piSplit[].exp == [1, -1]
field.piSplit[].exp elements one of { -1, 1 }
field.piSplit[].exp elements != 0
field.piSplit[].exp sorted by >
field.piSplit[].nans == [0, 0]
field.piSplit[].nans elements == 0
field.piSplit[].field elements != null
field.piSplit[].field elements are equal
field.e.mant[] == [452, 8459, 8182, 7182, 2]
field.e.mant[] elements >= 2
field.e.sign == 1
field.e.exp == 1
field.e.nans == 0
field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.eSplit[] elements != null
field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.eSplit[].sign == [1, 1]
field.eSplit[].sign elements == 1
field.eSplit[].exp == [1, -1]
field.eSplit[].exp elements one of { -1, 1 }
field.eSplit[].exp elements != 0
field.eSplit[].exp sorted by >
field.eSplit[].nans == [0, 0]
field.eSplit[].nans elements == 0
field.eSplit[].field elements != null
field.eSplit[].field elements are equal
field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
field.ln2.sign == 1
field.ln2.exp == 0
field.ln2.nans == 0
field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln2Split[] elements != null
field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln2Split[].mant sorted by >
field.ln2Split[].sign == [1, 1]
field.ln2Split[].sign elements == 1
field.ln2Split[].exp == [0, -2]
field.ln2Split[].exp elements one of { -2, 0 }
field.ln2Split[].exp sorted by >
field.ln2Split[].nans == [0, 0]
field.ln2Split[].nans elements == 0
field.ln2Split[].field elements != null
field.ln2Split[].field elements are equal
field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
field.ln5.mant[] elements >= 1
field.ln5.sign == 1
field.ln5.exp == 1
field.ln5.nans == 0
field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln5Split[] elements != null
field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln5Split[].mant sorted by >
field.ln5Split[].sign == [1, 1]
field.ln5Split[].sign elements == 1
field.ln5Split[].exp == [1, -1]
field.ln5Split[].exp elements one of { -1, 1 }
field.ln5Split[].exp elements != 0
field.ln5Split[].exp sorted by >
field.ln5Split[].nans == [0, 0]
field.ln5Split[].nans elements == 0
field.ln5Split[].field elements != null
field.ln5Split[].field elements are equal
field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
field.ln10.mant[] elements >= 2
field.ln10.sign == 1
field.ln10.exp == 1
field.ln10.nans == 0
field.rMode has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] elements != null
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
field.ieeeFlags one of { 0, 16, 18 }
size(field.zero.mant[]) == 5
size(field.one.mant[]) == 5
size(field.two.mant[]) == 5
size(field.sqr2.mant[]) == 5
size(field.sqr2Split[]) == 2
size(field.sqr2Reciprocal.mant[]) == 5
size(field.sqr3.mant[]) == 5
size(field.sqr3Reciprocal.mant[]) == 5
size(field.pi.mant[]) == 5
size(field.piSplit[]) == 2
size(field.e.mant[]) == 5
size(field.eSplit[]) == 2
size(field.ln2.mant[]) == 5
size(field.ln2Split[]) == 2
size(field.ln5.mant[]) == 5
size(field.ln5Split[]) == 2
size(field.ln10.mant[]) == 5
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, java.lang.String):::EXIT535
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, java.lang.String):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
field.radixDigits == orig(field.radixDigits)
field.zero == orig(field.zero)
field.zero.mant == orig(field.zero.mant)
field.zero.mant[] == orig(field.zero.mant[])
field.zero.sign == orig(field.zero.sign)
field.zero.exp == orig(field.zero.exp)
field.zero.nans == orig(field.zero.nans)
field.zero.field == orig(field.zero.field)
field.one == orig(field.one)
field.one.mant == orig(field.one.mant)
field.one.mant[] == orig(field.one.mant[])
field.one.sign == orig(field.one.sign)
field.one.exp == orig(field.one.exp)
field.one.nans == orig(field.one.nans)
field.one.field == orig(field.one.field)
field.two == orig(field.two)
field.two.mant == orig(field.two.mant)
field.two.mant[] == orig(field.two.mant[])
field.two.sign == orig(field.two.sign)
field.two.exp == orig(field.two.exp)
field.two.nans == orig(field.two.nans)
field.two.field == orig(field.two.field)
field.sqr2 == orig(field.sqr2)
field.sqr2.mant == orig(field.sqr2.mant)
field.sqr2.mant[] == orig(field.sqr2.mant[])
field.sqr2.sign == orig(field.sqr2.sign)
field.sqr2.exp == orig(field.sqr2.exp)
field.sqr2.nans == orig(field.sqr2.nans)
field.sqr2.field == orig(field.sqr2.field)
field.sqr2Split == orig(field.sqr2Split)
field.sqr2Split.getClass().getName() == orig(field.sqr2Split.getClass().getName())
field.sqr2Split[] == orig(field.sqr2Split[])
field.sqr2Split[].mant == orig(field.sqr2Split[].mant)
field.sqr2Split[].sign == orig(field.sqr2Split[].sign)
field.sqr2Split[].exp == orig(field.sqr2Split[].exp)
field.sqr2Split[].nans == orig(field.sqr2Split[].nans)
field.sqr2Split[].field == orig(field.sqr2Split[].field)
field.sqr2Reciprocal == orig(field.sqr2Reciprocal)
field.sqr2Reciprocal.mant == orig(field.sqr2Reciprocal.mant)
field.sqr2Reciprocal.mant[] == orig(field.sqr2Reciprocal.mant[])
field.sqr2Reciprocal.sign == orig(field.sqr2Reciprocal.sign)
field.sqr2Reciprocal.exp == orig(field.sqr2Reciprocal.exp)
field.sqr2Reciprocal.nans == orig(field.sqr2Reciprocal.nans)
field.sqr2Reciprocal.field == orig(field.sqr2Reciprocal.field)
field.sqr3 == orig(field.sqr3)
field.sqr3.mant == orig(field.sqr3.mant)
field.sqr3.mant[] == orig(field.sqr3.mant[])
field.sqr3.sign == orig(field.sqr3.sign)
field.sqr3.exp == orig(field.sqr3.exp)
field.sqr3.nans == orig(field.sqr3.nans)
field.sqr3.field == orig(field.sqr3.field)
field.sqr3Reciprocal == orig(field.sqr3Reciprocal)
field.sqr3Reciprocal.mant == orig(field.sqr3Reciprocal.mant)
field.sqr3Reciprocal.mant[] == orig(field.sqr3Reciprocal.mant[])
field.sqr3Reciprocal.sign == orig(field.sqr3Reciprocal.sign)
field.sqr3Reciprocal.exp == orig(field.sqr3Reciprocal.exp)
field.sqr3Reciprocal.nans == orig(field.sqr3Reciprocal.nans)
field.sqr3Reciprocal.field == orig(field.sqr3Reciprocal.field)
field.pi == orig(field.pi)
field.pi.mant == orig(field.pi.mant)
field.pi.mant[] == orig(field.pi.mant[])
field.pi.sign == orig(field.pi.sign)
field.pi.exp == orig(field.pi.exp)
field.pi.nans == orig(field.pi.nans)
field.pi.field == orig(field.pi.field)
field.piSplit == orig(field.piSplit)
field.piSplit.getClass().getName() == orig(field.piSplit.getClass().getName())
field.piSplit[] == orig(field.piSplit[])
field.piSplit[].mant == orig(field.piSplit[].mant)
field.piSplit[].sign == orig(field.piSplit[].sign)
field.piSplit[].exp == orig(field.piSplit[].exp)
field.piSplit[].nans == orig(field.piSplit[].nans)
field.piSplit[].field == orig(field.piSplit[].field)
field.e == orig(field.e)
field.e.mant == orig(field.e.mant)
field.e.mant[] == orig(field.e.mant[])
field.e.sign == orig(field.e.sign)
field.e.exp == orig(field.e.exp)
field.e.nans == orig(field.e.nans)
field.e.field == orig(field.e.field)
field.eSplit == orig(field.eSplit)
field.eSplit.getClass().getName() == orig(field.eSplit.getClass().getName())
field.eSplit[] == orig(field.eSplit[])
field.eSplit[].mant == orig(field.eSplit[].mant)
field.eSplit[].sign == orig(field.eSplit[].sign)
field.eSplit[].exp == orig(field.eSplit[].exp)
field.eSplit[].nans == orig(field.eSplit[].nans)
field.eSplit[].field == orig(field.eSplit[].field)
field.ln2 == orig(field.ln2)
field.ln2.mant == orig(field.ln2.mant)
field.ln2.mant[] == orig(field.ln2.mant[])
field.ln2.sign == orig(field.ln2.sign)
field.ln2.exp == orig(field.ln2.exp)
field.ln2.nans == orig(field.ln2.nans)
field.ln2.field == orig(field.ln2.field)
field.ln2Split == orig(field.ln2Split)
field.ln2Split.getClass().getName() == orig(field.ln2Split.getClass().getName())
field.ln2Split[] == orig(field.ln2Split[])
field.ln2Split[].mant == orig(field.ln2Split[].mant)
field.ln2Split[].sign == orig(field.ln2Split[].sign)
field.ln2Split[].exp == orig(field.ln2Split[].exp)
field.ln2Split[].nans == orig(field.ln2Split[].nans)
field.ln2Split[].field == orig(field.ln2Split[].field)
field.ln5 == orig(field.ln5)
field.ln5.mant == orig(field.ln5.mant)
field.ln5.mant[] == orig(field.ln5.mant[])
field.ln5.sign == orig(field.ln5.sign)
field.ln5.exp == orig(field.ln5.exp)
field.ln5.nans == orig(field.ln5.nans)
field.ln5.field == orig(field.ln5.field)
field.ln5Split == orig(field.ln5Split)
field.ln5Split.getClass().getName() == orig(field.ln5Split.getClass().getName())
field.ln5Split[] == orig(field.ln5Split[])
field.ln5Split[].mant == orig(field.ln5Split[].mant)
field.ln5Split[].sign == orig(field.ln5Split[].sign)
field.ln5Split[].exp == orig(field.ln5Split[].exp)
field.ln5Split[].nans == orig(field.ln5Split[].nans)
field.ln5Split[].field == orig(field.ln5Split[].field)
field.ln10 == orig(field.ln10)
field.ln10.mant == orig(field.ln10.mant)
field.ln10.mant[] == orig(field.ln10.mant[])
field.ln10.sign == orig(field.ln10.sign)
field.ln10.exp == orig(field.ln10.exp)
field.ln10.nans == orig(field.ln10.nans)
field.ln10.field == orig(field.ln10.field)
field.rMode == orig(field.rMode)
s.toString == orig(s.toString)
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags one of { 16, 18 }
field.radixDigits == 5
field.zero.mant[] == [0, 0, 0, 0, 0]
field.zero.mant[] elements == 0
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] == [0, 0, 0, 0, 1]
field.one.mant[] elements one of { 0, 1 }
field.one.mant[] sorted by <=
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant[] == [0, 0, 0, 0, 2]
field.two.mant[] elements one of { 0, 2 }
field.two.mant[] sorted by <=
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
field.sqr2.mant[] elements >= 1
field.sqr2.sign == 1
field.sqr2.exp == 1
field.sqr2.nans == 0
field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.sqr2Split[] elements != null
field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.sqr2Split[].sign == [1, 1]
field.sqr2Split[].sign elements == 1
field.sqr2Split[].exp == [1, -1]
field.sqr2Split[].exp elements one of { -1, 1 }
field.sqr2Split[].exp elements != 0
field.sqr2Split[].exp sorted by >
field.sqr2Split[].nans == [0, 0]
field.sqr2Split[].nans elements == 0
field.sqr2Split[].field elements != null
field.sqr2Split[].field elements are equal
field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
field.sqr2Reciprocal.sign == 1
field.sqr2Reciprocal.exp == 0
field.sqr2Reciprocal.nans == 0
field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
field.sqr3.mant[] elements >= 1
field.sqr3.sign == 1
field.sqr3.exp == 1
field.sqr3.nans == 0
field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
field.sqr3Reciprocal.sign == 1
field.sqr3Reciprocal.exp == 0
field.sqr3Reciprocal.nans == 0
field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
field.pi.sign == 1
field.pi.exp == 1
field.pi.nans == 0
field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.piSplit[] elements != null
field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.piSplit[].mant sorted by <
field.piSplit[].sign == [1, 1]
field.piSplit[].sign elements == 1
field.piSplit[].exp == [1, -1]
field.piSplit[].exp elements one of { -1, 1 }
field.piSplit[].exp elements != 0
field.piSplit[].exp sorted by >
field.piSplit[].nans == [0, 0]
field.piSplit[].nans elements == 0
field.piSplit[].field elements != null
field.piSplit[].field elements are equal
field.e.mant[] == [452, 8459, 8182, 7182, 2]
field.e.mant[] elements >= 2
field.e.sign == 1
field.e.exp == 1
field.e.nans == 0
field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.eSplit[] elements != null
field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.eSplit[].sign == [1, 1]
field.eSplit[].sign elements == 1
field.eSplit[].exp == [1, -1]
field.eSplit[].exp elements one of { -1, 1 }
field.eSplit[].exp elements != 0
field.eSplit[].exp sorted by >
field.eSplit[].nans == [0, 0]
field.eSplit[].nans elements == 0
field.eSplit[].field elements != null
field.eSplit[].field elements are equal
field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
field.ln2.sign == 1
field.ln2.exp == 0
field.ln2.nans == 0
field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln2Split[] elements != null
field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln2Split[].mant sorted by >
field.ln2Split[].sign == [1, 1]
field.ln2Split[].sign elements == 1
field.ln2Split[].exp == [0, -2]
field.ln2Split[].exp elements one of { -2, 0 }
field.ln2Split[].exp sorted by >
field.ln2Split[].nans == [0, 0]
field.ln2Split[].nans elements == 0
field.ln2Split[].field elements != null
field.ln2Split[].field elements are equal
field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
field.ln5.mant[] elements >= 1
field.ln5.sign == 1
field.ln5.exp == 1
field.ln5.nans == 0
field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln5Split[] elements != null
field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln5Split[].mant sorted by >
field.ln5Split[].sign == [1, 1]
field.ln5Split[].sign elements == 1
field.ln5Split[].exp == [1, -1]
field.ln5Split[].exp elements one of { -1, 1 }
field.ln5Split[].exp elements != 0
field.ln5Split[].exp sorted by >
field.ln5Split[].nans == [0, 0]
field.ln5Split[].nans elements == 0
field.ln5Split[].field elements != null
field.ln5Split[].field elements are equal
field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
field.ln10.mant[] elements >= 2
field.ln10.sign == 1
field.ln10.exp == 1
field.ln10.nans == 0
field.rMode has only one value
field.ieeeFlags one of { 16, 18 }
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(field.zero.mant[]) == 5
size(field.one.mant[]) == 5
size(field.two.mant[]) == 5
size(field.sqr2.mant[]) == 5
size(field.sqr2Split[]) == 2
size(field.sqr2Reciprocal.mant[]) == 5
size(field.sqr3.mant[]) == 5
size(field.sqr3Reciprocal.mant[]) == 5
size(field.pi.mant[]) == 5
size(field.piSplit[]) == 2
size(field.e.mant[]) == 5
size(field.eSplit[]) == 2
size(field.ln2.mant[]) == 5
size(field.ln2Split[]) == 2
size(field.ln5.mant[]) == 5
size(field.ln5Split[]) == 2
size(field.ln10.mant[]) == 5
field.ieeeFlags >= orig(field.ieeeFlags)
orig(field.ieeeFlags) % field.ieeeFlags == 0
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, long):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
field.radixDigits one of { 5, 50 }
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
field.zero.mant[] elements == 0
field.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] elements one of { 0, 1 }
field.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] }
field.one.mant[] sorted by <=
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant[] elements one of { 0, 2 }
field.two.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2] }
field.two.mant[] sorted by <=
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
field.sqr2.mant[] elements >= 1
field.sqr2.sign == 1
field.sqr2.exp == 1
field.sqr2.nans == 0
field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.sqr2Split[] elements != null
field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.sqr2Split[].sign == [1, 1]
field.sqr2Split[].sign elements == 1
field.sqr2Split[].exp == [1, -1]
field.sqr2Split[].exp elements one of { -1, 1 }
field.sqr2Split[].exp elements != 0
field.sqr2Split[].exp sorted by >
field.sqr2Split[].nans == [0, 0]
field.sqr2Split[].nans elements == 0
field.sqr2Split[].field elements != null
field.sqr2Split[].field elements are equal
field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
field.sqr2Reciprocal.sign == 1
field.sqr2Reciprocal.exp == 0
field.sqr2Reciprocal.nans == 0
field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
field.sqr3.mant[] elements >= 1
field.sqr3.sign == 1
field.sqr3.exp == 1
field.sqr3.nans == 0
field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
field.sqr3Reciprocal.sign == 1
field.sqr3Reciprocal.exp == 0
field.sqr3Reciprocal.nans == 0
field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
field.pi.sign == 1
field.pi.exp == 1
field.pi.nans == 0
field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.piSplit[] elements != null
field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.piSplit[].mant sorted by <
field.piSplit[].sign == [1, 1]
field.piSplit[].sign elements == 1
field.piSplit[].exp == [1, -1]
field.piSplit[].exp elements one of { -1, 1 }
field.piSplit[].exp elements != 0
field.piSplit[].exp sorted by >
field.piSplit[].nans == [0, 0]
field.piSplit[].nans elements == 0
field.piSplit[].field elements != null
field.piSplit[].field elements are equal
field.e.mant[] == [452, 8459, 8182, 7182, 2]
field.e.mant[] elements >= 2
field.e.sign == 1
field.e.exp == 1
field.e.nans == 0
field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.eSplit[] elements != null
field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.eSplit[].sign == [1, 1]
field.eSplit[].sign elements == 1
field.eSplit[].exp == [1, -1]
field.eSplit[].exp elements one of { -1, 1 }
field.eSplit[].exp elements != 0
field.eSplit[].exp sorted by >
field.eSplit[].nans == [0, 0]
field.eSplit[].nans elements == 0
field.eSplit[].field elements != null
field.eSplit[].field elements are equal
field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
field.ln2.sign == 1
field.ln2.exp == 0
field.ln2.nans == 0
field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln2Split[] elements != null
field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln2Split[].mant sorted by >
field.ln2Split[].sign == [1, 1]
field.ln2Split[].sign elements == 1
field.ln2Split[].exp == [0, -2]
field.ln2Split[].exp elements one of { -2, 0 }
field.ln2Split[].exp sorted by >
field.ln2Split[].nans == [0, 0]
field.ln2Split[].nans elements == 0
field.ln2Split[].field elements != null
field.ln2Split[].field elements are equal
field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
field.ln5.mant[] elements >= 1
field.ln5.sign == 1
field.ln5.exp == 1
field.ln5.nans == 0
field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln5Split[] elements != null
field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln5Split[].mant sorted by >
field.ln5Split[].sign == [1, 1]
field.ln5Split[].sign elements == 1
field.ln5Split[].exp == [1, -1]
field.ln5Split[].exp elements one of { -1, 1 }
field.ln5Split[].exp elements != 0
field.ln5Split[].exp sorted by >
field.ln5Split[].nans == [0, 0]
field.ln5Split[].nans elements == 0
field.ln5Split[].field elements != null
field.ln5Split[].field elements are equal
field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
field.ln10.mant[] elements >= 2
field.ln10.sign == 1
field.ln10.exp == 1
field.ln10.nans == 0
field.rMode has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] elements != null
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
field.ieeeFlags one of { 0, 16 }
x >= -1
size(field.zero.mant[]) one of { 5, 50 }
size(field.one.mant[]) one of { 5, 50 }
size(field.two.mant[]) one of { 5, 50 }
size(field.sqr2.mant[]) == 5
size(field.sqr2Split[]) == 2
size(field.sqr2Reciprocal.mant[]) == 5
size(field.sqr3.mant[]) == 5
size(field.sqr3Reciprocal.mant[]) == 5
size(field.pi.mant[]) == 5
size(field.piSplit[]) == 2
size(field.e.mant[]) == 5
size(field.eSplit[]) == 2
size(field.ln2.mant[]) == 5
size(field.ln2Split[]) == 2
size(field.ln5.mant[]) == 5
size(field.ln5Split[]) == 2
size(field.ln10.mant[]) == 5
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
===========================================================================
org.apache.commons.math3.dfp.Dfp.Dfp(org.apache.commons.math3.dfp.DfpField, long):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
field.radixDigits == orig(field.radixDigits)
field.zero == orig(field.zero)
field.zero.mant == orig(field.zero.mant)
field.zero.mant[] == orig(field.zero.mant[])
field.zero.sign == orig(field.zero.sign)
field.zero.exp == orig(field.zero.exp)
field.zero.nans == orig(field.zero.nans)
field.zero.field == orig(field.zero.field)
field.one == orig(field.one)
field.one.mant == orig(field.one.mant)
field.one.mant[] == orig(field.one.mant[])
field.one.sign == orig(field.one.sign)
field.one.exp == orig(field.one.exp)
field.one.nans == orig(field.one.nans)
field.one.field == orig(field.one.field)
field.two == orig(field.two)
field.two.mant == orig(field.two.mant)
field.two.mant[] == orig(field.two.mant[])
field.two.sign == orig(field.two.sign)
field.two.exp == orig(field.two.exp)
field.two.nans == orig(field.two.nans)
field.two.field == orig(field.two.field)
field.sqr2 == orig(field.sqr2)
field.sqr2.mant == orig(field.sqr2.mant)
field.sqr2.mant[] == orig(field.sqr2.mant[])
field.sqr2.sign == orig(field.sqr2.sign)
field.sqr2.exp == orig(field.sqr2.exp)
field.sqr2.nans == orig(field.sqr2.nans)
field.sqr2.field == orig(field.sqr2.field)
field.sqr2Split == orig(field.sqr2Split)
field.sqr2Split.getClass().getName() == orig(field.sqr2Split.getClass().getName())
field.sqr2Split[] == orig(field.sqr2Split[])
field.sqr2Split[].mant == orig(field.sqr2Split[].mant)
field.sqr2Split[].sign == orig(field.sqr2Split[].sign)
field.sqr2Split[].exp == orig(field.sqr2Split[].exp)
field.sqr2Split[].nans == orig(field.sqr2Split[].nans)
field.sqr2Split[].field == orig(field.sqr2Split[].field)
field.sqr2Reciprocal == orig(field.sqr2Reciprocal)
field.sqr2Reciprocal.mant == orig(field.sqr2Reciprocal.mant)
field.sqr2Reciprocal.mant[] == orig(field.sqr2Reciprocal.mant[])
field.sqr2Reciprocal.sign == orig(field.sqr2Reciprocal.sign)
field.sqr2Reciprocal.exp == orig(field.sqr2Reciprocal.exp)
field.sqr2Reciprocal.nans == orig(field.sqr2Reciprocal.nans)
field.sqr2Reciprocal.field == orig(field.sqr2Reciprocal.field)
field.sqr3 == orig(field.sqr3)
field.sqr3.mant == orig(field.sqr3.mant)
field.sqr3.mant[] == orig(field.sqr3.mant[])
field.sqr3.sign == orig(field.sqr3.sign)
field.sqr3.exp == orig(field.sqr3.exp)
field.sqr3.nans == orig(field.sqr3.nans)
field.sqr3.field == orig(field.sqr3.field)
field.sqr3Reciprocal == orig(field.sqr3Reciprocal)
field.sqr3Reciprocal.mant == orig(field.sqr3Reciprocal.mant)
field.sqr3Reciprocal.mant[] == orig(field.sqr3Reciprocal.mant[])
field.sqr3Reciprocal.sign == orig(field.sqr3Reciprocal.sign)
field.sqr3Reciprocal.exp == orig(field.sqr3Reciprocal.exp)
field.sqr3Reciprocal.nans == orig(field.sqr3Reciprocal.nans)
field.sqr3Reciprocal.field == orig(field.sqr3Reciprocal.field)
field.pi == orig(field.pi)
field.pi.mant == orig(field.pi.mant)
field.pi.mant[] == orig(field.pi.mant[])
field.pi.sign == orig(field.pi.sign)
field.pi.exp == orig(field.pi.exp)
field.pi.nans == orig(field.pi.nans)
field.pi.field == orig(field.pi.field)
field.piSplit == orig(field.piSplit)
field.piSplit.getClass().getName() == orig(field.piSplit.getClass().getName())
field.piSplit[] == orig(field.piSplit[])
field.piSplit[].mant == orig(field.piSplit[].mant)
field.piSplit[].sign == orig(field.piSplit[].sign)
field.piSplit[].exp == orig(field.piSplit[].exp)
field.piSplit[].nans == orig(field.piSplit[].nans)
field.piSplit[].field == orig(field.piSplit[].field)
field.e == orig(field.e)
field.e.mant == orig(field.e.mant)
field.e.mant[] == orig(field.e.mant[])
field.e.sign == orig(field.e.sign)
field.e.exp == orig(field.e.exp)
field.e.nans == orig(field.e.nans)
field.e.field == orig(field.e.field)
field.eSplit == orig(field.eSplit)
field.eSplit.getClass().getName() == orig(field.eSplit.getClass().getName())
field.eSplit[] == orig(field.eSplit[])
field.eSplit[].mant == orig(field.eSplit[].mant)
field.eSplit[].sign == orig(field.eSplit[].sign)
field.eSplit[].exp == orig(field.eSplit[].exp)
field.eSplit[].nans == orig(field.eSplit[].nans)
field.eSplit[].field == orig(field.eSplit[].field)
field.ln2 == orig(field.ln2)
field.ln2.mant == orig(field.ln2.mant)
field.ln2.mant[] == orig(field.ln2.mant[])
field.ln2.sign == orig(field.ln2.sign)
field.ln2.exp == orig(field.ln2.exp)
field.ln2.nans == orig(field.ln2.nans)
field.ln2.field == orig(field.ln2.field)
field.ln2Split == orig(field.ln2Split)
field.ln2Split.getClass().getName() == orig(field.ln2Split.getClass().getName())
field.ln2Split[] == orig(field.ln2Split[])
field.ln2Split[].mant == orig(field.ln2Split[].mant)
field.ln2Split[].sign == orig(field.ln2Split[].sign)
field.ln2Split[].exp == orig(field.ln2Split[].exp)
field.ln2Split[].nans == orig(field.ln2Split[].nans)
field.ln2Split[].field == orig(field.ln2Split[].field)
field.ln5 == orig(field.ln5)
field.ln5.mant == orig(field.ln5.mant)
field.ln5.mant[] == orig(field.ln5.mant[])
field.ln5.sign == orig(field.ln5.sign)
field.ln5.exp == orig(field.ln5.exp)
field.ln5.nans == orig(field.ln5.nans)
field.ln5.field == orig(field.ln5.field)
field.ln5Split == orig(field.ln5Split)
field.ln5Split.getClass().getName() == orig(field.ln5Split.getClass().getName())
field.ln5Split[] == orig(field.ln5Split[])
field.ln5Split[].mant == orig(field.ln5Split[].mant)
field.ln5Split[].sign == orig(field.ln5Split[].sign)
field.ln5Split[].exp == orig(field.ln5Split[].exp)
field.ln5Split[].nans == orig(field.ln5Split[].nans)
field.ln5Split[].field == orig(field.ln5Split[].field)
field.ln10 == orig(field.ln10)
field.ln10.mant == orig(field.ln10.mant)
field.ln10.mant[] == orig(field.ln10.mant[])
field.ln10.sign == orig(field.ln10.sign)
field.ln10.exp == orig(field.ln10.exp)
field.ln10.nans == orig(field.ln10.nans)
field.ln10.field == orig(field.ln10.field)
field.rMode == orig(field.rMode)
field.ieeeFlags == orig(field.ieeeFlags)
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
field.radixDigits one of { 5, 50 }
field.zero.mant[] elements == 0
field.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
field.zero.sign == 1
field.zero.exp == 0
field.zero.nans == 0
field.one.mant[] elements one of { 0, 1 }
field.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] }
field.one.mant[] sorted by <=
field.one.sign == 1
field.one.exp == 1
field.one.nans == 0
field.two.mant[] elements one of { 0, 2 }
field.two.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2] }
field.two.mant[] sorted by <=
field.two.sign == 1
field.two.exp == 1
field.two.nans == 0
field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
field.sqr2.mant[] elements >= 1
field.sqr2.sign == 1
field.sqr2.exp == 1
field.sqr2.nans == 0
field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.sqr2Split[] elements != null
field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.sqr2Split[].sign == [1, 1]
field.sqr2Split[].sign elements == 1
field.sqr2Split[].exp == [1, -1]
field.sqr2Split[].exp elements one of { -1, 1 }
field.sqr2Split[].exp elements != 0
field.sqr2Split[].exp sorted by >
field.sqr2Split[].nans == [0, 0]
field.sqr2Split[].nans elements == 0
field.sqr2Split[].field elements != null
field.sqr2Split[].field elements are equal
field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
field.sqr2Reciprocal.sign == 1
field.sqr2Reciprocal.exp == 0
field.sqr2Reciprocal.nans == 0
field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
field.sqr3.mant[] elements >= 1
field.sqr3.sign == 1
field.sqr3.exp == 1
field.sqr3.nans == 0
field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
field.sqr3Reciprocal.sign == 1
field.sqr3Reciprocal.exp == 0
field.sqr3Reciprocal.nans == 0
field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
field.pi.sign == 1
field.pi.exp == 1
field.pi.nans == 0
field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.piSplit[] elements != null
field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.piSplit[].mant sorted by <
field.piSplit[].sign == [1, 1]
field.piSplit[].sign elements == 1
field.piSplit[].exp == [1, -1]
field.piSplit[].exp elements one of { -1, 1 }
field.piSplit[].exp elements != 0
field.piSplit[].exp sorted by >
field.piSplit[].nans == [0, 0]
field.piSplit[].nans elements == 0
field.piSplit[].field elements != null
field.piSplit[].field elements are equal
field.e.mant[] == [452, 8459, 8182, 7182, 2]
field.e.mant[] elements >= 2
field.e.sign == 1
field.e.exp == 1
field.e.nans == 0
field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.eSplit[] elements != null
field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.eSplit[].sign == [1, 1]
field.eSplit[].sign elements == 1
field.eSplit[].exp == [1, -1]
field.eSplit[].exp elements one of { -1, 1 }
field.eSplit[].exp elements != 0
field.eSplit[].exp sorted by >
field.eSplit[].nans == [0, 0]
field.eSplit[].nans elements == 0
field.eSplit[].field elements != null
field.eSplit[].field elements are equal
field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
field.ln2.sign == 1
field.ln2.exp == 0
field.ln2.nans == 0
field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln2Split[] elements != null
field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln2Split[].mant sorted by >
field.ln2Split[].sign == [1, 1]
field.ln2Split[].sign elements == 1
field.ln2Split[].exp == [0, -2]
field.ln2Split[].exp elements one of { -2, 0 }
field.ln2Split[].exp sorted by >
field.ln2Split[].nans == [0, 0]
field.ln2Split[].nans elements == 0
field.ln2Split[].field elements != null
field.ln2Split[].field elements are equal
field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
field.ln5.mant[] elements >= 1
field.ln5.sign == 1
field.ln5.exp == 1
field.ln5.nans == 0
field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
field.ln5Split[] elements != null
field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
field.ln5Split[].mant sorted by >
field.ln5Split[].sign == [1, 1]
field.ln5Split[].sign elements == 1
field.ln5Split[].exp == [1, -1]
field.ln5Split[].exp elements one of { -1, 1 }
field.ln5Split[].exp elements != 0
field.ln5Split[].exp sorted by >
field.ln5Split[].nans == [0, 0]
field.ln5Split[].nans elements == 0
field.ln5Split[].field elements != null
field.ln5Split[].field elements are equal
field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
field.ln10.mant[] elements >= 2
field.ln10.sign == 1
field.ln10.exp == 1
field.ln10.nans == 0
field.rMode has only one value
field.ieeeFlags one of { 0, 16 }
size(field.zero.mant[]) one of { 5, 50 }
size(field.one.mant[]) one of { 5, 50 }
size(field.two.mant[]) one of { 5, 50 }
size(field.sqr2.mant[]) == 5
size(field.sqr2Split[]) == 2
size(field.sqr2Reciprocal.mant[]) == 5
size(field.sqr3.mant[]) == 5
size(field.sqr3Reciprocal.mant[]) == 5
size(field.pi.mant[]) == 5
size(field.piSplit[]) == 2
size(field.e.mant[]) == 5
size(field.eSplit[]) == 2
size(field.ln2.mant[]) == 5
size(field.ln2Split[]) == 2
size(field.ln5.mant[]) == 5
size(field.ln5Split[]) == 2
size(field.ln10.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.align(int):::ENTER
this.sign == 1
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
e one of { 0, 1, 4 }
===========================================================================
org.apache.commons.math3.dfp.Dfp.align(int):::EXIT710
this.mant[] == orig(this.mant[])
this.exp == orig(this.exp)
return == 0
===========================================================================
org.apache.commons.math3.dfp.Dfp.align(int):::EXIT721
this.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.mant[] elements == 0
this.exp == 1
this.field has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString == null
org.apache.commons.math3.dfp.DfpField.eString == null
org.apache.commons.math3.dfp.DfpField.ln2String == null
org.apache.commons.math3.dfp.DfpField.ln5String == null
org.apache.commons.math3.dfp.DfpField.ln10String == null
this.field.radixDigits == 50
this.field.zero has only one value
this.field.zero.mant has only one value
this.field.zero.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.field.zero.field has only one value
this.field.one has only one value
this.field.one.mant has only one value
this.field.one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
this.field.one.field has only one value
this.field.two has only one value
this.field.two.mant has only one value
this.field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
this.field.two.field has only one value
this.field.sqr2 == null
this.field.sqr2Split == null
this.field.sqr2Reciprocal == null
this.field.sqr3 == null
this.field.sqr3Reciprocal == null
this.field.pi == null
this.field.piSplit == null
this.field.e == null
this.field.eSplit == null
this.field.ln2 == null
this.field.ln2Split == null
this.field.ln5 == null
this.field.ln5Split == null
this.field.ln10 == null
this.field.ieeeFlags == 16
return == 0
orig(this.mant[]) one of { [5459, 630, 6835, 4926, 1786, 2132, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3201, 281, 7511, 9522, 1645, 1673, 1234, 8742, 6771, 3894, 4404, 5552, 2097], [8375, 3201, 9613, 7506, 5717, 601, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6401, 9986, 4562, 5842, 4293, 1750, 5436, 1401, 6044, 1617, 7142, 2233, 5358, 3709, 7849, 7478, 4426, 6011, 3814, 5190, 6382, 2556, 1604, 18, 9738, 439] }
orig(this.exp) one of { -174, -87 }
orig(e) == 1
size(this.mant[]) == 50
size(this.field.zero.mant[]) == 50
size(this.field.one.mant[]) == 50
size(this.field.two.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.Dfp.align(int):::EXIT747
orig(this.exp) <= 1
this.exp > orig(this.exp)
===========================================================================
org.apache.commons.math3.dfp.Dfp.align(int):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.sign == orig(this.sign)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
size(this.mant[]) == orig(size(this.mant[]))
this.sign == 1
this.exp one of { 0, 1, 4 }
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
return >= 0
this.exp >= orig(this.exp)
===========================================================================
org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::ENTER
a.mant[] elements >= 0
a.sign == 1
a.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
a.field.radixDigits one of { 5, 50 }
a.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.sqr2Split[] elements != null
a.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.sqr2Split[].sign == [1, 1]
a.field.sqr2Split[].sign elements == 1
a.field.sqr2Split[].exp == [1, -1]
a.field.sqr2Split[].exp elements one of { -1, 1 }
a.field.sqr2Split[].exp elements != 0
a.field.sqr2Split[].exp sorted by >
a.field.sqr2Split[].nans == [0, 0]
a.field.sqr2Split[].nans elements == 0
a.field.sqr2Split[].field elements != null
a.field.sqr2Split[].field elements are equal
a.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.piSplit[] elements != null
a.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.piSplit[].mant sorted by <
a.field.piSplit[].sign == [1, 1]
a.field.piSplit[].sign elements == 1
a.field.piSplit[].exp == [1, -1]
a.field.piSplit[].exp elements one of { -1, 1 }
a.field.piSplit[].exp elements != 0
a.field.piSplit[].exp sorted by >
a.field.piSplit[].nans == [0, 0]
a.field.piSplit[].nans elements == 0
a.field.piSplit[].field elements != null
a.field.piSplit[].field elements are equal
a.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.eSplit[] elements != null
a.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.eSplit[].sign == [1, 1]
a.field.eSplit[].sign elements == 1
a.field.eSplit[].exp == [1, -1]
a.field.eSplit[].exp elements one of { -1, 1 }
a.field.eSplit[].exp elements != 0
a.field.eSplit[].exp sorted by >
a.field.eSplit[].nans == [0, 0]
a.field.eSplit[].nans elements == 0
a.field.eSplit[].field elements != null
a.field.eSplit[].field elements are equal
a.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.ln2Split[] elements != null
a.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.ln2Split[].mant sorted by >
a.field.ln2Split[].sign == [1, 1]
a.field.ln2Split[].sign elements == 1
a.field.ln2Split[].exp == [0, -2]
a.field.ln2Split[].exp elements one of { -2, 0 }
a.field.ln2Split[].exp sorted by >
a.field.ln2Split[].nans == [0, 0]
a.field.ln2Split[].nans elements == 0
a.field.ln2Split[].field elements != null
a.field.ln2Split[].field elements are equal
a.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.ln5Split[] elements != null
a.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.ln5Split[].mant sorted by >
a.field.ln5Split[].sign == [1, 1]
a.field.ln5Split[].sign elements == 1
a.field.ln5Split[].exp == [1, -1]
a.field.ln5Split[].exp elements one of { -1, 1 }
a.field.ln5Split[].exp elements != 0
a.field.ln5Split[].exp sorted by >
a.field.ln5Split[].nans == [0, 0]
a.field.ln5Split[].nans elements == 0
a.field.ln5Split[].field elements != null
a.field.ln5Split[].field elements are equal
a.field.rMode has only one value
a.field.ieeeFlags one of { 0, 16 }
b.mant[] elements >= 0
b.sign == 1
b.nans == 0
b.field.radixDigits one of { 5, 50 }
b.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.sqr2Split[] elements != null
b.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.sqr2Split[].sign == [1, 1]
b.field.sqr2Split[].sign elements == 1
b.field.sqr2Split[].exp == [1, -1]
b.field.sqr2Split[].exp elements one of { -1, 1 }
b.field.sqr2Split[].exp elements != 0
b.field.sqr2Split[].exp sorted by >
b.field.sqr2Split[].nans == [0, 0]
b.field.sqr2Split[].nans elements == 0
b.field.sqr2Split[].field elements != null
b.field.sqr2Split[].field elements are equal
b.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.piSplit[] elements != null
b.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.piSplit[].mant sorted by <
b.field.piSplit[].sign == [1, 1]
b.field.piSplit[].sign elements == 1
b.field.piSplit[].exp == [1, -1]
b.field.piSplit[].exp elements one of { -1, 1 }
b.field.piSplit[].exp elements != 0
b.field.piSplit[].exp sorted by >
b.field.piSplit[].nans == [0, 0]
b.field.piSplit[].nans elements == 0
b.field.piSplit[].field elements != null
b.field.piSplit[].field elements are equal
b.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.eSplit[] elements != null
b.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.eSplit[].sign == [1, 1]
b.field.eSplit[].sign elements == 1
b.field.eSplit[].exp == [1, -1]
b.field.eSplit[].exp elements one of { -1, 1 }
b.field.eSplit[].exp elements != 0
b.field.eSplit[].exp sorted by >
b.field.eSplit[].nans == [0, 0]
b.field.eSplit[].nans elements == 0
b.field.eSplit[].field elements != null
b.field.eSplit[].field elements are equal
b.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.ln2Split[] elements != null
b.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.ln2Split[].mant sorted by >
b.field.ln2Split[].sign == [1, 1]
b.field.ln2Split[].sign elements == 1
b.field.ln2Split[].exp == [0, -2]
b.field.ln2Split[].exp elements one of { -2, 0 }
b.field.ln2Split[].exp sorted by >
b.field.ln2Split[].nans == [0, 0]
b.field.ln2Split[].nans elements == 0
b.field.ln2Split[].field elements != null
b.field.ln2Split[].field elements are equal
b.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.ln5Split[] elements != null
b.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.ln5Split[].mant sorted by >
b.field.ln5Split[].sign == [1, 1]
b.field.ln5Split[].sign elements == 1
b.field.ln5Split[].exp == [1, -1]
b.field.ln5Split[].exp elements one of { -1, 1 }
b.field.ln5Split[].exp elements != 0
b.field.ln5Split[].exp sorted by >
b.field.ln5Split[].nans == [0, 0]
b.field.ln5Split[].nans elements == 0
b.field.ln5Split[].field elements != null
b.field.ln5Split[].field elements are equal
b.field.rMode has only one value
b.field.ieeeFlags one of { 0, 16 }
size(a.mant[]) one of { 5, 50 }
size(a.field.sqr2Split[]) == 2
size(a.field.piSplit[]) == 2
size(a.field.eSplit[]) == 2
size(a.field.ln2Split[]) == 2
size(a.field.ln5Split[]) == 2
size(b.mant[]) one of { 5, 50 }
size(b.field.sqr2Split[]) == 2
size(b.field.piSplit[]) == 2
size(b.field.eSplit[]) == 2
size(b.field.ln2Split[]) == 2
size(b.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT951
a.mant has only one value
a.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
a.mant[] elements == 0
a.exp == 0
a.field has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString == null
org.apache.commons.math3.dfp.DfpField.eString == null
org.apache.commons.math3.dfp.DfpField.ln2String == null
org.apache.commons.math3.dfp.DfpField.ln5String == null
org.apache.commons.math3.dfp.DfpField.ln10String == null
a.field.radixDigits == 50
a.field.zero has only one value
a.field.one has only one value
a.field.two has only one value
a.field.sqr2 == null
a.field.sqr2Split == null
a.field.sqr2Reciprocal == null
a.field.sqr3 == null
a.field.sqr3Reciprocal == null
a.field.pi == null
a.field.piSplit == null
a.field.e == null
a.field.eSplit == null
a.field.ln2 == null
a.field.ln2Split == null
a.field.ln5 == null
a.field.ln5Split == null
a.field.ln10 == null
a.field.ieeeFlags == 16
b.mant has only one value
b.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
b.mant[] elements == 0
b.exp == 0
b.field has only one value
b.field.radixDigits == 50
b.field.zero has only one value
b.field.one has only one value
b.field.two has only one value
b.field.sqr2 == null
b.field.sqr2Split == null
b.field.sqr2Reciprocal == null
b.field.sqr3 == null
b.field.sqr3Reciprocal == null
b.field.pi == null
b.field.piSplit == null
b.field.e == null
b.field.eSplit == null
b.field.ln2 == null
b.field.ln2Split == null
b.field.ln5 == null
b.field.ln5Split == null
b.field.ln10 == null
b.field.ieeeFlags == 16
return == 0
orig(a) has only one value
orig(b) has only one value
size(a.mant[]) == 50
size(b.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT978
a.exp <= 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
a.field.ieeeFlags == 16
b.exp <= 1
b.field.ieeeFlags == 16
return == -1
===========================================================================
org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT982
a.exp one of { 0, 1, 4 }
b.exp <= 1
return == 1
===========================================================================
org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT989
a.exp one of { 0, 1, 4 }
return == 1
===========================================================================
org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT993
a.exp one of { 0, 1 }
b.exp one of { -43, 0, 1 }
return == -1
===========================================================================
org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT997
a.exp one of { 0, 1 }
a.field has only one value
org.apache.commons.math3.dfp.DfpField.ln10String == null
a.field.radixDigits == 50
a.field.zero has only one value
a.field.one has only one value
a.field.two has only one value
a.field.sqr2 == null
a.field.sqr2Split == null
a.field.sqr2Reciprocal == null
a.field.sqr3 == null
a.field.sqr3Reciprocal == null
a.field.pi == null
a.field.piSplit == null
a.field.e == null
a.field.eSplit == null
a.field.ln2 == null
a.field.ln2Split == null
a.field.ln5 == null
a.field.ln5Split == null
a.field.ln10 == null
a.field.ieeeFlags == 16
b.exp one of { 0, 1 }
b.field has only one value
b.field.radixDigits == 50
b.field.zero has only one value
b.field.one has only one value
b.field.two has only one value
b.field.sqr2 == null
b.field.sqr2Split == null
b.field.sqr2Reciprocal == null
b.field.sqr3 == null
b.field.sqr3Reciprocal == null
b.field.pi == null
b.field.piSplit == null
b.field.e == null
b.field.eSplit == null
b.field.ln2 == null
b.field.ln2Split == null
b.field.ln5 == null
b.field.ln5Split == null
b.field.ln10 == null
b.field.ieeeFlags == 16
return == 0
size(a.mant[]) == 50
size(b.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.Dfp.compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
a.mant == orig(a.mant)
a.mant[] == orig(a.mant[])
a.sign == orig(a.sign)
a.exp == orig(a.exp)
a.nans == orig(a.nans)
a.field == orig(a.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
a.field.radixDigits == orig(a.field.radixDigits)
a.field.zero == orig(a.field.zero)
a.field.one == orig(a.field.one)
a.field.two == orig(a.field.two)
a.field.sqr2 == orig(a.field.sqr2)
a.field.sqr2Split == orig(a.field.sqr2Split)
a.field.sqr2Split.getClass().getName() == orig(a.field.sqr2Split.getClass().getName())
a.field.sqr2Split[] == orig(a.field.sqr2Split[])
a.field.sqr2Split[].mant == orig(a.field.sqr2Split[].mant)
a.field.sqr2Split[].sign == orig(a.field.sqr2Split[].sign)
a.field.sqr2Split[].exp == orig(a.field.sqr2Split[].exp)
a.field.sqr2Split[].nans == orig(a.field.sqr2Split[].nans)
a.field.sqr2Split[].field == orig(a.field.sqr2Split[].field)
a.field.sqr2Reciprocal == orig(a.field.sqr2Reciprocal)
a.field.sqr3 == orig(a.field.sqr3)
a.field.sqr3Reciprocal == orig(a.field.sqr3Reciprocal)
a.field.pi == orig(a.field.pi)
a.field.piSplit == orig(a.field.piSplit)
a.field.piSplit.getClass().getName() == orig(a.field.piSplit.getClass().getName())
a.field.piSplit[] == orig(a.field.piSplit[])
a.field.piSplit[].mant == orig(a.field.piSplit[].mant)
a.field.piSplit[].sign == orig(a.field.piSplit[].sign)
a.field.piSplit[].exp == orig(a.field.piSplit[].exp)
a.field.piSplit[].nans == orig(a.field.piSplit[].nans)
a.field.piSplit[].field == orig(a.field.piSplit[].field)
a.field.e == orig(a.field.e)
a.field.eSplit == orig(a.field.eSplit)
a.field.eSplit.getClass().getName() == orig(a.field.eSplit.getClass().getName())
a.field.eSplit[] == orig(a.field.eSplit[])
a.field.eSplit[].mant == orig(a.field.eSplit[].mant)
a.field.eSplit[].sign == orig(a.field.eSplit[].sign)
a.field.eSplit[].exp == orig(a.field.eSplit[].exp)
a.field.eSplit[].nans == orig(a.field.eSplit[].nans)
a.field.eSplit[].field == orig(a.field.eSplit[].field)
a.field.ln2 == orig(a.field.ln2)
a.field.ln2Split == orig(a.field.ln2Split)
a.field.ln2Split.getClass().getName() == orig(a.field.ln2Split.getClass().getName())
a.field.ln2Split[] == orig(a.field.ln2Split[])
a.field.ln2Split[].mant == orig(a.field.ln2Split[].mant)
a.field.ln2Split[].sign == orig(a.field.ln2Split[].sign)
a.field.ln2Split[].exp == orig(a.field.ln2Split[].exp)
a.field.ln2Split[].nans == orig(a.field.ln2Split[].nans)
a.field.ln2Split[].field == orig(a.field.ln2Split[].field)
a.field.ln5 == orig(a.field.ln5)
a.field.ln5Split == orig(a.field.ln5Split)
a.field.ln5Split.getClass().getName() == orig(a.field.ln5Split.getClass().getName())
a.field.ln5Split[] == orig(a.field.ln5Split[])
a.field.ln5Split[].mant == orig(a.field.ln5Split[].mant)
a.field.ln5Split[].sign == orig(a.field.ln5Split[].sign)
a.field.ln5Split[].exp == orig(a.field.ln5Split[].exp)
a.field.ln5Split[].nans == orig(a.field.ln5Split[].nans)
a.field.ln5Split[].field == orig(a.field.ln5Split[].field)
a.field.ln10 == orig(a.field.ln10)
a.field.rMode == orig(a.field.rMode)
a.field.ieeeFlags == orig(a.field.ieeeFlags)
b.mant == orig(b.mant)
b.mant[] == orig(b.mant[])
b.sign == orig(b.sign)
b.exp == orig(b.exp)
b.nans == orig(b.nans)
b.field == orig(b.field)
b.field.radixDigits == orig(b.field.radixDigits)
b.field.zero == orig(b.field.zero)
b.field.one == orig(b.field.one)
b.field.two == orig(b.field.two)
b.field.sqr2 == orig(b.field.sqr2)
b.field.sqr2Split == orig(b.field.sqr2Split)
b.field.sqr2Split.getClass().getName() == orig(b.field.sqr2Split.getClass().getName())
b.field.sqr2Split[] == orig(b.field.sqr2Split[])
b.field.sqr2Split[].mant == orig(b.field.sqr2Split[].mant)
b.field.sqr2Split[].sign == orig(b.field.sqr2Split[].sign)
b.field.sqr2Split[].exp == orig(b.field.sqr2Split[].exp)
b.field.sqr2Split[].nans == orig(b.field.sqr2Split[].nans)
b.field.sqr2Split[].field == orig(b.field.sqr2Split[].field)
b.field.sqr2Reciprocal == orig(b.field.sqr2Reciprocal)
b.field.sqr3 == orig(b.field.sqr3)
b.field.sqr3Reciprocal == orig(b.field.sqr3Reciprocal)
b.field.pi == orig(b.field.pi)
b.field.piSplit == orig(b.field.piSplit)
b.field.piSplit.getClass().getName() == orig(b.field.piSplit.getClass().getName())
b.field.piSplit[] == orig(b.field.piSplit[])
b.field.piSplit[].mant == orig(b.field.piSplit[].mant)
b.field.piSplit[].sign == orig(b.field.piSplit[].sign)
b.field.piSplit[].exp == orig(b.field.piSplit[].exp)
b.field.piSplit[].nans == orig(b.field.piSplit[].nans)
b.field.piSplit[].field == orig(b.field.piSplit[].field)
b.field.e == orig(b.field.e)
b.field.eSplit == orig(b.field.eSplit)
b.field.eSplit.getClass().getName() == orig(b.field.eSplit.getClass().getName())
b.field.eSplit[] == orig(b.field.eSplit[])
b.field.eSplit[].mant == orig(b.field.eSplit[].mant)
b.field.eSplit[].sign == orig(b.field.eSplit[].sign)
b.field.eSplit[].exp == orig(b.field.eSplit[].exp)
b.field.eSplit[].nans == orig(b.field.eSplit[].nans)
b.field.eSplit[].field == orig(b.field.eSplit[].field)
b.field.ln2 == orig(b.field.ln2)
b.field.ln2Split == orig(b.field.ln2Split)
b.field.ln2Split.getClass().getName() == orig(b.field.ln2Split.getClass().getName())
b.field.ln2Split[] == orig(b.field.ln2Split[])
b.field.ln2Split[].mant == orig(b.field.ln2Split[].mant)
b.field.ln2Split[].sign == orig(b.field.ln2Split[].sign)
b.field.ln2Split[].exp == orig(b.field.ln2Split[].exp)
b.field.ln2Split[].nans == orig(b.field.ln2Split[].nans)
b.field.ln2Split[].field == orig(b.field.ln2Split[].field)
b.field.ln5 == orig(b.field.ln5)
b.field.ln5Split == orig(b.field.ln5Split)
b.field.ln5Split.getClass().getName() == orig(b.field.ln5Split.getClass().getName())
b.field.ln5Split[] == orig(b.field.ln5Split[])
b.field.ln5Split[].mant == orig(b.field.ln5Split[].mant)
b.field.ln5Split[].sign == orig(b.field.ln5Split[].sign)
b.field.ln5Split[].exp == orig(b.field.ln5Split[].exp)
b.field.ln5Split[].nans == orig(b.field.ln5Split[].nans)
b.field.ln5Split[].field == orig(b.field.ln5Split[].field)
b.field.ln10 == orig(b.field.ln10)
b.field.rMode == orig(b.field.rMode)
b.field.ieeeFlags == orig(b.field.ieeeFlags)
a.mant[] elements >= 0
a.sign == 1
a.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
a.field.radixDigits one of { 5, 50 }
a.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.sqr2Split[] elements != null
a.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.sqr2Split[].sign == [1, 1]
a.field.sqr2Split[].sign elements == 1
a.field.sqr2Split[].exp == [1, -1]
a.field.sqr2Split[].exp elements one of { -1, 1 }
a.field.sqr2Split[].exp elements != 0
a.field.sqr2Split[].exp sorted by >
a.field.sqr2Split[].nans == [0, 0]
a.field.sqr2Split[].nans elements == 0
a.field.sqr2Split[].field elements != null
a.field.sqr2Split[].field elements are equal
a.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.piSplit[] elements != null
a.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.piSplit[].mant sorted by <
a.field.piSplit[].sign == [1, 1]
a.field.piSplit[].sign elements == 1
a.field.piSplit[].exp == [1, -1]
a.field.piSplit[].exp elements one of { -1, 1 }
a.field.piSplit[].exp elements != 0
a.field.piSplit[].exp sorted by >
a.field.piSplit[].nans == [0, 0]
a.field.piSplit[].nans elements == 0
a.field.piSplit[].field elements != null
a.field.piSplit[].field elements are equal
a.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.eSplit[] elements != null
a.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.eSplit[].sign == [1, 1]
a.field.eSplit[].sign elements == 1
a.field.eSplit[].exp == [1, -1]
a.field.eSplit[].exp elements one of { -1, 1 }
a.field.eSplit[].exp elements != 0
a.field.eSplit[].exp sorted by >
a.field.eSplit[].nans == [0, 0]
a.field.eSplit[].nans elements == 0
a.field.eSplit[].field elements != null
a.field.eSplit[].field elements are equal
a.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.ln2Split[] elements != null
a.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.ln2Split[].mant sorted by >
a.field.ln2Split[].sign == [1, 1]
a.field.ln2Split[].sign elements == 1
a.field.ln2Split[].exp == [0, -2]
a.field.ln2Split[].exp elements one of { -2, 0 }
a.field.ln2Split[].exp sorted by >
a.field.ln2Split[].nans == [0, 0]
a.field.ln2Split[].nans elements == 0
a.field.ln2Split[].field elements != null
a.field.ln2Split[].field elements are equal
a.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
a.field.ln5Split[] elements != null
a.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
a.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
a.field.ln5Split[].mant sorted by >
a.field.ln5Split[].sign == [1, 1]
a.field.ln5Split[].sign elements == 1
a.field.ln5Split[].exp == [1, -1]
a.field.ln5Split[].exp elements one of { -1, 1 }
a.field.ln5Split[].exp elements != 0
a.field.ln5Split[].exp sorted by >
a.field.ln5Split[].nans == [0, 0]
a.field.ln5Split[].nans elements == 0
a.field.ln5Split[].field elements != null
a.field.ln5Split[].field elements are equal
a.field.rMode has only one value
a.field.ieeeFlags one of { 0, 16 }
b.mant[] elements >= 0
b.sign == 1
b.nans == 0
b.field.radixDigits one of { 5, 50 }
b.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.sqr2Split[] elements != null
b.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.sqr2Split[].sign == [1, 1]
b.field.sqr2Split[].sign elements == 1
b.field.sqr2Split[].exp == [1, -1]
b.field.sqr2Split[].exp elements one of { -1, 1 }
b.field.sqr2Split[].exp elements != 0
b.field.sqr2Split[].exp sorted by >
b.field.sqr2Split[].nans == [0, 0]
b.field.sqr2Split[].nans elements == 0
b.field.sqr2Split[].field elements != null
b.field.sqr2Split[].field elements are equal
b.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.piSplit[] elements != null
b.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.piSplit[].mant sorted by <
b.field.piSplit[].sign == [1, 1]
b.field.piSplit[].sign elements == 1
b.field.piSplit[].exp == [1, -1]
b.field.piSplit[].exp elements one of { -1, 1 }
b.field.piSplit[].exp elements != 0
b.field.piSplit[].exp sorted by >
b.field.piSplit[].nans == [0, 0]
b.field.piSplit[].nans elements == 0
b.field.piSplit[].field elements != null
b.field.piSplit[].field elements are equal
b.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.eSplit[] elements != null
b.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.eSplit[].sign == [1, 1]
b.field.eSplit[].sign elements == 1
b.field.eSplit[].exp == [1, -1]
b.field.eSplit[].exp elements one of { -1, 1 }
b.field.eSplit[].exp elements != 0
b.field.eSplit[].exp sorted by >
b.field.eSplit[].nans == [0, 0]
b.field.eSplit[].nans elements == 0
b.field.eSplit[].field elements != null
b.field.eSplit[].field elements are equal
b.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.ln2Split[] elements != null
b.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.ln2Split[].mant sorted by >
b.field.ln2Split[].sign == [1, 1]
b.field.ln2Split[].sign elements == 1
b.field.ln2Split[].exp == [0, -2]
b.field.ln2Split[].exp elements one of { -2, 0 }
b.field.ln2Split[].exp sorted by >
b.field.ln2Split[].nans == [0, 0]
b.field.ln2Split[].nans elements == 0
b.field.ln2Split[].field elements != null
b.field.ln2Split[].field elements are equal
b.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
b.field.ln5Split[] elements != null
b.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
b.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
b.field.ln5Split[].mant sorted by >
b.field.ln5Split[].sign == [1, 1]
b.field.ln5Split[].sign elements == 1
b.field.ln5Split[].exp == [1, -1]
b.field.ln5Split[].exp elements one of { -1, 1 }
b.field.ln5Split[].exp elements != 0
b.field.ln5Split[].exp sorted by >
b.field.ln5Split[].nans == [0, 0]
b.field.ln5Split[].nans elements == 0
b.field.ln5Split[].field elements != null
b.field.ln5Split[].field elements are equal
b.field.rMode has only one value
b.field.ieeeFlags one of { 0, 16 }
return one of { -1, 0, 1 }
size(a.mant[]) one of { 5, 50 }
size(a.field.sqr2Split[]) == 2
size(a.field.piSplit[]) == 2
size(a.field.eSplit[]) == 2
size(a.field.ln2Split[]) == 2
size(a.field.ln5Split[]) == 2
size(b.mant[]) one of { 5, 50 }
size(b.field.sqr2Split[]) == 2
size(b.field.piSplit[]) == 2
size(b.field.eSplit[]) == 2
size(b.field.ln2Split[]) == 2
size(b.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.equals(java.lang.Object):::ENTER
this.sign == 1
this.exp <= 1
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
other.getClass().getName() == org.apache.commons.math3.dfp.Dfp.class
===========================================================================
org.apache.commons.math3.dfp.Dfp.equals(java.lang.Object):::EXIT913
(return == false)  ==>  (org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304")
(return == false)  ==>  (size(this.field.one.mant[]) one of { 5, 50 })
(return == false)  ==>  (size(this.field.two.mant[]) one of { 5, 50 })
(return == false)  ==>  (size(this.field.zero.mant[]) one of { 5, 50 })
(return == false)  ==>  (size(this.mant[]) one of { 5, 50 })
(return == false)  ==>  (this.field.e.mant[] == [452, 8459, 8182, 7182, 2])
(return == false)  ==>  (this.field.e.mant[] elements >= 2)
(return == false)  ==>  (this.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.eSplit[] elements != null)
(return == false)  ==>  (this.field.eSplit[].exp == [1, -1])
(return == false)  ==>  (this.field.eSplit[].exp elements != 0)
(return == false)  ==>  (this.field.eSplit[].exp elements one of { -1, 1 })
(return == false)  ==>  (this.field.eSplit[].exp sorted by >)
(return == false)  ==>  (this.field.eSplit[].field elements != null)
(return == false)  ==>  (this.field.eSplit[].field elements are equal)
(return == false)  ==>  (this.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.eSplit[].nans == [0, 0])
(return == false)  ==>  (this.field.eSplit[].nans elements == 0)
(return == false)  ==>  (this.field.eSplit[].sign == [1, 1])
(return == false)  ==>  (this.field.eSplit[].sign elements == 1)
(return == false)  ==>  (this.field.ieeeFlags one of { 0, 16 })
(return == false)  ==>  (this.field.ln10.mant[] == [457, 2994, 8509, 3025, 2])
(return == false)  ==>  (this.field.ln10.mant[] elements >= 2)
(return == false)  ==>  (this.field.ln2.mant[] == [942, 9453, 559, 4718, 6931])
(return == false)  ==>  (this.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.ln2Split[] elements != null)
(return == false)  ==>  (this.field.ln2Split[].exp == [0, -2])
(return == false)  ==>  (this.field.ln2Split[].exp elements one of { -2, 0 })
(return == false)  ==>  (this.field.ln2Split[].exp sorted by >)
(return == false)  ==>  (this.field.ln2Split[].field elements != null)
(return == false)  ==>  (this.field.ln2Split[].field elements are equal)
(return == false)  ==>  (this.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.ln2Split[].mant sorted by >)
(return == false)  ==>  (this.field.ln2Split[].nans == [0, 0])
(return == false)  ==>  (this.field.ln2Split[].nans elements == 0)
(return == false)  ==>  (this.field.ln2Split[].sign == [1, 1])
(return == false)  ==>  (this.field.ln2Split[].sign elements == 1)
(return == false)  ==>  (this.field.ln5.mant[] == [1004, 2434, 3791, 6094, 1])
(return == false)  ==>  (this.field.ln5.mant[] elements >= 1)
(return == false)  ==>  (this.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.ln5Split[] elements != null)
(return == false)  ==>  (this.field.ln5Split[].exp == [1, -1])
(return == false)  ==>  (this.field.ln5Split[].exp elements != 0)
(return == false)  ==>  (this.field.ln5Split[].exp elements one of { -1, 1 })
(return == false)  ==>  (this.field.ln5Split[].exp sorted by >)
(return == false)  ==>  (this.field.ln5Split[].field elements != null)
(return == false)  ==>  (this.field.ln5Split[].field elements are equal)
(return == false)  ==>  (this.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.ln5Split[].mant sorted by >)
(return == false)  ==>  (this.field.ln5Split[].nans == [0, 0])
(return == false)  ==>  (this.field.ln5Split[].nans elements == 0)
(return == false)  ==>  (this.field.ln5Split[].sign == [1, 1])
(return == false)  ==>  (this.field.ln5Split[].sign elements == 1)
(return == false)  ==>  (this.field.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] })
(return == false)  ==>  (this.field.pi.mant[] == [7932, 3589, 9265, 1415, 3])
(return == false)  ==>  (this.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.piSplit[] elements != null)
(return == false)  ==>  (this.field.piSplit[].exp == [1, -1])
(return == false)  ==>  (this.field.piSplit[].exp elements != 0)
(return == false)  ==>  (this.field.piSplit[].exp elements one of { -1, 1 })
(return == false)  ==>  (this.field.piSplit[].exp sorted by >)
(return == false)  ==>  (this.field.piSplit[].field elements != null)
(return == false)  ==>  (this.field.piSplit[].field elements are equal)
(return == false)  ==>  (this.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.piSplit[].mant sorted by <)
(return == false)  ==>  (this.field.piSplit[].nans == [0, 0])
(return == false)  ==>  (this.field.piSplit[].nans elements == 0)
(return == false)  ==>  (this.field.piSplit[].sign == [1, 1])
(return == false)  ==>  (this.field.piSplit[].sign elements == 1)
(return == false)  ==>  (this.field.radixDigits one of { 5, 50 })
(return == false)  ==>  (this.field.sqr2.mant[] == [950, 2373, 1356, 4142, 1])
(return == false)  ==>  (this.field.sqr2.mant[] elements >= 1)
(return == false)  ==>  (this.field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071])
(return == false)  ==>  (this.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.sqr2Split[] elements != null)
(return == false)  ==>  (this.field.sqr2Split[].exp == [1, -1])
(return == false)  ==>  (this.field.sqr2Split[].exp elements != 0)
(return == false)  ==>  (this.field.sqr2Split[].exp elements one of { -1, 1 })
(return == false)  ==>  (this.field.sqr2Split[].exp sorted by >)
(return == false)  ==>  (this.field.sqr2Split[].field elements != null)
(return == false)  ==>  (this.field.sqr2Split[].field elements are equal)
(return == false)  ==>  (this.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.sqr2Split[].nans == [0, 0])
(return == false)  ==>  (this.field.sqr2Split[].nans elements == 0)
(return == false)  ==>  (this.field.sqr2Split[].sign == [1, 1])
(return == false)  ==>  (this.field.sqr2Split[].sign elements == 1)
(return == false)  ==>  (this.field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1])
(return == false)  ==>  (this.field.sqr3.mant[] elements >= 1)
(return == false)  ==>  (this.field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773])
(return == false)  ==>  (this.field.two.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2] })
(return == false)  ==>  (this.field.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.ln10String == null)
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value)
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.sqr2String has only one value)
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value)
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.sqr3String has only one value)
(return == true)  ==>  (size(this.field.one.mant[]) == 50)
(return == true)  ==>  (size(this.field.two.mant[]) == 50)
(return == true)  ==>  (size(this.field.zero.mant[]) == 50)
(return == true)  ==>  (size(this.mant[]) == 50)
(return == true)  ==>  (this.exp one of { 0, 1 })
(return == true)  ==>  (this.field has only one value)
(return == true)  ==>  (this.field.e == null)
(return == true)  ==>  (this.field.eSplit == null)
(return == true)  ==>  (this.field.ieeeFlags == 16)
(return == true)  ==>  (this.field.ln10 == null)
(return == true)  ==>  (this.field.ln2 == null)
(return == true)  ==>  (this.field.ln2Split == null)
(return == true)  ==>  (this.field.ln5 == null)
(return == true)  ==>  (this.field.ln5Split == null)
(return == true)  ==>  (this.field.one has only one value)
(return == true)  ==>  (this.field.one.field has only one value)
(return == true)  ==>  (this.field.one.mant has only one value)
(return == true)  ==>  (this.field.one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
(return == true)  ==>  (this.field.pi == null)
(return == true)  ==>  (this.field.piSplit == null)
(return == true)  ==>  (this.field.radixDigits == 50)
(return == true)  ==>  (this.field.sqr2 == null)
(return == true)  ==>  (this.field.sqr2Reciprocal == null)
(return == true)  ==>  (this.field.sqr2Split == null)
(return == true)  ==>  (this.field.sqr3 == null)
(return == true)  ==>  (this.field.sqr3Reciprocal == null)
(return == true)  ==>  (this.field.two has only one value)
(return == true)  ==>  (this.field.two.field has only one value)
(return == true)  ==>  (this.field.two.mant has only one value)
(return == true)  ==>  (this.field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2])
(return == true)  ==>  (this.field.zero has only one value)
(return == true)  ==>  (this.field.zero.field has only one value)
(return == true)  ==>  (this.field.zero.mant has only one value)
(return == true)  ==>  (this.field.zero.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
===========================================================================
org.apache.commons.math3.dfp.Dfp.equals(java.lang.Object):::EXIT913;condition="return == true"
===========================================================================
org.apache.commons.math3.dfp.Dfp.equals(java.lang.Object):::EXIT913;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.dfp.Dfp.equals(java.lang.Object):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
(return == false)  ==>  (org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304")
(return == false)  ==>  (size(this.field.one.mant[]) one of { 5, 50 })
(return == false)  ==>  (size(this.field.two.mant[]) one of { 5, 50 })
(return == false)  ==>  (size(this.field.zero.mant[]) one of { 5, 50 })
(return == false)  ==>  (size(this.mant[]) one of { 5, 50 })
(return == false)  ==>  (this.field.e.mant[] == [452, 8459, 8182, 7182, 2])
(return == false)  ==>  (this.field.e.mant[] elements >= 2)
(return == false)  ==>  (this.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.eSplit[] elements != null)
(return == false)  ==>  (this.field.eSplit[].exp == [1, -1])
(return == false)  ==>  (this.field.eSplit[].exp elements != 0)
(return == false)  ==>  (this.field.eSplit[].exp elements one of { -1, 1 })
(return == false)  ==>  (this.field.eSplit[].exp sorted by >)
(return == false)  ==>  (this.field.eSplit[].field elements != null)
(return == false)  ==>  (this.field.eSplit[].field elements are equal)
(return == false)  ==>  (this.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.eSplit[].nans == [0, 0])
(return == false)  ==>  (this.field.eSplit[].nans elements == 0)
(return == false)  ==>  (this.field.eSplit[].sign == [1, 1])
(return == false)  ==>  (this.field.eSplit[].sign elements == 1)
(return == false)  ==>  (this.field.ieeeFlags one of { 0, 16 })
(return == false)  ==>  (this.field.ln10.mant[] == [457, 2994, 8509, 3025, 2])
(return == false)  ==>  (this.field.ln10.mant[] elements >= 2)
(return == false)  ==>  (this.field.ln2.mant[] == [942, 9453, 559, 4718, 6931])
(return == false)  ==>  (this.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.ln2Split[] elements != null)
(return == false)  ==>  (this.field.ln2Split[].exp == [0, -2])
(return == false)  ==>  (this.field.ln2Split[].exp elements one of { -2, 0 })
(return == false)  ==>  (this.field.ln2Split[].exp sorted by >)
(return == false)  ==>  (this.field.ln2Split[].field elements != null)
(return == false)  ==>  (this.field.ln2Split[].field elements are equal)
(return == false)  ==>  (this.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.ln2Split[].mant sorted by >)
(return == false)  ==>  (this.field.ln2Split[].nans == [0, 0])
(return == false)  ==>  (this.field.ln2Split[].nans elements == 0)
(return == false)  ==>  (this.field.ln2Split[].sign == [1, 1])
(return == false)  ==>  (this.field.ln2Split[].sign elements == 1)
(return == false)  ==>  (this.field.ln5.mant[] == [1004, 2434, 3791, 6094, 1])
(return == false)  ==>  (this.field.ln5.mant[] elements >= 1)
(return == false)  ==>  (this.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.ln5Split[] elements != null)
(return == false)  ==>  (this.field.ln5Split[].exp == [1, -1])
(return == false)  ==>  (this.field.ln5Split[].exp elements != 0)
(return == false)  ==>  (this.field.ln5Split[].exp elements one of { -1, 1 })
(return == false)  ==>  (this.field.ln5Split[].exp sorted by >)
(return == false)  ==>  (this.field.ln5Split[].field elements != null)
(return == false)  ==>  (this.field.ln5Split[].field elements are equal)
(return == false)  ==>  (this.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.ln5Split[].mant sorted by >)
(return == false)  ==>  (this.field.ln5Split[].nans == [0, 0])
(return == false)  ==>  (this.field.ln5Split[].nans elements == 0)
(return == false)  ==>  (this.field.ln5Split[].sign == [1, 1])
(return == false)  ==>  (this.field.ln5Split[].sign elements == 1)
(return == false)  ==>  (this.field.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] })
(return == false)  ==>  (this.field.pi.mant[] == [7932, 3589, 9265, 1415, 3])
(return == false)  ==>  (this.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.piSplit[] elements != null)
(return == false)  ==>  (this.field.piSplit[].exp == [1, -1])
(return == false)  ==>  (this.field.piSplit[].exp elements != 0)
(return == false)  ==>  (this.field.piSplit[].exp elements one of { -1, 1 })
(return == false)  ==>  (this.field.piSplit[].exp sorted by >)
(return == false)  ==>  (this.field.piSplit[].field elements != null)
(return == false)  ==>  (this.field.piSplit[].field elements are equal)
(return == false)  ==>  (this.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.piSplit[].mant sorted by <)
(return == false)  ==>  (this.field.piSplit[].nans == [0, 0])
(return == false)  ==>  (this.field.piSplit[].nans elements == 0)
(return == false)  ==>  (this.field.piSplit[].sign == [1, 1])
(return == false)  ==>  (this.field.piSplit[].sign elements == 1)
(return == false)  ==>  (this.field.radixDigits one of { 5, 50 })
(return == false)  ==>  (this.field.sqr2.mant[] == [950, 2373, 1356, 4142, 1])
(return == false)  ==>  (this.field.sqr2.mant[] elements >= 1)
(return == false)  ==>  (this.field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071])
(return == false)  ==>  (this.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class)
(return == false)  ==>  (this.field.sqr2Split[] elements != null)
(return == false)  ==>  (this.field.sqr2Split[].exp == [1, -1])
(return == false)  ==>  (this.field.sqr2Split[].exp elements != 0)
(return == false)  ==>  (this.field.sqr2Split[].exp elements one of { -1, 1 })
(return == false)  ==>  (this.field.sqr2Split[].exp sorted by >)
(return == false)  ==>  (this.field.sqr2Split[].field elements != null)
(return == false)  ==>  (this.field.sqr2Split[].field elements are equal)
(return == false)  ==>  (this.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp])
(return == false)  ==>  (this.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class)
(return == false)  ==>  (this.field.sqr2Split[].nans == [0, 0])
(return == false)  ==>  (this.field.sqr2Split[].nans elements == 0)
(return == false)  ==>  (this.field.sqr2Split[].sign == [1, 1])
(return == false)  ==>  (this.field.sqr2Split[].sign elements == 1)
(return == false)  ==>  (this.field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1])
(return == false)  ==>  (this.field.sqr3.mant[] elements >= 1)
(return == false)  ==>  (this.field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773])
(return == false)  ==>  (this.field.two.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2] })
(return == false)  ==>  (this.field.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.ln10String == null)
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value)
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.sqr2String has only one value)
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value)
(return == true)  ==>  (org.apache.commons.math3.dfp.DfpField.sqr3String has only one value)
(return == true)  ==>  (size(this.field.one.mant[]) == 50)
(return == true)  ==>  (size(this.field.two.mant[]) == 50)
(return == true)  ==>  (size(this.field.zero.mant[]) == 50)
(return == true)  ==>  (size(this.mant[]) == 50)
(return == true)  ==>  (this.exp one of { 0, 1 })
(return == true)  ==>  (this.field has only one value)
(return == true)  ==>  (this.field.e == null)
(return == true)  ==>  (this.field.eSplit == null)
(return == true)  ==>  (this.field.ieeeFlags == 16)
(return == true)  ==>  (this.field.ln10 == null)
(return == true)  ==>  (this.field.ln2 == null)
(return == true)  ==>  (this.field.ln2Split == null)
(return == true)  ==>  (this.field.ln5 == null)
(return == true)  ==>  (this.field.ln5Split == null)
(return == true)  ==>  (this.field.one has only one value)
(return == true)  ==>  (this.field.one.field has only one value)
(return == true)  ==>  (this.field.one.mant has only one value)
(return == true)  ==>  (this.field.one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
(return == true)  ==>  (this.field.pi == null)
(return == true)  ==>  (this.field.piSplit == null)
(return == true)  ==>  (this.field.radixDigits == 50)
(return == true)  ==>  (this.field.sqr2 == null)
(return == true)  ==>  (this.field.sqr2Reciprocal == null)
(return == true)  ==>  (this.field.sqr2Split == null)
(return == true)  ==>  (this.field.sqr3 == null)
(return == true)  ==>  (this.field.sqr3Reciprocal == null)
(return == true)  ==>  (this.field.two has only one value)
(return == true)  ==>  (this.field.two.field has only one value)
(return == true)  ==>  (this.field.two.mant has only one value)
(return == true)  ==>  (this.field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2])
(return == true)  ==>  (this.field.zero has only one value)
(return == true)  ==>  (this.field.zero.field has only one value)
(return == true)  ==>  (this.field.zero.mant has only one value)
(return == true)  ==>  (this.field.zero.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
this.sign == 1
this.exp <= 1
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
===========================================================================
org.apache.commons.math3.dfp.Dfp.equals(java.lang.Object):::EXIT;condition="return == true"
this.exp one of { 0, 1 }
this.field has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.ln10String == null
this.field.radixDigits == 50
this.field.zero has only one value
this.field.zero.mant has only one value
this.field.zero.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.field.zero.field has only one value
this.field.one has only one value
this.field.one.mant has only one value
this.field.one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
this.field.one.field has only one value
this.field.two has only one value
this.field.two.mant has only one value
this.field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
this.field.two.field has only one value
this.field.sqr2 == null
this.field.sqr2Split == null
this.field.sqr2Reciprocal == null
this.field.sqr3 == null
this.field.sqr3Reciprocal == null
this.field.pi == null
this.field.piSplit == null
this.field.e == null
this.field.eSplit == null
this.field.ln2 == null
this.field.ln2Split == null
this.field.ln5 == null
this.field.ln5Split == null
this.field.ln10 == null
this.field.ieeeFlags == 16
return == true
size(this.mant[]) == 50
size(this.field.zero.mant[]) == 50
size(this.field.one.mant[]) == 50
size(this.field.two.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.Dfp.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.dfp.Dfp.getField():::ENTER
this.exp one of { 0, 1 }
this.nans one of { 0, 1 }
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
===========================================================================
org.apache.commons.math3.dfp.Dfp.getField():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.exp one of { 0, 1 }
this.nans one of { 0, 1 }
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
return.radixDigits one of { 5, 50 }
return.zero.mant[] elements == 0
return.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.zero.sign == 1
return.zero.exp == 0
return.zero.nans == 0
return.one.mant[] elements one of { 0, 1 }
return.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] }
return.one.mant[] sorted by <=
return.one.sign == 1
return.one.exp == 1
return.one.nans == 0
return.two.mant[] elements one of { 0, 2 }
return.two.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2] }
return.two.mant[] sorted by <=
return.two.sign == 1
return.two.exp == 1
return.two.nans == 0
return.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
return.sqr2.mant[] elements >= 1
return.sqr2.sign == 1
return.sqr2.exp == 1
return.sqr2.nans == 0
return.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.sqr2Split[] elements != null
return.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.sqr2Split[].sign == [1, 1]
return.sqr2Split[].sign elements == 1
return.sqr2Split[].exp == [1, -1]
return.sqr2Split[].exp elements one of { -1, 1 }
return.sqr2Split[].exp elements != 0
return.sqr2Split[].exp sorted by >
return.sqr2Split[].nans == [0, 0]
return.sqr2Split[].nans elements == 0
return.sqr2Split[].field elements != null
return.sqr2Split[].field elements are equal
return.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
return.sqr2Reciprocal.sign == 1
return.sqr2Reciprocal.exp == 0
return.sqr2Reciprocal.nans == 0
return.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
return.sqr3.mant[] elements >= 1
return.sqr3.sign == 1
return.sqr3.exp == 1
return.sqr3.nans == 0
return.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
return.sqr3Reciprocal.sign == 1
return.sqr3Reciprocal.exp == 0
return.sqr3Reciprocal.nans == 0
return.pi.mant[] == [7932, 3589, 9265, 1415, 3]
return.pi.sign == 1
return.pi.exp == 1
return.pi.nans == 0
return.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.piSplit[] elements != null
return.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.piSplit[].mant sorted by <
return.piSplit[].sign == [1, 1]
return.piSplit[].sign elements == 1
return.piSplit[].exp == [1, -1]
return.piSplit[].exp elements one of { -1, 1 }
return.piSplit[].exp elements != 0
return.piSplit[].exp sorted by >
return.piSplit[].nans == [0, 0]
return.piSplit[].nans elements == 0
return.piSplit[].field elements != null
return.piSplit[].field elements are equal
return.e.mant[] == [452, 8459, 8182, 7182, 2]
return.e.mant[] elements >= 2
return.e.sign == 1
return.e.exp == 1
return.e.nans == 0
return.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.eSplit[] elements != null
return.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.eSplit[].sign == [1, 1]
return.eSplit[].sign elements == 1
return.eSplit[].exp == [1, -1]
return.eSplit[].exp elements one of { -1, 1 }
return.eSplit[].exp elements != 0
return.eSplit[].exp sorted by >
return.eSplit[].nans == [0, 0]
return.eSplit[].nans elements == 0
return.eSplit[].field elements != null
return.eSplit[].field elements are equal
return.ln2.mant[] == [942, 9453, 559, 4718, 6931]
return.ln2.sign == 1
return.ln2.exp == 0
return.ln2.nans == 0
return.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.ln2Split[] elements != null
return.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.ln2Split[].mant sorted by >
return.ln2Split[].sign == [1, 1]
return.ln2Split[].sign elements == 1
return.ln2Split[].exp == [0, -2]
return.ln2Split[].exp elements one of { -2, 0 }
return.ln2Split[].exp sorted by >
return.ln2Split[].nans == [0, 0]
return.ln2Split[].nans elements == 0
return.ln2Split[].field elements != null
return.ln2Split[].field elements are equal
return.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
return.ln5.mant[] elements >= 1
return.ln5.sign == 1
return.ln5.exp == 1
return.ln5.nans == 0
return.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.ln5Split[] elements != null
return.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.ln5Split[].mant sorted by >
return.ln5Split[].sign == [1, 1]
return.ln5Split[].sign elements == 1
return.ln5Split[].exp == [1, -1]
return.ln5Split[].exp elements one of { -1, 1 }
return.ln5Split[].exp elements != 0
return.ln5Split[].exp sorted by >
return.ln5Split[].nans == [0, 0]
return.ln5Split[].nans elements == 0
return.ln5Split[].field elements != null
return.ln5Split[].field elements are equal
return.ln10.mant[] == [457, 2994, 8509, 3025, 2]
return.ln10.mant[] elements >= 2
return.ln10.sign == 1
return.ln10.exp == 1
return.ln10.nans == 0
return.rMode has only one value
return.ieeeFlags one of { 0, 16, 18 }
size(return.zero.mant[]) one of { 5, 50 }
size(return.one.mant[]) one of { 5, 50 }
size(return.two.mant[]) one of { 5, 50 }
size(return.sqr2.mant[]) == 5
size(return.sqr2Split[]) == 2
size(return.sqr2Reciprocal.mant[]) == 5
size(return.sqr3.mant[]) == 5
size(return.sqr3Reciprocal.mant[]) == 5
size(return.pi.mant[]) == 5
size(return.piSplit[]) == 2
size(return.e.mant[]) == 5
size(return.eSplit[]) == 2
size(return.ln2.mant[]) == 5
size(return.ln2Split[]) == 2
size(return.ln5.mant[]) == 5
size(return.ln5Split[]) == 2
size(return.ln10.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.getOne():::ENTER
this.sign == 1
this.exp one of { 1, 4 }
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.getOne():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.sign == 1
this.exp one of { 1, 4 }
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
return.mant[] == [0, 0, 0, 0, 1]
return.mant[] elements one of { 0, 1 }
return.mant[] sorted by <=
return.sign == 1
return.exp == 1
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.getRadixDigits():::ENTER
this.mant[] == [0, 0, 0, 0, 0]
this.mant[] elements == 0
this.sign == 1
this.exp == 0
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.getRadixDigits():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.mant[] == [0, 0, 0, 0, 0]
this.mant[] elements == 0
this.sign == 1
this.exp == 0
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
return == 5
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.getTwo():::ENTER
this.mant[] elements >= 1
this.sign == 1
this.exp == 1
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.getTwo():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.mant[] elements >= 1
this.sign == 1
this.exp == 1
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
return.mant[] == [0, 0, 0, 0, 2]
return.mant[] elements one of { 0, 2 }
return.mant[] sorted by <=
return.sign == 1
return.exp == 1
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.getZero():::ENTER
this.nans == 0
===========================================================================
org.apache.commons.math3.dfp.Dfp.getZero():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.nans == 0
return.mant[] elements == 0
return.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.sign == 1
return.exp == 0
return.nans == 0
return.field.radixDigits one of { 5, 50 }
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags one of { 0, 16, 18 }
size(return.mant[]) one of { 5, 50 }
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.greaterThan(org.apache.commons.math3.dfp.Dfp):::ENTER
this.sign == 1
this.exp one of { 0, 1 }
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
x.mant[] elements >= 0
x.sign == 1
x.exp one of { 0, 1 }
x.nans == 0
x.field.radixDigits one of { 5, 50 }
x.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.sqr2Split[] elements != null
x.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.sqr2Split[].sign == [1, 1]
x.field.sqr2Split[].sign elements == 1
x.field.sqr2Split[].exp == [1, -1]
x.field.sqr2Split[].exp elements one of { -1, 1 }
x.field.sqr2Split[].exp elements != 0
x.field.sqr2Split[].exp sorted by >
x.field.sqr2Split[].nans == [0, 0]
x.field.sqr2Split[].nans elements == 0
x.field.sqr2Split[].field elements != null
x.field.sqr2Split[].field elements are equal
x.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.piSplit[] elements != null
x.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.piSplit[].mant sorted by <
x.field.piSplit[].sign == [1, 1]
x.field.piSplit[].sign elements == 1
x.field.piSplit[].exp == [1, -1]
x.field.piSplit[].exp elements one of { -1, 1 }
x.field.piSplit[].exp elements != 0
x.field.piSplit[].exp sorted by >
x.field.piSplit[].nans == [0, 0]
x.field.piSplit[].nans elements == 0
x.field.piSplit[].field elements != null
x.field.piSplit[].field elements are equal
x.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.eSplit[] elements != null
x.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.eSplit[].sign == [1, 1]
x.field.eSplit[].sign elements == 1
x.field.eSplit[].exp == [1, -1]
x.field.eSplit[].exp elements one of { -1, 1 }
x.field.eSplit[].exp elements != 0
x.field.eSplit[].exp sorted by >
x.field.eSplit[].nans == [0, 0]
x.field.eSplit[].nans elements == 0
x.field.eSplit[].field elements != null
x.field.eSplit[].field elements are equal
x.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.ln2Split[] elements != null
x.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.ln2Split[].mant sorted by >
x.field.ln2Split[].sign == [1, 1]
x.field.ln2Split[].sign elements == 1
x.field.ln2Split[].exp == [0, -2]
x.field.ln2Split[].exp elements one of { -2, 0 }
x.field.ln2Split[].exp sorted by >
x.field.ln2Split[].nans == [0, 0]
x.field.ln2Split[].nans elements == 0
x.field.ln2Split[].field elements != null
x.field.ln2Split[].field elements are equal
x.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.ln5Split[] elements != null
x.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.ln5Split[].mant sorted by >
x.field.ln5Split[].sign == [1, 1]
x.field.ln5Split[].sign elements == 1
x.field.ln5Split[].exp == [1, -1]
x.field.ln5Split[].exp elements one of { -1, 1 }
x.field.ln5Split[].exp elements != 0
x.field.ln5Split[].exp sorted by >
x.field.ln5Split[].nans == [0, 0]
x.field.ln5Split[].nans elements == 0
x.field.ln5Split[].field elements != null
x.field.ln5Split[].field elements are equal
x.field.rMode has only one value
x.field.ieeeFlags one of { 0, 16 }
size(x.mant[]) one of { 5, 50 }
size(x.field.sqr2Split[]) == 2
size(x.field.piSplit[]) == 2
size(x.field.eSplit[]) == 2
size(x.field.ln2Split[]) == 2
size(x.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.greaterThan(org.apache.commons.math3.dfp.Dfp):::EXIT798
(return == false)  ==>  (x.exp one of { 0, 1 })
(return == true)  ==>  (x.exp == 0)
===========================================================================
org.apache.commons.math3.dfp.Dfp.greaterThan(org.apache.commons.math3.dfp.Dfp):::EXIT798;condition="return == true"
===========================================================================
org.apache.commons.math3.dfp.Dfp.greaterThan(org.apache.commons.math3.dfp.Dfp):::EXIT798;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.dfp.Dfp.greaterThan(org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
x.mant == orig(x.mant)
x.mant[] == orig(x.mant[])
x.sign == orig(x.sign)
x.exp == orig(x.exp)
x.nans == orig(x.nans)
x.field == orig(x.field)
x.field.radixDigits == orig(x.field.radixDigits)
x.field.zero == orig(x.field.zero)
x.field.one == orig(x.field.one)
x.field.two == orig(x.field.two)
x.field.sqr2 == orig(x.field.sqr2)
x.field.sqr2Split == orig(x.field.sqr2Split)
x.field.sqr2Split.getClass().getName() == orig(x.field.sqr2Split.getClass().getName())
x.field.sqr2Split[] == orig(x.field.sqr2Split[])
x.field.sqr2Split[].mant == orig(x.field.sqr2Split[].mant)
x.field.sqr2Split[].sign == orig(x.field.sqr2Split[].sign)
x.field.sqr2Split[].exp == orig(x.field.sqr2Split[].exp)
x.field.sqr2Split[].nans == orig(x.field.sqr2Split[].nans)
x.field.sqr2Split[].field == orig(x.field.sqr2Split[].field)
x.field.sqr2Reciprocal == orig(x.field.sqr2Reciprocal)
x.field.sqr3 == orig(x.field.sqr3)
x.field.sqr3Reciprocal == orig(x.field.sqr3Reciprocal)
x.field.pi == orig(x.field.pi)
x.field.piSplit == orig(x.field.piSplit)
x.field.piSplit.getClass().getName() == orig(x.field.piSplit.getClass().getName())
x.field.piSplit[] == orig(x.field.piSplit[])
x.field.piSplit[].mant == orig(x.field.piSplit[].mant)
x.field.piSplit[].sign == orig(x.field.piSplit[].sign)
x.field.piSplit[].exp == orig(x.field.piSplit[].exp)
x.field.piSplit[].nans == orig(x.field.piSplit[].nans)
x.field.piSplit[].field == orig(x.field.piSplit[].field)
x.field.e == orig(x.field.e)
x.field.eSplit == orig(x.field.eSplit)
x.field.eSplit.getClass().getName() == orig(x.field.eSplit.getClass().getName())
x.field.eSplit[] == orig(x.field.eSplit[])
x.field.eSplit[].mant == orig(x.field.eSplit[].mant)
x.field.eSplit[].sign == orig(x.field.eSplit[].sign)
x.field.eSplit[].exp == orig(x.field.eSplit[].exp)
x.field.eSplit[].nans == orig(x.field.eSplit[].nans)
x.field.eSplit[].field == orig(x.field.eSplit[].field)
x.field.ln2 == orig(x.field.ln2)
x.field.ln2Split == orig(x.field.ln2Split)
x.field.ln2Split.getClass().getName() == orig(x.field.ln2Split.getClass().getName())
x.field.ln2Split[] == orig(x.field.ln2Split[])
x.field.ln2Split[].mant == orig(x.field.ln2Split[].mant)
x.field.ln2Split[].sign == orig(x.field.ln2Split[].sign)
x.field.ln2Split[].exp == orig(x.field.ln2Split[].exp)
x.field.ln2Split[].nans == orig(x.field.ln2Split[].nans)
x.field.ln2Split[].field == orig(x.field.ln2Split[].field)
x.field.ln5 == orig(x.field.ln5)
x.field.ln5Split == orig(x.field.ln5Split)
x.field.ln5Split.getClass().getName() == orig(x.field.ln5Split.getClass().getName())
x.field.ln5Split[] == orig(x.field.ln5Split[])
x.field.ln5Split[].mant == orig(x.field.ln5Split[].mant)
x.field.ln5Split[].sign == orig(x.field.ln5Split[].sign)
x.field.ln5Split[].exp == orig(x.field.ln5Split[].exp)
x.field.ln5Split[].nans == orig(x.field.ln5Split[].nans)
x.field.ln5Split[].field == orig(x.field.ln5Split[].field)
x.field.ln10 == orig(x.field.ln10)
x.field.rMode == orig(x.field.rMode)
x.field.ieeeFlags == orig(x.field.ieeeFlags)
(return == false)  ==>  (x.exp one of { 0, 1 })
(return == true)  ==>  (x.exp == 0)
this.sign == 1
this.exp one of { 0, 1 }
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
x.mant[] elements >= 0
x.sign == 1
x.exp one of { 0, 1 }
x.nans == 0
x.field.radixDigits one of { 5, 50 }
x.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.sqr2Split[] elements != null
x.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.sqr2Split[].sign == [1, 1]
x.field.sqr2Split[].sign elements == 1
x.field.sqr2Split[].exp == [1, -1]
x.field.sqr2Split[].exp elements one of { -1, 1 }
x.field.sqr2Split[].exp elements != 0
x.field.sqr2Split[].exp sorted by >
x.field.sqr2Split[].nans == [0, 0]
x.field.sqr2Split[].nans elements == 0
x.field.sqr2Split[].field elements != null
x.field.sqr2Split[].field elements are equal
x.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.piSplit[] elements != null
x.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.piSplit[].mant sorted by <
x.field.piSplit[].sign == [1, 1]
x.field.piSplit[].sign elements == 1
x.field.piSplit[].exp == [1, -1]
x.field.piSplit[].exp elements one of { -1, 1 }
x.field.piSplit[].exp elements != 0
x.field.piSplit[].exp sorted by >
x.field.piSplit[].nans == [0, 0]
x.field.piSplit[].nans elements == 0
x.field.piSplit[].field elements != null
x.field.piSplit[].field elements are equal
x.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.eSplit[] elements != null
x.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.eSplit[].sign == [1, 1]
x.field.eSplit[].sign elements == 1
x.field.eSplit[].exp == [1, -1]
x.field.eSplit[].exp elements one of { -1, 1 }
x.field.eSplit[].exp elements != 0
x.field.eSplit[].exp sorted by >
x.field.eSplit[].nans == [0, 0]
x.field.eSplit[].nans elements == 0
x.field.eSplit[].field elements != null
x.field.eSplit[].field elements are equal
x.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.ln2Split[] elements != null
x.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.ln2Split[].mant sorted by >
x.field.ln2Split[].sign == [1, 1]
x.field.ln2Split[].sign elements == 1
x.field.ln2Split[].exp == [0, -2]
x.field.ln2Split[].exp elements one of { -2, 0 }
x.field.ln2Split[].exp sorted by >
x.field.ln2Split[].nans == [0, 0]
x.field.ln2Split[].nans elements == 0
x.field.ln2Split[].field elements != null
x.field.ln2Split[].field elements are equal
x.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.ln5Split[] elements != null
x.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.ln5Split[].mant sorted by >
x.field.ln5Split[].sign == [1, 1]
x.field.ln5Split[].sign elements == 1
x.field.ln5Split[].exp == [1, -1]
x.field.ln5Split[].exp elements one of { -1, 1 }
x.field.ln5Split[].exp elements != 0
x.field.ln5Split[].exp sorted by >
x.field.ln5Split[].nans == [0, 0]
x.field.ln5Split[].nans elements == 0
x.field.ln5Split[].field elements != null
x.field.ln5Split[].field elements are equal
x.field.rMode has only one value
x.field.ieeeFlags one of { 0, 16 }
size(x.mant[]) one of { 5, 50 }
size(x.field.sqr2Split[]) == 2
size(x.field.piSplit[]) == 2
size(x.field.eSplit[]) == 2
size(x.field.ln2Split[]) == 2
size(x.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.greaterThan(org.apache.commons.math3.dfp.Dfp):::EXIT;condition="return == true"
x.exp == 0
return == true
===========================================================================
org.apache.commons.math3.dfp.Dfp.greaterThan(org.apache.commons.math3.dfp.Dfp):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.dfp.Dfp.isInfinite():::ENTER
this.mant[] elements >= 1
this.sign == 1
this.exp == 1
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.isInfinite():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.mant[] elements >= 1
this.sign == 1
this.exp == 1
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
return == false
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.isInfinite():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.dfp.Dfp.isNaN():::ENTER
this.sign == 1
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
===========================================================================
org.apache.commons.math3.dfp.Dfp.isNaN():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.sign == 1
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
return == false
===========================================================================
org.apache.commons.math3.dfp.Dfp.isNaN():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.dfp.Dfp.lessThan(org.apache.commons.math3.dfp.Dfp):::ENTER
this.sign == 1
this.exp one of { 0, 1 }
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
x.mant[] elements >= 0
x.sign == 1
x.exp one of { 0, 1 }
x.nans == 0
x.field.radixDigits one of { 5, 50 }
x.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.sqr2Split[] elements != null
x.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.sqr2Split[].sign == [1, 1]
x.field.sqr2Split[].sign elements == 1
x.field.sqr2Split[].exp == [1, -1]
x.field.sqr2Split[].exp elements one of { -1, 1 }
x.field.sqr2Split[].exp elements != 0
x.field.sqr2Split[].exp sorted by >
x.field.sqr2Split[].nans == [0, 0]
x.field.sqr2Split[].nans elements == 0
x.field.sqr2Split[].field elements != null
x.field.sqr2Split[].field elements are equal
x.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.piSplit[] elements != null
x.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.piSplit[].mant sorted by <
x.field.piSplit[].sign == [1, 1]
x.field.piSplit[].sign elements == 1
x.field.piSplit[].exp == [1, -1]
x.field.piSplit[].exp elements one of { -1, 1 }
x.field.piSplit[].exp elements != 0
x.field.piSplit[].exp sorted by >
x.field.piSplit[].nans == [0, 0]
x.field.piSplit[].nans elements == 0
x.field.piSplit[].field elements != null
x.field.piSplit[].field elements are equal
x.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.eSplit[] elements != null
x.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.eSplit[].sign == [1, 1]
x.field.eSplit[].sign elements == 1
x.field.eSplit[].exp == [1, -1]
x.field.eSplit[].exp elements one of { -1, 1 }
x.field.eSplit[].exp elements != 0
x.field.eSplit[].exp sorted by >
x.field.eSplit[].nans == [0, 0]
x.field.eSplit[].nans elements == 0
x.field.eSplit[].field elements != null
x.field.eSplit[].field elements are equal
x.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.ln2Split[] elements != null
x.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.ln2Split[].mant sorted by >
x.field.ln2Split[].sign == [1, 1]
x.field.ln2Split[].sign elements == 1
x.field.ln2Split[].exp == [0, -2]
x.field.ln2Split[].exp elements one of { -2, 0 }
x.field.ln2Split[].exp sorted by >
x.field.ln2Split[].nans == [0, 0]
x.field.ln2Split[].nans elements == 0
x.field.ln2Split[].field elements != null
x.field.ln2Split[].field elements are equal
x.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.ln5Split[] elements != null
x.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.ln5Split[].mant sorted by >
x.field.ln5Split[].sign == [1, 1]
x.field.ln5Split[].sign elements == 1
x.field.ln5Split[].exp == [1, -1]
x.field.ln5Split[].exp elements one of { -1, 1 }
x.field.ln5Split[].exp elements != 0
x.field.ln5Split[].exp sorted by >
x.field.ln5Split[].nans == [0, 0]
x.field.ln5Split[].nans elements == 0
x.field.ln5Split[].field elements != null
x.field.ln5Split[].field elements are equal
x.field.rMode has only one value
x.field.ieeeFlags one of { 0, 16 }
size(x.mant[]) one of { 5, 50 }
size(x.field.sqr2Split[]) == 2
size(x.field.piSplit[]) == 2
size(x.field.eSplit[]) == 2
size(x.field.ln2Split[]) == 2
size(x.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.lessThan(org.apache.commons.math3.dfp.Dfp):::EXIT773
(return == false)  ==>  (this.field.ieeeFlags == 16)
(return == false)  ==>  (x.field.ieeeFlags == 16)
(return == false)  ==>  (x.mant[] elements >= 1)
(return == true)  ==>  (this.field.ieeeFlags one of { 0, 16 })
(return == true)  ==>  (x.field.ieeeFlags one of { 0, 16 })
(return == true)  ==>  (x.mant[] elements >= 0)
===========================================================================
org.apache.commons.math3.dfp.Dfp.lessThan(org.apache.commons.math3.dfp.Dfp):::EXIT773;condition="return == true"
===========================================================================
org.apache.commons.math3.dfp.Dfp.lessThan(org.apache.commons.math3.dfp.Dfp):::EXIT773;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.dfp.Dfp.lessThan(org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
x.mant == orig(x.mant)
x.mant[] == orig(x.mant[])
x.sign == orig(x.sign)
x.exp == orig(x.exp)
x.nans == orig(x.nans)
x.field == orig(x.field)
x.field.radixDigits == orig(x.field.radixDigits)
x.field.zero == orig(x.field.zero)
x.field.one == orig(x.field.one)
x.field.two == orig(x.field.two)
x.field.sqr2 == orig(x.field.sqr2)
x.field.sqr2Split == orig(x.field.sqr2Split)
x.field.sqr2Split.getClass().getName() == orig(x.field.sqr2Split.getClass().getName())
x.field.sqr2Split[] == orig(x.field.sqr2Split[])
x.field.sqr2Split[].mant == orig(x.field.sqr2Split[].mant)
x.field.sqr2Split[].sign == orig(x.field.sqr2Split[].sign)
x.field.sqr2Split[].exp == orig(x.field.sqr2Split[].exp)
x.field.sqr2Split[].nans == orig(x.field.sqr2Split[].nans)
x.field.sqr2Split[].field == orig(x.field.sqr2Split[].field)
x.field.sqr2Reciprocal == orig(x.field.sqr2Reciprocal)
x.field.sqr3 == orig(x.field.sqr3)
x.field.sqr3Reciprocal == orig(x.field.sqr3Reciprocal)
x.field.pi == orig(x.field.pi)
x.field.piSplit == orig(x.field.piSplit)
x.field.piSplit.getClass().getName() == orig(x.field.piSplit.getClass().getName())
x.field.piSplit[] == orig(x.field.piSplit[])
x.field.piSplit[].mant == orig(x.field.piSplit[].mant)
x.field.piSplit[].sign == orig(x.field.piSplit[].sign)
x.field.piSplit[].exp == orig(x.field.piSplit[].exp)
x.field.piSplit[].nans == orig(x.field.piSplit[].nans)
x.field.piSplit[].field == orig(x.field.piSplit[].field)
x.field.e == orig(x.field.e)
x.field.eSplit == orig(x.field.eSplit)
x.field.eSplit.getClass().getName() == orig(x.field.eSplit.getClass().getName())
x.field.eSplit[] == orig(x.field.eSplit[])
x.field.eSplit[].mant == orig(x.field.eSplit[].mant)
x.field.eSplit[].sign == orig(x.field.eSplit[].sign)
x.field.eSplit[].exp == orig(x.field.eSplit[].exp)
x.field.eSplit[].nans == orig(x.field.eSplit[].nans)
x.field.eSplit[].field == orig(x.field.eSplit[].field)
x.field.ln2 == orig(x.field.ln2)
x.field.ln2Split == orig(x.field.ln2Split)
x.field.ln2Split.getClass().getName() == orig(x.field.ln2Split.getClass().getName())
x.field.ln2Split[] == orig(x.field.ln2Split[])
x.field.ln2Split[].mant == orig(x.field.ln2Split[].mant)
x.field.ln2Split[].sign == orig(x.field.ln2Split[].sign)
x.field.ln2Split[].exp == orig(x.field.ln2Split[].exp)
x.field.ln2Split[].nans == orig(x.field.ln2Split[].nans)
x.field.ln2Split[].field == orig(x.field.ln2Split[].field)
x.field.ln5 == orig(x.field.ln5)
x.field.ln5Split == orig(x.field.ln5Split)
x.field.ln5Split.getClass().getName() == orig(x.field.ln5Split.getClass().getName())
x.field.ln5Split[] == orig(x.field.ln5Split[])
x.field.ln5Split[].mant == orig(x.field.ln5Split[].mant)
x.field.ln5Split[].sign == orig(x.field.ln5Split[].sign)
x.field.ln5Split[].exp == orig(x.field.ln5Split[].exp)
x.field.ln5Split[].nans == orig(x.field.ln5Split[].nans)
x.field.ln5Split[].field == orig(x.field.ln5Split[].field)
x.field.ln10 == orig(x.field.ln10)
x.field.rMode == orig(x.field.rMode)
x.field.ieeeFlags == orig(x.field.ieeeFlags)
(return == false)  ==>  (this.field.ieeeFlags == 16)
(return == false)  ==>  (x.field.ieeeFlags == 16)
(return == false)  ==>  (x.mant[] elements >= 1)
(return == true)  ==>  (this.field.ieeeFlags one of { 0, 16 })
(return == true)  ==>  (x.field.ieeeFlags one of { 0, 16 })
(return == true)  ==>  (x.mant[] elements >= 0)
this.sign == 1
this.exp one of { 0, 1 }
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
x.mant[] elements >= 0
x.sign == 1
x.exp one of { 0, 1 }
x.nans == 0
x.field.radixDigits one of { 5, 50 }
x.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.sqr2Split[] elements != null
x.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.sqr2Split[].sign == [1, 1]
x.field.sqr2Split[].sign elements == 1
x.field.sqr2Split[].exp == [1, -1]
x.field.sqr2Split[].exp elements one of { -1, 1 }
x.field.sqr2Split[].exp elements != 0
x.field.sqr2Split[].exp sorted by >
x.field.sqr2Split[].nans == [0, 0]
x.field.sqr2Split[].nans elements == 0
x.field.sqr2Split[].field elements != null
x.field.sqr2Split[].field elements are equal
x.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.piSplit[] elements != null
x.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.piSplit[].mant sorted by <
x.field.piSplit[].sign == [1, 1]
x.field.piSplit[].sign elements == 1
x.field.piSplit[].exp == [1, -1]
x.field.piSplit[].exp elements one of { -1, 1 }
x.field.piSplit[].exp elements != 0
x.field.piSplit[].exp sorted by >
x.field.piSplit[].nans == [0, 0]
x.field.piSplit[].nans elements == 0
x.field.piSplit[].field elements != null
x.field.piSplit[].field elements are equal
x.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.eSplit[] elements != null
x.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.eSplit[].sign == [1, 1]
x.field.eSplit[].sign elements == 1
x.field.eSplit[].exp == [1, -1]
x.field.eSplit[].exp elements one of { -1, 1 }
x.field.eSplit[].exp elements != 0
x.field.eSplit[].exp sorted by >
x.field.eSplit[].nans == [0, 0]
x.field.eSplit[].nans elements == 0
x.field.eSplit[].field elements != null
x.field.eSplit[].field elements are equal
x.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.ln2Split[] elements != null
x.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.ln2Split[].mant sorted by >
x.field.ln2Split[].sign == [1, 1]
x.field.ln2Split[].sign elements == 1
x.field.ln2Split[].exp == [0, -2]
x.field.ln2Split[].exp elements one of { -2, 0 }
x.field.ln2Split[].exp sorted by >
x.field.ln2Split[].nans == [0, 0]
x.field.ln2Split[].nans elements == 0
x.field.ln2Split[].field elements != null
x.field.ln2Split[].field elements are equal
x.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
x.field.ln5Split[] elements != null
x.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
x.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
x.field.ln5Split[].mant sorted by >
x.field.ln5Split[].sign == [1, 1]
x.field.ln5Split[].sign elements == 1
x.field.ln5Split[].exp == [1, -1]
x.field.ln5Split[].exp elements one of { -1, 1 }
x.field.ln5Split[].exp elements != 0
x.field.ln5Split[].exp sorted by >
x.field.ln5Split[].nans == [0, 0]
x.field.ln5Split[].nans elements == 0
x.field.ln5Split[].field elements != null
x.field.ln5Split[].field elements are equal
x.field.rMode has only one value
x.field.ieeeFlags one of { 0, 16 }
size(x.mant[]) one of { 5, 50 }
size(x.field.sqr2Split[]) == 2
size(x.field.piSplit[]) == 2
size(x.field.eSplit[]) == 2
size(x.field.ln2Split[]) == 2
size(x.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.lessThan(org.apache.commons.math3.dfp.Dfp):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.dfp.Dfp.lessThan(org.apache.commons.math3.dfp.Dfp):::EXIT;condition="not(return == true)"
this.field.ieeeFlags == 16
x.mant[] elements >= 1
x.field.ieeeFlags == 16
return == false
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(double):::ENTER
this.sign == 1
this.exp == 0
this.nans == 0
this.field has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero has only one value
this.field.zero.mant has only one value
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.zero.field has only one value
this.field.one has only one value
this.field.one.mant has only one value
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.one.field has only one value
this.field.two has only one value
this.field.two.mant has only one value
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.two.field has only one value
this.field.sqr2 has only one value
this.field.sqr2.mant has only one value
this.field.sqr2.field has only one value
this.field.sqr2Split has only one value
this.field.sqr2Split[] contains no nulls and has only one value, of length 2
this.field.sqr2Split[].mant contains no nulls and has only one value, of length 2
this.field.sqr2Split[].mant sorted by <
this.field.sqr2Split[].field contains no nulls and has only one value, of length 2
this.field.sqr2Split[].field elements has only one value
this.field.sqr2Reciprocal has only one value
this.field.sqr2Reciprocal.mant has only one value
this.field.sqr2Reciprocal.field has only one value
this.field.sqr3 has only one value
this.field.sqr3.mant has only one value
this.field.sqr3.field has only one value
this.field.sqr3Reciprocal has only one value
this.field.sqr3Reciprocal.mant has only one value
this.field.sqr3Reciprocal.field has only one value
this.field.pi has only one value
this.field.pi.mant has only one value
this.field.pi.field has only one value
this.field.piSplit has only one value
this.field.piSplit[] contains no nulls and has only one value, of length 2
this.field.piSplit[].mant contains no nulls and has only one value, of length 2
this.field.piSplit[].field contains no nulls and has only one value, of length 2
this.field.piSplit[].field elements has only one value
this.field.e has only one value
this.field.e.mant has only one value
this.field.e.field has only one value
this.field.eSplit has only one value
this.field.eSplit[] contains no nulls and has only one value, of length 2
this.field.eSplit[].mant contains no nulls and has only one value, of length 2
this.field.eSplit[].mant sorted by <
this.field.eSplit[].field contains no nulls and has only one value, of length 2
this.field.eSplit[].field elements has only one value
this.field.ln2 has only one value
this.field.ln2.mant has only one value
this.field.ln2.field has only one value
this.field.ln2Split has only one value
this.field.ln2Split[] contains no nulls and has only one value, of length 2
this.field.ln2Split[].mant contains no nulls and has only one value, of length 2
this.field.ln2Split[].field contains no nulls and has only one value, of length 2
this.field.ln2Split[].field elements has only one value
this.field.ln5 has only one value
this.field.ln5.mant has only one value
this.field.ln5.field has only one value
this.field.ln5Split has only one value
this.field.ln5Split[] contains no nulls and has only one value, of length 2
this.field.ln5Split[].mant contains no nulls and has only one value, of length 2
this.field.ln5Split[].field contains no nulls and has only one value, of length 2
this.field.ln5Split[].field elements has only one value
this.field.ln10 has only one value
this.field.ln10.mant has only one value
this.field.ln10.field has only one value
this.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(double):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.sign == 1
this.exp == 0
this.nans == 0
this.field has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero has only one value
this.field.zero.mant has only one value
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.zero.field has only one value
this.field.one has only one value
this.field.one.mant has only one value
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.one.field has only one value
this.field.two has only one value
this.field.two.mant has only one value
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.two.field has only one value
this.field.sqr2 has only one value
this.field.sqr2.mant has only one value
this.field.sqr2.field has only one value
this.field.sqr2Split has only one value
this.field.sqr2Split[] contains no nulls and has only one value, of length 2
this.field.sqr2Split[].mant contains no nulls and has only one value, of length 2
this.field.sqr2Split[].mant sorted by <
this.field.sqr2Split[].field contains no nulls and has only one value, of length 2
this.field.sqr2Split[].field elements has only one value
this.field.sqr2Reciprocal has only one value
this.field.sqr2Reciprocal.mant has only one value
this.field.sqr2Reciprocal.field has only one value
this.field.sqr3 has only one value
this.field.sqr3.mant has only one value
this.field.sqr3.field has only one value
this.field.sqr3Reciprocal has only one value
this.field.sqr3Reciprocal.mant has only one value
this.field.sqr3Reciprocal.field has only one value
this.field.pi has only one value
this.field.pi.mant has only one value
this.field.pi.field has only one value
this.field.piSplit has only one value
this.field.piSplit[] contains no nulls and has only one value, of length 2
this.field.piSplit[].mant contains no nulls and has only one value, of length 2
this.field.piSplit[].field contains no nulls and has only one value, of length 2
this.field.piSplit[].field elements has only one value
this.field.e has only one value
this.field.e.mant has only one value
this.field.e.field has only one value
this.field.eSplit has only one value
this.field.eSplit[] contains no nulls and has only one value, of length 2
this.field.eSplit[].mant contains no nulls and has only one value, of length 2
this.field.eSplit[].mant sorted by <
this.field.eSplit[].field contains no nulls and has only one value, of length 2
this.field.eSplit[].field elements has only one value
this.field.ln2 has only one value
this.field.ln2.mant has only one value
this.field.ln2.field has only one value
this.field.ln2Split has only one value
this.field.ln2Split[] contains no nulls and has only one value, of length 2
this.field.ln2Split[].mant contains no nulls and has only one value, of length 2
this.field.ln2Split[].field contains no nulls and has only one value, of length 2
this.field.ln2Split[].field elements has only one value
this.field.ln5 has only one value
this.field.ln5.mant has only one value
this.field.ln5.field has only one value
this.field.ln5Split has only one value
this.field.ln5Split[] contains no nulls and has only one value, of length 2
this.field.ln5Split[].mant contains no nulls and has only one value, of length 2
this.field.ln5Split[].field contains no nulls and has only one value, of length 2
this.field.ln5Split[].field elements has only one value
this.field.ln10 has only one value
this.field.ln10.mant has only one value
this.field.ln10.field has only one value
this.field.ieeeFlags == 16
return.mant[] elements >= 0
return.sign == 1
return.exp == 0
return.nans == 0
return.field has only one value
return.field.radixDigits == 5
return.field.zero has only one value
return.field.one has only one value
return.field.two has only one value
return.field.sqr2 has only one value
return.field.sqr2Split has only one value
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] contains no nulls and has only one value, of length 2
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].mant contains no nulls and has only one value, of length 2
return.field.sqr2Split[].mant sorted by <
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field contains no nulls and has only one value, of length 2
return.field.sqr2Split[].field elements has only one value
return.field.sqr2Split[].field elements != null
return.field.sqr2Reciprocal has only one value
return.field.sqr3 has only one value
return.field.sqr3Reciprocal has only one value
return.field.pi has only one value
return.field.piSplit has only one value
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] contains no nulls and has only one value, of length 2
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant contains no nulls and has only one value, of length 2
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field contains no nulls and has only one value, of length 2
return.field.piSplit[].field elements has only one value
return.field.piSplit[].field elements != null
return.field.e has only one value
return.field.eSplit has only one value
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] contains no nulls and has only one value, of length 2
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].mant contains no nulls and has only one value, of length 2
return.field.eSplit[].mant sorted by <
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field contains no nulls and has only one value, of length 2
return.field.eSplit[].field elements has only one value
return.field.eSplit[].field elements != null
return.field.ln2 has only one value
return.field.ln2Split has only one value
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] contains no nulls and has only one value, of length 2
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant contains no nulls and has only one value, of length 2
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field contains no nulls and has only one value, of length 2
return.field.ln2Split[].field elements has only one value
return.field.ln2Split[].field elements != null
return.field.ln5 has only one value
return.field.ln5Split has only one value
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] contains no nulls and has only one value, of length 2
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant contains no nulls and has only one value, of length 2
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field contains no nulls and has only one value, of length 2
return.field.ln5Split[].field elements has only one value
return.field.ln5Split[].field elements != null
return.field.ln10 has only one value
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(java.lang.String):::ENTER
this.sign == 1
this.exp == 4
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
s has only one value
s.toString == "0.5"
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(java.lang.String):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
s.toString == orig(s.toString)
this.sign == 1
this.exp == 4
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
s.toString == "0.5"
return.mant[] == [0, 0, 0, 0, 5000]
return.mant[] elements one of { 0, 5000 }
return.mant[] sorted by <=
return.sign == 1
return.exp == 0
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(long):::ENTER
this.mant[] elements >= 1
this.sign == 1
this.exp == 1
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
x == 4503599627370496L
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(long):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.mant[] elements >= 1
this.sign == 1
this.exp == 1
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
return.mant[] == [0, 496, 2737, 5996, 4503]
return.mant[] elements >= 0
return.sign == 1
return.exp == 4
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(org.apache.commons.math3.dfp.Dfp):::ENTER
this.nans == 0
d.mant[] elements >= 0
d.sign one of { -1, 1 }
d.nans == 0
d.field.radixDigits one of { 5, 50 }
d.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.sqr2Split[] elements != null
d.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.sqr2Split[].sign == [1, 1]
d.field.sqr2Split[].sign elements == 1
d.field.sqr2Split[].exp == [1, -1]
d.field.sqr2Split[].exp elements one of { -1, 1 }
d.field.sqr2Split[].exp elements != 0
d.field.sqr2Split[].exp sorted by >
d.field.sqr2Split[].nans == [0, 0]
d.field.sqr2Split[].nans elements == 0
d.field.sqr2Split[].field elements != null
d.field.sqr2Split[].field elements are equal
d.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.piSplit[] elements != null
d.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.piSplit[].mant sorted by <
d.field.piSplit[].sign == [1, 1]
d.field.piSplit[].sign elements == 1
d.field.piSplit[].exp == [1, -1]
d.field.piSplit[].exp elements one of { -1, 1 }
d.field.piSplit[].exp elements != 0
d.field.piSplit[].exp sorted by >
d.field.piSplit[].nans == [0, 0]
d.field.piSplit[].nans elements == 0
d.field.piSplit[].field elements != null
d.field.piSplit[].field elements are equal
d.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.eSplit[] elements != null
d.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.eSplit[].sign == [1, 1]
d.field.eSplit[].sign elements == 1
d.field.eSplit[].exp == [1, -1]
d.field.eSplit[].exp elements one of { -1, 1 }
d.field.eSplit[].exp elements != 0
d.field.eSplit[].exp sorted by >
d.field.eSplit[].nans == [0, 0]
d.field.eSplit[].nans elements == 0
d.field.eSplit[].field elements != null
d.field.eSplit[].field elements are equal
d.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.ln2Split[] elements != null
d.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.ln2Split[].mant sorted by >
d.field.ln2Split[].sign == [1, 1]
d.field.ln2Split[].sign elements == 1
d.field.ln2Split[].exp == [0, -2]
d.field.ln2Split[].exp elements one of { -2, 0 }
d.field.ln2Split[].exp sorted by >
d.field.ln2Split[].nans == [0, 0]
d.field.ln2Split[].nans elements == 0
d.field.ln2Split[].field elements != null
d.field.ln2Split[].field elements are equal
d.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.ln5Split[] elements != null
d.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.ln5Split[].mant sorted by >
d.field.ln5Split[].sign == [1, 1]
d.field.ln5Split[].sign elements == 1
d.field.ln5Split[].exp == [1, -1]
d.field.ln5Split[].exp elements one of { -1, 1 }
d.field.ln5Split[].exp elements != 0
d.field.ln5Split[].exp sorted by >
d.field.ln5Split[].nans == [0, 0]
d.field.ln5Split[].nans elements == 0
d.field.ln5Split[].field elements != null
d.field.ln5Split[].field elements are equal
d.field.rMode has only one value
d.field.ieeeFlags one of { 0, 16, 18 }
size(d.mant[]) one of { 5, 50 }
size(d.field.sqr2Split[]) == 2
size(d.field.piSplit[]) == 2
size(d.field.eSplit[]) == 2
size(d.field.ln2Split[]) == 2
size(d.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(org.apache.commons.math3.dfp.Dfp):::EXIT606
===========================================================================
org.apache.commons.math3.dfp.Dfp.newInstance(org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
d.mant == orig(d.mant)
d.mant[] == orig(d.mant[])
d.sign == orig(d.sign)
d.exp == orig(d.exp)
d.nans == orig(d.nans)
d.field == orig(d.field)
d.field.radixDigits == orig(d.field.radixDigits)
d.field.zero == orig(d.field.zero)
d.field.one == orig(d.field.one)
d.field.two == orig(d.field.two)
d.field.sqr2 == orig(d.field.sqr2)
d.field.sqr2Split == orig(d.field.sqr2Split)
d.field.sqr2Split.getClass().getName() == orig(d.field.sqr2Split.getClass().getName())
d.field.sqr2Split[] == orig(d.field.sqr2Split[])
d.field.sqr2Split[].mant == orig(d.field.sqr2Split[].mant)
d.field.sqr2Split[].sign == orig(d.field.sqr2Split[].sign)
d.field.sqr2Split[].exp == orig(d.field.sqr2Split[].exp)
d.field.sqr2Split[].nans == orig(d.field.sqr2Split[].nans)
d.field.sqr2Split[].field == orig(d.field.sqr2Split[].field)
d.field.sqr2Reciprocal == orig(d.field.sqr2Reciprocal)
d.field.sqr3 == orig(d.field.sqr3)
d.field.sqr3Reciprocal == orig(d.field.sqr3Reciprocal)
d.field.pi == orig(d.field.pi)
d.field.piSplit == orig(d.field.piSplit)
d.field.piSplit.getClass().getName() == orig(d.field.piSplit.getClass().getName())
d.field.piSplit[] == orig(d.field.piSplit[])
d.field.piSplit[].mant == orig(d.field.piSplit[].mant)
d.field.piSplit[].sign == orig(d.field.piSplit[].sign)
d.field.piSplit[].exp == orig(d.field.piSplit[].exp)
d.field.piSplit[].nans == orig(d.field.piSplit[].nans)
d.field.piSplit[].field == orig(d.field.piSplit[].field)
d.field.e == orig(d.field.e)
d.field.eSplit == orig(d.field.eSplit)
d.field.eSplit.getClass().getName() == orig(d.field.eSplit.getClass().getName())
d.field.eSplit[] == orig(d.field.eSplit[])
d.field.eSplit[].mant == orig(d.field.eSplit[].mant)
d.field.eSplit[].sign == orig(d.field.eSplit[].sign)
d.field.eSplit[].exp == orig(d.field.eSplit[].exp)
d.field.eSplit[].nans == orig(d.field.eSplit[].nans)
d.field.eSplit[].field == orig(d.field.eSplit[].field)
d.field.ln2 == orig(d.field.ln2)
d.field.ln2Split == orig(d.field.ln2Split)
d.field.ln2Split.getClass().getName() == orig(d.field.ln2Split.getClass().getName())
d.field.ln2Split[] == orig(d.field.ln2Split[])
d.field.ln2Split[].mant == orig(d.field.ln2Split[].mant)
d.field.ln2Split[].sign == orig(d.field.ln2Split[].sign)
d.field.ln2Split[].exp == orig(d.field.ln2Split[].exp)
d.field.ln2Split[].nans == orig(d.field.ln2Split[].nans)
d.field.ln2Split[].field == orig(d.field.ln2Split[].field)
d.field.ln5 == orig(d.field.ln5)
d.field.ln5Split == orig(d.field.ln5Split)
d.field.ln5Split.getClass().getName() == orig(d.field.ln5Split.getClass().getName())
d.field.ln5Split[] == orig(d.field.ln5Split[])
d.field.ln5Split[].mant == orig(d.field.ln5Split[].mant)
d.field.ln5Split[].sign == orig(d.field.ln5Split[].sign)
d.field.ln5Split[].exp == orig(d.field.ln5Split[].exp)
d.field.ln5Split[].nans == orig(d.field.ln5Split[].nans)
d.field.ln5Split[].field == orig(d.field.ln5Split[].field)
d.field.ln10 == orig(d.field.ln10)
d.field.rMode == orig(d.field.rMode)
d.field.ieeeFlags == orig(d.field.ieeeFlags)
this.nans == 0
d.mant[] elements >= 0
d.sign one of { -1, 1 }
d.nans == 0
d.field.radixDigits one of { 5, 50 }
d.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.sqr2Split[] elements != null
d.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.sqr2Split[].sign == [1, 1]
d.field.sqr2Split[].sign elements == 1
d.field.sqr2Split[].exp == [1, -1]
d.field.sqr2Split[].exp elements one of { -1, 1 }
d.field.sqr2Split[].exp elements != 0
d.field.sqr2Split[].exp sorted by >
d.field.sqr2Split[].nans == [0, 0]
d.field.sqr2Split[].nans elements == 0
d.field.sqr2Split[].field elements != null
d.field.sqr2Split[].field elements are equal
d.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.piSplit[] elements != null
d.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.piSplit[].mant sorted by <
d.field.piSplit[].sign == [1, 1]
d.field.piSplit[].sign elements == 1
d.field.piSplit[].exp == [1, -1]
d.field.piSplit[].exp elements one of { -1, 1 }
d.field.piSplit[].exp elements != 0
d.field.piSplit[].exp sorted by >
d.field.piSplit[].nans == [0, 0]
d.field.piSplit[].nans elements == 0
d.field.piSplit[].field elements != null
d.field.piSplit[].field elements are equal
d.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.eSplit[] elements != null
d.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.eSplit[].sign == [1, 1]
d.field.eSplit[].sign elements == 1
d.field.eSplit[].exp == [1, -1]
d.field.eSplit[].exp elements one of { -1, 1 }
d.field.eSplit[].exp elements != 0
d.field.eSplit[].exp sorted by >
d.field.eSplit[].nans == [0, 0]
d.field.eSplit[].nans elements == 0
d.field.eSplit[].field elements != null
d.field.eSplit[].field elements are equal
d.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.ln2Split[] elements != null
d.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.ln2Split[].mant sorted by >
d.field.ln2Split[].sign == [1, 1]
d.field.ln2Split[].sign elements == 1
d.field.ln2Split[].exp == [0, -2]
d.field.ln2Split[].exp elements one of { -2, 0 }
d.field.ln2Split[].exp sorted by >
d.field.ln2Split[].nans == [0, 0]
d.field.ln2Split[].nans elements == 0
d.field.ln2Split[].field elements != null
d.field.ln2Split[].field elements are equal
d.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
d.field.ln5Split[] elements != null
d.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
d.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
d.field.ln5Split[].mant sorted by >
d.field.ln5Split[].sign == [1, 1]
d.field.ln5Split[].sign elements == 1
d.field.ln5Split[].exp == [1, -1]
d.field.ln5Split[].exp elements one of { -1, 1 }
d.field.ln5Split[].exp elements != 0
d.field.ln5Split[].exp sorted by >
d.field.ln5Split[].nans == [0, 0]
d.field.ln5Split[].nans elements == 0
d.field.ln5Split[].field elements != null
d.field.ln5Split[].field elements are equal
d.field.rMode has only one value
d.field.ieeeFlags one of { 0, 16, 18 }
return.mant[] elements >= 0
return.sign one of { -1, 1 }
return.nans == 0
return.field.radixDigits one of { 5, 50 }
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags one of { 0, 16, 18 }
size(d.mant[]) one of { 5, 50 }
size(d.field.sqr2Split[]) == 2
size(d.field.piSplit[]) == 2
size(d.field.eSplit[]) == 2
size(d.field.ln2Split[]) == 2
size(d.field.ln5Split[]) == 2
size(return.mant[]) one of { 5, 50 }
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.rint():::ENTER
this.sign == 1
this.exp == 4
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.Dfp.rint():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
this.sign == 1
this.exp == 4
this.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.field.radixDigits == 5
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.ieeeFlags == 16
return.mant[] elements >= 0
return.sign == 1
return.exp == 4
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(this.mant[]) == 5
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.Dfp.shiftLeft():::ENTER
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
===========================================================================
org.apache.commons.math3.dfp.Dfp.shiftLeft():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.sign == orig(this.sign)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
size(this.mant[]) == orig(size(this.mant[]))
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
this.mant[] <= orig(this.mant[]) (lexically)
this.exp - orig(this.exp) + 1 == 0
===========================================================================
org.apache.commons.math3.dfp.Dfp.shiftRight():::ENTER
this.sign == 1
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
===========================================================================
org.apache.commons.math3.dfp.Dfp.shiftRight():::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.sign == orig(this.sign)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
size(this.mant[]) == orig(size(this.mant[]))
this.sign == 1
this.nans == 0
this.field.ieeeFlags one of { 0, 16 }
this.exp - orig(this.exp) - 1 == 0
===========================================================================
org.apache.commons.math3.dfp.Dfp.unequal(org.apache.commons.math3.dfp.Dfp):::ENTER
this.sign == 1
this.exp one of { 0, 1 }
this.nans == 0
this.field has only one value
org.apache.commons.math3.dfp.DfpField.piString == null
org.apache.commons.math3.dfp.DfpField.eString == null
org.apache.commons.math3.dfp.DfpField.ln2String == null
org.apache.commons.math3.dfp.DfpField.ln5String == null
org.apache.commons.math3.dfp.DfpField.ln10String == null
this.field.radixDigits == 50
this.field.zero has only one value
this.field.zero.mant has only one value
this.field.zero.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.field.zero.field has only one value
this.field.one has only one value
this.field.one.mant has only one value
this.field.one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
this.field.one.field has only one value
this.field.two has only one value
this.field.two.mant has only one value
this.field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
this.field.two.field has only one value
this.field.sqr2 == null
this.field.sqr2Split == null
this.field.sqr2Reciprocal == null
this.field.sqr3 == null
this.field.sqr3Reciprocal == null
this.field.pi == null
this.field.piSplit == null
this.field.e == null
this.field.eSplit == null
this.field.ln2 == null
this.field.ln2Split == null
this.field.ln5 == null
this.field.ln5Split == null
this.field.ln10 == null
this.field.ieeeFlags one of { 0, 16 }
x.mant[] elements >= 0
x.sign == 1
x.exp one of { 0, 1 }
x.nans == 0
x.field has only one value
x.field.radixDigits == 50
x.field.zero has only one value
x.field.one has only one value
x.field.two has only one value
x.field.sqr2 == null
x.field.sqr2Split == null
x.field.sqr2Reciprocal == null
x.field.sqr3 == null
x.field.sqr3Reciprocal == null
x.field.pi == null
x.field.piSplit == null
x.field.e == null
x.field.eSplit == null
x.field.ln2 == null
x.field.ln2Split == null
x.field.ln5 == null
x.field.ln5Split == null
x.field.ln10 == null
x.field.rMode has only one value
x.field.ieeeFlags one of { 0, 16 }
size(this.mant[]) == 50
size(this.field.zero.mant[]) == 50
size(this.field.one.mant[]) == 50
size(this.field.two.mant[]) == 50
size(x.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.Dfp.unequal(org.apache.commons.math3.dfp.Dfp):::EXIT938
(return == false)  ==>  (this.field.ieeeFlags == 16)
(return == false)  ==>  (this.mant[] elements >= 1)
(return == false)  ==>  (x.field.ieeeFlags == 16)
(return == false)  ==>  (x.mant[] elements >= 1)
(return == true)  ==>  (this.field.ieeeFlags one of { 0, 16 })
(return == true)  ==>  (this.mant[] elements >= 0)
(return == true)  ==>  (x.field.ieeeFlags one of { 0, 16 })
(return == true)  ==>  (x.mant[] elements >= 0)
===========================================================================
org.apache.commons.math3.dfp.Dfp.unequal(org.apache.commons.math3.dfp.Dfp):::EXIT938;condition="return == true"
===========================================================================
org.apache.commons.math3.dfp.Dfp.unequal(org.apache.commons.math3.dfp.Dfp):::EXIT938;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.dfp.Dfp.unequal(org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.mant == orig(this.mant)
this.mant[] == orig(this.mant[])
this.sign == orig(this.sign)
this.exp == orig(this.exp)
this.nans == orig(this.nans)
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.pi == orig(this.field.pi)
this.field.piSplit == orig(this.field.piSplit)
this.field.e == orig(this.field.e)
this.field.eSplit == orig(this.field.eSplit)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln10 == orig(this.field.ln10)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field.ieeeFlags == orig(this.field.ieeeFlags)
x.mant == orig(x.mant)
x.mant[] == orig(x.mant[])
x.sign == orig(x.sign)
x.exp == orig(x.exp)
x.nans == orig(x.nans)
x.field == orig(x.field)
x.field.radixDigits == orig(x.field.radixDigits)
x.field.zero == orig(x.field.zero)
x.field.one == orig(x.field.one)
x.field.two == orig(x.field.two)
x.field.sqr2 == orig(x.field.sqr2)
x.field.sqr2Split == orig(x.field.sqr2Split)
x.field.sqr2Reciprocal == orig(x.field.sqr2Reciprocal)
x.field.sqr3 == orig(x.field.sqr3)
x.field.sqr3Reciprocal == orig(x.field.sqr3Reciprocal)
x.field.pi == orig(x.field.pi)
x.field.piSplit == orig(x.field.piSplit)
x.field.e == orig(x.field.e)
x.field.eSplit == orig(x.field.eSplit)
x.field.ln2 == orig(x.field.ln2)
x.field.ln2Split == orig(x.field.ln2Split)
x.field.ln5 == orig(x.field.ln5)
x.field.ln5Split == orig(x.field.ln5Split)
x.field.ln10 == orig(x.field.ln10)
x.field.rMode == orig(x.field.rMode)
x.field.ieeeFlags == orig(x.field.ieeeFlags)
(return == false)  ==>  (this.field.ieeeFlags == 16)
(return == false)  ==>  (this.mant[] elements >= 1)
(return == false)  ==>  (x.field.ieeeFlags == 16)
(return == false)  ==>  (x.mant[] elements >= 1)
(return == true)  ==>  (this.field.ieeeFlags one of { 0, 16 })
(return == true)  ==>  (this.mant[] elements >= 0)
(return == true)  ==>  (x.field.ieeeFlags one of { 0, 16 })
(return == true)  ==>  (x.mant[] elements >= 0)
this.sign == 1
this.exp one of { 0, 1 }
this.nans == 0
this.field has only one value
org.apache.commons.math3.dfp.DfpField.piString == null
org.apache.commons.math3.dfp.DfpField.eString == null
org.apache.commons.math3.dfp.DfpField.ln2String == null
org.apache.commons.math3.dfp.DfpField.ln5String == null
org.apache.commons.math3.dfp.DfpField.ln10String == null
this.field.radixDigits == 50
this.field.zero has only one value
this.field.zero.mant has only one value
this.field.zero.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.field.zero.field has only one value
this.field.one has only one value
this.field.one.mant has only one value
this.field.one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
this.field.one.field has only one value
this.field.two has only one value
this.field.two.mant has only one value
this.field.two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
this.field.two.field has only one value
this.field.sqr2 == null
this.field.sqr2Split == null
this.field.sqr2Reciprocal == null
this.field.sqr3 == null
this.field.sqr3Reciprocal == null
this.field.pi == null
this.field.piSplit == null
this.field.e == null
this.field.eSplit == null
this.field.ln2 == null
this.field.ln2Split == null
this.field.ln5 == null
this.field.ln5Split == null
this.field.ln10 == null
this.field.ieeeFlags one of { 0, 16 }
x.mant[] elements >= 0
x.sign == 1
x.exp one of { 0, 1 }
x.nans == 0
x.field has only one value
x.field.radixDigits == 50
x.field.zero has only one value
x.field.one has only one value
x.field.two has only one value
x.field.sqr2 == null
x.field.sqr2Split == null
x.field.sqr2Reciprocal == null
x.field.sqr3 == null
x.field.sqr3Reciprocal == null
x.field.pi == null
x.field.piSplit == null
x.field.e == null
x.field.eSplit == null
x.field.ln2 == null
x.field.ln2Split == null
x.field.ln5 == null
x.field.ln5Split == null
x.field.ln10 == null
x.field.rMode has only one value
x.field.ieeeFlags one of { 0, 16 }
size(this.mant[]) == 50
size(this.field.zero.mant[]) == 50
size(this.field.one.mant[]) == 50
size(this.field.two.mant[]) == 50
size(x.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.Dfp.unequal(org.apache.commons.math3.dfp.Dfp):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.dfp.Dfp.unequal(org.apache.commons.math3.dfp.Dfp):::EXIT;condition="not(return == true)"
this.mant[] elements >= 1
this.field.ieeeFlags == 16
x.mant[] elements >= 1
x.field.ieeeFlags == 16
return == false
===========================================================================
org.apache.commons.math3.dfp.DfpField$RoundingMode:::CLASS
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
===========================================================================
org.apache.commons.math3.dfp.DfpField$RoundingMode:::OBJECT
===========================================================================
org.apache.commons.math3.dfp.DfpField$RoundingMode.RoundingMode(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math3.dfp.DfpField$RoundingMode.RoundingMode(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math3.dfp.DfpField$RoundingMode.values():::ENTER
===========================================================================
org.apache.commons.math3.dfp.DfpField$RoundingMode.values():::EXIT
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
return[] contains no nulls and has only one value, of length 8
size(return[]) == 8
===========================================================================
org.apache.commons.math3.dfp.DfpField:::CLASS
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
===========================================================================
org.apache.commons.math3.dfp.DfpField:::OBJECT
this.radixDigits one of { 5, 50 }
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
this.zero.mant[] elements == 0
this.zero.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.zero.sign == 1
this.zero.exp == 0
this.zero.nans == 0
this.zero.field.radixDigits one of { 5, 50 }
this.zero.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.zero.field.sqr2Split[] elements != null
this.zero.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.zero.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.zero.field.sqr2Split[].sign == [1, 1]
this.zero.field.sqr2Split[].sign elements == 1
this.zero.field.sqr2Split[].exp == [1, -1]
this.zero.field.sqr2Split[].exp elements one of { -1, 1 }
this.zero.field.sqr2Split[].exp elements != 0
this.zero.field.sqr2Split[].exp sorted by >
this.zero.field.sqr2Split[].nans == [0, 0]
this.zero.field.sqr2Split[].nans elements == 0
this.zero.field.sqr2Split[].field elements != null
this.zero.field.sqr2Split[].field elements are equal
this.zero.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.zero.field.piSplit[] elements != null
this.zero.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.zero.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.zero.field.piSplit[].mant sorted by <
this.zero.field.piSplit[].sign == [1, 1]
this.zero.field.piSplit[].sign elements == 1
this.zero.field.piSplit[].exp == [1, -1]
this.zero.field.piSplit[].exp elements one of { -1, 1 }
this.zero.field.piSplit[].exp elements != 0
this.zero.field.piSplit[].exp sorted by >
this.zero.field.piSplit[].nans == [0, 0]
this.zero.field.piSplit[].nans elements == 0
this.zero.field.piSplit[].field elements != null
this.zero.field.piSplit[].field elements are equal
this.zero.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.zero.field.eSplit[] elements != null
this.zero.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.zero.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.zero.field.eSplit[].sign == [1, 1]
this.zero.field.eSplit[].sign elements == 1
this.zero.field.eSplit[].exp == [1, -1]
this.zero.field.eSplit[].exp elements one of { -1, 1 }
this.zero.field.eSplit[].exp elements != 0
this.zero.field.eSplit[].exp sorted by >
this.zero.field.eSplit[].nans == [0, 0]
this.zero.field.eSplit[].nans elements == 0
this.zero.field.eSplit[].field elements != null
this.zero.field.eSplit[].field elements are equal
this.zero.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.zero.field.ln2Split[] elements != null
this.zero.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.zero.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.zero.field.ln2Split[].mant sorted by >
this.zero.field.ln2Split[].sign == [1, 1]
this.zero.field.ln2Split[].sign elements == 1
this.zero.field.ln2Split[].exp == [0, -2]
this.zero.field.ln2Split[].exp elements one of { -2, 0 }
this.zero.field.ln2Split[].exp sorted by >
this.zero.field.ln2Split[].nans == [0, 0]
this.zero.field.ln2Split[].nans elements == 0
this.zero.field.ln2Split[].field elements != null
this.zero.field.ln2Split[].field elements are equal
this.zero.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.zero.field.ln5Split[] elements != null
this.zero.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.zero.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.zero.field.ln5Split[].mant sorted by >
this.zero.field.ln5Split[].sign == [1, 1]
this.zero.field.ln5Split[].sign elements == 1
this.zero.field.ln5Split[].exp == [1, -1]
this.zero.field.ln5Split[].exp elements one of { -1, 1 }
this.zero.field.ln5Split[].exp elements != 0
this.zero.field.ln5Split[].exp sorted by >
this.zero.field.ln5Split[].nans == [0, 0]
this.zero.field.ln5Split[].nans elements == 0
this.zero.field.ln5Split[].field elements != null
this.zero.field.ln5Split[].field elements are equal
this.zero.field.rMode has only one value
this.zero.field.ieeeFlags one of { 0, 16, 18 }
this.one.mant[] elements one of { 0, 1 }
this.one.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1] }
this.one.mant[] sorted by <=
this.one.sign == 1
this.one.exp == 1
this.one.nans == 0
this.one.field.radixDigits one of { 5, 50 }
this.one.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.one.field.sqr2Split[] elements != null
this.one.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.one.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.one.field.sqr2Split[].sign == [1, 1]
this.one.field.sqr2Split[].sign elements == 1
this.one.field.sqr2Split[].exp == [1, -1]
this.one.field.sqr2Split[].exp elements one of { -1, 1 }
this.one.field.sqr2Split[].exp elements != 0
this.one.field.sqr2Split[].exp sorted by >
this.one.field.sqr2Split[].nans == [0, 0]
this.one.field.sqr2Split[].nans elements == 0
this.one.field.sqr2Split[].field elements != null
this.one.field.sqr2Split[].field elements are equal
this.one.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.one.field.piSplit[] elements != null
this.one.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.one.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.one.field.piSplit[].mant sorted by <
this.one.field.piSplit[].sign == [1, 1]
this.one.field.piSplit[].sign elements == 1
this.one.field.piSplit[].exp == [1, -1]
this.one.field.piSplit[].exp elements one of { -1, 1 }
this.one.field.piSplit[].exp elements != 0
this.one.field.piSplit[].exp sorted by >
this.one.field.piSplit[].nans == [0, 0]
this.one.field.piSplit[].nans elements == 0
this.one.field.piSplit[].field elements != null
this.one.field.piSplit[].field elements are equal
this.one.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.one.field.eSplit[] elements != null
this.one.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.one.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.one.field.eSplit[].sign == [1, 1]
this.one.field.eSplit[].sign elements == 1
this.one.field.eSplit[].exp == [1, -1]
this.one.field.eSplit[].exp elements one of { -1, 1 }
this.one.field.eSplit[].exp elements != 0
this.one.field.eSplit[].exp sorted by >
this.one.field.eSplit[].nans == [0, 0]
this.one.field.eSplit[].nans elements == 0
this.one.field.eSplit[].field elements != null
this.one.field.eSplit[].field elements are equal
this.one.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.one.field.ln2Split[] elements != null
this.one.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.one.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.one.field.ln2Split[].mant sorted by >
this.one.field.ln2Split[].sign == [1, 1]
this.one.field.ln2Split[].sign elements == 1
this.one.field.ln2Split[].exp == [0, -2]
this.one.field.ln2Split[].exp elements one of { -2, 0 }
this.one.field.ln2Split[].exp sorted by >
this.one.field.ln2Split[].nans == [0, 0]
this.one.field.ln2Split[].nans elements == 0
this.one.field.ln2Split[].field elements != null
this.one.field.ln2Split[].field elements are equal
this.one.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.one.field.ln5Split[] elements != null
this.one.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.one.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.one.field.ln5Split[].mant sorted by >
this.one.field.ln5Split[].sign == [1, 1]
this.one.field.ln5Split[].sign elements == 1
this.one.field.ln5Split[].exp == [1, -1]
this.one.field.ln5Split[].exp elements one of { -1, 1 }
this.one.field.ln5Split[].exp elements != 0
this.one.field.ln5Split[].exp sorted by >
this.one.field.ln5Split[].nans == [0, 0]
this.one.field.ln5Split[].nans elements == 0
this.one.field.ln5Split[].field elements != null
this.one.field.ln5Split[].field elements are equal
this.one.field.rMode has only one value
this.one.field.ieeeFlags one of { 0, 16, 18 }
this.two.mant[] elements one of { 0, 2 }
this.two.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2] }
this.two.mant[] sorted by <=
this.two.sign == 1
this.two.exp == 1
this.two.nans == 0
this.two.field.radixDigits one of { 5, 50 }
this.two.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.two.field.sqr2Split[] elements != null
this.two.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.two.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.two.field.sqr2Split[].sign == [1, 1]
this.two.field.sqr2Split[].sign elements == 1
this.two.field.sqr2Split[].exp == [1, -1]
this.two.field.sqr2Split[].exp elements one of { -1, 1 }
this.two.field.sqr2Split[].exp elements != 0
this.two.field.sqr2Split[].exp sorted by >
this.two.field.sqr2Split[].nans == [0, 0]
this.two.field.sqr2Split[].nans elements == 0
this.two.field.sqr2Split[].field elements != null
this.two.field.sqr2Split[].field elements are equal
this.two.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.two.field.piSplit[] elements != null
this.two.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.two.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.two.field.piSplit[].mant sorted by <
this.two.field.piSplit[].sign == [1, 1]
this.two.field.piSplit[].sign elements == 1
this.two.field.piSplit[].exp == [1, -1]
this.two.field.piSplit[].exp elements one of { -1, 1 }
this.two.field.piSplit[].exp elements != 0
this.two.field.piSplit[].exp sorted by >
this.two.field.piSplit[].nans == [0, 0]
this.two.field.piSplit[].nans elements == 0
this.two.field.piSplit[].field elements != null
this.two.field.piSplit[].field elements are equal
this.two.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.two.field.eSplit[] elements != null
this.two.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.two.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.two.field.eSplit[].sign == [1, 1]
this.two.field.eSplit[].sign elements == 1
this.two.field.eSplit[].exp == [1, -1]
this.two.field.eSplit[].exp elements one of { -1, 1 }
this.two.field.eSplit[].exp elements != 0
this.two.field.eSplit[].exp sorted by >
this.two.field.eSplit[].nans == [0, 0]
this.two.field.eSplit[].nans elements == 0
this.two.field.eSplit[].field elements != null
this.two.field.eSplit[].field elements are equal
this.two.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.two.field.ln2Split[] elements != null
this.two.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.two.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.two.field.ln2Split[].mant sorted by >
this.two.field.ln2Split[].sign == [1, 1]
this.two.field.ln2Split[].sign elements == 1
this.two.field.ln2Split[].exp == [0, -2]
this.two.field.ln2Split[].exp elements one of { -2, 0 }
this.two.field.ln2Split[].exp sorted by >
this.two.field.ln2Split[].nans == [0, 0]
this.two.field.ln2Split[].nans elements == 0
this.two.field.ln2Split[].field elements != null
this.two.field.ln2Split[].field elements are equal
this.two.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.two.field.ln5Split[] elements != null
this.two.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.two.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.two.field.ln5Split[].mant sorted by >
this.two.field.ln5Split[].sign == [1, 1]
this.two.field.ln5Split[].sign elements == 1
this.two.field.ln5Split[].exp == [1, -1]
this.two.field.ln5Split[].exp elements one of { -1, 1 }
this.two.field.ln5Split[].exp elements != 0
this.two.field.ln5Split[].exp sorted by >
this.two.field.ln5Split[].nans == [0, 0]
this.two.field.ln5Split[].nans elements == 0
this.two.field.ln5Split[].field elements != null
this.two.field.ln5Split[].field elements are equal
this.two.field.rMode has only one value
this.two.field.ieeeFlags one of { 0, 16, 18 }
this.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
this.sqr2.mant[] elements >= 1
this.sqr2.sign == 1
this.sqr2.exp == 1
this.sqr2.nans == 0
this.sqr2.field.radixDigits == 5
this.sqr2.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2.field.sqr2Split[] elements != null
this.sqr2.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2.field.sqr2Split[].sign == [1, 1]
this.sqr2.field.sqr2Split[].sign elements == 1
this.sqr2.field.sqr2Split[].exp == [1, -1]
this.sqr2.field.sqr2Split[].exp elements one of { -1, 1 }
this.sqr2.field.sqr2Split[].exp elements != 0
this.sqr2.field.sqr2Split[].exp sorted by >
this.sqr2.field.sqr2Split[].nans == [0, 0]
this.sqr2.field.sqr2Split[].nans elements == 0
this.sqr2.field.sqr2Split[].field elements != null
this.sqr2.field.sqr2Split[].field elements are equal
this.sqr2.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2.field.piSplit[] elements != null
this.sqr2.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2.field.piSplit[].mant sorted by <
this.sqr2.field.piSplit[].sign == [1, 1]
this.sqr2.field.piSplit[].sign elements == 1
this.sqr2.field.piSplit[].exp == [1, -1]
this.sqr2.field.piSplit[].exp elements one of { -1, 1 }
this.sqr2.field.piSplit[].exp elements != 0
this.sqr2.field.piSplit[].exp sorted by >
this.sqr2.field.piSplit[].nans == [0, 0]
this.sqr2.field.piSplit[].nans elements == 0
this.sqr2.field.piSplit[].field elements != null
this.sqr2.field.piSplit[].field elements are equal
this.sqr2.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2.field.eSplit[] elements != null
this.sqr2.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2.field.eSplit[].sign == [1, 1]
this.sqr2.field.eSplit[].sign elements == 1
this.sqr2.field.eSplit[].exp == [1, -1]
this.sqr2.field.eSplit[].exp elements one of { -1, 1 }
this.sqr2.field.eSplit[].exp elements != 0
this.sqr2.field.eSplit[].exp sorted by >
this.sqr2.field.eSplit[].nans == [0, 0]
this.sqr2.field.eSplit[].nans elements == 0
this.sqr2.field.eSplit[].field elements != null
this.sqr2.field.eSplit[].field elements are equal
this.sqr2.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2.field.ln2Split[] elements != null
this.sqr2.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2.field.ln2Split[].mant sorted by >
this.sqr2.field.ln2Split[].sign == [1, 1]
this.sqr2.field.ln2Split[].sign elements == 1
this.sqr2.field.ln2Split[].exp == [0, -2]
this.sqr2.field.ln2Split[].exp elements one of { -2, 0 }
this.sqr2.field.ln2Split[].exp sorted by >
this.sqr2.field.ln2Split[].nans == [0, 0]
this.sqr2.field.ln2Split[].nans elements == 0
this.sqr2.field.ln2Split[].field elements != null
this.sqr2.field.ln2Split[].field elements are equal
this.sqr2.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2.field.ln5Split[] elements != null
this.sqr2.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2.field.ln5Split[].mant sorted by >
this.sqr2.field.ln5Split[].sign == [1, 1]
this.sqr2.field.ln5Split[].sign elements == 1
this.sqr2.field.ln5Split[].exp == [1, -1]
this.sqr2.field.ln5Split[].exp elements one of { -1, 1 }
this.sqr2.field.ln5Split[].exp elements != 0
this.sqr2.field.ln5Split[].exp sorted by >
this.sqr2.field.ln5Split[].nans == [0, 0]
this.sqr2.field.ln5Split[].nans elements == 0
this.sqr2.field.ln5Split[].field elements != null
this.sqr2.field.ln5Split[].field elements are equal
this.sqr2.field.rMode has only one value
this.sqr2.field.ieeeFlags one of { 0, 16, 18 }
this.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[] elements != null
this.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2Split[].sign == [1, 1]
this.sqr2Split[].sign elements == 1
this.sqr2Split[].exp == [1, -1]
this.sqr2Split[].exp elements one of { -1, 1 }
this.sqr2Split[].exp elements != 0
this.sqr2Split[].exp sorted by >
this.sqr2Split[].nans == [0, 0]
this.sqr2Split[].nans elements == 0
this.sqr2Split[].field elements != null
this.sqr2Split[].field elements are equal
this.sqr2Split[].field.radixDigits == [5, 5]
this.sqr2Split[].field.radixDigits elements == 5
this.sqr2Split[].field.zero elements != null
this.sqr2Split[].field.zero elements are equal
this.sqr2Split[].field.one elements != null
this.sqr2Split[].field.one elements are equal
this.sqr2Split[].field.two elements != null
this.sqr2Split[].field.two elements are equal
this.sqr2Split[].field.sqr2 elements != null
this.sqr2Split[].field.sqr2 elements are equal
this.sqr2Split[].field.sqr2Split elements != null
this.sqr2Split[].field.sqr2Split elements are equal
this.sqr2Split[].field.sqr2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.sqr2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.sqr2Reciprocal elements are equal
this.sqr2Split[].field.sqr3 elements are equal
this.sqr2Split[].field.sqr3Reciprocal elements are equal
this.sqr2Split[].field.pi elements are equal
this.sqr2Split[].field.piSplit elements are equal
this.sqr2Split[].field.piSplit.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.sqr2Split[].field.e elements are equal
this.sqr2Split[].field.eSplit elements are equal
this.sqr2Split[].field.eSplit.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.sqr2Split[].field.ln2 elements are equal
this.sqr2Split[].field.ln2Split elements are equal
this.sqr2Split[].field.ln2Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.sqr2Split[].field.ln5 elements are equal
this.sqr2Split[].field.ln5Split elements are equal
this.sqr2Split[].field.ln5Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.sqr2Split[].field.ln10 elements are equal
this.sqr2Split[].field.rMode contains no nulls and has only one value, of length 2
this.sqr2Split[].field.rMode elements has only one value
this.sqr2Split[].field.rMode elements != null
this.sqr2Split[].field.ieeeFlags elements one of { 0, 16, 18 }
this.sqr2Split[].field.ieeeFlags one of { [0, 0], [16, 16], [18, 18] }
this.sqr2Split[].field.ieeeFlags elements are equal
this.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
this.sqr2Reciprocal.sign == 1
this.sqr2Reciprocal.exp == 0
this.sqr2Reciprocal.nans == 0
this.sqr2Reciprocal.field.radixDigits == 5
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Reciprocal.field.sqr2Split[] elements != null
this.sqr2Reciprocal.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2Reciprocal.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2Reciprocal.field.sqr2Split[].sign == [1, 1]
this.sqr2Reciprocal.field.sqr2Split[].sign elements == 1
this.sqr2Reciprocal.field.sqr2Split[].exp == [1, -1]
this.sqr2Reciprocal.field.sqr2Split[].exp elements one of { -1, 1 }
this.sqr2Reciprocal.field.sqr2Split[].exp elements != 0
this.sqr2Reciprocal.field.sqr2Split[].exp sorted by >
this.sqr2Reciprocal.field.sqr2Split[].nans == [0, 0]
this.sqr2Reciprocal.field.sqr2Split[].nans elements == 0
this.sqr2Reciprocal.field.sqr2Split[].field elements != null
this.sqr2Reciprocal.field.sqr2Split[].field elements are equal
this.sqr2Reciprocal.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Reciprocal.field.piSplit[] elements != null
this.sqr2Reciprocal.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2Reciprocal.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2Reciprocal.field.piSplit[].mant sorted by <
this.sqr2Reciprocal.field.piSplit[].sign == [1, 1]
this.sqr2Reciprocal.field.piSplit[].sign elements == 1
this.sqr2Reciprocal.field.piSplit[].exp == [1, -1]
this.sqr2Reciprocal.field.piSplit[].exp elements one of { -1, 1 }
this.sqr2Reciprocal.field.piSplit[].exp elements != 0
this.sqr2Reciprocal.field.piSplit[].exp sorted by >
this.sqr2Reciprocal.field.piSplit[].nans == [0, 0]
this.sqr2Reciprocal.field.piSplit[].nans elements == 0
this.sqr2Reciprocal.field.piSplit[].field elements != null
this.sqr2Reciprocal.field.piSplit[].field elements are equal
this.sqr2Reciprocal.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Reciprocal.field.eSplit[] elements != null
this.sqr2Reciprocal.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2Reciprocal.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2Reciprocal.field.eSplit[].sign == [1, 1]
this.sqr2Reciprocal.field.eSplit[].sign elements == 1
this.sqr2Reciprocal.field.eSplit[].exp == [1, -1]
this.sqr2Reciprocal.field.eSplit[].exp elements one of { -1, 1 }
this.sqr2Reciprocal.field.eSplit[].exp elements != 0
this.sqr2Reciprocal.field.eSplit[].exp sorted by >
this.sqr2Reciprocal.field.eSplit[].nans == [0, 0]
this.sqr2Reciprocal.field.eSplit[].nans elements == 0
this.sqr2Reciprocal.field.eSplit[].field elements != null
this.sqr2Reciprocal.field.eSplit[].field elements are equal
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Reciprocal.field.ln2Split[] elements != null
this.sqr2Reciprocal.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2Reciprocal.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2Reciprocal.field.ln2Split[].mant sorted by >
this.sqr2Reciprocal.field.ln2Split[].sign == [1, 1]
this.sqr2Reciprocal.field.ln2Split[].sign elements == 1
this.sqr2Reciprocal.field.ln2Split[].exp == [0, -2]
this.sqr2Reciprocal.field.ln2Split[].exp elements one of { -2, 0 }
this.sqr2Reciprocal.field.ln2Split[].exp sorted by >
this.sqr2Reciprocal.field.ln2Split[].nans == [0, 0]
this.sqr2Reciprocal.field.ln2Split[].nans elements == 0
this.sqr2Reciprocal.field.ln2Split[].field elements != null
this.sqr2Reciprocal.field.ln2Split[].field elements are equal
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Reciprocal.field.ln5Split[] elements != null
this.sqr2Reciprocal.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr2Reciprocal.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr2Reciprocal.field.ln5Split[].mant sorted by >
this.sqr2Reciprocal.field.ln5Split[].sign == [1, 1]
this.sqr2Reciprocal.field.ln5Split[].sign elements == 1
this.sqr2Reciprocal.field.ln5Split[].exp == [1, -1]
this.sqr2Reciprocal.field.ln5Split[].exp elements one of { -1, 1 }
this.sqr2Reciprocal.field.ln5Split[].exp elements != 0
this.sqr2Reciprocal.field.ln5Split[].exp sorted by >
this.sqr2Reciprocal.field.ln5Split[].nans == [0, 0]
this.sqr2Reciprocal.field.ln5Split[].nans elements == 0
this.sqr2Reciprocal.field.ln5Split[].field elements != null
this.sqr2Reciprocal.field.ln5Split[].field elements are equal
this.sqr2Reciprocal.field.rMode has only one value
this.sqr2Reciprocal.field.ieeeFlags one of { 0, 16, 18 }
this.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
this.sqr3.mant[] elements >= 1
this.sqr3.sign == 1
this.sqr3.exp == 1
this.sqr3.nans == 0
this.sqr3.field.radixDigits == 5
this.sqr3.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3.field.sqr2Split[] elements != null
this.sqr3.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3.field.sqr2Split[].sign == [1, 1]
this.sqr3.field.sqr2Split[].sign elements == 1
this.sqr3.field.sqr2Split[].exp == [1, -1]
this.sqr3.field.sqr2Split[].exp elements one of { -1, 1 }
this.sqr3.field.sqr2Split[].exp elements != 0
this.sqr3.field.sqr2Split[].exp sorted by >
this.sqr3.field.sqr2Split[].nans == [0, 0]
this.sqr3.field.sqr2Split[].nans elements == 0
this.sqr3.field.sqr2Split[].field elements != null
this.sqr3.field.sqr2Split[].field elements are equal
this.sqr3.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3.field.piSplit[] elements != null
this.sqr3.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3.field.piSplit[].mant sorted by <
this.sqr3.field.piSplit[].sign == [1, 1]
this.sqr3.field.piSplit[].sign elements == 1
this.sqr3.field.piSplit[].exp == [1, -1]
this.sqr3.field.piSplit[].exp elements one of { -1, 1 }
this.sqr3.field.piSplit[].exp elements != 0
this.sqr3.field.piSplit[].exp sorted by >
this.sqr3.field.piSplit[].nans == [0, 0]
this.sqr3.field.piSplit[].nans elements == 0
this.sqr3.field.piSplit[].field elements != null
this.sqr3.field.piSplit[].field elements are equal
this.sqr3.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3.field.eSplit[] elements != null
this.sqr3.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3.field.eSplit[].sign == [1, 1]
this.sqr3.field.eSplit[].sign elements == 1
this.sqr3.field.eSplit[].exp == [1, -1]
this.sqr3.field.eSplit[].exp elements one of { -1, 1 }
this.sqr3.field.eSplit[].exp elements != 0
this.sqr3.field.eSplit[].exp sorted by >
this.sqr3.field.eSplit[].nans == [0, 0]
this.sqr3.field.eSplit[].nans elements == 0
this.sqr3.field.eSplit[].field elements != null
this.sqr3.field.eSplit[].field elements are equal
this.sqr3.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3.field.ln2Split[] elements != null
this.sqr3.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3.field.ln2Split[].mant sorted by >
this.sqr3.field.ln2Split[].sign == [1, 1]
this.sqr3.field.ln2Split[].sign elements == 1
this.sqr3.field.ln2Split[].exp == [0, -2]
this.sqr3.field.ln2Split[].exp elements one of { -2, 0 }
this.sqr3.field.ln2Split[].exp sorted by >
this.sqr3.field.ln2Split[].nans == [0, 0]
this.sqr3.field.ln2Split[].nans elements == 0
this.sqr3.field.ln2Split[].field elements != null
this.sqr3.field.ln2Split[].field elements are equal
this.sqr3.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3.field.ln5Split[] elements != null
this.sqr3.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3.field.ln5Split[].mant sorted by >
this.sqr3.field.ln5Split[].sign == [1, 1]
this.sqr3.field.ln5Split[].sign elements == 1
this.sqr3.field.ln5Split[].exp == [1, -1]
this.sqr3.field.ln5Split[].exp elements one of { -1, 1 }
this.sqr3.field.ln5Split[].exp elements != 0
this.sqr3.field.ln5Split[].exp sorted by >
this.sqr3.field.ln5Split[].nans == [0, 0]
this.sqr3.field.ln5Split[].nans elements == 0
this.sqr3.field.ln5Split[].field elements != null
this.sqr3.field.ln5Split[].field elements are equal
this.sqr3.field.rMode has only one value
this.sqr3.field.ieeeFlags one of { 0, 16, 18 }
this.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
this.sqr3Reciprocal.sign == 1
this.sqr3Reciprocal.exp == 0
this.sqr3Reciprocal.nans == 0
this.sqr3Reciprocal.field.radixDigits == 5
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3Reciprocal.field.sqr2Split[] elements != null
this.sqr3Reciprocal.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3Reciprocal.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3Reciprocal.field.sqr2Split[].sign == [1, 1]
this.sqr3Reciprocal.field.sqr2Split[].sign elements == 1
this.sqr3Reciprocal.field.sqr2Split[].exp == [1, -1]
this.sqr3Reciprocal.field.sqr2Split[].exp elements one of { -1, 1 }
this.sqr3Reciprocal.field.sqr2Split[].exp elements != 0
this.sqr3Reciprocal.field.sqr2Split[].exp sorted by >
this.sqr3Reciprocal.field.sqr2Split[].nans == [0, 0]
this.sqr3Reciprocal.field.sqr2Split[].nans elements == 0
this.sqr3Reciprocal.field.sqr2Split[].field elements != null
this.sqr3Reciprocal.field.sqr2Split[].field elements are equal
this.sqr3Reciprocal.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3Reciprocal.field.piSplit[] elements != null
this.sqr3Reciprocal.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3Reciprocal.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3Reciprocal.field.piSplit[].mant sorted by <
this.sqr3Reciprocal.field.piSplit[].sign == [1, 1]
this.sqr3Reciprocal.field.piSplit[].sign elements == 1
this.sqr3Reciprocal.field.piSplit[].exp == [1, -1]
this.sqr3Reciprocal.field.piSplit[].exp elements one of { -1, 1 }
this.sqr3Reciprocal.field.piSplit[].exp elements != 0
this.sqr3Reciprocal.field.piSplit[].exp sorted by >
this.sqr3Reciprocal.field.piSplit[].nans == [0, 0]
this.sqr3Reciprocal.field.piSplit[].nans elements == 0
this.sqr3Reciprocal.field.piSplit[].field elements != null
this.sqr3Reciprocal.field.piSplit[].field elements are equal
this.sqr3Reciprocal.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3Reciprocal.field.eSplit[] elements != null
this.sqr3Reciprocal.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3Reciprocal.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3Reciprocal.field.eSplit[].sign == [1, 1]
this.sqr3Reciprocal.field.eSplit[].sign elements == 1
this.sqr3Reciprocal.field.eSplit[].exp == [1, -1]
this.sqr3Reciprocal.field.eSplit[].exp elements one of { -1, 1 }
this.sqr3Reciprocal.field.eSplit[].exp elements != 0
this.sqr3Reciprocal.field.eSplit[].exp sorted by >
this.sqr3Reciprocal.field.eSplit[].nans == [0, 0]
this.sqr3Reciprocal.field.eSplit[].nans elements == 0
this.sqr3Reciprocal.field.eSplit[].field elements != null
this.sqr3Reciprocal.field.eSplit[].field elements are equal
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3Reciprocal.field.ln2Split[] elements != null
this.sqr3Reciprocal.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3Reciprocal.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3Reciprocal.field.ln2Split[].mant sorted by >
this.sqr3Reciprocal.field.ln2Split[].sign == [1, 1]
this.sqr3Reciprocal.field.ln2Split[].sign elements == 1
this.sqr3Reciprocal.field.ln2Split[].exp == [0, -2]
this.sqr3Reciprocal.field.ln2Split[].exp elements one of { -2, 0 }
this.sqr3Reciprocal.field.ln2Split[].exp sorted by >
this.sqr3Reciprocal.field.ln2Split[].nans == [0, 0]
this.sqr3Reciprocal.field.ln2Split[].nans elements == 0
this.sqr3Reciprocal.field.ln2Split[].field elements != null
this.sqr3Reciprocal.field.ln2Split[].field elements are equal
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.sqr3Reciprocal.field.ln5Split[] elements != null
this.sqr3Reciprocal.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.sqr3Reciprocal.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.sqr3Reciprocal.field.ln5Split[].mant sorted by >
this.sqr3Reciprocal.field.ln5Split[].sign == [1, 1]
this.sqr3Reciprocal.field.ln5Split[].sign elements == 1
this.sqr3Reciprocal.field.ln5Split[].exp == [1, -1]
this.sqr3Reciprocal.field.ln5Split[].exp elements one of { -1, 1 }
this.sqr3Reciprocal.field.ln5Split[].exp elements != 0
this.sqr3Reciprocal.field.ln5Split[].exp sorted by >
this.sqr3Reciprocal.field.ln5Split[].nans == [0, 0]
this.sqr3Reciprocal.field.ln5Split[].nans elements == 0
this.sqr3Reciprocal.field.ln5Split[].field elements != null
this.sqr3Reciprocal.field.ln5Split[].field elements are equal
this.sqr3Reciprocal.field.rMode has only one value
this.sqr3Reciprocal.field.ieeeFlags one of { 0, 16, 18 }
this.pi.mant[] == [7932, 3589, 9265, 1415, 3]
this.pi.sign == 1
this.pi.exp == 1
this.pi.nans == 0
this.pi.field.radixDigits == 5
this.pi.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pi.field.sqr2Split[] elements != null
this.pi.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pi.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pi.field.sqr2Split[].sign == [1, 1]
this.pi.field.sqr2Split[].sign elements == 1
this.pi.field.sqr2Split[].exp == [1, -1]
this.pi.field.sqr2Split[].exp elements one of { -1, 1 }
this.pi.field.sqr2Split[].exp elements != 0
this.pi.field.sqr2Split[].exp sorted by >
this.pi.field.sqr2Split[].nans == [0, 0]
this.pi.field.sqr2Split[].nans elements == 0
this.pi.field.sqr2Split[].field elements != null
this.pi.field.sqr2Split[].field elements are equal
this.pi.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pi.field.piSplit[] elements != null
this.pi.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pi.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pi.field.piSplit[].mant sorted by <
this.pi.field.piSplit[].sign == [1, 1]
this.pi.field.piSplit[].sign elements == 1
this.pi.field.piSplit[].exp == [1, -1]
this.pi.field.piSplit[].exp elements one of { -1, 1 }
this.pi.field.piSplit[].exp elements != 0
this.pi.field.piSplit[].exp sorted by >
this.pi.field.piSplit[].nans == [0, 0]
this.pi.field.piSplit[].nans elements == 0
this.pi.field.piSplit[].field elements != null
this.pi.field.piSplit[].field elements are equal
this.pi.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pi.field.eSplit[] elements != null
this.pi.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pi.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pi.field.eSplit[].sign == [1, 1]
this.pi.field.eSplit[].sign elements == 1
this.pi.field.eSplit[].exp == [1, -1]
this.pi.field.eSplit[].exp elements one of { -1, 1 }
this.pi.field.eSplit[].exp elements != 0
this.pi.field.eSplit[].exp sorted by >
this.pi.field.eSplit[].nans == [0, 0]
this.pi.field.eSplit[].nans elements == 0
this.pi.field.eSplit[].field elements != null
this.pi.field.eSplit[].field elements are equal
this.pi.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pi.field.ln2Split[] elements != null
this.pi.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pi.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pi.field.ln2Split[].mant sorted by >
this.pi.field.ln2Split[].sign == [1, 1]
this.pi.field.ln2Split[].sign elements == 1
this.pi.field.ln2Split[].exp == [0, -2]
this.pi.field.ln2Split[].exp elements one of { -2, 0 }
this.pi.field.ln2Split[].exp sorted by >
this.pi.field.ln2Split[].nans == [0, 0]
this.pi.field.ln2Split[].nans elements == 0
this.pi.field.ln2Split[].field elements != null
this.pi.field.ln2Split[].field elements are equal
this.pi.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pi.field.ln5Split[] elements != null
this.pi.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pi.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pi.field.ln5Split[].mant sorted by >
this.pi.field.ln5Split[].sign == [1, 1]
this.pi.field.ln5Split[].sign elements == 1
this.pi.field.ln5Split[].exp == [1, -1]
this.pi.field.ln5Split[].exp elements one of { -1, 1 }
this.pi.field.ln5Split[].exp elements != 0
this.pi.field.ln5Split[].exp sorted by >
this.pi.field.ln5Split[].nans == [0, 0]
this.pi.field.ln5Split[].nans elements == 0
this.pi.field.ln5Split[].field elements != null
this.pi.field.ln5Split[].field elements are equal
this.pi.field.rMode has only one value
this.pi.field.ieeeFlags one of { 0, 16, 18 }
this.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[] elements != null
this.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.piSplit[].mant sorted by <
this.piSplit[].sign == [1, 1]
this.piSplit[].sign elements == 1
this.piSplit[].exp == [1, -1]
this.piSplit[].exp elements one of { -1, 1 }
this.piSplit[].exp elements != 0
this.piSplit[].exp sorted by >
this.piSplit[].nans == [0, 0]
this.piSplit[].nans elements == 0
this.piSplit[].field elements != null
this.piSplit[].field elements are equal
this.piSplit[].field.radixDigits == [5, 5]
this.piSplit[].field.radixDigits elements == 5
this.piSplit[].field.zero elements != null
this.piSplit[].field.zero elements are equal
this.piSplit[].field.one elements != null
this.piSplit[].field.one elements are equal
this.piSplit[].field.two elements != null
this.piSplit[].field.two elements are equal
this.piSplit[].field.sqr2 elements != null
this.piSplit[].field.sqr2 elements are equal
this.piSplit[].field.sqr2Split elements != null
this.piSplit[].field.sqr2Split elements are equal
this.piSplit[].field.sqr2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.sqr2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.sqr2Reciprocal elements != null
this.piSplit[].field.sqr2Reciprocal elements are equal
this.piSplit[].field.sqr3 elements != null
this.piSplit[].field.sqr3 elements are equal
this.piSplit[].field.sqr3Reciprocal elements != null
this.piSplit[].field.sqr3Reciprocal elements are equal
this.piSplit[].field.pi elements != null
this.piSplit[].field.pi elements are equal
this.piSplit[].field.piSplit elements != null
this.piSplit[].field.piSplit elements are equal
this.piSplit[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.e elements are equal
this.piSplit[].field.eSplit elements are equal
this.piSplit[].field.eSplit.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.piSplit[].field.ln2 elements are equal
this.piSplit[].field.ln2Split elements are equal
this.piSplit[].field.ln2Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.piSplit[].field.ln5 elements are equal
this.piSplit[].field.ln5Split elements are equal
this.piSplit[].field.ln5Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.piSplit[].field.ln10 elements are equal
this.piSplit[].field.rMode contains no nulls and has only one value, of length 2
this.piSplit[].field.rMode elements has only one value
this.piSplit[].field.rMode elements != null
this.piSplit[].field.ieeeFlags elements one of { 0, 16, 18 }
this.piSplit[].field.ieeeFlags one of { [0, 0], [16, 16], [18, 18] }
this.piSplit[].field.ieeeFlags elements are equal
this.e.mant[] == [452, 8459, 8182, 7182, 2]
this.e.mant[] elements >= 2
this.e.sign == 1
this.e.exp == 1
this.e.nans == 0
this.e.field.radixDigits == 5
this.e.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.e.field.sqr2Split[] elements != null
this.e.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.e.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.e.field.sqr2Split[].sign == [1, 1]
this.e.field.sqr2Split[].sign elements == 1
this.e.field.sqr2Split[].exp == [1, -1]
this.e.field.sqr2Split[].exp elements one of { -1, 1 }
this.e.field.sqr2Split[].exp elements != 0
this.e.field.sqr2Split[].exp sorted by >
this.e.field.sqr2Split[].nans == [0, 0]
this.e.field.sqr2Split[].nans elements == 0
this.e.field.sqr2Split[].field elements != null
this.e.field.sqr2Split[].field elements are equal
this.e.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.e.field.piSplit[] elements != null
this.e.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.e.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.e.field.piSplit[].mant sorted by <
this.e.field.piSplit[].sign == [1, 1]
this.e.field.piSplit[].sign elements == 1
this.e.field.piSplit[].exp == [1, -1]
this.e.field.piSplit[].exp elements one of { -1, 1 }
this.e.field.piSplit[].exp elements != 0
this.e.field.piSplit[].exp sorted by >
this.e.field.piSplit[].nans == [0, 0]
this.e.field.piSplit[].nans elements == 0
this.e.field.piSplit[].field elements != null
this.e.field.piSplit[].field elements are equal
this.e.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.e.field.eSplit[] elements != null
this.e.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.e.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.e.field.eSplit[].sign == [1, 1]
this.e.field.eSplit[].sign elements == 1
this.e.field.eSplit[].exp == [1, -1]
this.e.field.eSplit[].exp elements one of { -1, 1 }
this.e.field.eSplit[].exp elements != 0
this.e.field.eSplit[].exp sorted by >
this.e.field.eSplit[].nans == [0, 0]
this.e.field.eSplit[].nans elements == 0
this.e.field.eSplit[].field elements != null
this.e.field.eSplit[].field elements are equal
this.e.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.e.field.ln2Split[] elements != null
this.e.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.e.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.e.field.ln2Split[].mant sorted by >
this.e.field.ln2Split[].sign == [1, 1]
this.e.field.ln2Split[].sign elements == 1
this.e.field.ln2Split[].exp == [0, -2]
this.e.field.ln2Split[].exp elements one of { -2, 0 }
this.e.field.ln2Split[].exp sorted by >
this.e.field.ln2Split[].nans == [0, 0]
this.e.field.ln2Split[].nans elements == 0
this.e.field.ln2Split[].field elements != null
this.e.field.ln2Split[].field elements are equal
this.e.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.e.field.ln5Split[] elements != null
this.e.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.e.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.e.field.ln5Split[].mant sorted by >
this.e.field.ln5Split[].sign == [1, 1]
this.e.field.ln5Split[].sign elements == 1
this.e.field.ln5Split[].exp == [1, -1]
this.e.field.ln5Split[].exp elements one of { -1, 1 }
this.e.field.ln5Split[].exp elements != 0
this.e.field.ln5Split[].exp sorted by >
this.e.field.ln5Split[].nans == [0, 0]
this.e.field.ln5Split[].nans elements == 0
this.e.field.ln5Split[].field elements != null
this.e.field.ln5Split[].field elements are equal
this.e.field.rMode has only one value
this.e.field.ieeeFlags one of { 0, 16, 18 }
this.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[] elements != null
this.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.eSplit[].sign == [1, 1]
this.eSplit[].sign elements == 1
this.eSplit[].exp == [1, -1]
this.eSplit[].exp elements one of { -1, 1 }
this.eSplit[].exp elements != 0
this.eSplit[].exp sorted by >
this.eSplit[].nans == [0, 0]
this.eSplit[].nans elements == 0
this.eSplit[].field elements != null
this.eSplit[].field elements are equal
this.eSplit[].field.radixDigits == [5, 5]
this.eSplit[].field.radixDigits elements == 5
this.eSplit[].field.zero elements != null
this.eSplit[].field.zero elements are equal
this.eSplit[].field.one elements != null
this.eSplit[].field.one elements are equal
this.eSplit[].field.two elements != null
this.eSplit[].field.two elements are equal
this.eSplit[].field.sqr2 elements != null
this.eSplit[].field.sqr2 elements are equal
this.eSplit[].field.sqr2Split elements != null
this.eSplit[].field.sqr2Split elements are equal
this.eSplit[].field.sqr2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.sqr2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.sqr2Reciprocal elements != null
this.eSplit[].field.sqr2Reciprocal elements are equal
this.eSplit[].field.sqr3 elements != null
this.eSplit[].field.sqr3 elements are equal
this.eSplit[].field.sqr3Reciprocal elements != null
this.eSplit[].field.sqr3Reciprocal elements are equal
this.eSplit[].field.pi elements != null
this.eSplit[].field.pi elements are equal
this.eSplit[].field.piSplit elements != null
this.eSplit[].field.piSplit elements are equal
this.eSplit[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.e elements != null
this.eSplit[].field.e elements are equal
this.eSplit[].field.eSplit elements != null
this.eSplit[].field.eSplit elements are equal
this.eSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln2 elements are equal
this.eSplit[].field.ln2Split elements are equal
this.eSplit[].field.ln2Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.eSplit[].field.ln5 elements are equal
this.eSplit[].field.ln5Split elements are equal
this.eSplit[].field.ln5Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.eSplit[].field.ln10 elements are equal
this.eSplit[].field.rMode contains no nulls and has only one value, of length 2
this.eSplit[].field.rMode elements has only one value
this.eSplit[].field.rMode elements != null
this.eSplit[].field.ieeeFlags elements one of { 0, 16, 18 }
this.eSplit[].field.ieeeFlags one of { [0, 0], [16, 16], [18, 18] }
this.eSplit[].field.ieeeFlags elements are equal
this.ln2.mant[] == [942, 9453, 559, 4718, 6931]
this.ln2.sign == 1
this.ln2.exp == 0
this.ln2.nans == 0
this.ln2.field.radixDigits == 5
this.ln2.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln2.field.sqr2Split[] elements != null
this.ln2.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln2.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln2.field.sqr2Split[].sign == [1, 1]
this.ln2.field.sqr2Split[].sign elements == 1
this.ln2.field.sqr2Split[].exp == [1, -1]
this.ln2.field.sqr2Split[].exp elements one of { -1, 1 }
this.ln2.field.sqr2Split[].exp elements != 0
this.ln2.field.sqr2Split[].exp sorted by >
this.ln2.field.sqr2Split[].nans == [0, 0]
this.ln2.field.sqr2Split[].nans elements == 0
this.ln2.field.sqr2Split[].field elements != null
this.ln2.field.sqr2Split[].field elements are equal
this.ln2.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln2.field.piSplit[] elements != null
this.ln2.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln2.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln2.field.piSplit[].mant sorted by <
this.ln2.field.piSplit[].sign == [1, 1]
this.ln2.field.piSplit[].sign elements == 1
this.ln2.field.piSplit[].exp == [1, -1]
this.ln2.field.piSplit[].exp elements one of { -1, 1 }
this.ln2.field.piSplit[].exp elements != 0
this.ln2.field.piSplit[].exp sorted by >
this.ln2.field.piSplit[].nans == [0, 0]
this.ln2.field.piSplit[].nans elements == 0
this.ln2.field.piSplit[].field elements != null
this.ln2.field.piSplit[].field elements are equal
this.ln2.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln2.field.eSplit[] elements != null
this.ln2.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln2.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln2.field.eSplit[].sign == [1, 1]
this.ln2.field.eSplit[].sign elements == 1
this.ln2.field.eSplit[].exp == [1, -1]
this.ln2.field.eSplit[].exp elements one of { -1, 1 }
this.ln2.field.eSplit[].exp elements != 0
this.ln2.field.eSplit[].exp sorted by >
this.ln2.field.eSplit[].nans == [0, 0]
this.ln2.field.eSplit[].nans elements == 0
this.ln2.field.eSplit[].field elements != null
this.ln2.field.eSplit[].field elements are equal
this.ln2.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln2.field.ln2Split[] elements != null
this.ln2.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln2.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln2.field.ln2Split[].mant sorted by >
this.ln2.field.ln2Split[].sign == [1, 1]
this.ln2.field.ln2Split[].sign elements == 1
this.ln2.field.ln2Split[].exp == [0, -2]
this.ln2.field.ln2Split[].exp elements one of { -2, 0 }
this.ln2.field.ln2Split[].exp sorted by >
this.ln2.field.ln2Split[].nans == [0, 0]
this.ln2.field.ln2Split[].nans elements == 0
this.ln2.field.ln2Split[].field elements != null
this.ln2.field.ln2Split[].field elements are equal
this.ln2.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln2.field.ln5Split[] elements != null
this.ln2.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln2.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln2.field.ln5Split[].mant sorted by >
this.ln2.field.ln5Split[].sign == [1, 1]
this.ln2.field.ln5Split[].sign elements == 1
this.ln2.field.ln5Split[].exp == [1, -1]
this.ln2.field.ln5Split[].exp elements one of { -1, 1 }
this.ln2.field.ln5Split[].exp elements != 0
this.ln2.field.ln5Split[].exp sorted by >
this.ln2.field.ln5Split[].nans == [0, 0]
this.ln2.field.ln5Split[].nans elements == 0
this.ln2.field.ln5Split[].field elements != null
this.ln2.field.ln5Split[].field elements are equal
this.ln2.field.rMode has only one value
this.ln2.field.ieeeFlags one of { 0, 16, 18 }
this.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[] elements != null
this.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln2Split[].mant sorted by >
this.ln2Split[].sign == [1, 1]
this.ln2Split[].sign elements == 1
this.ln2Split[].exp == [0, -2]
this.ln2Split[].exp elements one of { -2, 0 }
this.ln2Split[].exp sorted by >
this.ln2Split[].nans == [0, 0]
this.ln2Split[].nans elements == 0
this.ln2Split[].field elements != null
this.ln2Split[].field elements are equal
this.ln2Split[].field.radixDigits == [5, 5]
this.ln2Split[].field.radixDigits elements == 5
this.ln2Split[].field.zero elements != null
this.ln2Split[].field.zero elements are equal
this.ln2Split[].field.one elements != null
this.ln2Split[].field.one elements are equal
this.ln2Split[].field.two elements != null
this.ln2Split[].field.two elements are equal
this.ln2Split[].field.sqr2 elements != null
this.ln2Split[].field.sqr2 elements are equal
this.ln2Split[].field.sqr2Split elements != null
this.ln2Split[].field.sqr2Split elements are equal
this.ln2Split[].field.sqr2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.sqr2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.sqr2Reciprocal elements != null
this.ln2Split[].field.sqr2Reciprocal elements are equal
this.ln2Split[].field.sqr3 elements != null
this.ln2Split[].field.sqr3 elements are equal
this.ln2Split[].field.sqr3Reciprocal elements != null
this.ln2Split[].field.sqr3Reciprocal elements are equal
this.ln2Split[].field.pi elements != null
this.ln2Split[].field.pi elements are equal
this.ln2Split[].field.piSplit elements != null
this.ln2Split[].field.piSplit elements are equal
this.ln2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.e elements != null
this.ln2Split[].field.e elements are equal
this.ln2Split[].field.eSplit elements != null
this.ln2Split[].field.eSplit elements are equal
this.ln2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln2 elements != null
this.ln2Split[].field.ln2 elements are equal
this.ln2Split[].field.ln2Split elements != null
this.ln2Split[].field.ln2Split elements are equal
this.ln2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln5 elements are equal
this.ln2Split[].field.ln5Split elements are equal
this.ln2Split[].field.ln5Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
this.ln2Split[].field.ln10 elements are equal
this.ln2Split[].field.rMode contains no nulls and has only one value, of length 2
this.ln2Split[].field.rMode elements has only one value
this.ln2Split[].field.rMode elements != null
this.ln2Split[].field.ieeeFlags elements one of { 0, 16, 18 }
this.ln2Split[].field.ieeeFlags one of { [0, 0], [16, 16], [18, 18] }
this.ln2Split[].field.ieeeFlags elements are equal
this.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
this.ln5.mant[] elements >= 1
this.ln5.sign == 1
this.ln5.exp == 1
this.ln5.nans == 0
this.ln5.field.radixDigits == 5
this.ln5.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln5.field.sqr2Split[] elements != null
this.ln5.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln5.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln5.field.sqr2Split[].sign == [1, 1]
this.ln5.field.sqr2Split[].sign elements == 1
this.ln5.field.sqr2Split[].exp == [1, -1]
this.ln5.field.sqr2Split[].exp elements one of { -1, 1 }
this.ln5.field.sqr2Split[].exp elements != 0
this.ln5.field.sqr2Split[].exp sorted by >
this.ln5.field.sqr2Split[].nans == [0, 0]
this.ln5.field.sqr2Split[].nans elements == 0
this.ln5.field.sqr2Split[].field elements != null
this.ln5.field.sqr2Split[].field elements are equal
this.ln5.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln5.field.piSplit[] elements != null
this.ln5.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln5.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln5.field.piSplit[].mant sorted by <
this.ln5.field.piSplit[].sign == [1, 1]
this.ln5.field.piSplit[].sign elements == 1
this.ln5.field.piSplit[].exp == [1, -1]
this.ln5.field.piSplit[].exp elements one of { -1, 1 }
this.ln5.field.piSplit[].exp elements != 0
this.ln5.field.piSplit[].exp sorted by >
this.ln5.field.piSplit[].nans == [0, 0]
this.ln5.field.piSplit[].nans elements == 0
this.ln5.field.piSplit[].field elements != null
this.ln5.field.piSplit[].field elements are equal
this.ln5.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln5.field.eSplit[] elements != null
this.ln5.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln5.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln5.field.eSplit[].sign == [1, 1]
this.ln5.field.eSplit[].sign elements == 1
this.ln5.field.eSplit[].exp == [1, -1]
this.ln5.field.eSplit[].exp elements one of { -1, 1 }
this.ln5.field.eSplit[].exp elements != 0
this.ln5.field.eSplit[].exp sorted by >
this.ln5.field.eSplit[].nans == [0, 0]
this.ln5.field.eSplit[].nans elements == 0
this.ln5.field.eSplit[].field elements != null
this.ln5.field.eSplit[].field elements are equal
this.ln5.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln5.field.ln2Split[] elements != null
this.ln5.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln5.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln5.field.ln2Split[].mant sorted by >
this.ln5.field.ln2Split[].sign == [1, 1]
this.ln5.field.ln2Split[].sign elements == 1
this.ln5.field.ln2Split[].exp == [0, -2]
this.ln5.field.ln2Split[].exp elements one of { -2, 0 }
this.ln5.field.ln2Split[].exp sorted by >
this.ln5.field.ln2Split[].nans == [0, 0]
this.ln5.field.ln2Split[].nans elements == 0
this.ln5.field.ln2Split[].field elements != null
this.ln5.field.ln2Split[].field elements are equal
this.ln5.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln5.field.ln5Split[] elements != null
this.ln5.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln5.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln5.field.ln5Split[].mant sorted by >
this.ln5.field.ln5Split[].sign == [1, 1]
this.ln5.field.ln5Split[].sign elements == 1
this.ln5.field.ln5Split[].exp == [1, -1]
this.ln5.field.ln5Split[].exp elements one of { -1, 1 }
this.ln5.field.ln5Split[].exp elements != 0
this.ln5.field.ln5Split[].exp sorted by >
this.ln5.field.ln5Split[].nans == [0, 0]
this.ln5.field.ln5Split[].nans elements == 0
this.ln5.field.ln5Split[].field elements != null
this.ln5.field.ln5Split[].field elements are equal
this.ln5.field.rMode has only one value
this.ln5.field.ieeeFlags one of { 0, 16, 18 }
this.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln5Split[] elements != null
this.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln5Split[].mant sorted by >
this.ln5Split[].sign == [1, 1]
this.ln5Split[].sign elements == 1
this.ln5Split[].exp == [1, -1]
this.ln5Split[].exp elements one of { -1, 1 }
this.ln5Split[].exp elements != 0
this.ln5Split[].exp sorted by >
this.ln5Split[].nans == [0, 0]
this.ln5Split[].nans elements == 0
this.ln5Split[].field elements != null
this.ln5Split[].field elements are equal
this.ln5Split[].field.radixDigits == [5, 5]
this.ln5Split[].field.radixDigits elements == 5
this.ln5Split[].field.zero elements != null
this.ln5Split[].field.zero elements are equal
this.ln5Split[].field.one elements != null
this.ln5Split[].field.one elements are equal
this.ln5Split[].field.two elements != null
this.ln5Split[].field.two elements are equal
this.ln5Split[].field.sqr2 elements != null
this.ln5Split[].field.sqr2 elements are equal
this.ln5Split[].field.sqr2Split elements != null
this.ln5Split[].field.sqr2Split elements are equal
this.ln5Split[].field.sqr2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln5Split[].field.sqr2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln5Split[].field.sqr2Reciprocal elements != null
this.ln5Split[].field.sqr2Reciprocal elements are equal
this.ln5Split[].field.sqr3 elements != null
this.ln5Split[].field.sqr3 elements are equal
this.ln5Split[].field.sqr3Reciprocal elements != null
this.ln5Split[].field.sqr3Reciprocal elements are equal
this.ln5Split[].field.pi elements != null
this.ln5Split[].field.pi elements are equal
this.ln5Split[].field.piSplit elements != null
this.ln5Split[].field.piSplit elements are equal
this.ln5Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln5Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln5Split[].field.e elements != null
this.ln5Split[].field.e elements are equal
this.ln5Split[].field.eSplit elements != null
this.ln5Split[].field.eSplit elements are equal
this.ln5Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln5Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln5Split[].field.ln2 elements != null
this.ln5Split[].field.ln2 elements are equal
this.ln5Split[].field.ln2Split elements != null
this.ln5Split[].field.ln2Split elements are equal
this.ln5Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln5Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln5Split[].field.ln5 elements != null
this.ln5Split[].field.ln5 elements are equal
this.ln5Split[].field.ln5Split elements != null
this.ln5Split[].field.ln5Split elements are equal
this.ln5Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln5Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln5Split[].field.ln10 elements are equal
this.ln5Split[].field.rMode contains no nulls and has only one value, of length 2
this.ln5Split[].field.rMode elements has only one value
this.ln5Split[].field.rMode elements != null
this.ln5Split[].field.ieeeFlags elements one of { 0, 16, 18 }
this.ln5Split[].field.ieeeFlags one of { [0, 0], [16, 16], [18, 18] }
this.ln5Split[].field.ieeeFlags elements are equal
this.ln10.mant[] == [457, 2994, 8509, 3025, 2]
this.ln10.mant[] elements >= 2
this.ln10.sign == 1
this.ln10.exp == 1
this.ln10.nans == 0
this.ln10.field.radixDigits == 5
this.ln10.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln10.field.sqr2Split[] elements != null
this.ln10.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln10.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln10.field.sqr2Split[].sign == [1, 1]
this.ln10.field.sqr2Split[].sign elements == 1
this.ln10.field.sqr2Split[].exp == [1, -1]
this.ln10.field.sqr2Split[].exp elements one of { -1, 1 }
this.ln10.field.sqr2Split[].exp elements != 0
this.ln10.field.sqr2Split[].exp sorted by >
this.ln10.field.sqr2Split[].nans == [0, 0]
this.ln10.field.sqr2Split[].nans elements == 0
this.ln10.field.sqr2Split[].field elements != null
this.ln10.field.sqr2Split[].field elements are equal
this.ln10.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln10.field.piSplit[] elements != null
this.ln10.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln10.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln10.field.piSplit[].mant sorted by <
this.ln10.field.piSplit[].sign == [1, 1]
this.ln10.field.piSplit[].sign elements == 1
this.ln10.field.piSplit[].exp == [1, -1]
this.ln10.field.piSplit[].exp elements one of { -1, 1 }
this.ln10.field.piSplit[].exp elements != 0
this.ln10.field.piSplit[].exp sorted by >
this.ln10.field.piSplit[].nans == [0, 0]
this.ln10.field.piSplit[].nans elements == 0
this.ln10.field.piSplit[].field elements != null
this.ln10.field.piSplit[].field elements are equal
this.ln10.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln10.field.eSplit[] elements != null
this.ln10.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln10.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln10.field.eSplit[].sign == [1, 1]
this.ln10.field.eSplit[].sign elements == 1
this.ln10.field.eSplit[].exp == [1, -1]
this.ln10.field.eSplit[].exp elements one of { -1, 1 }
this.ln10.field.eSplit[].exp elements != 0
this.ln10.field.eSplit[].exp sorted by >
this.ln10.field.eSplit[].nans == [0, 0]
this.ln10.field.eSplit[].nans elements == 0
this.ln10.field.eSplit[].field elements != null
this.ln10.field.eSplit[].field elements are equal
this.ln10.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln10.field.ln2Split[] elements != null
this.ln10.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln10.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln10.field.ln2Split[].mant sorted by >
this.ln10.field.ln2Split[].sign == [1, 1]
this.ln10.field.ln2Split[].sign elements == 1
this.ln10.field.ln2Split[].exp == [0, -2]
this.ln10.field.ln2Split[].exp elements one of { -2, 0 }
this.ln10.field.ln2Split[].exp sorted by >
this.ln10.field.ln2Split[].nans == [0, 0]
this.ln10.field.ln2Split[].nans elements == 0
this.ln10.field.ln2Split[].field elements != null
this.ln10.field.ln2Split[].field elements are equal
this.ln10.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ln10.field.ln5Split[] elements != null
this.ln10.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ln10.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ln10.field.ln5Split[].mant sorted by >
this.ln10.field.ln5Split[].sign == [1, 1]
this.ln10.field.ln5Split[].sign elements == 1
this.ln10.field.ln5Split[].exp == [1, -1]
this.ln10.field.ln5Split[].exp elements one of { -1, 1 }
this.ln10.field.ln5Split[].exp elements != 0
this.ln10.field.ln5Split[].exp sorted by >
this.ln10.field.ln5Split[].nans == [0, 0]
this.ln10.field.ln5Split[].nans elements == 0
this.ln10.field.ln5Split[].field elements != null
this.ln10.field.ln5Split[].field elements are equal
this.ln10.field.rMode has only one value
this.ln10.field.ieeeFlags one of { 0, 16, 18 }
this.rMode has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] elements != null
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
this.ieeeFlags one of { 0, 16, 18 }
size(this.zero.mant[]) one of { 5, 50 }
size(this.zero.field.sqr2Split[]) == 2
size(this.zero.field.piSplit[]) == 2
size(this.zero.field.eSplit[]) == 2
size(this.zero.field.ln2Split[]) == 2
size(this.zero.field.ln5Split[]) == 2
size(this.one.mant[]) one of { 5, 50 }
size(this.one.field.sqr2Split[]) == 2
size(this.one.field.piSplit[]) == 2
size(this.one.field.eSplit[]) == 2
size(this.one.field.ln2Split[]) == 2
size(this.one.field.ln5Split[]) == 2
size(this.two.mant[]) one of { 5, 50 }
size(this.two.field.sqr2Split[]) == 2
size(this.two.field.piSplit[]) == 2
size(this.two.field.eSplit[]) == 2
size(this.two.field.ln2Split[]) == 2
size(this.two.field.ln5Split[]) == 2
size(this.sqr2.mant[]) == 5
size(this.sqr2.field.sqr2Split[]) == 2
size(this.sqr2.field.piSplit[]) == 2
size(this.sqr2.field.eSplit[]) == 2
size(this.sqr2.field.ln2Split[]) == 2
size(this.sqr2.field.ln5Split[]) == 2
size(this.sqr2Split[]) == 2
size(this.sqr2Reciprocal.mant[]) == 5
size(this.sqr2Reciprocal.field.sqr2Split[]) == 2
size(this.sqr2Reciprocal.field.piSplit[]) == 2
size(this.sqr2Reciprocal.field.eSplit[]) == 2
size(this.sqr2Reciprocal.field.ln2Split[]) == 2
size(this.sqr2Reciprocal.field.ln5Split[]) == 2
size(this.sqr3.mant[]) == 5
size(this.sqr3.field.sqr2Split[]) == 2
size(this.sqr3.field.piSplit[]) == 2
size(this.sqr3.field.eSplit[]) == 2
size(this.sqr3.field.ln2Split[]) == 2
size(this.sqr3.field.ln5Split[]) == 2
size(this.sqr3Reciprocal.mant[]) == 5
size(this.sqr3Reciprocal.field.sqr2Split[]) == 2
size(this.sqr3Reciprocal.field.piSplit[]) == 2
size(this.sqr3Reciprocal.field.eSplit[]) == 2
size(this.sqr3Reciprocal.field.ln2Split[]) == 2
size(this.sqr3Reciprocal.field.ln5Split[]) == 2
size(this.pi.mant[]) == 5
size(this.pi.field.sqr2Split[]) == 2
size(this.pi.field.piSplit[]) == 2
size(this.pi.field.eSplit[]) == 2
size(this.pi.field.ln2Split[]) == 2
size(this.pi.field.ln5Split[]) == 2
size(this.piSplit[]) == 2
size(this.e.mant[]) == 5
size(this.e.field.sqr2Split[]) == 2
size(this.e.field.piSplit[]) == 2
size(this.e.field.eSplit[]) == 2
size(this.e.field.ln2Split[]) == 2
size(this.e.field.ln5Split[]) == 2
size(this.eSplit[]) == 2
size(this.ln2.mant[]) == 5
size(this.ln2.field.sqr2Split[]) == 2
size(this.ln2.field.piSplit[]) == 2
size(this.ln2.field.eSplit[]) == 2
size(this.ln2.field.ln2Split[]) == 2
size(this.ln2.field.ln5Split[]) == 2
size(this.ln2Split[]) == 2
size(this.ln5.mant[]) == 5
size(this.ln5.field.sqr2Split[]) == 2
size(this.ln5.field.piSplit[]) == 2
size(this.ln5.field.eSplit[]) == 2
size(this.ln5.field.ln2Split[]) == 2
size(this.ln5.field.ln5Split[]) == 2
size(this.ln5Split[]) == 2
size(this.ln10.mant[]) == 5
size(this.ln10.field.sqr2Split[]) == 2
size(this.ln10.field.piSplit[]) == 2
size(this.ln10.field.eSplit[]) == 2
size(this.ln10.field.ln2Split[]) == 2
size(this.ln10.field.ln5Split[]) == 2
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
===========================================================================
org.apache.commons.math3.dfp.DfpField.DfpField(int):::ENTER
decimalDigits == 20
===========================================================================
org.apache.commons.math3.dfp.DfpField.DfpField(int):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 16
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 16
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 16
this.sqr2.field.ieeeFlags == 16
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ieeeFlags == [16, 16]
this.sqr2Split[].field.ieeeFlags elements == 16
this.sqr2Reciprocal.field.ieeeFlags == 16
this.sqr3.field.ieeeFlags == 16
this.sqr3Reciprocal.field.ieeeFlags == 16
this.pi.field.ieeeFlags == 16
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ieeeFlags == [16, 16]
this.piSplit[].field.ieeeFlags elements == 16
this.e.field.ieeeFlags == 16
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ieeeFlags == [16, 16]
this.eSplit[].field.ieeeFlags elements == 16
this.ln2.field.ieeeFlags == 16
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ieeeFlags == [16, 16]
this.ln2Split[].field.ieeeFlags elements == 16
this.ln5.field.ieeeFlags == 16
this.ln5Split[].field.ieeeFlags == [16, 16]
this.ln5Split[].field.ieeeFlags elements == 16
this.ln10.field.ieeeFlags == 16
this.ieeeFlags == 16
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.DfpField(int, boolean):::ENTER
decimalDigits one of { 20, 200 }
===========================================================================
org.apache.commons.math3.dfp.DfpField.DfpField(int, boolean):::EXIT
this.zero.field.ieeeFlags one of { 0, 16 }
this.one.field.ieeeFlags one of { 0, 16 }
this.two.field.ieeeFlags one of { 0, 16 }
this.sqr2.field.ieeeFlags == 16
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ieeeFlags == [16, 16]
this.sqr2Split[].field.ieeeFlags elements == 16
this.sqr2Reciprocal.field.ieeeFlags == 16
this.sqr3.field.ieeeFlags == 16
this.sqr3Reciprocal.field.ieeeFlags == 16
this.pi.field.ieeeFlags == 16
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ieeeFlags == [16, 16]
this.piSplit[].field.ieeeFlags elements == 16
this.e.field.ieeeFlags == 16
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ieeeFlags == [16, 16]
this.eSplit[].field.ieeeFlags elements == 16
this.ln2.field.ieeeFlags == 16
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ieeeFlags == [16, 16]
this.ln2Split[].field.ieeeFlags elements == 16
this.ln5.field.ieeeFlags == 16
this.ln5Split[].field.ieeeFlags == [16, 16]
this.ln5Split[].field.ieeeFlags elements == 16
this.ln10.field.ieeeFlags == 16
this.ieeeFlags one of { 0, 16 }
===========================================================================
org.apache.commons.math3.dfp.DfpField.clearIEEEFlags():::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 18
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 18
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 18
this.sqr2.field.ieeeFlags == 18
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ieeeFlags == [18, 18]
this.sqr2Split[].field.ieeeFlags elements == 18
this.sqr2Reciprocal.field.ieeeFlags == 18
this.sqr3.field.ieeeFlags == 18
this.sqr3Reciprocal.field.ieeeFlags == 18
this.pi.field.ieeeFlags == 18
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ieeeFlags == [18, 18]
this.piSplit[].field.ieeeFlags elements == 18
this.e.field.ieeeFlags == 18
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ieeeFlags == [18, 18]
this.eSplit[].field.ieeeFlags elements == 18
this.ln2.field.ieeeFlags == 18
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ieeeFlags == [18, 18]
this.ln2Split[].field.ieeeFlags elements == 18
this.ln5.field.ieeeFlags == 18
this.ln5Split[].field.ieeeFlags == [18, 18]
this.ln5Split[].field.ieeeFlags elements == 18
this.ln10.field.ieeeFlags == 18
this.ieeeFlags == 18
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.clearIEEEFlags():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 0
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 0
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 0
this.sqr2.field.ieeeFlags == 0
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ieeeFlags == [0, 0]
this.sqr2Split[].field.ieeeFlags elements == 0
this.sqr2Reciprocal.field.ieeeFlags == 0
this.sqr3.field.ieeeFlags == 0
this.sqr3Reciprocal.field.ieeeFlags == 0
this.pi.field.ieeeFlags == 0
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ieeeFlags == [0, 0]
this.piSplit[].field.ieeeFlags elements == 0
this.e.field.ieeeFlags == 0
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ieeeFlags == [0, 0]
this.eSplit[].field.ieeeFlags elements == 0
this.ln2.field.ieeeFlags == 0
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ieeeFlags == [0, 0]
this.ln2Split[].field.ieeeFlags elements == 0
this.ln5.field.ieeeFlags == 0
this.ln5Split[].field.ieeeFlags == [0, 0]
this.ln5Split[].field.ieeeFlags elements == 0
this.ln10.field.ieeeFlags == 0
this.ieeeFlags == 0
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.computeExp(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString == null
org.apache.commons.math3.dfp.DfpField.ln2String == null
org.apache.commons.math3.dfp.DfpField.ln5String == null
org.apache.commons.math3.dfp.DfpField.ln10String == null
a has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
a.mant has only one value
a.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
a.mant[] elements one of { 0, 1 }
a.sign == 1
a.exp == 1
a.nans == 0
a.field has only one value
a.field.radixDigits == 50
a.field.zero has only one value
a.field.one has only one value
a.field.two has only one value
a.field.sqr2 == null
a.field.sqr2Split == null
a.field.sqr2Reciprocal == null
a.field.sqr3 == null
a.field.sqr3Reciprocal == null
a.field.pi == null
a.field.piSplit == null
a.field.e == null
a.field.eSplit == null
a.field.ln2 == null
a.field.ln2Split == null
a.field.ln5 == null
a.field.ln5Split == null
a.field.ln10 == null
a.field.rMode has only one value
a.field.ieeeFlags == 16
one has only one value
one.mant has only one value
one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
one.mant[] elements one of { 0, 1 }
one.sign == 1
one.exp == 1
one.nans == 0
one.field has only one value
one.field.radixDigits == 50
one.field.zero has only one value
one.field.one has only one value
one.field.two has only one value
one.field.sqr2 == null
one.field.sqr2Split == null
one.field.sqr2Reciprocal == null
one.field.sqr3 == null
one.field.sqr3Reciprocal == null
one.field.pi == null
one.field.piSplit == null
one.field.e == null
one.field.eSplit == null
one.field.ln2 == null
one.field.ln2Split == null
one.field.ln5 == null
one.field.ln5Split == null
one.field.ln10 == null
one.field.rMode has only one value
one.field.ieeeFlags == 16
size(a.mant[]) == 50
size(one.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.DfpField.computeExp(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
a.mant == orig(a.mant)
a.mant[] == orig(a.mant[])
a.sign == orig(a.sign)
a.exp == orig(a.exp)
a.nans == orig(a.nans)
a.field == orig(a.field)
a.field.radixDigits == orig(a.field.radixDigits)
a.field.zero == orig(a.field.zero)
a.field.one == orig(a.field.one)
a.field.two == orig(a.field.two)
a.field.sqr2 == orig(a.field.sqr2)
a.field.sqr2Split == orig(a.field.sqr2Split)
a.field.sqr2Reciprocal == orig(a.field.sqr2Reciprocal)
a.field.sqr3 == orig(a.field.sqr3)
a.field.sqr3Reciprocal == orig(a.field.sqr3Reciprocal)
a.field.pi == orig(a.field.pi)
a.field.piSplit == orig(a.field.piSplit)
a.field.e == orig(a.field.e)
a.field.eSplit == orig(a.field.eSplit)
a.field.ln2 == orig(a.field.ln2)
a.field.ln2Split == orig(a.field.ln2Split)
a.field.ln5 == orig(a.field.ln5)
a.field.ln5Split == orig(a.field.ln5Split)
a.field.ln10 == orig(a.field.ln10)
a.field.rMode == orig(a.field.rMode)
a.field.ieeeFlags == orig(a.field.ieeeFlags)
one.mant == orig(one.mant)
one.mant[] == orig(one.mant[])
one.sign == orig(one.sign)
one.exp == orig(one.exp)
one.nans == orig(one.nans)
one.field == orig(one.field)
one.field.radixDigits == orig(one.field.radixDigits)
one.field.zero == orig(one.field.zero)
one.field.one == orig(one.field.one)
one.field.two == orig(one.field.two)
one.field.sqr2 == orig(one.field.sqr2)
one.field.sqr2Split == orig(one.field.sqr2Split)
one.field.sqr2Reciprocal == orig(one.field.sqr2Reciprocal)
one.field.sqr3 == orig(one.field.sqr3)
one.field.sqr3Reciprocal == orig(one.field.sqr3Reciprocal)
one.field.pi == orig(one.field.pi)
one.field.piSplit == orig(one.field.piSplit)
one.field.e == orig(one.field.e)
one.field.eSplit == orig(one.field.eSplit)
one.field.ln2 == orig(one.field.ln2)
one.field.ln2Split == orig(one.field.ln2Split)
one.field.ln5 == orig(one.field.ln5)
one.field.ln5Split == orig(one.field.ln5Split)
one.field.ln10 == orig(one.field.ln10)
one.field.rMode == orig(one.field.rMode)
one.field.ieeeFlags == orig(one.field.ieeeFlags)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString == null
org.apache.commons.math3.dfp.DfpField.ln2String == null
org.apache.commons.math3.dfp.DfpField.ln5String == null
org.apache.commons.math3.dfp.DfpField.ln10String == null
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
a.mant has only one value
a.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
a.mant[] elements one of { 0, 1 }
a.sign == 1
a.exp == 1
a.nans == 0
a.field has only one value
a.field.radixDigits == 50
a.field.zero has only one value
a.field.one has only one value
a.field.two has only one value
a.field.sqr2 == null
a.field.sqr2Split == null
a.field.sqr2Reciprocal == null
a.field.sqr3 == null
a.field.sqr3Reciprocal == null
a.field.pi == null
a.field.piSplit == null
a.field.e == null
a.field.eSplit == null
a.field.ln2 == null
a.field.ln2Split == null
a.field.ln5 == null
a.field.ln5Split == null
a.field.ln10 == null
a.field.rMode has only one value
a.field.ieeeFlags == 16
one.mant has only one value
one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
one.mant[] elements one of { 0, 1 }
one.sign == 1
one.exp == 1
one.nans == 0
one.field has only one value
one.field.radixDigits == 50
one.field.zero has only one value
one.field.one has only one value
one.field.two has only one value
one.field.sqr2 == null
one.field.sqr2Split == null
one.field.sqr2Reciprocal == null
one.field.sqr3 == null
one.field.sqr3Reciprocal == null
one.field.pi == null
one.field.piSplit == null
one.field.e == null
one.field.eSplit == null
one.field.ln2 == null
one.field.ln2Split == null
one.field.ln5 == null
one.field.ln5Split == null
one.field.ln10 == null
one.field.rMode has only one value
one.field.ieeeFlags == 16
return has only one value
return.mant has only one value
return.mant[] == [2510, 3195, 8075, 8298, 3233, 9076, 9434, 8627, 3232, 7381, 5630, 6059, 2952, 334, 7290, 435, 6629, 1359, 8174, 9921, 305, 9320, 6391, 2746, 4274, 5166, 7852, 3821, 4571, 4759, 3535, 6630, 2407, 6277, 6967, 7496, 9595, 3699, 4709, 7572, 2497, 5266, 4713, 287, 3536, 452, 8459, 8182, 7182, 2]
return.sign == 1
return.exp == 1
return.nans == 0
return.field has only one value
return.field.radixDigits == 50
return.field.zero has only one value
return.field.one has only one value
return.field.two has only one value
return.field.sqr2 == null
return.field.sqr2Split == null
return.field.sqr2Reciprocal == null
return.field.sqr3 == null
return.field.sqr3Reciprocal == null
return.field.pi == null
return.field.piSplit == null
return.field.e == null
return.field.eSplit == null
return.field.ln2 == null
return.field.ln2Split == null
return.field.ln5 == null
return.field.ln5Split == null
return.field.ln10 == null
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(a.mant[]) == 50
size(one.mant[]) == 50
size(return.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.DfpField.computeLn(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln10String == null
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
a.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10] }
a.mant[] elements >= 0
a.sign == 1
a.exp == 1
a.nans == 0
a.field has only one value
a.field.radixDigits == 50
a.field.zero has only one value
a.field.one has only one value
a.field.two has only one value
a.field.sqr2 == null
a.field.sqr2Split == null
a.field.sqr2Reciprocal == null
a.field.sqr3 == null
a.field.sqr3Reciprocal == null
a.field.pi == null
a.field.piSplit == null
a.field.e == null
a.field.eSplit == null
a.field.ln2 == null
a.field.ln2Split == null
a.field.ln5 == null
a.field.ln5Split == null
a.field.ln10 == null
a.field.rMode has only one value
a.field.ieeeFlags == 16
one has only one value
one.mant has only one value
one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
one.mant[] elements one of { 0, 1 }
one.sign == 1
one.exp == 1
one.nans == 0
one.field has only one value
one.field.radixDigits == 50
one.field.zero has only one value
one.field.one has only one value
one.field.two has only one value
one.field.sqr2 == null
one.field.sqr2Split == null
one.field.sqr2Reciprocal == null
one.field.sqr3 == null
one.field.sqr3Reciprocal == null
one.field.pi == null
one.field.piSplit == null
one.field.e == null
one.field.eSplit == null
one.field.ln2 == null
one.field.ln2Split == null
one.field.ln5 == null
one.field.ln5Split == null
one.field.ln10 == null
one.field.rMode has only one value
one.field.ieeeFlags == 16
two has only one value
two.mant has only one value
two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
two.mant[] elements one of { 0, 2 }
two.sign == 1
two.exp == 1
two.nans == 0
two.field has only one value
two.field.radixDigits == 50
two.field.zero has only one value
two.field.one has only one value
two.field.two has only one value
two.field.sqr2 == null
two.field.sqr2Split == null
two.field.sqr2Reciprocal == null
two.field.sqr3 == null
two.field.sqr3Reciprocal == null
two.field.pi == null
two.field.piSplit == null
two.field.e == null
two.field.eSplit == null
two.field.ln2 == null
two.field.ln2Split == null
two.field.ln5 == null
two.field.ln5Split == null
two.field.ln10 == null
two.field.rMode has only one value
two.field.ieeeFlags == 16
size(a.mant[]) == 50
size(one.mant[]) == 50
size(two.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.DfpField.computeLn(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
a.mant == orig(a.mant)
a.mant[] == orig(a.mant[])
a.sign == orig(a.sign)
a.exp == orig(a.exp)
a.nans == orig(a.nans)
a.field == orig(a.field)
a.field.radixDigits == orig(a.field.radixDigits)
a.field.zero == orig(a.field.zero)
a.field.one == orig(a.field.one)
a.field.two == orig(a.field.two)
a.field.sqr2 == orig(a.field.sqr2)
a.field.sqr2Split == orig(a.field.sqr2Split)
a.field.sqr2Reciprocal == orig(a.field.sqr2Reciprocal)
a.field.sqr3 == orig(a.field.sqr3)
a.field.sqr3Reciprocal == orig(a.field.sqr3Reciprocal)
a.field.pi == orig(a.field.pi)
a.field.piSplit == orig(a.field.piSplit)
a.field.e == orig(a.field.e)
a.field.eSplit == orig(a.field.eSplit)
a.field.ln2 == orig(a.field.ln2)
a.field.ln2Split == orig(a.field.ln2Split)
a.field.ln5 == orig(a.field.ln5)
a.field.ln5Split == orig(a.field.ln5Split)
a.field.ln10 == orig(a.field.ln10)
a.field.rMode == orig(a.field.rMode)
a.field.ieeeFlags == orig(a.field.ieeeFlags)
one.mant == orig(one.mant)
one.mant[] == orig(one.mant[])
one.sign == orig(one.sign)
one.exp == orig(one.exp)
one.nans == orig(one.nans)
one.field == orig(one.field)
one.field.radixDigits == orig(one.field.radixDigits)
one.field.zero == orig(one.field.zero)
one.field.one == orig(one.field.one)
one.field.two == orig(one.field.two)
one.field.sqr2 == orig(one.field.sqr2)
one.field.sqr2Split == orig(one.field.sqr2Split)
one.field.sqr2Reciprocal == orig(one.field.sqr2Reciprocal)
one.field.sqr3 == orig(one.field.sqr3)
one.field.sqr3Reciprocal == orig(one.field.sqr3Reciprocal)
one.field.pi == orig(one.field.pi)
one.field.piSplit == orig(one.field.piSplit)
one.field.e == orig(one.field.e)
one.field.eSplit == orig(one.field.eSplit)
one.field.ln2 == orig(one.field.ln2)
one.field.ln2Split == orig(one.field.ln2Split)
one.field.ln5 == orig(one.field.ln5)
one.field.ln5Split == orig(one.field.ln5Split)
one.field.ln10 == orig(one.field.ln10)
one.field.rMode == orig(one.field.rMode)
one.field.ieeeFlags == orig(one.field.ieeeFlags)
two.mant == orig(two.mant)
two.mant[] == orig(two.mant[])
two.sign == orig(two.sign)
two.exp == orig(two.exp)
two.nans == orig(two.nans)
two.field == orig(two.field)
two.field.radixDigits == orig(two.field.radixDigits)
two.field.zero == orig(two.field.zero)
two.field.one == orig(two.field.one)
two.field.two == orig(two.field.two)
two.field.sqr2 == orig(two.field.sqr2)
two.field.sqr2Split == orig(two.field.sqr2Split)
two.field.sqr2Reciprocal == orig(two.field.sqr2Reciprocal)
two.field.sqr3 == orig(two.field.sqr3)
two.field.sqr3Reciprocal == orig(two.field.sqr3Reciprocal)
two.field.pi == orig(two.field.pi)
two.field.piSplit == orig(two.field.piSplit)
two.field.e == orig(two.field.e)
two.field.eSplit == orig(two.field.eSplit)
two.field.ln2 == orig(two.field.ln2)
two.field.ln2Split == orig(two.field.ln2Split)
two.field.ln5 == orig(two.field.ln5)
two.field.ln5Split == orig(two.field.ln5Split)
two.field.ln10 == orig(two.field.ln10)
two.field.rMode == orig(two.field.rMode)
two.field.ieeeFlags == orig(two.field.ieeeFlags)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln10String == null
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
a.mant[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10] }
a.mant[] elements >= 0
a.sign == 1
a.exp == 1
a.nans == 0
a.field has only one value
a.field.radixDigits == 50
a.field.zero has only one value
a.field.one has only one value
a.field.two has only one value
a.field.sqr2 == null
a.field.sqr2Split == null
a.field.sqr2Reciprocal == null
a.field.sqr3 == null
a.field.sqr3Reciprocal == null
a.field.pi == null
a.field.piSplit == null
a.field.e == null
a.field.eSplit == null
a.field.ln2 == null
a.field.ln2Split == null
a.field.ln5 == null
a.field.ln5Split == null
a.field.ln10 == null
a.field.rMode has only one value
a.field.ieeeFlags == 16
one.mant has only one value
one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
one.mant[] elements one of { 0, 1 }
one.sign == 1
one.exp == 1
one.nans == 0
one.field has only one value
one.field.radixDigits == 50
one.field.zero has only one value
one.field.one has only one value
one.field.two has only one value
one.field.sqr2 == null
one.field.sqr2Split == null
one.field.sqr2Reciprocal == null
one.field.sqr3 == null
one.field.sqr3Reciprocal == null
one.field.pi == null
one.field.piSplit == null
one.field.e == null
one.field.eSplit == null
one.field.ln2 == null
one.field.ln2Split == null
one.field.ln5 == null
one.field.ln5Split == null
one.field.ln10 == null
one.field.rMode has only one value
one.field.ieeeFlags == 16
two.mant has only one value
two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
two.mant[] elements one of { 0, 2 }
two.sign == 1
two.exp == 1
two.nans == 0
two.field has only one value
two.field.radixDigits == 50
two.field.zero has only one value
two.field.one has only one value
two.field.two has only one value
two.field.sqr2 == null
two.field.sqr2Split == null
two.field.sqr2Reciprocal == null
two.field.sqr3 == null
two.field.sqr3Reciprocal == null
two.field.pi == null
two.field.piSplit == null
two.field.e == null
two.field.eSplit == null
two.field.ln2 == null
two.field.ln2Split == null
two.field.ln5 == null
two.field.ln5Split == null
two.field.ln10 == null
two.field.rMode has only one value
two.field.ieeeFlags == 16
return.mant[] one of { [573, 1525, 234, 8562, 3492, 4565, 1832, 7497, 7963, 5521, 5727, 6370, 6174, 3616, 9963, 6761, 9324, 522, 7240, 2899, 1556, 217, 6303, 9996, 6107, 3179, 7809, 1338, 4630, 5776, 7076, 8987, 7417, 8914, 2647, 2191, 5177, 4268, 135, 5256, 7639, 2618, 3332, 759, 7460, 1003, 2434, 3791, 6094, 1], [2326, 4711, 1673, 2389, 386, 307, 3519, 3714, 828, 2757, 9307, 5961, 3507, 7516, 2670, 5703, 1305, 5758, 2023, 6855, 5733, 7068, 205, 1481, 4200, 6875, 6418, 2699, 8633, 5605, 9471, 9696, 3621, 9339, 94, 680, 5412, 2552, 4360, 13, 755, 6568, 5817, 1214, 7232, 941, 9453, 559, 4718, 6931], [5304, 3198, 2623, 8948, 3799, 8084, 5546, 8325, 720, 4829, 1689, 9878, 3690, 6287, 5666, 8067, 5082, 2546, 4095, 8633, 8624, 422, 7784, 4196, 2983, 9598, 508, 9972, 235, 5248, 6773, 2609, 6757, 9009, 3327, 7603, 7729, 8628, 148, 6011, 4207, 8436, 4546, 7991, 8401, 456, 2994, 8509, 3025, 2] }
return.sign == 1
return.exp one of { 0, 1 }
return.nans == 0
return.field has only one value
return.field.radixDigits == 50
return.field.zero has only one value
return.field.one has only one value
return.field.two has only one value
return.field.sqr2 == null
return.field.sqr2Split == null
return.field.sqr2Reciprocal == null
return.field.sqr3 == null
return.field.sqr3Reciprocal == null
return.field.pi == null
return.field.piSplit == null
return.field.e == null
return.field.eSplit == null
return.field.ln2 == null
return.field.ln2Split == null
return.field.ln5 == null
return.field.ln5Split == null
return.field.ln10 == null
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(a.mant[]) == 50
size(one.mant[]) == 50
size(two.mant[]) == 50
size(return.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.DfpField.computePi(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString == null
org.apache.commons.math3.dfp.DfpField.eString == null
org.apache.commons.math3.dfp.DfpField.ln2String == null
org.apache.commons.math3.dfp.DfpField.ln5String == null
org.apache.commons.math3.dfp.DfpField.ln10String == null
one has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
one.mant has only one value
one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
one.mant[] elements one of { 0, 1 }
one.sign == 1
one.exp == 1
one.nans == 0
one.field has only one value
one.field.radixDigits == 50
one.field.zero has only one value
one.field.one has only one value
one.field.two has only one value
one.field.sqr2 == null
one.field.sqr2Split == null
one.field.sqr2Reciprocal == null
one.field.sqr3 == null
one.field.sqr3Reciprocal == null
one.field.pi == null
one.field.piSplit == null
one.field.e == null
one.field.eSplit == null
one.field.ln2 == null
one.field.ln2Split == null
one.field.ln5 == null
one.field.ln5Split == null
one.field.ln10 == null
one.field.rMode has only one value
one.field.ieeeFlags == 16
two has only one value
two.mant has only one value
two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
two.mant[] elements one of { 0, 2 }
two.sign == 1
two.exp == 1
two.nans == 0
two.field has only one value
two.field.radixDigits == 50
two.field.zero has only one value
two.field.one has only one value
two.field.two has only one value
two.field.sqr2 == null
two.field.sqr2Split == null
two.field.sqr2Reciprocal == null
two.field.sqr3 == null
two.field.sqr3Reciprocal == null
two.field.pi == null
two.field.piSplit == null
two.field.e == null
two.field.eSplit == null
two.field.ln2 == null
two.field.ln2Split == null
two.field.ln5 == null
two.field.ln5Split == null
two.field.ln10 == null
two.field.rMode has only one value
two.field.ieeeFlags == 16
three has only one value
three.mant has only one value
three.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
three.mant[] elements one of { 0, 3 }
three.sign == 1
three.exp == 1
three.nans == 0
three.field has only one value
three.field.radixDigits == 50
three.field.zero has only one value
three.field.one has only one value
three.field.two has only one value
three.field.sqr2 == null
three.field.sqr2Split == null
three.field.sqr2Reciprocal == null
three.field.sqr3 == null
three.field.sqr3Reciprocal == null
three.field.pi == null
three.field.piSplit == null
three.field.e == null
three.field.eSplit == null
three.field.ln2 == null
three.field.ln2Split == null
three.field.ln5 == null
three.field.ln5Split == null
three.field.ln10 == null
three.field.rMode has only one value
three.field.ieeeFlags == 16
size(one.mant[]) == 50
size(two.mant[]) == 50
size(three.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.DfpField.computePi(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
one.mant == orig(one.mant)
one.mant[] == orig(one.mant[])
one.sign == orig(one.sign)
one.exp == orig(one.exp)
one.nans == orig(one.nans)
one.field == orig(one.field)
one.field.radixDigits == orig(one.field.radixDigits)
one.field.zero == orig(one.field.zero)
one.field.one == orig(one.field.one)
one.field.two == orig(one.field.two)
one.field.sqr2 == orig(one.field.sqr2)
one.field.sqr2Split == orig(one.field.sqr2Split)
one.field.sqr2Reciprocal == orig(one.field.sqr2Reciprocal)
one.field.sqr3 == orig(one.field.sqr3)
one.field.sqr3Reciprocal == orig(one.field.sqr3Reciprocal)
one.field.pi == orig(one.field.pi)
one.field.piSplit == orig(one.field.piSplit)
one.field.e == orig(one.field.e)
one.field.eSplit == orig(one.field.eSplit)
one.field.ln2 == orig(one.field.ln2)
one.field.ln2Split == orig(one.field.ln2Split)
one.field.ln5 == orig(one.field.ln5)
one.field.ln5Split == orig(one.field.ln5Split)
one.field.ln10 == orig(one.field.ln10)
one.field.rMode == orig(one.field.rMode)
one.field.ieeeFlags == orig(one.field.ieeeFlags)
two.mant == orig(two.mant)
two.mant[] == orig(two.mant[])
two.sign == orig(two.sign)
two.exp == orig(two.exp)
two.nans == orig(two.nans)
two.field == orig(two.field)
two.field.radixDigits == orig(two.field.radixDigits)
two.field.zero == orig(two.field.zero)
two.field.one == orig(two.field.one)
two.field.two == orig(two.field.two)
two.field.sqr2 == orig(two.field.sqr2)
two.field.sqr2Split == orig(two.field.sqr2Split)
two.field.sqr2Reciprocal == orig(two.field.sqr2Reciprocal)
two.field.sqr3 == orig(two.field.sqr3)
two.field.sqr3Reciprocal == orig(two.field.sqr3Reciprocal)
two.field.pi == orig(two.field.pi)
two.field.piSplit == orig(two.field.piSplit)
two.field.e == orig(two.field.e)
two.field.eSplit == orig(two.field.eSplit)
two.field.ln2 == orig(two.field.ln2)
two.field.ln2Split == orig(two.field.ln2Split)
two.field.ln5 == orig(two.field.ln5)
two.field.ln5Split == orig(two.field.ln5Split)
two.field.ln10 == orig(two.field.ln10)
two.field.rMode == orig(two.field.rMode)
two.field.ieeeFlags == orig(two.field.ieeeFlags)
three.mant == orig(three.mant)
three.mant[] == orig(three.mant[])
three.sign == orig(three.sign)
three.exp == orig(three.exp)
three.nans == orig(three.nans)
three.field == orig(three.field)
three.field.radixDigits == orig(three.field.radixDigits)
three.field.zero == orig(three.field.zero)
three.field.one == orig(three.field.one)
three.field.two == orig(three.field.two)
three.field.sqr2 == orig(three.field.sqr2)
three.field.sqr2Split == orig(three.field.sqr2Split)
three.field.sqr2Reciprocal == orig(three.field.sqr2Reciprocal)
three.field.sqr3 == orig(three.field.sqr3)
three.field.sqr3Reciprocal == orig(three.field.sqr3Reciprocal)
three.field.pi == orig(three.field.pi)
three.field.piSplit == orig(three.field.piSplit)
three.field.e == orig(three.field.e)
three.field.eSplit == orig(three.field.eSplit)
three.field.ln2 == orig(three.field.ln2)
three.field.ln2Split == orig(three.field.ln2Split)
three.field.ln5 == orig(three.field.ln5)
three.field.ln5Split == orig(three.field.ln5Split)
three.field.ln10 == orig(three.field.ln10)
three.field.rMode == orig(three.field.rMode)
three.field.ieeeFlags == orig(three.field.ieeeFlags)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString == null
org.apache.commons.math3.dfp.DfpField.eString == null
org.apache.commons.math3.dfp.DfpField.ln2String == null
org.apache.commons.math3.dfp.DfpField.ln5String == null
org.apache.commons.math3.dfp.DfpField.ln10String == null
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
one.mant has only one value
one.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
one.mant[] elements one of { 0, 1 }
one.sign == 1
one.exp == 1
one.nans == 0
one.field has only one value
one.field.radixDigits == 50
one.field.zero has only one value
one.field.one has only one value
one.field.two has only one value
one.field.sqr2 == null
one.field.sqr2Split == null
one.field.sqr2Reciprocal == null
one.field.sqr3 == null
one.field.sqr3Reciprocal == null
one.field.pi == null
one.field.piSplit == null
one.field.e == null
one.field.eSplit == null
one.field.ln2 == null
one.field.ln2Split == null
one.field.ln5 == null
one.field.ln5Split == null
one.field.ln10 == null
one.field.rMode has only one value
one.field.ieeeFlags == 16
two.mant has only one value
two.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
two.mant[] elements one of { 0, 2 }
two.sign == 1
two.exp == 1
two.nans == 0
two.field has only one value
two.field.radixDigits == 50
two.field.zero has only one value
two.field.one has only one value
two.field.two has only one value
two.field.sqr2 == null
two.field.sqr2Split == null
two.field.sqr2Reciprocal == null
two.field.sqr3 == null
two.field.sqr3Reciprocal == null
two.field.pi == null
two.field.piSplit == null
two.field.e == null
two.field.eSplit == null
two.field.ln2 == null
two.field.ln2Split == null
two.field.ln5 == null
two.field.ln5Split == null
two.field.ln10 == null
two.field.rMode has only one value
two.field.ieeeFlags == 16
three.mant has only one value
three.mant[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
three.mant[] elements one of { 0, 3 }
three.sign == 1
three.exp == 1
three.nans == 0
three.field has only one value
three.field.radixDigits == 50
three.field.zero has only one value
three.field.one has only one value
three.field.two has only one value
three.field.sqr2 == null
three.field.sqr2Split == null
three.field.sqr2Reciprocal == null
three.field.sqr3 == null
three.field.sqr3Reciprocal == null
three.field.pi == null
three.field.piSplit == null
three.field.e == null
three.field.eSplit == null
three.field.ln2 == null
three.field.ln2Split == null
three.field.ln5 == null
three.field.ln5Split == null
three.field.ln10 == null
three.field.rMode has only one value
three.field.ieeeFlags == 16
return has only one value
return.mant has only one value
return.mant[] == [9309, 8954, 2294, 6446, 5559, 2110, 9385, 2701, 8410, 4502, 1117, 2848, 4081, 5359, 3172, 5822, 9550, 4460, 938, 6647, 8230, 5132, 8086, 8214, 679, 2117, 2534, 348, 8628, 899, 2862, 6406, 781, 5923, 4944, 2097, 1058, 9375, 6939, 1971, 2884, 7950, 3832, 2643, 3846, 7932, 3589, 9265, 1415, 3]
return.sign == 1
return.exp == 1
return.nans == 0
return.field has only one value
return.field.radixDigits == 50
return.field.zero has only one value
return.field.one has only one value
return.field.two has only one value
return.field.sqr2 == null
return.field.sqr2Split == null
return.field.sqr2Reciprocal == null
return.field.sqr3 == null
return.field.sqr3Reciprocal == null
return.field.pi == null
return.field.piSplit == null
return.field.e == null
return.field.eSplit == null
return.field.ln2 == null
return.field.ln2Split == null
return.field.ln5 == null
return.field.ln5Split == null
return.field.ln10 == null
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(one.mant[]) == 50
size(two.mant[]) == 50
size(three.mant[]) == 50
size(return.mant[]) == 50
===========================================================================
org.apache.commons.math3.dfp.DfpField.computeStringConstants(int):::ENTER
highPrecisionDecimalDigits == 200
===========================================================================
org.apache.commons.math3.dfp.DfpField.computeStringConstants(int):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
===========================================================================
org.apache.commons.math3.dfp.DfpField.getOne():::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 16
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 16
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 16
this.sqr2.field.ieeeFlags == 16
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags == [16, 16]
this.sqr2Split[].field.ieeeFlags elements == 16
this.sqr2Reciprocal.field.ieeeFlags == 16
this.sqr3.field.ieeeFlags == 16
this.sqr3Reciprocal.field.ieeeFlags == 16
this.pi.field.ieeeFlags == 16
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags == [16, 16]
this.piSplit[].field.ieeeFlags elements == 16
this.e.field.ieeeFlags == 16
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags == [16, 16]
this.eSplit[].field.ieeeFlags elements == 16
this.ln2.field.ieeeFlags == 16
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags == [16, 16]
this.ln2Split[].field.ieeeFlags elements == 16
this.ln5.field.ieeeFlags == 16
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags == [16, 16]
this.ln5Split[].field.ieeeFlags elements == 16
this.ln10.field.ieeeFlags == 16
this.ieeeFlags == 16
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.getOne():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln5Split[].field.ieeeFlags == orig(this.ln5Split[].field.ieeeFlags)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.ln10.field.ieeeFlags == orig(this.ln10.field.ieeeFlags)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 16
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 16
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 16
this.sqr2.field.ieeeFlags == 16
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags == [16, 16]
this.sqr2Split[].field.ieeeFlags elements == 16
this.sqr2Reciprocal.field.ieeeFlags == 16
this.sqr3.field.ieeeFlags == 16
this.sqr3Reciprocal.field.ieeeFlags == 16
this.pi.field.ieeeFlags == 16
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags == [16, 16]
this.piSplit[].field.ieeeFlags elements == 16
this.e.field.ieeeFlags == 16
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags == [16, 16]
this.eSplit[].field.ieeeFlags elements == 16
this.ln2.field.ieeeFlags == 16
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags == [16, 16]
this.ln2Split[].field.ieeeFlags elements == 16
this.ln5.field.ieeeFlags == 16
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags == [16, 16]
this.ln5Split[].field.ieeeFlags elements == 16
this.ln10.field.ieeeFlags == 16
this.ieeeFlags == 16
return.mant[] == [0, 0, 0, 0, 1]
return.mant[] elements one of { 0, 1 }
return.mant[] sorted by <=
return.sign == 1
return.exp == 1
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpField.getRadixDigits():::ENTER
===========================================================================
org.apache.commons.math3.dfp.DfpField.getRadixDigits():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln5Split[].field.ieeeFlags == orig(this.ln5Split[].field.ieeeFlags)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.ln10.field.ieeeFlags == orig(this.ln10.field.ieeeFlags)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
return one of { 5, 50 }
===========================================================================
org.apache.commons.math3.dfp.DfpField.getRoundingMode():::ENTER
===========================================================================
org.apache.commons.math3.dfp.DfpField.getRoundingMode():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln5Split[].field.ieeeFlags == orig(this.ln5Split[].field.ieeeFlags)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.ln10.field.ieeeFlags == orig(this.ln10.field.ieeeFlags)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
return has only one value
===========================================================================
org.apache.commons.math3.dfp.DfpField.getRuntimeClass():::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags one of { 0, 16 }
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags one of { 0, 16 }
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags one of { 0, 16 }
this.sqr2.field.ieeeFlags one of { 0, 16 }
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags elements one of { 0, 16 }
this.sqr2Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.sqr2Reciprocal.field.ieeeFlags one of { 0, 16 }
this.sqr3.field.ieeeFlags one of { 0, 16 }
this.sqr3Reciprocal.field.ieeeFlags one of { 0, 16 }
this.pi.field.ieeeFlags one of { 0, 16 }
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags elements one of { 0, 16 }
this.piSplit[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.e.field.ieeeFlags one of { 0, 16 }
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags elements one of { 0, 16 }
this.eSplit[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln2.field.ieeeFlags one of { 0, 16 }
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags elements one of { 0, 16 }
this.ln2Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln5.field.ieeeFlags one of { 0, 16 }
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags elements one of { 0, 16 }
this.ln5Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln10.field.ieeeFlags one of { 0, 16 }
this.ieeeFlags one of { 0, 16 }
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.getRuntimeClass():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln5Split[].field.ieeeFlags == orig(this.ln5Split[].field.ieeeFlags)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.ln10.field.ieeeFlags == orig(this.ln10.field.ieeeFlags)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags one of { 0, 16 }
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags one of { 0, 16 }
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags one of { 0, 16 }
this.sqr2.field.ieeeFlags one of { 0, 16 }
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags elements one of { 0, 16 }
this.sqr2Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.sqr2Reciprocal.field.ieeeFlags one of { 0, 16 }
this.sqr3.field.ieeeFlags one of { 0, 16 }
this.sqr3Reciprocal.field.ieeeFlags one of { 0, 16 }
this.pi.field.ieeeFlags one of { 0, 16 }
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags elements one of { 0, 16 }
this.piSplit[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.e.field.ieeeFlags one of { 0, 16 }
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags elements one of { 0, 16 }
this.eSplit[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln2.field.ieeeFlags one of { 0, 16 }
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags elements one of { 0, 16 }
this.ln2Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln5.field.ieeeFlags one of { 0, 16 }
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags elements one of { 0, 16 }
this.ln5Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln10.field.ieeeFlags one of { 0, 16 }
this.ieeeFlags one of { 0, 16 }
return has only one value
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.getTwo():::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 16
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 16
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 16
this.sqr2.field.ieeeFlags == 16
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags == [16, 16]
this.sqr2Split[].field.ieeeFlags elements == 16
this.sqr2Reciprocal.field.ieeeFlags == 16
this.sqr3.field.ieeeFlags == 16
this.sqr3Reciprocal.field.ieeeFlags == 16
this.pi.field.ieeeFlags == 16
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags == [16, 16]
this.piSplit[].field.ieeeFlags elements == 16
this.e.field.ieeeFlags == 16
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags == [16, 16]
this.eSplit[].field.ieeeFlags elements == 16
this.ln2.field.ieeeFlags == 16
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags == [16, 16]
this.ln2Split[].field.ieeeFlags elements == 16
this.ln5.field.ieeeFlags == 16
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags == [16, 16]
this.ln5Split[].field.ieeeFlags elements == 16
this.ln10.field.ieeeFlags == 16
this.ieeeFlags == 16
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.getTwo():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln5Split[].field.ieeeFlags == orig(this.ln5Split[].field.ieeeFlags)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.ln10.field.ieeeFlags == orig(this.ln10.field.ieeeFlags)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 16
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 16
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 16
this.sqr2.field.ieeeFlags == 16
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags == [16, 16]
this.sqr2Split[].field.ieeeFlags elements == 16
this.sqr2Reciprocal.field.ieeeFlags == 16
this.sqr3.field.ieeeFlags == 16
this.sqr3Reciprocal.field.ieeeFlags == 16
this.pi.field.ieeeFlags == 16
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags == [16, 16]
this.piSplit[].field.ieeeFlags elements == 16
this.e.field.ieeeFlags == 16
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags == [16, 16]
this.eSplit[].field.ieeeFlags elements == 16
this.ln2.field.ieeeFlags == 16
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags == [16, 16]
this.ln2Split[].field.ieeeFlags elements == 16
this.ln5.field.ieeeFlags == 16
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags == [16, 16]
this.ln5Split[].field.ieeeFlags elements == 16
this.ln10.field.ieeeFlags == 16
this.ieeeFlags == 16
return.mant[] == [0, 0, 0, 0, 2]
return.mant[] elements one of { 0, 2 }
return.mant[] sorted by <=
return.sign == 1
return.exp == 1
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpField.getZero():::ENTER
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln5Split[].field.ln10 elements != null
===========================================================================
org.apache.commons.math3.dfp.DfpField.getZero():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln5Split[].field.ieeeFlags == orig(this.ln5Split[].field.ieeeFlags)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.ln10.field.ieeeFlags == orig(this.ln10.field.ieeeFlags)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln5Split[].field.ln10 elements != null
return.mant[] elements == 0
return.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.sign == 1
return.exp == 0
return.nans == 0
return.field.radixDigits one of { 5, 50 }
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags one of { 0, 16, 18 }
size(return.mant[]) one of { 5, 50 }
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpField.newDfp(byte, byte):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 18
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 18
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 18
this.sqr2.field.ieeeFlags == 18
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ieeeFlags == [18, 18]
this.sqr2Split[].field.ieeeFlags elements == 18
this.sqr2Reciprocal.field.ieeeFlags == 18
this.sqr3.field.ieeeFlags == 18
this.sqr3Reciprocal.field.ieeeFlags == 18
this.pi.field.ieeeFlags == 18
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ieeeFlags == [18, 18]
this.piSplit[].field.ieeeFlags elements == 18
this.e.field.ieeeFlags == 18
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ieeeFlags == [18, 18]
this.eSplit[].field.ieeeFlags elements == 18
this.ln2.field.ieeeFlags == 18
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ieeeFlags == [18, 18]
this.ln2Split[].field.ieeeFlags elements == 18
this.ln5.field.ieeeFlags == 18
this.ln5Split[].field.ieeeFlags == [18, 18]
this.ln5Split[].field.ieeeFlags elements == 18
this.ln10.field.ieeeFlags == 18
this.ieeeFlags == 18
sign == 1
nans one of { 2, 3 }
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.newDfp(byte, byte):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln5Split[].field.ieeeFlags == orig(this.ln5Split[].field.ieeeFlags)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.ln10.field.ieeeFlags == orig(this.ln10.field.ieeeFlags)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags == 18
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags == 18
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags == 18
this.sqr2.field.ieeeFlags == 18
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ieeeFlags == [18, 18]
this.sqr2Split[].field.ieeeFlags elements == 18
this.sqr2Reciprocal.field.ieeeFlags == 18
this.sqr3.field.ieeeFlags == 18
this.sqr3Reciprocal.field.ieeeFlags == 18
this.pi.field.ieeeFlags == 18
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ieeeFlags == [18, 18]
this.piSplit[].field.ieeeFlags elements == 18
this.e.field.ieeeFlags == 18
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ieeeFlags == [18, 18]
this.eSplit[].field.ieeeFlags elements == 18
this.ln2.field.ieeeFlags == 18
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ieeeFlags == [18, 18]
this.ln2Split[].field.ieeeFlags elements == 18
this.ln5.field.ieeeFlags == 18
this.ln5Split[].field.ieeeFlags == [18, 18]
this.ln5Split[].field.ieeeFlags elements == 18
this.ln10.field.ieeeFlags == 18
this.ieeeFlags == 18
return.mant[] == [0, 0, 0, 0, 0]
return.mant[] elements == 0
return.sign == 1
return.exp == 0
return.nans one of { 2, 3 }
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 18
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpField.newDfp(double):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags one of { 0, 16 }
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags one of { 0, 16 }
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags one of { 0, 16 }
this.sqr2.field.ieeeFlags one of { 0, 16 }
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags elements one of { 0, 16 }
this.sqr2Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.sqr2Reciprocal.field.ieeeFlags one of { 0, 16 }
this.sqr3.field.ieeeFlags one of { 0, 16 }
this.sqr3Reciprocal.field.ieeeFlags one of { 0, 16 }
this.pi.field.ieeeFlags one of { 0, 16 }
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags elements one of { 0, 16 }
this.piSplit[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.e.field.ieeeFlags one of { 0, 16 }
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags elements one of { 0, 16 }
this.eSplit[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln2.field.ieeeFlags one of { 0, 16 }
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags elements one of { 0, 16 }
this.ln2Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln5.field.ieeeFlags one of { 0, 16 }
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags elements one of { 0, 16 }
this.ln5Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln10.field.ieeeFlags one of { 0, 16 }
this.ieeeFlags one of { 0, 16 }
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.newDfp(double):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags one of { 0, 16 }
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags one of { 0, 16 }
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags one of { 0, 16 }
this.sqr2.field.ieeeFlags one of { 0, 16 }
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags elements one of { 0, 16 }
this.sqr2Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.sqr2Reciprocal.field.ieeeFlags one of { 0, 16 }
this.sqr3.field.ieeeFlags one of { 0, 16 }
this.sqr3Reciprocal.field.ieeeFlags one of { 0, 16 }
this.pi.field.ieeeFlags one of { 0, 16 }
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags elements one of { 0, 16 }
this.piSplit[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.e.field.ieeeFlags one of { 0, 16 }
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags elements one of { 0, 16 }
this.eSplit[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln2.field.ieeeFlags one of { 0, 16 }
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags elements one of { 0, 16 }
this.ln2Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln5.field.ieeeFlags one of { 0, 16 }
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags elements one of { 0, 16 }
this.ln5Split[].field.ieeeFlags one of { [0, 0], [16, 16] }
this.ln10.field.ieeeFlags one of { 0, 16 }
this.ieeeFlags one of { 0, 16 }
return.mant[] elements >= 0
return.sign == 1
return.exp one of { -1, 0 }
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags one of { 0, 16 }
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
this.zero.field.ieeeFlags >= orig(this.zero.field.ieeeFlags)
this.one.field.ieeeFlags >= orig(this.one.field.ieeeFlags)
this.two.field.ieeeFlags >= orig(this.two.field.ieeeFlags)
this.sqr2.field.ieeeFlags >= orig(this.sqr2.field.ieeeFlags)
this.sqr2Split[].field.ieeeFlags >= orig(this.sqr2Split[].field.ieeeFlags) (elementwise)
this.sqr2Reciprocal.field.ieeeFlags >= orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3.field.ieeeFlags >= orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal.field.ieeeFlags >= orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi.field.ieeeFlags >= orig(this.pi.field.ieeeFlags)
this.piSplit[].field.ieeeFlags >= orig(this.piSplit[].field.ieeeFlags) (elementwise)
this.e.field.ieeeFlags >= orig(this.e.field.ieeeFlags)
this.eSplit[].field.ieeeFlags >= orig(this.eSplit[].field.ieeeFlags) (elementwise)
this.ln2.field.ieeeFlags >= orig(this.ln2.field.ieeeFlags)
this.ln2Split[].field.ieeeFlags >= orig(this.ln2Split[].field.ieeeFlags) (elementwise)
this.ln5.field.ieeeFlags >= orig(this.ln5.field.ieeeFlags)
this.ln5Split[].field.ieeeFlags >= orig(this.ln5Split[].field.ieeeFlags) (elementwise)
this.ln10.field.ieeeFlags >= orig(this.ln10.field.ieeeFlags)
this.ieeeFlags >= orig(this.ieeeFlags)
===========================================================================
org.apache.commons.math3.dfp.DfpField.newDfp(java.lang.String):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags one of { 16, 18 }
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags one of { 16, 18 }
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags one of { 16, 18 }
this.sqr2.field.ieeeFlags one of { 16, 18 }
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags elements one of { 16, 18 }
this.sqr2Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.sqr2Reciprocal.field.ieeeFlags one of { 16, 18 }
this.sqr3.field.ieeeFlags one of { 16, 18 }
this.sqr3Reciprocal.field.ieeeFlags one of { 16, 18 }
this.pi.field.ieeeFlags one of { 16, 18 }
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags elements one of { 16, 18 }
this.piSplit[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.e.field.ieeeFlags one of { 16, 18 }
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags elements one of { 16, 18 }
this.eSplit[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln2.field.ieeeFlags one of { 16, 18 }
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags elements one of { 16, 18 }
this.ln2Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln5.field.ieeeFlags one of { 16, 18 }
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags elements one of { 16, 18 }
this.ln5Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln10.field.ieeeFlags one of { 16, 18 }
this.ieeeFlags one of { 16, 18 }
s.toString one of { "-1", "0", "1" }
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.newDfp(java.lang.String):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln5Split[].field.ieeeFlags == orig(this.ln5Split[].field.ieeeFlags)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.ln10.field.ieeeFlags == orig(this.ln10.field.ieeeFlags)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
s.toString == orig(s.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ieeeFlags one of { 16, 18 }
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ieeeFlags one of { 16, 18 }
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ieeeFlags one of { 16, 18 }
this.sqr2.field.ieeeFlags one of { 16, 18 }
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.sqr3 elements != null
this.sqr2Split[].field.sqr3Reciprocal elements != null
this.sqr2Split[].field.pi elements != null
this.sqr2Split[].field.piSplit elements != null
this.sqr2Split[].field.piSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.piSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.e elements != null
this.sqr2Split[].field.eSplit elements != null
this.sqr2Split[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln2 elements != null
this.sqr2Split[].field.ln2Split elements != null
this.sqr2Split[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln5 elements != null
this.sqr2Split[].field.ln5Split elements != null
this.sqr2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.sqr2Split[].field.ln10 elements != null
this.sqr2Split[].field.ieeeFlags elements one of { 16, 18 }
this.sqr2Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.sqr2Reciprocal.field.ieeeFlags one of { 16, 18 }
this.sqr3.field.ieeeFlags one of { 16, 18 }
this.sqr3Reciprocal.field.ieeeFlags one of { 16, 18 }
this.pi.field.ieeeFlags one of { 16, 18 }
this.piSplit[].field.e elements != null
this.piSplit[].field.eSplit elements != null
this.piSplit[].field.eSplit.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.eSplit.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln2 elements != null
this.piSplit[].field.ln2Split elements != null
this.piSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln5 elements != null
this.piSplit[].field.ln5Split elements != null
this.piSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.piSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.piSplit[].field.ln10 elements != null
this.piSplit[].field.ieeeFlags elements one of { 16, 18 }
this.piSplit[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.e.field.ieeeFlags one of { 16, 18 }
this.eSplit[].field.ln2 elements != null
this.eSplit[].field.ln2Split elements != null
this.eSplit[].field.ln2Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln2Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln5 elements != null
this.eSplit[].field.ln5Split elements != null
this.eSplit[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.eSplit[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.eSplit[].field.ln10 elements != null
this.eSplit[].field.ieeeFlags elements one of { 16, 18 }
this.eSplit[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln2.field.ieeeFlags one of { 16, 18 }
this.ln2Split[].field.ln5 elements != null
this.ln2Split[].field.ln5Split elements != null
this.ln2Split[].field.ln5Split.getClass().getName() == [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]]
this.ln2Split[].field.ln5Split.getClass().getName() elements == org.apache.commons.math3.dfp.Dfp[].class
this.ln2Split[].field.ln10 elements != null
this.ln2Split[].field.ieeeFlags elements one of { 16, 18 }
this.ln2Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln5.field.ieeeFlags one of { 16, 18 }
this.ln5Split[].field.ln10 elements != null
this.ln5Split[].field.ieeeFlags elements one of { 16, 18 }
this.ln5Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln10.field.ieeeFlags one of { 16, 18 }
this.ieeeFlags one of { 16, 18 }
s.toString one of { "-1", "0", "1" }
return.mant[] elements one of { 0, 1 }
return.mant[] one of { [0, 0, 0, 0, 0], [0, 0, 0, 0, 1] }
return.mant[] sorted by <=
return.sign one of { -1, 1 }
return.exp one of { 0, 1 }
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags one of { 16, 18 }
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpField.setIEEEFlagsBits(int):::ENTER
this.sqr2Split[].field.sqr2Reciprocal elements != null
bits one of { 2, 16 }
===========================================================================
org.apache.commons.math3.dfp.DfpField.setIEEEFlagsBits(int):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln5Split.getClass().getName() == orig(this.zero.field.ln5Split.getClass().getName())
this.zero.field.ln5Split[] == orig(this.zero.field.ln5Split[])
this.zero.field.ln5Split[].mant == orig(this.zero.field.ln5Split[].mant)
this.zero.field.ln5Split[].sign == orig(this.zero.field.ln5Split[].sign)
this.zero.field.ln5Split[].exp == orig(this.zero.field.ln5Split[].exp)
this.zero.field.ln5Split[].nans == orig(this.zero.field.ln5Split[].nans)
this.zero.field.ln5Split[].field == orig(this.zero.field.ln5Split[].field)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln5Split.getClass().getName() == orig(this.one.field.ln5Split.getClass().getName())
this.one.field.ln5Split[] == orig(this.one.field.ln5Split[])
this.one.field.ln5Split[].mant == orig(this.one.field.ln5Split[].mant)
this.one.field.ln5Split[].sign == orig(this.one.field.ln5Split[].sign)
this.one.field.ln5Split[].exp == orig(this.one.field.ln5Split[].exp)
this.one.field.ln5Split[].nans == orig(this.one.field.ln5Split[].nans)
this.one.field.ln5Split[].field == orig(this.one.field.ln5Split[].field)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln5Split.getClass().getName() == orig(this.two.field.ln5Split.getClass().getName())
this.two.field.ln5Split[] == orig(this.two.field.ln5Split[])
this.two.field.ln5Split[].mant == orig(this.two.field.ln5Split[].mant)
this.two.field.ln5Split[].sign == orig(this.two.field.ln5Split[].sign)
this.two.field.ln5Split[].exp == orig(this.two.field.ln5Split[].exp)
this.two.field.ln5Split[].nans == orig(this.two.field.ln5Split[].nans)
this.two.field.ln5Split[].field == orig(this.two.field.ln5Split[].field)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln5Split.getClass().getName() == orig(this.sqr2.field.ln5Split.getClass().getName())
this.sqr2.field.ln5Split[] == orig(this.sqr2.field.ln5Split[])
this.sqr2.field.ln5Split[].mant == orig(this.sqr2.field.ln5Split[].mant)
this.sqr2.field.ln5Split[].sign == orig(this.sqr2.field.ln5Split[].sign)
this.sqr2.field.ln5Split[].exp == orig(this.sqr2.field.ln5Split[].exp)
this.sqr2.field.ln5Split[].nans == orig(this.sqr2.field.ln5Split[].nans)
this.sqr2.field.ln5Split[].field == orig(this.sqr2.field.ln5Split[].field)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln5Split.getClass().getName())
this.sqr2Reciprocal.field.ln5Split[] == orig(this.sqr2Reciprocal.field.ln5Split[])
this.sqr2Reciprocal.field.ln5Split[].mant == orig(this.sqr2Reciprocal.field.ln5Split[].mant)
this.sqr2Reciprocal.field.ln5Split[].sign == orig(this.sqr2Reciprocal.field.ln5Split[].sign)
this.sqr2Reciprocal.field.ln5Split[].exp == orig(this.sqr2Reciprocal.field.ln5Split[].exp)
this.sqr2Reciprocal.field.ln5Split[].nans == orig(this.sqr2Reciprocal.field.ln5Split[].nans)
this.sqr2Reciprocal.field.ln5Split[].field == orig(this.sqr2Reciprocal.field.ln5Split[].field)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln5Split.getClass().getName() == orig(this.sqr3.field.ln5Split.getClass().getName())
this.sqr3.field.ln5Split[] == orig(this.sqr3.field.ln5Split[])
this.sqr3.field.ln5Split[].mant == orig(this.sqr3.field.ln5Split[].mant)
this.sqr3.field.ln5Split[].sign == orig(this.sqr3.field.ln5Split[].sign)
this.sqr3.field.ln5Split[].exp == orig(this.sqr3.field.ln5Split[].exp)
this.sqr3.field.ln5Split[].nans == orig(this.sqr3.field.ln5Split[].nans)
this.sqr3.field.ln5Split[].field == orig(this.sqr3.field.ln5Split[].field)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln5Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln5Split.getClass().getName())
this.sqr3Reciprocal.field.ln5Split[] == orig(this.sqr3Reciprocal.field.ln5Split[])
this.sqr3Reciprocal.field.ln5Split[].mant == orig(this.sqr3Reciprocal.field.ln5Split[].mant)
this.sqr3Reciprocal.field.ln5Split[].sign == orig(this.sqr3Reciprocal.field.ln5Split[].sign)
this.sqr3Reciprocal.field.ln5Split[].exp == orig(this.sqr3Reciprocal.field.ln5Split[].exp)
this.sqr3Reciprocal.field.ln5Split[].nans == orig(this.sqr3Reciprocal.field.ln5Split[].nans)
this.sqr3Reciprocal.field.ln5Split[].field == orig(this.sqr3Reciprocal.field.ln5Split[].field)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln5Split.getClass().getName() == orig(this.pi.field.ln5Split.getClass().getName())
this.pi.field.ln5Split[] == orig(this.pi.field.ln5Split[])
this.pi.field.ln5Split[].mant == orig(this.pi.field.ln5Split[].mant)
this.pi.field.ln5Split[].sign == orig(this.pi.field.ln5Split[].sign)
this.pi.field.ln5Split[].exp == orig(this.pi.field.ln5Split[].exp)
this.pi.field.ln5Split[].nans == orig(this.pi.field.ln5Split[].nans)
this.pi.field.ln5Split[].field == orig(this.pi.field.ln5Split[].field)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln5Split.getClass().getName() == orig(this.e.field.ln5Split.getClass().getName())
this.e.field.ln5Split[] == orig(this.e.field.ln5Split[])
this.e.field.ln5Split[].mant == orig(this.e.field.ln5Split[].mant)
this.e.field.ln5Split[].sign == orig(this.e.field.ln5Split[].sign)
this.e.field.ln5Split[].exp == orig(this.e.field.ln5Split[].exp)
this.e.field.ln5Split[].nans == orig(this.e.field.ln5Split[].nans)
this.e.field.ln5Split[].field == orig(this.e.field.ln5Split[].field)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln5Split.getClass().getName() == orig(this.ln2.field.ln5Split.getClass().getName())
this.ln2.field.ln5Split[] == orig(this.ln2.field.ln5Split[])
this.ln2.field.ln5Split[].mant == orig(this.ln2.field.ln5Split[].mant)
this.ln2.field.ln5Split[].sign == orig(this.ln2.field.ln5Split[].sign)
this.ln2.field.ln5Split[].exp == orig(this.ln2.field.ln5Split[].exp)
this.ln2.field.ln5Split[].nans == orig(this.ln2.field.ln5Split[].nans)
this.ln2.field.ln5Split[].field == orig(this.ln2.field.ln5Split[].field)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln5Split.getClass().getName() == orig(this.ln5.field.ln5Split.getClass().getName())
this.ln5.field.ln5Split[] == orig(this.ln5.field.ln5Split[])
this.ln5.field.ln5Split[].mant == orig(this.ln5.field.ln5Split[].mant)
this.ln5.field.ln5Split[].sign == orig(this.ln5.field.ln5Split[].sign)
this.ln5.field.ln5Split[].exp == orig(this.ln5.field.ln5Split[].exp)
this.ln5.field.ln5Split[].nans == orig(this.ln5.field.ln5Split[].nans)
this.ln5.field.ln5Split[].field == orig(this.ln5.field.ln5Split[].field)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5Split == orig(this.ln5Split)
this.ln5Split.getClass().getName() == orig(this.ln5Split.getClass().getName())
this.ln5Split[] == orig(this.ln5Split[])
this.ln5Split[].mant == orig(this.ln5Split[].mant)
this.ln5Split[].sign == orig(this.ln5Split[].sign)
this.ln5Split[].exp == orig(this.ln5Split[].exp)
this.ln5Split[].nans == orig(this.ln5Split[].nans)
this.ln5Split[].field == orig(this.ln5Split[].field)
this.ln5Split[].field.radixDigits == orig(this.ln5Split[].field.radixDigits)
this.ln5Split[].field.zero == orig(this.ln5Split[].field.zero)
this.ln5Split[].field.one == orig(this.ln5Split[].field.one)
this.ln5Split[].field.two == orig(this.ln5Split[].field.two)
this.ln5Split[].field.sqr2 == orig(this.ln5Split[].field.sqr2)
this.ln5Split[].field.sqr2Split == orig(this.ln5Split[].field.sqr2Split)
this.ln5Split[].field.sqr2Reciprocal == orig(this.ln5Split[].field.sqr2Reciprocal)
this.ln5Split[].field.sqr3 == orig(this.ln5Split[].field.sqr3)
this.ln5Split[].field.sqr3Reciprocal == orig(this.ln5Split[].field.sqr3Reciprocal)
this.ln5Split[].field.pi == orig(this.ln5Split[].field.pi)
this.ln5Split[].field.piSplit == orig(this.ln5Split[].field.piSplit)
this.ln5Split[].field.e == orig(this.ln5Split[].field.e)
this.ln5Split[].field.eSplit == orig(this.ln5Split[].field.eSplit)
this.ln5Split[].field.ln2 == orig(this.ln5Split[].field.ln2)
this.ln5Split[].field.ln2Split == orig(this.ln5Split[].field.ln2Split)
this.ln5Split[].field.ln5 == orig(this.ln5Split[].field.ln5)
this.ln5Split[].field.ln5Split == orig(this.ln5Split[].field.ln5Split)
this.ln5Split[].field.ln10 == orig(this.ln5Split[].field.ln10)
this.ln5Split[].field.rMode == orig(this.ln5Split[].field.rMode)
this.ln10 == orig(this.ln10)
this.ln10.mant == orig(this.ln10.mant)
this.ln10.mant[] == orig(this.ln10.mant[])
this.ln10.sign == orig(this.ln10.sign)
this.ln10.exp == orig(this.ln10.exp)
this.ln10.nans == orig(this.ln10.nans)
this.ln10.field == orig(this.ln10.field)
this.ln10.field.radixDigits == orig(this.ln10.field.radixDigits)
this.ln10.field.zero == orig(this.ln10.field.zero)
this.ln10.field.one == orig(this.ln10.field.one)
this.ln10.field.two == orig(this.ln10.field.two)
this.ln10.field.sqr2 == orig(this.ln10.field.sqr2)
this.ln10.field.sqr2Split == orig(this.ln10.field.sqr2Split)
this.ln10.field.sqr2Split.getClass().getName() == orig(this.ln10.field.sqr2Split.getClass().getName())
this.ln10.field.sqr2Split[] == orig(this.ln10.field.sqr2Split[])
this.ln10.field.sqr2Split[].mant == orig(this.ln10.field.sqr2Split[].mant)
this.ln10.field.sqr2Split[].sign == orig(this.ln10.field.sqr2Split[].sign)
this.ln10.field.sqr2Split[].exp == orig(this.ln10.field.sqr2Split[].exp)
this.ln10.field.sqr2Split[].nans == orig(this.ln10.field.sqr2Split[].nans)
this.ln10.field.sqr2Split[].field == orig(this.ln10.field.sqr2Split[].field)
this.ln10.field.sqr2Reciprocal == orig(this.ln10.field.sqr2Reciprocal)
this.ln10.field.sqr3 == orig(this.ln10.field.sqr3)
this.ln10.field.sqr3Reciprocal == orig(this.ln10.field.sqr3Reciprocal)
this.ln10.field.pi == orig(this.ln10.field.pi)
this.ln10.field.piSplit == orig(this.ln10.field.piSplit)
this.ln10.field.piSplit.getClass().getName() == orig(this.ln10.field.piSplit.getClass().getName())
this.ln10.field.piSplit[] == orig(this.ln10.field.piSplit[])
this.ln10.field.piSplit[].mant == orig(this.ln10.field.piSplit[].mant)
this.ln10.field.piSplit[].sign == orig(this.ln10.field.piSplit[].sign)
this.ln10.field.piSplit[].exp == orig(this.ln10.field.piSplit[].exp)
this.ln10.field.piSplit[].nans == orig(this.ln10.field.piSplit[].nans)
this.ln10.field.piSplit[].field == orig(this.ln10.field.piSplit[].field)
this.ln10.field.e == orig(this.ln10.field.e)
this.ln10.field.eSplit == orig(this.ln10.field.eSplit)
this.ln10.field.eSplit.getClass().getName() == orig(this.ln10.field.eSplit.getClass().getName())
this.ln10.field.eSplit[] == orig(this.ln10.field.eSplit[])
this.ln10.field.eSplit[].mant == orig(this.ln10.field.eSplit[].mant)
this.ln10.field.eSplit[].sign == orig(this.ln10.field.eSplit[].sign)
this.ln10.field.eSplit[].exp == orig(this.ln10.field.eSplit[].exp)
this.ln10.field.eSplit[].nans == orig(this.ln10.field.eSplit[].nans)
this.ln10.field.eSplit[].field == orig(this.ln10.field.eSplit[].field)
this.ln10.field.ln2 == orig(this.ln10.field.ln2)
this.ln10.field.ln2Split == orig(this.ln10.field.ln2Split)
this.ln10.field.ln2Split.getClass().getName() == orig(this.ln10.field.ln2Split.getClass().getName())
this.ln10.field.ln2Split[] == orig(this.ln10.field.ln2Split[])
this.ln10.field.ln2Split[].mant == orig(this.ln10.field.ln2Split[].mant)
this.ln10.field.ln2Split[].sign == orig(this.ln10.field.ln2Split[].sign)
this.ln10.field.ln2Split[].exp == orig(this.ln10.field.ln2Split[].exp)
this.ln10.field.ln2Split[].nans == orig(this.ln10.field.ln2Split[].nans)
this.ln10.field.ln2Split[].field == orig(this.ln10.field.ln2Split[].field)
this.ln10.field.ln5 == orig(this.ln10.field.ln5)
this.ln10.field.ln5Split == orig(this.ln10.field.ln5Split)
this.ln10.field.ln5Split.getClass().getName() == orig(this.ln10.field.ln5Split.getClass().getName())
this.ln10.field.ln5Split[] == orig(this.ln10.field.ln5Split[])
this.ln10.field.ln5Split[].mant == orig(this.ln10.field.ln5Split[].mant)
this.ln10.field.ln5Split[].sign == orig(this.ln10.field.ln5Split[].sign)
this.ln10.field.ln5Split[].exp == orig(this.ln10.field.ln5Split[].exp)
this.ln10.field.ln5Split[].nans == orig(this.ln10.field.ln5Split[].nans)
this.ln10.field.ln5Split[].field == orig(this.ln10.field.ln5Split[].field)
this.ln10.field.ln10 == orig(this.ln10.field.ln10)
this.ln10.field.rMode == orig(this.ln10.field.rMode)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.zero.field.ieeeFlags one of { 16, 18 }
this.one.field.ieeeFlags one of { 16, 18 }
this.two.field.ieeeFlags one of { 16, 18 }
this.sqr2.field.ieeeFlags one of { 16, 18 }
this.sqr2Split[].field.sqr2Reciprocal elements != null
this.sqr2Split[].field.ieeeFlags elements one of { 16, 18 }
this.sqr2Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.sqr2Reciprocal.field.ieeeFlags one of { 16, 18 }
this.sqr3.field.ieeeFlags one of { 16, 18 }
this.sqr3Reciprocal.field.ieeeFlags one of { 16, 18 }
this.pi.field.ieeeFlags one of { 16, 18 }
this.piSplit[].field.ieeeFlags elements one of { 16, 18 }
this.piSplit[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.e.field.ieeeFlags one of { 16, 18 }
this.eSplit[].field.ieeeFlags elements one of { 16, 18 }
this.eSplit[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln2.field.ieeeFlags one of { 16, 18 }
this.ln2Split[].field.ieeeFlags elements one of { 16, 18 }
this.ln2Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln5.field.ieeeFlags one of { 16, 18 }
this.ln5Split[].field.ieeeFlags elements one of { 16, 18 }
this.ln5Split[].field.ieeeFlags one of { [16, 16], [18, 18] }
this.ln10.field.ieeeFlags one of { 16, 18 }
this.ieeeFlags one of { 16, 18 }
this.zero.field.ieeeFlags >= orig(this.zero.field.ieeeFlags)
this.one.field.ieeeFlags >= orig(this.one.field.ieeeFlags)
this.two.field.ieeeFlags >= orig(this.two.field.ieeeFlags)
this.sqr2.field.ieeeFlags >= orig(this.sqr2.field.ieeeFlags)
this.sqr2Split[].field.ieeeFlags >= orig(this.sqr2Split[].field.ieeeFlags) (elementwise)
this.sqr2Reciprocal.field.ieeeFlags >= orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3.field.ieeeFlags >= orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal.field.ieeeFlags >= orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi.field.ieeeFlags >= orig(this.pi.field.ieeeFlags)
this.piSplit[].field.ieeeFlags >= orig(this.piSplit[].field.ieeeFlags) (elementwise)
this.e.field.ieeeFlags >= orig(this.e.field.ieeeFlags)
this.eSplit[].field.ieeeFlags >= orig(this.eSplit[].field.ieeeFlags) (elementwise)
this.ln2.field.ieeeFlags >= orig(this.ln2.field.ieeeFlags)
this.ln2Split[].field.ieeeFlags >= orig(this.ln2Split[].field.ieeeFlags) (elementwise)
this.ln5.field.ieeeFlags >= orig(this.ln5.field.ieeeFlags)
this.ln5Split[].field.ieeeFlags >= orig(this.ln5Split[].field.ieeeFlags) (elementwise)
this.ln10.field.ieeeFlags >= orig(this.ln10.field.ieeeFlags)
this.ieeeFlags >= orig(this.ieeeFlags)
===========================================================================
org.apache.commons.math3.dfp.DfpField.split(java.lang.String):::ENTER
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ln5Split == null
this.zero.field.ln10 == null
this.zero.field.ieeeFlags == 16
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ln5Split == null
this.one.field.ln10 == null
this.one.field.ieeeFlags == 16
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ln5Split == null
this.two.field.ln10 == null
this.two.field.ieeeFlags == 16
this.sqr2.field.ln5Split == null
this.sqr2.field.ln10 == null
this.sqr2.field.ieeeFlags == 16
this.sqr2Split[].field.ln5Split contains only nulls and has only one value, of length 2
this.sqr2Split[].field.ln5Split elements == null
this.sqr2Split[].field.ln5Split.getClass().getName() == [null, null]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == null
this.sqr2Split[].field.ln10 contains only nulls and has only one value, of length 2
this.sqr2Split[].field.ln10 elements == null
this.sqr2Split[].field.ieeeFlags == [16, 16]
this.sqr2Split[].field.ieeeFlags elements == 16
this.sqr2Reciprocal.field.ln5Split == null
this.sqr2Reciprocal.field.ln10 == null
this.sqr2Reciprocal.field.ieeeFlags == 16
this.sqr3.field.ln5Split == null
this.sqr3.field.ln10 == null
this.sqr3.field.ieeeFlags == 16
this.sqr3Reciprocal.field.ln5Split == null
this.sqr3Reciprocal.field.ln10 == null
this.sqr3Reciprocal.field.ieeeFlags == 16
this.pi.field.ln5Split == null
this.pi.field.ln10 == null
this.pi.field.ieeeFlags == 16
this.piSplit[].field.ln5Split contains only nulls and has only one value, of length 2
this.piSplit[].field.ln5Split elements == null
this.piSplit[].field.ln5Split.getClass().getName() == [null, null]
this.piSplit[].field.ln5Split.getClass().getName() elements == null
this.piSplit[].field.ln10 contains only nulls and has only one value, of length 2
this.piSplit[].field.ln10 elements == null
this.piSplit[].field.ieeeFlags == [16, 16]
this.piSplit[].field.ieeeFlags elements == 16
this.e.field.ln5Split == null
this.e.field.ln10 == null
this.e.field.ieeeFlags == 16
this.eSplit[].field.ln5Split contains only nulls and has only one value, of length 2
this.eSplit[].field.ln5Split elements == null
this.eSplit[].field.ln5Split.getClass().getName() == [null, null]
this.eSplit[].field.ln5Split.getClass().getName() elements == null
this.eSplit[].field.ln10 contains only nulls and has only one value, of length 2
this.eSplit[].field.ln10 elements == null
this.eSplit[].field.ieeeFlags == [16, 16]
this.eSplit[].field.ieeeFlags elements == 16
this.ln2.field.ln5Split == null
this.ln2.field.ln10 == null
this.ln2.field.ieeeFlags == 16
this.ln2Split[].field.ln5Split contains only nulls and has only one value, of length 2
this.ln2Split[].field.ln5Split elements == null
this.ln2Split[].field.ln5Split.getClass().getName() == [null, null]
this.ln2Split[].field.ln5Split.getClass().getName() elements == null
this.ln2Split[].field.ln10 contains only nulls and has only one value, of length 2
this.ln2Split[].field.ln10 elements == null
this.ln2Split[].field.ieeeFlags == [16, 16]
this.ln2Split[].field.ieeeFlags elements == 16
this.ln5.field.ln5Split == null
this.ln5.field.ln10 == null
this.ln5.field.ieeeFlags == 16
this.ln5Split == null
this.ln10 == null
this.ieeeFlags == 16
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
===========================================================================
org.apache.commons.math3.dfp.DfpField.split(java.lang.String):::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.radixDigits == orig(this.radixDigits)
this.zero == orig(this.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.zero.mant == orig(this.zero.mant)
this.zero.mant[] == orig(this.zero.mant[])
this.zero.sign == orig(this.zero.sign)
this.zero.exp == orig(this.zero.exp)
this.zero.nans == orig(this.zero.nans)
this.zero.field == orig(this.zero.field)
this.zero.field.radixDigits == orig(this.zero.field.radixDigits)
this.zero.field.zero == orig(this.zero.field.zero)
this.zero.field.one == orig(this.zero.field.one)
this.zero.field.two == orig(this.zero.field.two)
this.zero.field.sqr2 == orig(this.zero.field.sqr2)
this.zero.field.sqr2Split == orig(this.zero.field.sqr2Split)
this.zero.field.sqr2Split.getClass().getName() == orig(this.zero.field.sqr2Split.getClass().getName())
this.zero.field.sqr2Split[] == orig(this.zero.field.sqr2Split[])
this.zero.field.sqr2Split[].mant == orig(this.zero.field.sqr2Split[].mant)
this.zero.field.sqr2Split[].sign == orig(this.zero.field.sqr2Split[].sign)
this.zero.field.sqr2Split[].exp == orig(this.zero.field.sqr2Split[].exp)
this.zero.field.sqr2Split[].nans == orig(this.zero.field.sqr2Split[].nans)
this.zero.field.sqr2Split[].field == orig(this.zero.field.sqr2Split[].field)
this.zero.field.sqr2Reciprocal == orig(this.zero.field.sqr2Reciprocal)
this.zero.field.sqr3 == orig(this.zero.field.sqr3)
this.zero.field.sqr3Reciprocal == orig(this.zero.field.sqr3Reciprocal)
this.zero.field.pi == orig(this.zero.field.pi)
this.zero.field.piSplit == orig(this.zero.field.piSplit)
this.zero.field.piSplit.getClass().getName() == orig(this.zero.field.piSplit.getClass().getName())
this.zero.field.piSplit[] == orig(this.zero.field.piSplit[])
this.zero.field.piSplit[].mant == orig(this.zero.field.piSplit[].mant)
this.zero.field.piSplit[].sign == orig(this.zero.field.piSplit[].sign)
this.zero.field.piSplit[].exp == orig(this.zero.field.piSplit[].exp)
this.zero.field.piSplit[].nans == orig(this.zero.field.piSplit[].nans)
this.zero.field.piSplit[].field == orig(this.zero.field.piSplit[].field)
this.zero.field.e == orig(this.zero.field.e)
this.zero.field.eSplit == orig(this.zero.field.eSplit)
this.zero.field.eSplit.getClass().getName() == orig(this.zero.field.eSplit.getClass().getName())
this.zero.field.eSplit[] == orig(this.zero.field.eSplit[])
this.zero.field.eSplit[].mant == orig(this.zero.field.eSplit[].mant)
this.zero.field.eSplit[].sign == orig(this.zero.field.eSplit[].sign)
this.zero.field.eSplit[].exp == orig(this.zero.field.eSplit[].exp)
this.zero.field.eSplit[].nans == orig(this.zero.field.eSplit[].nans)
this.zero.field.eSplit[].field == orig(this.zero.field.eSplit[].field)
this.zero.field.ln2 == orig(this.zero.field.ln2)
this.zero.field.ln2Split == orig(this.zero.field.ln2Split)
this.zero.field.ln2Split.getClass().getName() == orig(this.zero.field.ln2Split.getClass().getName())
this.zero.field.ln2Split[] == orig(this.zero.field.ln2Split[])
this.zero.field.ln2Split[].mant == orig(this.zero.field.ln2Split[].mant)
this.zero.field.ln2Split[].sign == orig(this.zero.field.ln2Split[].sign)
this.zero.field.ln2Split[].exp == orig(this.zero.field.ln2Split[].exp)
this.zero.field.ln2Split[].nans == orig(this.zero.field.ln2Split[].nans)
this.zero.field.ln2Split[].field == orig(this.zero.field.ln2Split[].field)
this.zero.field.ln5 == orig(this.zero.field.ln5)
this.zero.field.ln5Split == orig(this.zero.field.ln5Split)
this.zero.field.ln10 == orig(this.zero.field.ln10)
this.zero.field.rMode == orig(this.zero.field.rMode)
this.zero.field.ieeeFlags == orig(this.zero.field.ieeeFlags)
this.one == orig(this.one)
this.one.mant == orig(this.one.mant)
this.one.mant[] == orig(this.one.mant[])
this.one.sign == orig(this.one.sign)
this.one.exp == orig(this.one.exp)
this.one.nans == orig(this.one.nans)
this.one.field == orig(this.one.field)
this.one.field.radixDigits == orig(this.one.field.radixDigits)
this.one.field.zero == orig(this.one.field.zero)
this.one.field.one == orig(this.one.field.one)
this.one.field.two == orig(this.one.field.two)
this.one.field.sqr2 == orig(this.one.field.sqr2)
this.one.field.sqr2Split == orig(this.one.field.sqr2Split)
this.one.field.sqr2Split.getClass().getName() == orig(this.one.field.sqr2Split.getClass().getName())
this.one.field.sqr2Split[] == orig(this.one.field.sqr2Split[])
this.one.field.sqr2Split[].mant == orig(this.one.field.sqr2Split[].mant)
this.one.field.sqr2Split[].sign == orig(this.one.field.sqr2Split[].sign)
this.one.field.sqr2Split[].exp == orig(this.one.field.sqr2Split[].exp)
this.one.field.sqr2Split[].nans == orig(this.one.field.sqr2Split[].nans)
this.one.field.sqr2Split[].field == orig(this.one.field.sqr2Split[].field)
this.one.field.sqr2Reciprocal == orig(this.one.field.sqr2Reciprocal)
this.one.field.sqr3 == orig(this.one.field.sqr3)
this.one.field.sqr3Reciprocal == orig(this.one.field.sqr3Reciprocal)
this.one.field.pi == orig(this.one.field.pi)
this.one.field.piSplit == orig(this.one.field.piSplit)
this.one.field.piSplit.getClass().getName() == orig(this.one.field.piSplit.getClass().getName())
this.one.field.piSplit[] == orig(this.one.field.piSplit[])
this.one.field.piSplit[].mant == orig(this.one.field.piSplit[].mant)
this.one.field.piSplit[].sign == orig(this.one.field.piSplit[].sign)
this.one.field.piSplit[].exp == orig(this.one.field.piSplit[].exp)
this.one.field.piSplit[].nans == orig(this.one.field.piSplit[].nans)
this.one.field.piSplit[].field == orig(this.one.field.piSplit[].field)
this.one.field.e == orig(this.one.field.e)
this.one.field.eSplit == orig(this.one.field.eSplit)
this.one.field.eSplit.getClass().getName() == orig(this.one.field.eSplit.getClass().getName())
this.one.field.eSplit[] == orig(this.one.field.eSplit[])
this.one.field.eSplit[].mant == orig(this.one.field.eSplit[].mant)
this.one.field.eSplit[].sign == orig(this.one.field.eSplit[].sign)
this.one.field.eSplit[].exp == orig(this.one.field.eSplit[].exp)
this.one.field.eSplit[].nans == orig(this.one.field.eSplit[].nans)
this.one.field.eSplit[].field == orig(this.one.field.eSplit[].field)
this.one.field.ln2 == orig(this.one.field.ln2)
this.one.field.ln2Split == orig(this.one.field.ln2Split)
this.one.field.ln2Split.getClass().getName() == orig(this.one.field.ln2Split.getClass().getName())
this.one.field.ln2Split[] == orig(this.one.field.ln2Split[])
this.one.field.ln2Split[].mant == orig(this.one.field.ln2Split[].mant)
this.one.field.ln2Split[].sign == orig(this.one.field.ln2Split[].sign)
this.one.field.ln2Split[].exp == orig(this.one.field.ln2Split[].exp)
this.one.field.ln2Split[].nans == orig(this.one.field.ln2Split[].nans)
this.one.field.ln2Split[].field == orig(this.one.field.ln2Split[].field)
this.one.field.ln5 == orig(this.one.field.ln5)
this.one.field.ln5Split == orig(this.one.field.ln5Split)
this.one.field.ln10 == orig(this.one.field.ln10)
this.one.field.rMode == orig(this.one.field.rMode)
this.one.field.ieeeFlags == orig(this.one.field.ieeeFlags)
this.two == orig(this.two)
this.two.mant == orig(this.two.mant)
this.two.mant[] == orig(this.two.mant[])
this.two.sign == orig(this.two.sign)
this.two.exp == orig(this.two.exp)
this.two.nans == orig(this.two.nans)
this.two.field == orig(this.two.field)
this.two.field.radixDigits == orig(this.two.field.radixDigits)
this.two.field.zero == orig(this.two.field.zero)
this.two.field.one == orig(this.two.field.one)
this.two.field.two == orig(this.two.field.two)
this.two.field.sqr2 == orig(this.two.field.sqr2)
this.two.field.sqr2Split == orig(this.two.field.sqr2Split)
this.two.field.sqr2Split.getClass().getName() == orig(this.two.field.sqr2Split.getClass().getName())
this.two.field.sqr2Split[] == orig(this.two.field.sqr2Split[])
this.two.field.sqr2Split[].mant == orig(this.two.field.sqr2Split[].mant)
this.two.field.sqr2Split[].sign == orig(this.two.field.sqr2Split[].sign)
this.two.field.sqr2Split[].exp == orig(this.two.field.sqr2Split[].exp)
this.two.field.sqr2Split[].nans == orig(this.two.field.sqr2Split[].nans)
this.two.field.sqr2Split[].field == orig(this.two.field.sqr2Split[].field)
this.two.field.sqr2Reciprocal == orig(this.two.field.sqr2Reciprocal)
this.two.field.sqr3 == orig(this.two.field.sqr3)
this.two.field.sqr3Reciprocal == orig(this.two.field.sqr3Reciprocal)
this.two.field.pi == orig(this.two.field.pi)
this.two.field.piSplit == orig(this.two.field.piSplit)
this.two.field.piSplit.getClass().getName() == orig(this.two.field.piSplit.getClass().getName())
this.two.field.piSplit[] == orig(this.two.field.piSplit[])
this.two.field.piSplit[].mant == orig(this.two.field.piSplit[].mant)
this.two.field.piSplit[].sign == orig(this.two.field.piSplit[].sign)
this.two.field.piSplit[].exp == orig(this.two.field.piSplit[].exp)
this.two.field.piSplit[].nans == orig(this.two.field.piSplit[].nans)
this.two.field.piSplit[].field == orig(this.two.field.piSplit[].field)
this.two.field.e == orig(this.two.field.e)
this.two.field.eSplit == orig(this.two.field.eSplit)
this.two.field.eSplit.getClass().getName() == orig(this.two.field.eSplit.getClass().getName())
this.two.field.eSplit[] == orig(this.two.field.eSplit[])
this.two.field.eSplit[].mant == orig(this.two.field.eSplit[].mant)
this.two.field.eSplit[].sign == orig(this.two.field.eSplit[].sign)
this.two.field.eSplit[].exp == orig(this.two.field.eSplit[].exp)
this.two.field.eSplit[].nans == orig(this.two.field.eSplit[].nans)
this.two.field.eSplit[].field == orig(this.two.field.eSplit[].field)
this.two.field.ln2 == orig(this.two.field.ln2)
this.two.field.ln2Split == orig(this.two.field.ln2Split)
this.two.field.ln2Split.getClass().getName() == orig(this.two.field.ln2Split.getClass().getName())
this.two.field.ln2Split[] == orig(this.two.field.ln2Split[])
this.two.field.ln2Split[].mant == orig(this.two.field.ln2Split[].mant)
this.two.field.ln2Split[].sign == orig(this.two.field.ln2Split[].sign)
this.two.field.ln2Split[].exp == orig(this.two.field.ln2Split[].exp)
this.two.field.ln2Split[].nans == orig(this.two.field.ln2Split[].nans)
this.two.field.ln2Split[].field == orig(this.two.field.ln2Split[].field)
this.two.field.ln5 == orig(this.two.field.ln5)
this.two.field.ln5Split == orig(this.two.field.ln5Split)
this.two.field.ln10 == orig(this.two.field.ln10)
this.two.field.rMode == orig(this.two.field.rMode)
this.two.field.ieeeFlags == orig(this.two.field.ieeeFlags)
this.sqr2 == orig(this.sqr2)
this.sqr2.mant == orig(this.sqr2.mant)
this.sqr2.mant[] == orig(this.sqr2.mant[])
this.sqr2.sign == orig(this.sqr2.sign)
this.sqr2.exp == orig(this.sqr2.exp)
this.sqr2.nans == orig(this.sqr2.nans)
this.sqr2.field == orig(this.sqr2.field)
this.sqr2.field.radixDigits == orig(this.sqr2.field.radixDigits)
this.sqr2.field.zero == orig(this.sqr2.field.zero)
this.sqr2.field.one == orig(this.sqr2.field.one)
this.sqr2.field.two == orig(this.sqr2.field.two)
this.sqr2.field.sqr2 == orig(this.sqr2.field.sqr2)
this.sqr2.field.sqr2Split == orig(this.sqr2.field.sqr2Split)
this.sqr2.field.sqr2Split.getClass().getName() == orig(this.sqr2.field.sqr2Split.getClass().getName())
this.sqr2.field.sqr2Split[] == orig(this.sqr2.field.sqr2Split[])
this.sqr2.field.sqr2Split[].mant == orig(this.sqr2.field.sqr2Split[].mant)
this.sqr2.field.sqr2Split[].sign == orig(this.sqr2.field.sqr2Split[].sign)
this.sqr2.field.sqr2Split[].exp == orig(this.sqr2.field.sqr2Split[].exp)
this.sqr2.field.sqr2Split[].nans == orig(this.sqr2.field.sqr2Split[].nans)
this.sqr2.field.sqr2Split[].field == orig(this.sqr2.field.sqr2Split[].field)
this.sqr2.field.sqr2Reciprocal == orig(this.sqr2.field.sqr2Reciprocal)
this.sqr2.field.sqr3 == orig(this.sqr2.field.sqr3)
this.sqr2.field.sqr3Reciprocal == orig(this.sqr2.field.sqr3Reciprocal)
this.sqr2.field.pi == orig(this.sqr2.field.pi)
this.sqr2.field.piSplit == orig(this.sqr2.field.piSplit)
this.sqr2.field.piSplit.getClass().getName() == orig(this.sqr2.field.piSplit.getClass().getName())
this.sqr2.field.piSplit[] == orig(this.sqr2.field.piSplit[])
this.sqr2.field.piSplit[].mant == orig(this.sqr2.field.piSplit[].mant)
this.sqr2.field.piSplit[].sign == orig(this.sqr2.field.piSplit[].sign)
this.sqr2.field.piSplit[].exp == orig(this.sqr2.field.piSplit[].exp)
this.sqr2.field.piSplit[].nans == orig(this.sqr2.field.piSplit[].nans)
this.sqr2.field.piSplit[].field == orig(this.sqr2.field.piSplit[].field)
this.sqr2.field.e == orig(this.sqr2.field.e)
this.sqr2.field.eSplit == orig(this.sqr2.field.eSplit)
this.sqr2.field.eSplit.getClass().getName() == orig(this.sqr2.field.eSplit.getClass().getName())
this.sqr2.field.eSplit[] == orig(this.sqr2.field.eSplit[])
this.sqr2.field.eSplit[].mant == orig(this.sqr2.field.eSplit[].mant)
this.sqr2.field.eSplit[].sign == orig(this.sqr2.field.eSplit[].sign)
this.sqr2.field.eSplit[].exp == orig(this.sqr2.field.eSplit[].exp)
this.sqr2.field.eSplit[].nans == orig(this.sqr2.field.eSplit[].nans)
this.sqr2.field.eSplit[].field == orig(this.sqr2.field.eSplit[].field)
this.sqr2.field.ln2 == orig(this.sqr2.field.ln2)
this.sqr2.field.ln2Split == orig(this.sqr2.field.ln2Split)
this.sqr2.field.ln2Split.getClass().getName() == orig(this.sqr2.field.ln2Split.getClass().getName())
this.sqr2.field.ln2Split[] == orig(this.sqr2.field.ln2Split[])
this.sqr2.field.ln2Split[].mant == orig(this.sqr2.field.ln2Split[].mant)
this.sqr2.field.ln2Split[].sign == orig(this.sqr2.field.ln2Split[].sign)
this.sqr2.field.ln2Split[].exp == orig(this.sqr2.field.ln2Split[].exp)
this.sqr2.field.ln2Split[].nans == orig(this.sqr2.field.ln2Split[].nans)
this.sqr2.field.ln2Split[].field == orig(this.sqr2.field.ln2Split[].field)
this.sqr2.field.ln5 == orig(this.sqr2.field.ln5)
this.sqr2.field.ln5Split == orig(this.sqr2.field.ln5Split)
this.sqr2.field.ln10 == orig(this.sqr2.field.ln10)
this.sqr2.field.rMode == orig(this.sqr2.field.rMode)
this.sqr2.field.ieeeFlags == orig(this.sqr2.field.ieeeFlags)
this.sqr2Split == orig(this.sqr2Split)
this.sqr2Split.getClass().getName() == orig(this.sqr2Split.getClass().getName())
this.sqr2Split[] == orig(this.sqr2Split[])
this.sqr2Split[].mant == orig(this.sqr2Split[].mant)
this.sqr2Split[].sign == orig(this.sqr2Split[].sign)
this.sqr2Split[].exp == orig(this.sqr2Split[].exp)
this.sqr2Split[].nans == orig(this.sqr2Split[].nans)
this.sqr2Split[].field == orig(this.sqr2Split[].field)
this.sqr2Split[].field.radixDigits == orig(this.sqr2Split[].field.radixDigits)
this.sqr2Split[].field.zero == orig(this.sqr2Split[].field.zero)
this.sqr2Split[].field.one == orig(this.sqr2Split[].field.one)
this.sqr2Split[].field.two == orig(this.sqr2Split[].field.two)
this.sqr2Split[].field.sqr2 == orig(this.sqr2Split[].field.sqr2)
this.sqr2Split[].field.sqr2Split == orig(this.sqr2Split[].field.sqr2Split)
this.sqr2Split[].field.sqr2Reciprocal == orig(this.sqr2Split[].field.sqr2Reciprocal)
this.sqr2Split[].field.sqr3 == orig(this.sqr2Split[].field.sqr3)
this.sqr2Split[].field.sqr3Reciprocal == orig(this.sqr2Split[].field.sqr3Reciprocal)
this.sqr2Split[].field.pi == orig(this.sqr2Split[].field.pi)
this.sqr2Split[].field.piSplit == orig(this.sqr2Split[].field.piSplit)
this.sqr2Split[].field.e == orig(this.sqr2Split[].field.e)
this.sqr2Split[].field.eSplit == orig(this.sqr2Split[].field.eSplit)
this.sqr2Split[].field.ln2 == orig(this.sqr2Split[].field.ln2)
this.sqr2Split[].field.ln2Split == orig(this.sqr2Split[].field.ln2Split)
this.sqr2Split[].field.ln5 == orig(this.sqr2Split[].field.ln5)
this.sqr2Split[].field.ln5Split == orig(this.sqr2Split[].field.ln5Split)
this.sqr2Split[].field.ln10 == orig(this.sqr2Split[].field.ln10)
this.sqr2Split[].field.rMode == orig(this.sqr2Split[].field.rMode)
this.sqr2Split[].field.ieeeFlags == orig(this.sqr2Split[].field.ieeeFlags)
this.sqr2Reciprocal == orig(this.sqr2Reciprocal)
this.sqr2Reciprocal.mant == orig(this.sqr2Reciprocal.mant)
this.sqr2Reciprocal.mant[] == orig(this.sqr2Reciprocal.mant[])
this.sqr2Reciprocal.sign == orig(this.sqr2Reciprocal.sign)
this.sqr2Reciprocal.exp == orig(this.sqr2Reciprocal.exp)
this.sqr2Reciprocal.nans == orig(this.sqr2Reciprocal.nans)
this.sqr2Reciprocal.field == orig(this.sqr2Reciprocal.field)
this.sqr2Reciprocal.field.radixDigits == orig(this.sqr2Reciprocal.field.radixDigits)
this.sqr2Reciprocal.field.zero == orig(this.sqr2Reciprocal.field.zero)
this.sqr2Reciprocal.field.one == orig(this.sqr2Reciprocal.field.one)
this.sqr2Reciprocal.field.two == orig(this.sqr2Reciprocal.field.two)
this.sqr2Reciprocal.field.sqr2 == orig(this.sqr2Reciprocal.field.sqr2)
this.sqr2Reciprocal.field.sqr2Split == orig(this.sqr2Reciprocal.field.sqr2Split)
this.sqr2Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.sqr2Split.getClass().getName())
this.sqr2Reciprocal.field.sqr2Split[] == orig(this.sqr2Reciprocal.field.sqr2Split[])
this.sqr2Reciprocal.field.sqr2Split[].mant == orig(this.sqr2Reciprocal.field.sqr2Split[].mant)
this.sqr2Reciprocal.field.sqr2Split[].sign == orig(this.sqr2Reciprocal.field.sqr2Split[].sign)
this.sqr2Reciprocal.field.sqr2Split[].exp == orig(this.sqr2Reciprocal.field.sqr2Split[].exp)
this.sqr2Reciprocal.field.sqr2Split[].nans == orig(this.sqr2Reciprocal.field.sqr2Split[].nans)
this.sqr2Reciprocal.field.sqr2Split[].field == orig(this.sqr2Reciprocal.field.sqr2Split[].field)
this.sqr2Reciprocal.field.sqr2Reciprocal == orig(this.sqr2Reciprocal.field.sqr2Reciprocal)
this.sqr2Reciprocal.field.sqr3 == orig(this.sqr2Reciprocal.field.sqr3)
this.sqr2Reciprocal.field.sqr3Reciprocal == orig(this.sqr2Reciprocal.field.sqr3Reciprocal)
this.sqr2Reciprocal.field.pi == orig(this.sqr2Reciprocal.field.pi)
this.sqr2Reciprocal.field.piSplit == orig(this.sqr2Reciprocal.field.piSplit)
this.sqr2Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.piSplit.getClass().getName())
this.sqr2Reciprocal.field.piSplit[] == orig(this.sqr2Reciprocal.field.piSplit[])
this.sqr2Reciprocal.field.piSplit[].mant == orig(this.sqr2Reciprocal.field.piSplit[].mant)
this.sqr2Reciprocal.field.piSplit[].sign == orig(this.sqr2Reciprocal.field.piSplit[].sign)
this.sqr2Reciprocal.field.piSplit[].exp == orig(this.sqr2Reciprocal.field.piSplit[].exp)
this.sqr2Reciprocal.field.piSplit[].nans == orig(this.sqr2Reciprocal.field.piSplit[].nans)
this.sqr2Reciprocal.field.piSplit[].field == orig(this.sqr2Reciprocal.field.piSplit[].field)
this.sqr2Reciprocal.field.e == orig(this.sqr2Reciprocal.field.e)
this.sqr2Reciprocal.field.eSplit == orig(this.sqr2Reciprocal.field.eSplit)
this.sqr2Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr2Reciprocal.field.eSplit.getClass().getName())
this.sqr2Reciprocal.field.eSplit[] == orig(this.sqr2Reciprocal.field.eSplit[])
this.sqr2Reciprocal.field.eSplit[].mant == orig(this.sqr2Reciprocal.field.eSplit[].mant)
this.sqr2Reciprocal.field.eSplit[].sign == orig(this.sqr2Reciprocal.field.eSplit[].sign)
this.sqr2Reciprocal.field.eSplit[].exp == orig(this.sqr2Reciprocal.field.eSplit[].exp)
this.sqr2Reciprocal.field.eSplit[].nans == orig(this.sqr2Reciprocal.field.eSplit[].nans)
this.sqr2Reciprocal.field.eSplit[].field == orig(this.sqr2Reciprocal.field.eSplit[].field)
this.sqr2Reciprocal.field.ln2 == orig(this.sqr2Reciprocal.field.ln2)
this.sqr2Reciprocal.field.ln2Split == orig(this.sqr2Reciprocal.field.ln2Split)
this.sqr2Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr2Reciprocal.field.ln2Split.getClass().getName())
this.sqr2Reciprocal.field.ln2Split[] == orig(this.sqr2Reciprocal.field.ln2Split[])
this.sqr2Reciprocal.field.ln2Split[].mant == orig(this.sqr2Reciprocal.field.ln2Split[].mant)
this.sqr2Reciprocal.field.ln2Split[].sign == orig(this.sqr2Reciprocal.field.ln2Split[].sign)
this.sqr2Reciprocal.field.ln2Split[].exp == orig(this.sqr2Reciprocal.field.ln2Split[].exp)
this.sqr2Reciprocal.field.ln2Split[].nans == orig(this.sqr2Reciprocal.field.ln2Split[].nans)
this.sqr2Reciprocal.field.ln2Split[].field == orig(this.sqr2Reciprocal.field.ln2Split[].field)
this.sqr2Reciprocal.field.ln5 == orig(this.sqr2Reciprocal.field.ln5)
this.sqr2Reciprocal.field.ln5Split == orig(this.sqr2Reciprocal.field.ln5Split)
this.sqr2Reciprocal.field.ln10 == orig(this.sqr2Reciprocal.field.ln10)
this.sqr2Reciprocal.field.rMode == orig(this.sqr2Reciprocal.field.rMode)
this.sqr2Reciprocal.field.ieeeFlags == orig(this.sqr2Reciprocal.field.ieeeFlags)
this.sqr3 == orig(this.sqr3)
this.sqr3.mant == orig(this.sqr3.mant)
this.sqr3.mant[] == orig(this.sqr3.mant[])
this.sqr3.sign == orig(this.sqr3.sign)
this.sqr3.exp == orig(this.sqr3.exp)
this.sqr3.nans == orig(this.sqr3.nans)
this.sqr3.field == orig(this.sqr3.field)
this.sqr3.field.radixDigits == orig(this.sqr3.field.radixDigits)
this.sqr3.field.zero == orig(this.sqr3.field.zero)
this.sqr3.field.one == orig(this.sqr3.field.one)
this.sqr3.field.two == orig(this.sqr3.field.two)
this.sqr3.field.sqr2 == orig(this.sqr3.field.sqr2)
this.sqr3.field.sqr2Split == orig(this.sqr3.field.sqr2Split)
this.sqr3.field.sqr2Split.getClass().getName() == orig(this.sqr3.field.sqr2Split.getClass().getName())
this.sqr3.field.sqr2Split[] == orig(this.sqr3.field.sqr2Split[])
this.sqr3.field.sqr2Split[].mant == orig(this.sqr3.field.sqr2Split[].mant)
this.sqr3.field.sqr2Split[].sign == orig(this.sqr3.field.sqr2Split[].sign)
this.sqr3.field.sqr2Split[].exp == orig(this.sqr3.field.sqr2Split[].exp)
this.sqr3.field.sqr2Split[].nans == orig(this.sqr3.field.sqr2Split[].nans)
this.sqr3.field.sqr2Split[].field == orig(this.sqr3.field.sqr2Split[].field)
this.sqr3.field.sqr2Reciprocal == orig(this.sqr3.field.sqr2Reciprocal)
this.sqr3.field.sqr3 == orig(this.sqr3.field.sqr3)
this.sqr3.field.sqr3Reciprocal == orig(this.sqr3.field.sqr3Reciprocal)
this.sqr3.field.pi == orig(this.sqr3.field.pi)
this.sqr3.field.piSplit == orig(this.sqr3.field.piSplit)
this.sqr3.field.piSplit.getClass().getName() == orig(this.sqr3.field.piSplit.getClass().getName())
this.sqr3.field.piSplit[] == orig(this.sqr3.field.piSplit[])
this.sqr3.field.piSplit[].mant == orig(this.sqr3.field.piSplit[].mant)
this.sqr3.field.piSplit[].sign == orig(this.sqr3.field.piSplit[].sign)
this.sqr3.field.piSplit[].exp == orig(this.sqr3.field.piSplit[].exp)
this.sqr3.field.piSplit[].nans == orig(this.sqr3.field.piSplit[].nans)
this.sqr3.field.piSplit[].field == orig(this.sqr3.field.piSplit[].field)
this.sqr3.field.e == orig(this.sqr3.field.e)
this.sqr3.field.eSplit == orig(this.sqr3.field.eSplit)
this.sqr3.field.eSplit.getClass().getName() == orig(this.sqr3.field.eSplit.getClass().getName())
this.sqr3.field.eSplit[] == orig(this.sqr3.field.eSplit[])
this.sqr3.field.eSplit[].mant == orig(this.sqr3.field.eSplit[].mant)
this.sqr3.field.eSplit[].sign == orig(this.sqr3.field.eSplit[].sign)
this.sqr3.field.eSplit[].exp == orig(this.sqr3.field.eSplit[].exp)
this.sqr3.field.eSplit[].nans == orig(this.sqr3.field.eSplit[].nans)
this.sqr3.field.eSplit[].field == orig(this.sqr3.field.eSplit[].field)
this.sqr3.field.ln2 == orig(this.sqr3.field.ln2)
this.sqr3.field.ln2Split == orig(this.sqr3.field.ln2Split)
this.sqr3.field.ln2Split.getClass().getName() == orig(this.sqr3.field.ln2Split.getClass().getName())
this.sqr3.field.ln2Split[] == orig(this.sqr3.field.ln2Split[])
this.sqr3.field.ln2Split[].mant == orig(this.sqr3.field.ln2Split[].mant)
this.sqr3.field.ln2Split[].sign == orig(this.sqr3.field.ln2Split[].sign)
this.sqr3.field.ln2Split[].exp == orig(this.sqr3.field.ln2Split[].exp)
this.sqr3.field.ln2Split[].nans == orig(this.sqr3.field.ln2Split[].nans)
this.sqr3.field.ln2Split[].field == orig(this.sqr3.field.ln2Split[].field)
this.sqr3.field.ln5 == orig(this.sqr3.field.ln5)
this.sqr3.field.ln5Split == orig(this.sqr3.field.ln5Split)
this.sqr3.field.ln10 == orig(this.sqr3.field.ln10)
this.sqr3.field.rMode == orig(this.sqr3.field.rMode)
this.sqr3.field.ieeeFlags == orig(this.sqr3.field.ieeeFlags)
this.sqr3Reciprocal == orig(this.sqr3Reciprocal)
this.sqr3Reciprocal.mant == orig(this.sqr3Reciprocal.mant)
this.sqr3Reciprocal.mant[] == orig(this.sqr3Reciprocal.mant[])
this.sqr3Reciprocal.sign == orig(this.sqr3Reciprocal.sign)
this.sqr3Reciprocal.exp == orig(this.sqr3Reciprocal.exp)
this.sqr3Reciprocal.nans == orig(this.sqr3Reciprocal.nans)
this.sqr3Reciprocal.field == orig(this.sqr3Reciprocal.field)
this.sqr3Reciprocal.field.radixDigits == orig(this.sqr3Reciprocal.field.radixDigits)
this.sqr3Reciprocal.field.zero == orig(this.sqr3Reciprocal.field.zero)
this.sqr3Reciprocal.field.one == orig(this.sqr3Reciprocal.field.one)
this.sqr3Reciprocal.field.two == orig(this.sqr3Reciprocal.field.two)
this.sqr3Reciprocal.field.sqr2 == orig(this.sqr3Reciprocal.field.sqr2)
this.sqr3Reciprocal.field.sqr2Split == orig(this.sqr3Reciprocal.field.sqr2Split)
this.sqr3Reciprocal.field.sqr2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.sqr2Split.getClass().getName())
this.sqr3Reciprocal.field.sqr2Split[] == orig(this.sqr3Reciprocal.field.sqr2Split[])
this.sqr3Reciprocal.field.sqr2Split[].mant == orig(this.sqr3Reciprocal.field.sqr2Split[].mant)
this.sqr3Reciprocal.field.sqr2Split[].sign == orig(this.sqr3Reciprocal.field.sqr2Split[].sign)
this.sqr3Reciprocal.field.sqr2Split[].exp == orig(this.sqr3Reciprocal.field.sqr2Split[].exp)
this.sqr3Reciprocal.field.sqr2Split[].nans == orig(this.sqr3Reciprocal.field.sqr2Split[].nans)
this.sqr3Reciprocal.field.sqr2Split[].field == orig(this.sqr3Reciprocal.field.sqr2Split[].field)
this.sqr3Reciprocal.field.sqr2Reciprocal == orig(this.sqr3Reciprocal.field.sqr2Reciprocal)
this.sqr3Reciprocal.field.sqr3 == orig(this.sqr3Reciprocal.field.sqr3)
this.sqr3Reciprocal.field.sqr3Reciprocal == orig(this.sqr3Reciprocal.field.sqr3Reciprocal)
this.sqr3Reciprocal.field.pi == orig(this.sqr3Reciprocal.field.pi)
this.sqr3Reciprocal.field.piSplit == orig(this.sqr3Reciprocal.field.piSplit)
this.sqr3Reciprocal.field.piSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.piSplit.getClass().getName())
this.sqr3Reciprocal.field.piSplit[] == orig(this.sqr3Reciprocal.field.piSplit[])
this.sqr3Reciprocal.field.piSplit[].mant == orig(this.sqr3Reciprocal.field.piSplit[].mant)
this.sqr3Reciprocal.field.piSplit[].sign == orig(this.sqr3Reciprocal.field.piSplit[].sign)
this.sqr3Reciprocal.field.piSplit[].exp == orig(this.sqr3Reciprocal.field.piSplit[].exp)
this.sqr3Reciprocal.field.piSplit[].nans == orig(this.sqr3Reciprocal.field.piSplit[].nans)
this.sqr3Reciprocal.field.piSplit[].field == orig(this.sqr3Reciprocal.field.piSplit[].field)
this.sqr3Reciprocal.field.e == orig(this.sqr3Reciprocal.field.e)
this.sqr3Reciprocal.field.eSplit == orig(this.sqr3Reciprocal.field.eSplit)
this.sqr3Reciprocal.field.eSplit.getClass().getName() == orig(this.sqr3Reciprocal.field.eSplit.getClass().getName())
this.sqr3Reciprocal.field.eSplit[] == orig(this.sqr3Reciprocal.field.eSplit[])
this.sqr3Reciprocal.field.eSplit[].mant == orig(this.sqr3Reciprocal.field.eSplit[].mant)
this.sqr3Reciprocal.field.eSplit[].sign == orig(this.sqr3Reciprocal.field.eSplit[].sign)
this.sqr3Reciprocal.field.eSplit[].exp == orig(this.sqr3Reciprocal.field.eSplit[].exp)
this.sqr3Reciprocal.field.eSplit[].nans == orig(this.sqr3Reciprocal.field.eSplit[].nans)
this.sqr3Reciprocal.field.eSplit[].field == orig(this.sqr3Reciprocal.field.eSplit[].field)
this.sqr3Reciprocal.field.ln2 == orig(this.sqr3Reciprocal.field.ln2)
this.sqr3Reciprocal.field.ln2Split == orig(this.sqr3Reciprocal.field.ln2Split)
this.sqr3Reciprocal.field.ln2Split.getClass().getName() == orig(this.sqr3Reciprocal.field.ln2Split.getClass().getName())
this.sqr3Reciprocal.field.ln2Split[] == orig(this.sqr3Reciprocal.field.ln2Split[])
this.sqr3Reciprocal.field.ln2Split[].mant == orig(this.sqr3Reciprocal.field.ln2Split[].mant)
this.sqr3Reciprocal.field.ln2Split[].sign == orig(this.sqr3Reciprocal.field.ln2Split[].sign)
this.sqr3Reciprocal.field.ln2Split[].exp == orig(this.sqr3Reciprocal.field.ln2Split[].exp)
this.sqr3Reciprocal.field.ln2Split[].nans == orig(this.sqr3Reciprocal.field.ln2Split[].nans)
this.sqr3Reciprocal.field.ln2Split[].field == orig(this.sqr3Reciprocal.field.ln2Split[].field)
this.sqr3Reciprocal.field.ln5 == orig(this.sqr3Reciprocal.field.ln5)
this.sqr3Reciprocal.field.ln5Split == orig(this.sqr3Reciprocal.field.ln5Split)
this.sqr3Reciprocal.field.ln10 == orig(this.sqr3Reciprocal.field.ln10)
this.sqr3Reciprocal.field.rMode == orig(this.sqr3Reciprocal.field.rMode)
this.sqr3Reciprocal.field.ieeeFlags == orig(this.sqr3Reciprocal.field.ieeeFlags)
this.pi == orig(this.pi)
this.pi.mant == orig(this.pi.mant)
this.pi.mant[] == orig(this.pi.mant[])
this.pi.sign == orig(this.pi.sign)
this.pi.exp == orig(this.pi.exp)
this.pi.nans == orig(this.pi.nans)
this.pi.field == orig(this.pi.field)
this.pi.field.radixDigits == orig(this.pi.field.radixDigits)
this.pi.field.zero == orig(this.pi.field.zero)
this.pi.field.one == orig(this.pi.field.one)
this.pi.field.two == orig(this.pi.field.two)
this.pi.field.sqr2 == orig(this.pi.field.sqr2)
this.pi.field.sqr2Split == orig(this.pi.field.sqr2Split)
this.pi.field.sqr2Split.getClass().getName() == orig(this.pi.field.sqr2Split.getClass().getName())
this.pi.field.sqr2Split[] == orig(this.pi.field.sqr2Split[])
this.pi.field.sqr2Split[].mant == orig(this.pi.field.sqr2Split[].mant)
this.pi.field.sqr2Split[].sign == orig(this.pi.field.sqr2Split[].sign)
this.pi.field.sqr2Split[].exp == orig(this.pi.field.sqr2Split[].exp)
this.pi.field.sqr2Split[].nans == orig(this.pi.field.sqr2Split[].nans)
this.pi.field.sqr2Split[].field == orig(this.pi.field.sqr2Split[].field)
this.pi.field.sqr2Reciprocal == orig(this.pi.field.sqr2Reciprocal)
this.pi.field.sqr3 == orig(this.pi.field.sqr3)
this.pi.field.sqr3Reciprocal == orig(this.pi.field.sqr3Reciprocal)
this.pi.field.pi == orig(this.pi.field.pi)
this.pi.field.piSplit == orig(this.pi.field.piSplit)
this.pi.field.piSplit.getClass().getName() == orig(this.pi.field.piSplit.getClass().getName())
this.pi.field.piSplit[] == orig(this.pi.field.piSplit[])
this.pi.field.piSplit[].mant == orig(this.pi.field.piSplit[].mant)
this.pi.field.piSplit[].sign == orig(this.pi.field.piSplit[].sign)
this.pi.field.piSplit[].exp == orig(this.pi.field.piSplit[].exp)
this.pi.field.piSplit[].nans == orig(this.pi.field.piSplit[].nans)
this.pi.field.piSplit[].field == orig(this.pi.field.piSplit[].field)
this.pi.field.e == orig(this.pi.field.e)
this.pi.field.eSplit == orig(this.pi.field.eSplit)
this.pi.field.eSplit.getClass().getName() == orig(this.pi.field.eSplit.getClass().getName())
this.pi.field.eSplit[] == orig(this.pi.field.eSplit[])
this.pi.field.eSplit[].mant == orig(this.pi.field.eSplit[].mant)
this.pi.field.eSplit[].sign == orig(this.pi.field.eSplit[].sign)
this.pi.field.eSplit[].exp == orig(this.pi.field.eSplit[].exp)
this.pi.field.eSplit[].nans == orig(this.pi.field.eSplit[].nans)
this.pi.field.eSplit[].field == orig(this.pi.field.eSplit[].field)
this.pi.field.ln2 == orig(this.pi.field.ln2)
this.pi.field.ln2Split == orig(this.pi.field.ln2Split)
this.pi.field.ln2Split.getClass().getName() == orig(this.pi.field.ln2Split.getClass().getName())
this.pi.field.ln2Split[] == orig(this.pi.field.ln2Split[])
this.pi.field.ln2Split[].mant == orig(this.pi.field.ln2Split[].mant)
this.pi.field.ln2Split[].sign == orig(this.pi.field.ln2Split[].sign)
this.pi.field.ln2Split[].exp == orig(this.pi.field.ln2Split[].exp)
this.pi.field.ln2Split[].nans == orig(this.pi.field.ln2Split[].nans)
this.pi.field.ln2Split[].field == orig(this.pi.field.ln2Split[].field)
this.pi.field.ln5 == orig(this.pi.field.ln5)
this.pi.field.ln5Split == orig(this.pi.field.ln5Split)
this.pi.field.ln10 == orig(this.pi.field.ln10)
this.pi.field.rMode == orig(this.pi.field.rMode)
this.pi.field.ieeeFlags == orig(this.pi.field.ieeeFlags)
this.piSplit == orig(this.piSplit)
this.piSplit.getClass().getName() == orig(this.piSplit.getClass().getName())
this.piSplit[] == orig(this.piSplit[])
this.piSplit[].mant == orig(this.piSplit[].mant)
this.piSplit[].sign == orig(this.piSplit[].sign)
this.piSplit[].exp == orig(this.piSplit[].exp)
this.piSplit[].nans == orig(this.piSplit[].nans)
this.piSplit[].field == orig(this.piSplit[].field)
this.piSplit[].field.radixDigits == orig(this.piSplit[].field.radixDigits)
this.piSplit[].field.zero == orig(this.piSplit[].field.zero)
this.piSplit[].field.one == orig(this.piSplit[].field.one)
this.piSplit[].field.two == orig(this.piSplit[].field.two)
this.piSplit[].field.sqr2 == orig(this.piSplit[].field.sqr2)
this.piSplit[].field.sqr2Split == orig(this.piSplit[].field.sqr2Split)
this.piSplit[].field.sqr2Reciprocal == orig(this.piSplit[].field.sqr2Reciprocal)
this.piSplit[].field.sqr3 == orig(this.piSplit[].field.sqr3)
this.piSplit[].field.sqr3Reciprocal == orig(this.piSplit[].field.sqr3Reciprocal)
this.piSplit[].field.pi == orig(this.piSplit[].field.pi)
this.piSplit[].field.piSplit == orig(this.piSplit[].field.piSplit)
this.piSplit[].field.e == orig(this.piSplit[].field.e)
this.piSplit[].field.eSplit == orig(this.piSplit[].field.eSplit)
this.piSplit[].field.ln2 == orig(this.piSplit[].field.ln2)
this.piSplit[].field.ln2Split == orig(this.piSplit[].field.ln2Split)
this.piSplit[].field.ln5 == orig(this.piSplit[].field.ln5)
this.piSplit[].field.ln5Split == orig(this.piSplit[].field.ln5Split)
this.piSplit[].field.ln10 == orig(this.piSplit[].field.ln10)
this.piSplit[].field.rMode == orig(this.piSplit[].field.rMode)
this.piSplit[].field.ieeeFlags == orig(this.piSplit[].field.ieeeFlags)
this.e == orig(this.e)
this.e.mant == orig(this.e.mant)
this.e.mant[] == orig(this.e.mant[])
this.e.sign == orig(this.e.sign)
this.e.exp == orig(this.e.exp)
this.e.nans == orig(this.e.nans)
this.e.field == orig(this.e.field)
this.e.field.radixDigits == orig(this.e.field.radixDigits)
this.e.field.zero == orig(this.e.field.zero)
this.e.field.one == orig(this.e.field.one)
this.e.field.two == orig(this.e.field.two)
this.e.field.sqr2 == orig(this.e.field.sqr2)
this.e.field.sqr2Split == orig(this.e.field.sqr2Split)
this.e.field.sqr2Split.getClass().getName() == orig(this.e.field.sqr2Split.getClass().getName())
this.e.field.sqr2Split[] == orig(this.e.field.sqr2Split[])
this.e.field.sqr2Split[].mant == orig(this.e.field.sqr2Split[].mant)
this.e.field.sqr2Split[].sign == orig(this.e.field.sqr2Split[].sign)
this.e.field.sqr2Split[].exp == orig(this.e.field.sqr2Split[].exp)
this.e.field.sqr2Split[].nans == orig(this.e.field.sqr2Split[].nans)
this.e.field.sqr2Split[].field == orig(this.e.field.sqr2Split[].field)
this.e.field.sqr2Reciprocal == orig(this.e.field.sqr2Reciprocal)
this.e.field.sqr3 == orig(this.e.field.sqr3)
this.e.field.sqr3Reciprocal == orig(this.e.field.sqr3Reciprocal)
this.e.field.pi == orig(this.e.field.pi)
this.e.field.piSplit == orig(this.e.field.piSplit)
this.e.field.piSplit.getClass().getName() == orig(this.e.field.piSplit.getClass().getName())
this.e.field.piSplit[] == orig(this.e.field.piSplit[])
this.e.field.piSplit[].mant == orig(this.e.field.piSplit[].mant)
this.e.field.piSplit[].sign == orig(this.e.field.piSplit[].sign)
this.e.field.piSplit[].exp == orig(this.e.field.piSplit[].exp)
this.e.field.piSplit[].nans == orig(this.e.field.piSplit[].nans)
this.e.field.piSplit[].field == orig(this.e.field.piSplit[].field)
this.e.field.e == orig(this.e.field.e)
this.e.field.eSplit == orig(this.e.field.eSplit)
this.e.field.eSplit.getClass().getName() == orig(this.e.field.eSplit.getClass().getName())
this.e.field.eSplit[] == orig(this.e.field.eSplit[])
this.e.field.eSplit[].mant == orig(this.e.field.eSplit[].mant)
this.e.field.eSplit[].sign == orig(this.e.field.eSplit[].sign)
this.e.field.eSplit[].exp == orig(this.e.field.eSplit[].exp)
this.e.field.eSplit[].nans == orig(this.e.field.eSplit[].nans)
this.e.field.eSplit[].field == orig(this.e.field.eSplit[].field)
this.e.field.ln2 == orig(this.e.field.ln2)
this.e.field.ln2Split == orig(this.e.field.ln2Split)
this.e.field.ln2Split.getClass().getName() == orig(this.e.field.ln2Split.getClass().getName())
this.e.field.ln2Split[] == orig(this.e.field.ln2Split[])
this.e.field.ln2Split[].mant == orig(this.e.field.ln2Split[].mant)
this.e.field.ln2Split[].sign == orig(this.e.field.ln2Split[].sign)
this.e.field.ln2Split[].exp == orig(this.e.field.ln2Split[].exp)
this.e.field.ln2Split[].nans == orig(this.e.field.ln2Split[].nans)
this.e.field.ln2Split[].field == orig(this.e.field.ln2Split[].field)
this.e.field.ln5 == orig(this.e.field.ln5)
this.e.field.ln5Split == orig(this.e.field.ln5Split)
this.e.field.ln10 == orig(this.e.field.ln10)
this.e.field.rMode == orig(this.e.field.rMode)
this.e.field.ieeeFlags == orig(this.e.field.ieeeFlags)
this.eSplit == orig(this.eSplit)
this.eSplit.getClass().getName() == orig(this.eSplit.getClass().getName())
this.eSplit[] == orig(this.eSplit[])
this.eSplit[].mant == orig(this.eSplit[].mant)
this.eSplit[].sign == orig(this.eSplit[].sign)
this.eSplit[].exp == orig(this.eSplit[].exp)
this.eSplit[].nans == orig(this.eSplit[].nans)
this.eSplit[].field == orig(this.eSplit[].field)
this.eSplit[].field.radixDigits == orig(this.eSplit[].field.radixDigits)
this.eSplit[].field.zero == orig(this.eSplit[].field.zero)
this.eSplit[].field.one == orig(this.eSplit[].field.one)
this.eSplit[].field.two == orig(this.eSplit[].field.two)
this.eSplit[].field.sqr2 == orig(this.eSplit[].field.sqr2)
this.eSplit[].field.sqr2Split == orig(this.eSplit[].field.sqr2Split)
this.eSplit[].field.sqr2Reciprocal == orig(this.eSplit[].field.sqr2Reciprocal)
this.eSplit[].field.sqr3 == orig(this.eSplit[].field.sqr3)
this.eSplit[].field.sqr3Reciprocal == orig(this.eSplit[].field.sqr3Reciprocal)
this.eSplit[].field.pi == orig(this.eSplit[].field.pi)
this.eSplit[].field.piSplit == orig(this.eSplit[].field.piSplit)
this.eSplit[].field.e == orig(this.eSplit[].field.e)
this.eSplit[].field.eSplit == orig(this.eSplit[].field.eSplit)
this.eSplit[].field.ln2 == orig(this.eSplit[].field.ln2)
this.eSplit[].field.ln2Split == orig(this.eSplit[].field.ln2Split)
this.eSplit[].field.ln5 == orig(this.eSplit[].field.ln5)
this.eSplit[].field.ln5Split == orig(this.eSplit[].field.ln5Split)
this.eSplit[].field.ln10 == orig(this.eSplit[].field.ln10)
this.eSplit[].field.rMode == orig(this.eSplit[].field.rMode)
this.eSplit[].field.ieeeFlags == orig(this.eSplit[].field.ieeeFlags)
this.ln2 == orig(this.ln2)
this.ln2.mant == orig(this.ln2.mant)
this.ln2.mant[] == orig(this.ln2.mant[])
this.ln2.sign == orig(this.ln2.sign)
this.ln2.exp == orig(this.ln2.exp)
this.ln2.nans == orig(this.ln2.nans)
this.ln2.field == orig(this.ln2.field)
this.ln2.field.radixDigits == orig(this.ln2.field.radixDigits)
this.ln2.field.zero == orig(this.ln2.field.zero)
this.ln2.field.one == orig(this.ln2.field.one)
this.ln2.field.two == orig(this.ln2.field.two)
this.ln2.field.sqr2 == orig(this.ln2.field.sqr2)
this.ln2.field.sqr2Split == orig(this.ln2.field.sqr2Split)
this.ln2.field.sqr2Split.getClass().getName() == orig(this.ln2.field.sqr2Split.getClass().getName())
this.ln2.field.sqr2Split[] == orig(this.ln2.field.sqr2Split[])
this.ln2.field.sqr2Split[].mant == orig(this.ln2.field.sqr2Split[].mant)
this.ln2.field.sqr2Split[].sign == orig(this.ln2.field.sqr2Split[].sign)
this.ln2.field.sqr2Split[].exp == orig(this.ln2.field.sqr2Split[].exp)
this.ln2.field.sqr2Split[].nans == orig(this.ln2.field.sqr2Split[].nans)
this.ln2.field.sqr2Split[].field == orig(this.ln2.field.sqr2Split[].field)
this.ln2.field.sqr2Reciprocal == orig(this.ln2.field.sqr2Reciprocal)
this.ln2.field.sqr3 == orig(this.ln2.field.sqr3)
this.ln2.field.sqr3Reciprocal == orig(this.ln2.field.sqr3Reciprocal)
this.ln2.field.pi == orig(this.ln2.field.pi)
this.ln2.field.piSplit == orig(this.ln2.field.piSplit)
this.ln2.field.piSplit.getClass().getName() == orig(this.ln2.field.piSplit.getClass().getName())
this.ln2.field.piSplit[] == orig(this.ln2.field.piSplit[])
this.ln2.field.piSplit[].mant == orig(this.ln2.field.piSplit[].mant)
this.ln2.field.piSplit[].sign == orig(this.ln2.field.piSplit[].sign)
this.ln2.field.piSplit[].exp == orig(this.ln2.field.piSplit[].exp)
this.ln2.field.piSplit[].nans == orig(this.ln2.field.piSplit[].nans)
this.ln2.field.piSplit[].field == orig(this.ln2.field.piSplit[].field)
this.ln2.field.e == orig(this.ln2.field.e)
this.ln2.field.eSplit == orig(this.ln2.field.eSplit)
this.ln2.field.eSplit.getClass().getName() == orig(this.ln2.field.eSplit.getClass().getName())
this.ln2.field.eSplit[] == orig(this.ln2.field.eSplit[])
this.ln2.field.eSplit[].mant == orig(this.ln2.field.eSplit[].mant)
this.ln2.field.eSplit[].sign == orig(this.ln2.field.eSplit[].sign)
this.ln2.field.eSplit[].exp == orig(this.ln2.field.eSplit[].exp)
this.ln2.field.eSplit[].nans == orig(this.ln2.field.eSplit[].nans)
this.ln2.field.eSplit[].field == orig(this.ln2.field.eSplit[].field)
this.ln2.field.ln2 == orig(this.ln2.field.ln2)
this.ln2.field.ln2Split == orig(this.ln2.field.ln2Split)
this.ln2.field.ln2Split.getClass().getName() == orig(this.ln2.field.ln2Split.getClass().getName())
this.ln2.field.ln2Split[] == orig(this.ln2.field.ln2Split[])
this.ln2.field.ln2Split[].mant == orig(this.ln2.field.ln2Split[].mant)
this.ln2.field.ln2Split[].sign == orig(this.ln2.field.ln2Split[].sign)
this.ln2.field.ln2Split[].exp == orig(this.ln2.field.ln2Split[].exp)
this.ln2.field.ln2Split[].nans == orig(this.ln2.field.ln2Split[].nans)
this.ln2.field.ln2Split[].field == orig(this.ln2.field.ln2Split[].field)
this.ln2.field.ln5 == orig(this.ln2.field.ln5)
this.ln2.field.ln5Split == orig(this.ln2.field.ln5Split)
this.ln2.field.ln10 == orig(this.ln2.field.ln10)
this.ln2.field.rMode == orig(this.ln2.field.rMode)
this.ln2.field.ieeeFlags == orig(this.ln2.field.ieeeFlags)
this.ln2Split == orig(this.ln2Split)
this.ln2Split.getClass().getName() == orig(this.ln2Split.getClass().getName())
this.ln2Split[] == orig(this.ln2Split[])
this.ln2Split[].mant == orig(this.ln2Split[].mant)
this.ln2Split[].sign == orig(this.ln2Split[].sign)
this.ln2Split[].exp == orig(this.ln2Split[].exp)
this.ln2Split[].nans == orig(this.ln2Split[].nans)
this.ln2Split[].field == orig(this.ln2Split[].field)
this.ln2Split[].field.radixDigits == orig(this.ln2Split[].field.radixDigits)
this.ln2Split[].field.zero == orig(this.ln2Split[].field.zero)
this.ln2Split[].field.one == orig(this.ln2Split[].field.one)
this.ln2Split[].field.two == orig(this.ln2Split[].field.two)
this.ln2Split[].field.sqr2 == orig(this.ln2Split[].field.sqr2)
this.ln2Split[].field.sqr2Split == orig(this.ln2Split[].field.sqr2Split)
this.ln2Split[].field.sqr2Reciprocal == orig(this.ln2Split[].field.sqr2Reciprocal)
this.ln2Split[].field.sqr3 == orig(this.ln2Split[].field.sqr3)
this.ln2Split[].field.sqr3Reciprocal == orig(this.ln2Split[].field.sqr3Reciprocal)
this.ln2Split[].field.pi == orig(this.ln2Split[].field.pi)
this.ln2Split[].field.piSplit == orig(this.ln2Split[].field.piSplit)
this.ln2Split[].field.e == orig(this.ln2Split[].field.e)
this.ln2Split[].field.eSplit == orig(this.ln2Split[].field.eSplit)
this.ln2Split[].field.ln2 == orig(this.ln2Split[].field.ln2)
this.ln2Split[].field.ln2Split == orig(this.ln2Split[].field.ln2Split)
this.ln2Split[].field.ln5 == orig(this.ln2Split[].field.ln5)
this.ln2Split[].field.ln5Split == orig(this.ln2Split[].field.ln5Split)
this.ln2Split[].field.ln10 == orig(this.ln2Split[].field.ln10)
this.ln2Split[].field.rMode == orig(this.ln2Split[].field.rMode)
this.ln2Split[].field.ieeeFlags == orig(this.ln2Split[].field.ieeeFlags)
this.ln5 == orig(this.ln5)
this.ln5.mant == orig(this.ln5.mant)
this.ln5.mant[] == orig(this.ln5.mant[])
this.ln5.sign == orig(this.ln5.sign)
this.ln5.exp == orig(this.ln5.exp)
this.ln5.nans == orig(this.ln5.nans)
this.ln5.field == orig(this.ln5.field)
this.ln5.field.radixDigits == orig(this.ln5.field.radixDigits)
this.ln5.field.zero == orig(this.ln5.field.zero)
this.ln5.field.one == orig(this.ln5.field.one)
this.ln5.field.two == orig(this.ln5.field.two)
this.ln5.field.sqr2 == orig(this.ln5.field.sqr2)
this.ln5.field.sqr2Split == orig(this.ln5.field.sqr2Split)
this.ln5.field.sqr2Split.getClass().getName() == orig(this.ln5.field.sqr2Split.getClass().getName())
this.ln5.field.sqr2Split[] == orig(this.ln5.field.sqr2Split[])
this.ln5.field.sqr2Split[].mant == orig(this.ln5.field.sqr2Split[].mant)
this.ln5.field.sqr2Split[].sign == orig(this.ln5.field.sqr2Split[].sign)
this.ln5.field.sqr2Split[].exp == orig(this.ln5.field.sqr2Split[].exp)
this.ln5.field.sqr2Split[].nans == orig(this.ln5.field.sqr2Split[].nans)
this.ln5.field.sqr2Split[].field == orig(this.ln5.field.sqr2Split[].field)
this.ln5.field.sqr2Reciprocal == orig(this.ln5.field.sqr2Reciprocal)
this.ln5.field.sqr3 == orig(this.ln5.field.sqr3)
this.ln5.field.sqr3Reciprocal == orig(this.ln5.field.sqr3Reciprocal)
this.ln5.field.pi == orig(this.ln5.field.pi)
this.ln5.field.piSplit == orig(this.ln5.field.piSplit)
this.ln5.field.piSplit.getClass().getName() == orig(this.ln5.field.piSplit.getClass().getName())
this.ln5.field.piSplit[] == orig(this.ln5.field.piSplit[])
this.ln5.field.piSplit[].mant == orig(this.ln5.field.piSplit[].mant)
this.ln5.field.piSplit[].sign == orig(this.ln5.field.piSplit[].sign)
this.ln5.field.piSplit[].exp == orig(this.ln5.field.piSplit[].exp)
this.ln5.field.piSplit[].nans == orig(this.ln5.field.piSplit[].nans)
this.ln5.field.piSplit[].field == orig(this.ln5.field.piSplit[].field)
this.ln5.field.e == orig(this.ln5.field.e)
this.ln5.field.eSplit == orig(this.ln5.field.eSplit)
this.ln5.field.eSplit.getClass().getName() == orig(this.ln5.field.eSplit.getClass().getName())
this.ln5.field.eSplit[] == orig(this.ln5.field.eSplit[])
this.ln5.field.eSplit[].mant == orig(this.ln5.field.eSplit[].mant)
this.ln5.field.eSplit[].sign == orig(this.ln5.field.eSplit[].sign)
this.ln5.field.eSplit[].exp == orig(this.ln5.field.eSplit[].exp)
this.ln5.field.eSplit[].nans == orig(this.ln5.field.eSplit[].nans)
this.ln5.field.eSplit[].field == orig(this.ln5.field.eSplit[].field)
this.ln5.field.ln2 == orig(this.ln5.field.ln2)
this.ln5.field.ln2Split == orig(this.ln5.field.ln2Split)
this.ln5.field.ln2Split.getClass().getName() == orig(this.ln5.field.ln2Split.getClass().getName())
this.ln5.field.ln2Split[] == orig(this.ln5.field.ln2Split[])
this.ln5.field.ln2Split[].mant == orig(this.ln5.field.ln2Split[].mant)
this.ln5.field.ln2Split[].sign == orig(this.ln5.field.ln2Split[].sign)
this.ln5.field.ln2Split[].exp == orig(this.ln5.field.ln2Split[].exp)
this.ln5.field.ln2Split[].nans == orig(this.ln5.field.ln2Split[].nans)
this.ln5.field.ln2Split[].field == orig(this.ln5.field.ln2Split[].field)
this.ln5.field.ln5 == orig(this.ln5.field.ln5)
this.ln5.field.ln5Split == orig(this.ln5.field.ln5Split)
this.ln5.field.ln10 == orig(this.ln5.field.ln10)
this.ln5.field.rMode == orig(this.ln5.field.rMode)
this.ln5.field.ieeeFlags == orig(this.ln5.field.ieeeFlags)
this.ln5Split == orig(this.ln5Split)
this.ln10 == orig(this.ln10)
this.rMode == orig(this.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.ieeeFlags == orig(this.ieeeFlags)
a.toString == orig(a.toString)
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
this.radixDigits == 5
this.zero.mant[] == [0, 0, 0, 0, 0]
this.zero.field.radixDigits == 5
this.zero.field.ln5Split == null
this.zero.field.ln10 == null
this.zero.field.ieeeFlags == 16
this.one.mant[] == [0, 0, 0, 0, 1]
this.one.field.radixDigits == 5
this.one.field.ln5Split == null
this.one.field.ln10 == null
this.one.field.ieeeFlags == 16
this.two.mant[] == [0, 0, 0, 0, 2]
this.two.field.radixDigits == 5
this.two.field.ln5Split == null
this.two.field.ln10 == null
this.two.field.ieeeFlags == 16
this.sqr2.field.ln5Split == null
this.sqr2.field.ln10 == null
this.sqr2.field.ieeeFlags == 16
this.sqr2Split[].field.ln5Split contains only nulls and has only one value, of length 2
this.sqr2Split[].field.ln5Split elements == null
this.sqr2Split[].field.ln5Split.getClass().getName() == [null, null]
this.sqr2Split[].field.ln5Split.getClass().getName() elements == null
this.sqr2Split[].field.ln10 contains only nulls and has only one value, of length 2
this.sqr2Split[].field.ln10 elements == null
this.sqr2Split[].field.ieeeFlags == [16, 16]
this.sqr2Split[].field.ieeeFlags elements == 16
this.sqr2Reciprocal.field.ln5Split == null
this.sqr2Reciprocal.field.ln10 == null
this.sqr2Reciprocal.field.ieeeFlags == 16
this.sqr3.field.ln5Split == null
this.sqr3.field.ln10 == null
this.sqr3.field.ieeeFlags == 16
this.sqr3Reciprocal.field.ln5Split == null
this.sqr3Reciprocal.field.ln10 == null
this.sqr3Reciprocal.field.ieeeFlags == 16
this.pi.field.ln5Split == null
this.pi.field.ln10 == null
this.pi.field.ieeeFlags == 16
this.piSplit[].field.ln5Split contains only nulls and has only one value, of length 2
this.piSplit[].field.ln5Split elements == null
this.piSplit[].field.ln5Split.getClass().getName() == [null, null]
this.piSplit[].field.ln5Split.getClass().getName() elements == null
this.piSplit[].field.ln10 contains only nulls and has only one value, of length 2
this.piSplit[].field.ln10 elements == null
this.piSplit[].field.ieeeFlags == [16, 16]
this.piSplit[].field.ieeeFlags elements == 16
this.e.field.ln5Split == null
this.e.field.ln10 == null
this.e.field.ieeeFlags == 16
this.eSplit[].field.ln5Split contains only nulls and has only one value, of length 2
this.eSplit[].field.ln5Split elements == null
this.eSplit[].field.ln5Split.getClass().getName() == [null, null]
this.eSplit[].field.ln5Split.getClass().getName() elements == null
this.eSplit[].field.ln10 contains only nulls and has only one value, of length 2
this.eSplit[].field.ln10 elements == null
this.eSplit[].field.ieeeFlags == [16, 16]
this.eSplit[].field.ieeeFlags elements == 16
this.ln2.field.ln5Split == null
this.ln2.field.ln10 == null
this.ln2.field.ieeeFlags == 16
this.ln2Split[].field.ln5Split contains only nulls and has only one value, of length 2
this.ln2Split[].field.ln5Split elements == null
this.ln2Split[].field.ln5Split.getClass().getName() == [null, null]
this.ln2Split[].field.ln5Split.getClass().getName() elements == null
this.ln2Split[].field.ln10 contains only nulls and has only one value, of length 2
this.ln2Split[].field.ln10 elements == null
this.ln2Split[].field.ieeeFlags == [16, 16]
this.ln2Split[].field.ieeeFlags elements == 16
this.ln5.field.ln5Split == null
this.ln5.field.ln10 == null
this.ln5.field.ieeeFlags == 16
this.ln5Split == null
this.ln10 == null
this.ieeeFlags == 16
return.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return[].sign == [1, 1]
return[].sign elements == 1
return[].exp one of { [0, -2], [1, -1] }
return[].exp elements <= 1
return[].exp sorted by >
return[].nans == [0, 0]
return[].nans elements == 0
return[].field elements are equal
return[].field.radixDigits == [5, 5]
return[].field.radixDigits elements == 5
return[].field.zero elements are equal
return[].field.one elements are equal
return[].field.two elements are equal
return[].field.sqr2 elements are equal
return[].field.sqr2Split elements are equal
return[].field.sqr2Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
return[].field.sqr2Reciprocal elements are equal
return[].field.sqr3 elements are equal
return[].field.sqr3Reciprocal elements are equal
return[].field.pi elements are equal
return[].field.piSplit elements are equal
return[].field.piSplit.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
return[].field.e elements are equal
return[].field.eSplit elements are equal
return[].field.eSplit.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
return[].field.ln2 elements are equal
return[].field.ln2Split elements are equal
return[].field.ln2Split.getClass().getName() one of { [null, null], [org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]] }
return[].field.ln5 elements are equal
return[].field.ln5Split contains only nulls and has only one value, of length 2
return[].field.ln5Split elements == null
return[].field.ln5Split.getClass().getName() == [null, null]
return[].field.ln5Split.getClass().getName() elements == null
return[].field.ln10 contains only nulls and has only one value, of length 2
return[].field.ln10 elements == null
return[].field.rMode contains no nulls and has only one value, of length 2
return[].field.rMode elements has only one value
return[].field.ieeeFlags == [16, 16]
return[].field.ieeeFlags elements == 16
size(this.zero.mant[]) == 5
size(this.one.mant[]) == 5
size(this.two.mant[]) == 5
size(return[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpMath:::CLASS
org.apache.commons.math3.dfp.DfpMath.POW_TRAP has only one value
org.apache.commons.math3.dfp.DfpMath.POW_TRAP.toString == "pow"
===========================================================================
org.apache.commons.math3.dfp.DfpMath.pow(org.apache.commons.math3.dfp.Dfp, int):::ENTER
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
base.mant[] == [0, 0, 0, 0, 2]
base.mant[] elements one of { 0, 2 }
base.mant[] sorted by <=
base.sign == 1
base.exp == 1
base.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
base.field.radixDigits == 5
base.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.sqr2Split[] elements != null
base.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.sqr2Split[].sign == [1, 1]
base.field.sqr2Split[].sign elements == 1
base.field.sqr2Split[].exp == [1, -1]
base.field.sqr2Split[].exp elements one of { -1, 1 }
base.field.sqr2Split[].exp elements != 0
base.field.sqr2Split[].exp sorted by >
base.field.sqr2Split[].nans == [0, 0]
base.field.sqr2Split[].nans elements == 0
base.field.sqr2Split[].field elements != null
base.field.sqr2Split[].field elements are equal
base.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.piSplit[] elements != null
base.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.piSplit[].mant sorted by <
base.field.piSplit[].sign == [1, 1]
base.field.piSplit[].sign elements == 1
base.field.piSplit[].exp == [1, -1]
base.field.piSplit[].exp elements one of { -1, 1 }
base.field.piSplit[].exp elements != 0
base.field.piSplit[].exp sorted by >
base.field.piSplit[].nans == [0, 0]
base.field.piSplit[].nans elements == 0
base.field.piSplit[].field elements != null
base.field.piSplit[].field elements are equal
base.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.eSplit[] elements != null
base.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.eSplit[].sign == [1, 1]
base.field.eSplit[].sign elements == 1
base.field.eSplit[].exp == [1, -1]
base.field.eSplit[].exp elements one of { -1, 1 }
base.field.eSplit[].exp elements != 0
base.field.eSplit[].exp sorted by >
base.field.eSplit[].nans == [0, 0]
base.field.eSplit[].nans elements == 0
base.field.eSplit[].field elements != null
base.field.eSplit[].field elements are equal
base.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.ln2Split[] elements != null
base.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.ln2Split[].mant sorted by >
base.field.ln2Split[].sign == [1, 1]
base.field.ln2Split[].sign elements == 1
base.field.ln2Split[].exp == [0, -2]
base.field.ln2Split[].exp elements one of { -2, 0 }
base.field.ln2Split[].exp sorted by >
base.field.ln2Split[].nans == [0, 0]
base.field.ln2Split[].nans elements == 0
base.field.ln2Split[].field elements != null
base.field.ln2Split[].field elements are equal
base.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.ln5Split[] elements != null
base.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.ln5Split[].mant sorted by >
base.field.ln5Split[].sign == [1, 1]
base.field.ln5Split[].sign elements == 1
base.field.ln5Split[].exp == [1, -1]
base.field.ln5Split[].exp elements one of { -1, 1 }
base.field.ln5Split[].exp elements != 0
base.field.ln5Split[].exp sorted by >
base.field.ln5Split[].nans == [0, 0]
base.field.ln5Split[].nans elements == 0
base.field.ln5Split[].field elements != null
base.field.ln5Split[].field elements are equal
base.field.rMode has only one value
base.field.ieeeFlags == 16
size(base.mant[]) == 5
size(base.field.sqr2Split[]) == 2
size(base.field.piSplit[]) == 2
size(base.field.eSplit[]) == 2
size(base.field.ln2Split[]) == 2
size(base.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpMath.pow(org.apache.commons.math3.dfp.Dfp, int):::EXIT219
return.mant[] == [0, 0, 0, 0, 1]
return.mant[] elements one of { 0, 1 }
return.mant[] sorted by <=
return.exp == 1
orig(a) == 0
===========================================================================
org.apache.commons.math3.dfp.DfpMath.pow(org.apache.commons.math3.dfp.Dfp, int):::EXIT253
===========================================================================
org.apache.commons.math3.dfp.DfpMath.pow(org.apache.commons.math3.dfp.Dfp, int):::EXIT
org.apache.commons.math3.dfp.DfpMath.POW_TRAP == orig(org.apache.commons.math3.dfp.DfpMath.POW_TRAP)
org.apache.commons.math3.dfp.DfpMath.POW_TRAP.toString == orig(org.apache.commons.math3.dfp.DfpMath.POW_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
base.mant == orig(base.mant)
base.mant[] == orig(base.mant[])
base.sign == orig(base.sign)
base.exp == orig(base.exp)
base.nans == orig(base.nans)
base.field == orig(base.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
base.field.radixDigits == orig(base.field.radixDigits)
base.field.zero == orig(base.field.zero)
base.field.one == orig(base.field.one)
base.field.two == orig(base.field.two)
base.field.sqr2 == orig(base.field.sqr2)
base.field.sqr2Split == orig(base.field.sqr2Split)
base.field.sqr2Split.getClass().getName() == orig(base.field.sqr2Split.getClass().getName())
base.field.sqr2Split[] == orig(base.field.sqr2Split[])
base.field.sqr2Split[].mant == orig(base.field.sqr2Split[].mant)
base.field.sqr2Split[].sign == orig(base.field.sqr2Split[].sign)
base.field.sqr2Split[].exp == orig(base.field.sqr2Split[].exp)
base.field.sqr2Split[].nans == orig(base.field.sqr2Split[].nans)
base.field.sqr2Split[].field == orig(base.field.sqr2Split[].field)
base.field.sqr2Reciprocal == orig(base.field.sqr2Reciprocal)
base.field.sqr3 == orig(base.field.sqr3)
base.field.sqr3Reciprocal == orig(base.field.sqr3Reciprocal)
base.field.pi == orig(base.field.pi)
base.field.piSplit == orig(base.field.piSplit)
base.field.piSplit.getClass().getName() == orig(base.field.piSplit.getClass().getName())
base.field.piSplit[] == orig(base.field.piSplit[])
base.field.piSplit[].mant == orig(base.field.piSplit[].mant)
base.field.piSplit[].sign == orig(base.field.piSplit[].sign)
base.field.piSplit[].exp == orig(base.field.piSplit[].exp)
base.field.piSplit[].nans == orig(base.field.piSplit[].nans)
base.field.piSplit[].field == orig(base.field.piSplit[].field)
base.field.e == orig(base.field.e)
base.field.eSplit == orig(base.field.eSplit)
base.field.eSplit.getClass().getName() == orig(base.field.eSplit.getClass().getName())
base.field.eSplit[] == orig(base.field.eSplit[])
base.field.eSplit[].mant == orig(base.field.eSplit[].mant)
base.field.eSplit[].sign == orig(base.field.eSplit[].sign)
base.field.eSplit[].exp == orig(base.field.eSplit[].exp)
base.field.eSplit[].nans == orig(base.field.eSplit[].nans)
base.field.eSplit[].field == orig(base.field.eSplit[].field)
base.field.ln2 == orig(base.field.ln2)
base.field.ln2Split == orig(base.field.ln2Split)
base.field.ln2Split.getClass().getName() == orig(base.field.ln2Split.getClass().getName())
base.field.ln2Split[] == orig(base.field.ln2Split[])
base.field.ln2Split[].mant == orig(base.field.ln2Split[].mant)
base.field.ln2Split[].sign == orig(base.field.ln2Split[].sign)
base.field.ln2Split[].exp == orig(base.field.ln2Split[].exp)
base.field.ln2Split[].nans == orig(base.field.ln2Split[].nans)
base.field.ln2Split[].field == orig(base.field.ln2Split[].field)
base.field.ln5 == orig(base.field.ln5)
base.field.ln5Split == orig(base.field.ln5Split)
base.field.ln5Split.getClass().getName() == orig(base.field.ln5Split.getClass().getName())
base.field.ln5Split[] == orig(base.field.ln5Split[])
base.field.ln5Split[].mant == orig(base.field.ln5Split[].mant)
base.field.ln5Split[].sign == orig(base.field.ln5Split[].sign)
base.field.ln5Split[].exp == orig(base.field.ln5Split[].exp)
base.field.ln5Split[].nans == orig(base.field.ln5Split[].nans)
base.field.ln5Split[].field == orig(base.field.ln5Split[].field)
base.field.ln10 == orig(base.field.ln10)
base.field.rMode == orig(base.field.rMode)
base.field.ieeeFlags == orig(base.field.ieeeFlags)
(a != orig(a))  ==>  (a % orig(a) == 0)
(a != orig(a))  ==>  (return.exp one of { -1, 0, 1 })
(a == orig(a))  ==>  (orig(a) == 0)
(a == orig(a))  ==>  (return.exp == 1)
(a == orig(a))  ==>  (return.mant[] == [0, 0, 0, 0, 1])
(a == orig(a))  ==>  (return.mant[] elements one of { 0, 1 })
(a == orig(a))  ==>  (return.mant[] sorted by <=)
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
base.mant[] == [0, 0, 0, 0, 2]
base.mant[] elements one of { 0, 2 }
base.mant[] sorted by <=
base.sign == 1
base.exp == 1
base.nans == 0
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
base.field.radixDigits == 5
base.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.sqr2Split[] elements != null
base.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.sqr2Split[].sign == [1, 1]
base.field.sqr2Split[].sign elements == 1
base.field.sqr2Split[].exp == [1, -1]
base.field.sqr2Split[].exp elements one of { -1, 1 }
base.field.sqr2Split[].exp elements != 0
base.field.sqr2Split[].exp sorted by >
base.field.sqr2Split[].nans == [0, 0]
base.field.sqr2Split[].nans elements == 0
base.field.sqr2Split[].field elements != null
base.field.sqr2Split[].field elements are equal
base.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.piSplit[] elements != null
base.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.piSplit[].mant sorted by <
base.field.piSplit[].sign == [1, 1]
base.field.piSplit[].sign elements == 1
base.field.piSplit[].exp == [1, -1]
base.field.piSplit[].exp elements one of { -1, 1 }
base.field.piSplit[].exp elements != 0
base.field.piSplit[].exp sorted by >
base.field.piSplit[].nans == [0, 0]
base.field.piSplit[].nans elements == 0
base.field.piSplit[].field elements != null
base.field.piSplit[].field elements are equal
base.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.eSplit[] elements != null
base.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.eSplit[].sign == [1, 1]
base.field.eSplit[].sign elements == 1
base.field.eSplit[].exp == [1, -1]
base.field.eSplit[].exp elements one of { -1, 1 }
base.field.eSplit[].exp elements != 0
base.field.eSplit[].exp sorted by >
base.field.eSplit[].nans == [0, 0]
base.field.eSplit[].nans elements == 0
base.field.eSplit[].field elements != null
base.field.eSplit[].field elements are equal
base.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.ln2Split[] elements != null
base.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.ln2Split[].mant sorted by >
base.field.ln2Split[].sign == [1, 1]
base.field.ln2Split[].sign elements == 1
base.field.ln2Split[].exp == [0, -2]
base.field.ln2Split[].exp elements one of { -2, 0 }
base.field.ln2Split[].exp sorted by >
base.field.ln2Split[].nans == [0, 0]
base.field.ln2Split[].nans elements == 0
base.field.ln2Split[].field elements != null
base.field.ln2Split[].field elements are equal
base.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
base.field.ln5Split[] elements != null
base.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
base.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
base.field.ln5Split[].mant sorted by >
base.field.ln5Split[].sign == [1, 1]
base.field.ln5Split[].sign elements == 1
base.field.ln5Split[].exp == [1, -1]
base.field.ln5Split[].exp elements one of { -1, 1 }
base.field.ln5Split[].exp elements != 0
base.field.ln5Split[].exp sorted by >
base.field.ln5Split[].nans == [0, 0]
base.field.ln5Split[].nans elements == 0
base.field.ln5Split[].field elements != null
base.field.ln5Split[].field elements are equal
base.field.rMode has only one value
base.field.ieeeFlags == 16
return.mant[] elements >= 0
return.sign == 1
return.exp one of { -1, 0, 1 }
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags == 16
size(base.mant[]) == 5
size(base.field.sqr2Split[]) == 2
size(base.field.piSplit[]) == 2
size(base.field.eSplit[]) == 2
size(base.field.ln2Split[]) == 2
size(base.field.ln5Split[]) == 2
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpTest:::OBJECT
org.apache.commons.math3.dfp.DfpField.sqr2String has only one value
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820606"
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103027147"
org.apache.commons.math3.dfp.DfpField.sqr3String has only one value
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232"
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString has only one value
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == "0.57735026918962576450914878050195745564760175127012687601860232648397767230293334569371539558574952522520871380513556767665664836499965082627055183736479121617603107730076852735599160670036155830777668"
org.apache.commons.math3.dfp.DfpField.piString has only one value
org.apache.commons.math3.dfp.DfpField.piString.toString == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549309"
org.apache.commons.math3.dfp.DfpField.eString has only one value
org.apache.commons.math3.dfp.DfpField.eString.toString == "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251"
org.apache.commons.math3.dfp.DfpField.ln2String has only one value
org.apache.commons.math3.dfp.DfpField.ln2String.toString == "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112326"
org.apache.commons.math3.dfp.DfpField.ln5String has only one value
org.apache.commons.math3.dfp.DfpField.ln5String.toString == "1.6094379124341003746007593332261876395256013542685177219126478914741789877076577646301338780931796107999663030217155628997240052293246761996336166174637057275521796374971832456534928562023415250573"
org.apache.commons.math3.dfp.DfpField.ln10String has only one value
org.apache.commons.math3.dfp.DfpField.ln10String.toString == "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985304"
this.field.radixDigits == 5
org.apache.commons.math3.dfp.Dfp.NAN_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == "NaN"
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == "Infinity"
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING has only one value
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == "-Infinity"
org.apache.commons.math3.dfp.Dfp.ADD_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == "add"
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == "multiply"
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == "divide"
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == "sqrt"
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == "align"
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == "trunc"
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == "nextAfter"
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == "lessThan"
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == "greaterThan"
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP has only one value
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == "newInstance"
this.field.zero.mant[] == [0, 0, 0, 0, 0]
this.field.zero.mant[] elements == 0
this.field.zero.sign == 1
this.field.zero.exp == 0
this.field.zero.nans == 0
this.field.one.mant[] == [0, 0, 0, 0, 1]
this.field.one.mant[] elements one of { 0, 1 }
this.field.one.mant[] sorted by <=
this.field.one.sign == 1
this.field.one.exp == 1
this.field.one.nans == 0
this.field.two.mant[] == [0, 0, 0, 0, 2]
this.field.two.mant[] elements one of { 0, 2 }
this.field.two.mant[] sorted by <=
this.field.two.sign == 1
this.field.two.exp == 1
this.field.two.nans == 0
this.field.sqr2.mant[] == [950, 2373, 1356, 4142, 1]
this.field.sqr2.mant[] elements >= 1
this.field.sqr2.sign == 1
this.field.sqr2.exp == 1
this.field.sqr2.nans == 0
this.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.sqr2Split[] elements != null
this.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.sqr2Split[].sign == [1, 1]
this.field.sqr2Split[].sign elements == 1
this.field.sqr2Split[].exp == [1, -1]
this.field.sqr2Split[].exp elements one of { -1, 1 }
this.field.sqr2Split[].exp elements != 0
this.field.sqr2Split[].exp sorted by >
this.field.sqr2Split[].nans == [0, 0]
this.field.sqr2Split[].nans elements == 0
this.field.sqr2Split[].field elements != null
this.field.sqr2Split[].field elements are equal
this.field.sqr2Reciprocal.mant[] == [2440, 5475, 1186, 678, 7071]
this.field.sqr2Reciprocal.sign == 1
this.field.sqr2Reciprocal.exp == 0
this.field.sqr2Reciprocal.nans == 0
this.field.sqr3.mant[] == [8773, 7568, 5080, 7320, 1]
this.field.sqr3.mant[] elements >= 1
this.field.sqr3.sign == 1
this.field.sqr3.exp == 1
this.field.sqr3.nans == 0
this.field.sqr3Reciprocal.mant[] == [6451, 6257, 9189, 5026, 5773]
this.field.sqr3Reciprocal.sign == 1
this.field.sqr3Reciprocal.exp == 0
this.field.sqr3Reciprocal.nans == 0
this.field.pi.mant[] == [7932, 3589, 9265, 1415, 3]
this.field.pi.sign == 1
this.field.pi.exp == 1
this.field.pi.nans == 0
this.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.piSplit[] elements != null
this.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.piSplit[].mant sorted by <
this.field.piSplit[].sign == [1, 1]
this.field.piSplit[].sign elements == 1
this.field.piSplit[].exp == [1, -1]
this.field.piSplit[].exp elements one of { -1, 1 }
this.field.piSplit[].exp elements != 0
this.field.piSplit[].exp sorted by >
this.field.piSplit[].nans == [0, 0]
this.field.piSplit[].nans elements == 0
this.field.piSplit[].field elements != null
this.field.piSplit[].field elements are equal
this.field.e.mant[] == [452, 8459, 8182, 7182, 2]
this.field.e.mant[] elements >= 2
this.field.e.sign == 1
this.field.e.exp == 1
this.field.e.nans == 0
this.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.eSplit[] elements != null
this.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.eSplit[].sign == [1, 1]
this.field.eSplit[].sign elements == 1
this.field.eSplit[].exp == [1, -1]
this.field.eSplit[].exp elements one of { -1, 1 }
this.field.eSplit[].exp elements != 0
this.field.eSplit[].exp sorted by >
this.field.eSplit[].nans == [0, 0]
this.field.eSplit[].nans elements == 0
this.field.eSplit[].field elements != null
this.field.eSplit[].field elements are equal
this.field.ln2.mant[] == [942, 9453, 559, 4718, 6931]
this.field.ln2.sign == 1
this.field.ln2.exp == 0
this.field.ln2.nans == 0
this.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.ln2Split[] elements != null
this.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.ln2Split[].mant sorted by >
this.field.ln2Split[].sign == [1, 1]
this.field.ln2Split[].sign elements == 1
this.field.ln2Split[].exp == [0, -2]
this.field.ln2Split[].exp elements one of { -2, 0 }
this.field.ln2Split[].exp sorted by >
this.field.ln2Split[].nans == [0, 0]
this.field.ln2Split[].nans elements == 0
this.field.ln2Split[].field elements != null
this.field.ln2Split[].field elements are equal
this.field.ln5.mant[] == [1004, 2434, 3791, 6094, 1]
this.field.ln5.mant[] elements >= 1
this.field.ln5.sign == 1
this.field.ln5.exp == 1
this.field.ln5.nans == 0
this.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.field.ln5Split[] elements != null
this.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.field.ln5Split[].mant sorted by >
this.field.ln5Split[].sign == [1, 1]
this.field.ln5Split[].sign elements == 1
this.field.ln5Split[].exp == [1, -1]
this.field.ln5Split[].exp elements one of { -1, 1 }
this.field.ln5Split[].exp elements != 0
this.field.ln5Split[].exp sorted by >
this.field.ln5Split[].nans == [0, 0]
this.field.ln5Split[].nans elements == 0
this.field.ln5Split[].field elements != null
this.field.ln5Split[].field elements are equal
this.field.ln10.mant[] == [457, 2994, 8509, 3025, 2]
this.field.ln10.mant[] elements >= 2
this.field.ln10.sign == 1
this.field.ln10.exp == 1
this.field.ln10.nans == 0
this.field.rMode has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES has only one value
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == org.apache.commons.math3.dfp.DfpField$RoundingMode[].class
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] contains no nulls and has only one value, of length 8
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] elements != null
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode, org.apache.commons.math3.dfp.DfpField.RoundingMode]
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.dfp.DfpField.RoundingMode.class
this.field.ieeeFlags one of { 0, 16 }
this.pinf.mant[] == [0, 0, 0, 0, 0]
this.pinf.mant[] elements == 0
this.pinf.sign == 1
this.pinf.exp == 0
this.pinf.nans == 1
this.pinf.field.radixDigits == 5
this.pinf.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pinf.field.sqr2Split[] elements != null
this.pinf.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pinf.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pinf.field.sqr2Split[].sign == [1, 1]
this.pinf.field.sqr2Split[].sign elements == 1
this.pinf.field.sqr2Split[].exp == [1, -1]
this.pinf.field.sqr2Split[].exp elements one of { -1, 1 }
this.pinf.field.sqr2Split[].exp elements != 0
this.pinf.field.sqr2Split[].exp sorted by >
this.pinf.field.sqr2Split[].nans == [0, 0]
this.pinf.field.sqr2Split[].nans elements == 0
this.pinf.field.sqr2Split[].field elements != null
this.pinf.field.sqr2Split[].field elements are equal
this.pinf.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pinf.field.piSplit[] elements != null
this.pinf.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pinf.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pinf.field.piSplit[].mant sorted by <
this.pinf.field.piSplit[].sign == [1, 1]
this.pinf.field.piSplit[].sign elements == 1
this.pinf.field.piSplit[].exp == [1, -1]
this.pinf.field.piSplit[].exp elements one of { -1, 1 }
this.pinf.field.piSplit[].exp elements != 0
this.pinf.field.piSplit[].exp sorted by >
this.pinf.field.piSplit[].nans == [0, 0]
this.pinf.field.piSplit[].nans elements == 0
this.pinf.field.piSplit[].field elements != null
this.pinf.field.piSplit[].field elements are equal
this.pinf.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pinf.field.eSplit[] elements != null
this.pinf.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pinf.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pinf.field.eSplit[].sign == [1, 1]
this.pinf.field.eSplit[].sign elements == 1
this.pinf.field.eSplit[].exp == [1, -1]
this.pinf.field.eSplit[].exp elements one of { -1, 1 }
this.pinf.field.eSplit[].exp elements != 0
this.pinf.field.eSplit[].exp sorted by >
this.pinf.field.eSplit[].nans == [0, 0]
this.pinf.field.eSplit[].nans elements == 0
this.pinf.field.eSplit[].field elements != null
this.pinf.field.eSplit[].field elements are equal
this.pinf.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pinf.field.ln2Split[] elements != null
this.pinf.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pinf.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pinf.field.ln2Split[].mant sorted by >
this.pinf.field.ln2Split[].sign == [1, 1]
this.pinf.field.ln2Split[].sign elements == 1
this.pinf.field.ln2Split[].exp == [0, -2]
this.pinf.field.ln2Split[].exp elements one of { -2, 0 }
this.pinf.field.ln2Split[].exp sorted by >
this.pinf.field.ln2Split[].nans == [0, 0]
this.pinf.field.ln2Split[].nans elements == 0
this.pinf.field.ln2Split[].field elements != null
this.pinf.field.ln2Split[].field elements are equal
this.pinf.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.pinf.field.ln5Split[] elements != null
this.pinf.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.pinf.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.pinf.field.ln5Split[].mant sorted by >
this.pinf.field.ln5Split[].sign == [1, 1]
this.pinf.field.ln5Split[].sign elements == 1
this.pinf.field.ln5Split[].exp == [1, -1]
this.pinf.field.ln5Split[].exp elements one of { -1, 1 }
this.pinf.field.ln5Split[].exp elements != 0
this.pinf.field.ln5Split[].exp sorted by >
this.pinf.field.ln5Split[].nans == [0, 0]
this.pinf.field.ln5Split[].nans elements == 0
this.pinf.field.ln5Split[].field elements != null
this.pinf.field.ln5Split[].field elements are equal
this.pinf.field.rMode has only one value
this.pinf.field.ieeeFlags one of { 0, 16 }
this.ninf.mant[] == [0, 0, 0, 0, 0]
this.ninf.mant[] elements == 0
this.ninf.sign == -1
this.ninf.exp == 0
this.ninf.nans == 1
this.ninf.field.radixDigits == 5
this.ninf.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ninf.field.sqr2Split[] elements != null
this.ninf.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ninf.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ninf.field.sqr2Split[].sign == [1, 1]
this.ninf.field.sqr2Split[].sign elements == 1
this.ninf.field.sqr2Split[].exp == [1, -1]
this.ninf.field.sqr2Split[].exp elements one of { -1, 1 }
this.ninf.field.sqr2Split[].exp elements != 0
this.ninf.field.sqr2Split[].exp sorted by >
this.ninf.field.sqr2Split[].nans == [0, 0]
this.ninf.field.sqr2Split[].nans elements == 0
this.ninf.field.sqr2Split[].field elements != null
this.ninf.field.sqr2Split[].field elements are equal
this.ninf.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ninf.field.piSplit[] elements != null
this.ninf.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ninf.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ninf.field.piSplit[].mant sorted by <
this.ninf.field.piSplit[].sign == [1, 1]
this.ninf.field.piSplit[].sign elements == 1
this.ninf.field.piSplit[].exp == [1, -1]
this.ninf.field.piSplit[].exp elements one of { -1, 1 }
this.ninf.field.piSplit[].exp elements != 0
this.ninf.field.piSplit[].exp sorted by >
this.ninf.field.piSplit[].nans == [0, 0]
this.ninf.field.piSplit[].nans elements == 0
this.ninf.field.piSplit[].field elements != null
this.ninf.field.piSplit[].field elements are equal
this.ninf.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ninf.field.eSplit[] elements != null
this.ninf.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ninf.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ninf.field.eSplit[].sign == [1, 1]
this.ninf.field.eSplit[].sign elements == 1
this.ninf.field.eSplit[].exp == [1, -1]
this.ninf.field.eSplit[].exp elements one of { -1, 1 }
this.ninf.field.eSplit[].exp elements != 0
this.ninf.field.eSplit[].exp sorted by >
this.ninf.field.eSplit[].nans == [0, 0]
this.ninf.field.eSplit[].nans elements == 0
this.ninf.field.eSplit[].field elements != null
this.ninf.field.eSplit[].field elements are equal
this.ninf.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ninf.field.ln2Split[] elements != null
this.ninf.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ninf.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ninf.field.ln2Split[].mant sorted by >
this.ninf.field.ln2Split[].sign == [1, 1]
this.ninf.field.ln2Split[].sign elements == 1
this.ninf.field.ln2Split[].exp == [0, -2]
this.ninf.field.ln2Split[].exp elements one of { -2, 0 }
this.ninf.field.ln2Split[].exp sorted by >
this.ninf.field.ln2Split[].nans == [0, 0]
this.ninf.field.ln2Split[].nans elements == 0
this.ninf.field.ln2Split[].field elements != null
this.ninf.field.ln2Split[].field elements are equal
this.ninf.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.ninf.field.ln5Split[] elements != null
this.ninf.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.ninf.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.ninf.field.ln5Split[].mant sorted by >
this.ninf.field.ln5Split[].sign == [1, 1]
this.ninf.field.ln5Split[].sign elements == 1
this.ninf.field.ln5Split[].exp == [1, -1]
this.ninf.field.ln5Split[].exp elements one of { -1, 1 }
this.ninf.field.ln5Split[].exp elements != 0
this.ninf.field.ln5Split[].exp sorted by >
this.ninf.field.ln5Split[].nans == [0, 0]
this.ninf.field.ln5Split[].nans elements == 0
this.ninf.field.ln5Split[].field elements != null
this.ninf.field.ln5Split[].field elements are equal
this.ninf.field.rMode has only one value
this.ninf.field.ieeeFlags one of { 0, 16 }
this.nan.mant[] == [0, 0, 0, 0, 0]
this.nan.mant[] elements == 0
this.nan.sign == 1
this.nan.exp == 0
this.nan.nans == 3
this.nan.field.radixDigits == 5
this.nan.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.nan.field.sqr2Split[] elements != null
this.nan.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.nan.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.nan.field.sqr2Split[].sign == [1, 1]
this.nan.field.sqr2Split[].sign elements == 1
this.nan.field.sqr2Split[].exp == [1, -1]
this.nan.field.sqr2Split[].exp elements one of { -1, 1 }
this.nan.field.sqr2Split[].exp elements != 0
this.nan.field.sqr2Split[].exp sorted by >
this.nan.field.sqr2Split[].nans == [0, 0]
this.nan.field.sqr2Split[].nans elements == 0
this.nan.field.sqr2Split[].field elements != null
this.nan.field.sqr2Split[].field elements are equal
this.nan.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.nan.field.piSplit[] elements != null
this.nan.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.nan.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.nan.field.piSplit[].mant sorted by <
this.nan.field.piSplit[].sign == [1, 1]
this.nan.field.piSplit[].sign elements == 1
this.nan.field.piSplit[].exp == [1, -1]
this.nan.field.piSplit[].exp elements one of { -1, 1 }
this.nan.field.piSplit[].exp elements != 0
this.nan.field.piSplit[].exp sorted by >
this.nan.field.piSplit[].nans == [0, 0]
this.nan.field.piSplit[].nans elements == 0
this.nan.field.piSplit[].field elements != null
this.nan.field.piSplit[].field elements are equal
this.nan.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.nan.field.eSplit[] elements != null
this.nan.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.nan.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.nan.field.eSplit[].sign == [1, 1]
this.nan.field.eSplit[].sign elements == 1
this.nan.field.eSplit[].exp == [1, -1]
this.nan.field.eSplit[].exp elements one of { -1, 1 }
this.nan.field.eSplit[].exp elements != 0
this.nan.field.eSplit[].exp sorted by >
this.nan.field.eSplit[].nans == [0, 0]
this.nan.field.eSplit[].nans elements == 0
this.nan.field.eSplit[].field elements != null
this.nan.field.eSplit[].field elements are equal
this.nan.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.nan.field.ln2Split[] elements != null
this.nan.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.nan.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.nan.field.ln2Split[].mant sorted by >
this.nan.field.ln2Split[].sign == [1, 1]
this.nan.field.ln2Split[].sign elements == 1
this.nan.field.ln2Split[].exp == [0, -2]
this.nan.field.ln2Split[].exp elements one of { -2, 0 }
this.nan.field.ln2Split[].exp sorted by >
this.nan.field.ln2Split[].nans == [0, 0]
this.nan.field.ln2Split[].nans elements == 0
this.nan.field.ln2Split[].field elements != null
this.nan.field.ln2Split[].field elements are equal
this.nan.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.nan.field.ln5Split[] elements != null
this.nan.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.nan.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.nan.field.ln5Split[].mant sorted by >
this.nan.field.ln5Split[].sign == [1, 1]
this.nan.field.ln5Split[].sign elements == 1
this.nan.field.ln5Split[].exp == [1, -1]
this.nan.field.ln5Split[].exp elements one of { -1, 1 }
this.nan.field.ln5Split[].exp elements != 0
this.nan.field.ln5Split[].exp sorted by >
this.nan.field.ln5Split[].nans == [0, 0]
this.nan.field.ln5Split[].nans elements == 0
this.nan.field.ln5Split[].field elements != null
this.nan.field.ln5Split[].field elements are equal
this.nan.field.rMode has only one value
this.nan.field.ieeeFlags one of { 0, 16 }
this.snan.mant[] == [0, 0, 0, 0, 0]
this.snan.mant[] elements == 0
this.snan.sign == 1
this.snan.exp == 0
this.snan.nans == 2
this.snan.field.radixDigits == 5
this.snan.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.snan.field.sqr2Split[] elements != null
this.snan.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.snan.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.snan.field.sqr2Split[].sign == [1, 1]
this.snan.field.sqr2Split[].sign elements == 1
this.snan.field.sqr2Split[].exp == [1, -1]
this.snan.field.sqr2Split[].exp elements one of { -1, 1 }
this.snan.field.sqr2Split[].exp elements != 0
this.snan.field.sqr2Split[].exp sorted by >
this.snan.field.sqr2Split[].nans == [0, 0]
this.snan.field.sqr2Split[].nans elements == 0
this.snan.field.sqr2Split[].field elements != null
this.snan.field.sqr2Split[].field elements are equal
this.snan.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.snan.field.piSplit[] elements != null
this.snan.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.snan.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.snan.field.piSplit[].mant sorted by <
this.snan.field.piSplit[].sign == [1, 1]
this.snan.field.piSplit[].sign elements == 1
this.snan.field.piSplit[].exp == [1, -1]
this.snan.field.piSplit[].exp elements one of { -1, 1 }
this.snan.field.piSplit[].exp elements != 0
this.snan.field.piSplit[].exp sorted by >
this.snan.field.piSplit[].nans == [0, 0]
this.snan.field.piSplit[].nans elements == 0
this.snan.field.piSplit[].field elements != null
this.snan.field.piSplit[].field elements are equal
this.snan.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.snan.field.eSplit[] elements != null
this.snan.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.snan.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.snan.field.eSplit[].sign == [1, 1]
this.snan.field.eSplit[].sign elements == 1
this.snan.field.eSplit[].exp == [1, -1]
this.snan.field.eSplit[].exp elements one of { -1, 1 }
this.snan.field.eSplit[].exp elements != 0
this.snan.field.eSplit[].exp sorted by >
this.snan.field.eSplit[].nans == [0, 0]
this.snan.field.eSplit[].nans elements == 0
this.snan.field.eSplit[].field elements != null
this.snan.field.eSplit[].field elements are equal
this.snan.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.snan.field.ln2Split[] elements != null
this.snan.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.snan.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.snan.field.ln2Split[].mant sorted by >
this.snan.field.ln2Split[].sign == [1, 1]
this.snan.field.ln2Split[].sign elements == 1
this.snan.field.ln2Split[].exp == [0, -2]
this.snan.field.ln2Split[].exp elements one of { -2, 0 }
this.snan.field.ln2Split[].exp sorted by >
this.snan.field.ln2Split[].nans == [0, 0]
this.snan.field.ln2Split[].nans elements == 0
this.snan.field.ln2Split[].field elements != null
this.snan.field.ln2Split[].field elements are equal
this.snan.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.snan.field.ln5Split[] elements != null
this.snan.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.snan.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.snan.field.ln5Split[].mant sorted by >
this.snan.field.ln5Split[].sign == [1, 1]
this.snan.field.ln5Split[].sign elements == 1
this.snan.field.ln5Split[].exp == [1, -1]
this.snan.field.ln5Split[].exp elements one of { -1, 1 }
this.snan.field.ln5Split[].exp elements != 0
this.snan.field.ln5Split[].exp sorted by >
this.snan.field.ln5Split[].nans == [0, 0]
this.snan.field.ln5Split[].nans elements == 0
this.snan.field.ln5Split[].field elements != null
this.snan.field.ln5Split[].field elements are equal
this.snan.field.rMode has only one value
this.snan.field.ieeeFlags one of { 0, 16 }
this.qnan.mant[] == [0, 0, 0, 0, 0]
this.qnan.mant[] elements == 0
this.qnan.sign == 1
this.qnan.exp == 0
this.qnan.nans == 3
this.qnan.field.radixDigits == 5
this.qnan.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.qnan.field.sqr2Split[] elements != null
this.qnan.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.qnan.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.qnan.field.sqr2Split[].sign == [1, 1]
this.qnan.field.sqr2Split[].sign elements == 1
this.qnan.field.sqr2Split[].exp == [1, -1]
this.qnan.field.sqr2Split[].exp elements one of { -1, 1 }
this.qnan.field.sqr2Split[].exp elements != 0
this.qnan.field.sqr2Split[].exp sorted by >
this.qnan.field.sqr2Split[].nans == [0, 0]
this.qnan.field.sqr2Split[].nans elements == 0
this.qnan.field.sqr2Split[].field elements != null
this.qnan.field.sqr2Split[].field elements are equal
this.qnan.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.qnan.field.piSplit[] elements != null
this.qnan.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.qnan.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.qnan.field.piSplit[].mant sorted by <
this.qnan.field.piSplit[].sign == [1, 1]
this.qnan.field.piSplit[].sign elements == 1
this.qnan.field.piSplit[].exp == [1, -1]
this.qnan.field.piSplit[].exp elements one of { -1, 1 }
this.qnan.field.piSplit[].exp elements != 0
this.qnan.field.piSplit[].exp sorted by >
this.qnan.field.piSplit[].nans == [0, 0]
this.qnan.field.piSplit[].nans elements == 0
this.qnan.field.piSplit[].field elements != null
this.qnan.field.piSplit[].field elements are equal
this.qnan.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.qnan.field.eSplit[] elements != null
this.qnan.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.qnan.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.qnan.field.eSplit[].sign == [1, 1]
this.qnan.field.eSplit[].sign elements == 1
this.qnan.field.eSplit[].exp == [1, -1]
this.qnan.field.eSplit[].exp elements one of { -1, 1 }
this.qnan.field.eSplit[].exp elements != 0
this.qnan.field.eSplit[].exp sorted by >
this.qnan.field.eSplit[].nans == [0, 0]
this.qnan.field.eSplit[].nans elements == 0
this.qnan.field.eSplit[].field elements != null
this.qnan.field.eSplit[].field elements are equal
this.qnan.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.qnan.field.ln2Split[] elements != null
this.qnan.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.qnan.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.qnan.field.ln2Split[].mant sorted by >
this.qnan.field.ln2Split[].sign == [1, 1]
this.qnan.field.ln2Split[].sign elements == 1
this.qnan.field.ln2Split[].exp == [0, -2]
this.qnan.field.ln2Split[].exp elements one of { -2, 0 }
this.qnan.field.ln2Split[].exp sorted by >
this.qnan.field.ln2Split[].nans == [0, 0]
this.qnan.field.ln2Split[].nans elements == 0
this.qnan.field.ln2Split[].field elements != null
this.qnan.field.ln2Split[].field elements are equal
this.qnan.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
this.qnan.field.ln5Split[] elements != null
this.qnan.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
this.qnan.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
this.qnan.field.ln5Split[].mant sorted by >
this.qnan.field.ln5Split[].sign == [1, 1]
this.qnan.field.ln5Split[].sign elements == 1
this.qnan.field.ln5Split[].exp == [1, -1]
this.qnan.field.ln5Split[].exp elements one of { -1, 1 }
this.qnan.field.ln5Split[].exp elements != 0
this.qnan.field.ln5Split[].exp sorted by >
this.qnan.field.ln5Split[].nans == [0, 0]
this.qnan.field.ln5Split[].nans elements == 0
this.qnan.field.ln5Split[].field elements != null
this.qnan.field.ln5Split[].field elements are equal
this.qnan.field.rMode has only one value
this.qnan.field.ieeeFlags one of { 0, 16 }
size(this.field.zero.mant[]) == 5
size(this.field.one.mant[]) == 5
size(this.field.two.mant[]) == 5
size(this.field.sqr2.mant[]) == 5
size(this.field.sqr2Split[]) == 2
size(this.field.sqr2Reciprocal.mant[]) == 5
size(this.field.sqr3.mant[]) == 5
size(this.field.sqr3Reciprocal.mant[]) == 5
size(this.field.pi.mant[]) == 5
size(this.field.piSplit[]) == 2
size(this.field.e.mant[]) == 5
size(this.field.eSplit[]) == 2
size(this.field.ln2.mant[]) == 5
size(this.field.ln2Split[]) == 2
size(this.field.ln5.mant[]) == 5
size(this.field.ln5Split[]) == 2
size(this.field.ln10.mant[]) == 5
size(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) == 8
size(this.pinf.mant[]) == 5
size(this.pinf.field.sqr2Split[]) == 2
size(this.pinf.field.piSplit[]) == 2
size(this.pinf.field.eSplit[]) == 2
size(this.pinf.field.ln2Split[]) == 2
size(this.pinf.field.ln5Split[]) == 2
size(this.ninf.mant[]) == 5
size(this.ninf.field.sqr2Split[]) == 2
size(this.ninf.field.piSplit[]) == 2
size(this.ninf.field.eSplit[]) == 2
size(this.ninf.field.ln2Split[]) == 2
size(this.ninf.field.ln5Split[]) == 2
size(this.nan.mant[]) == 5
size(this.nan.field.sqr2Split[]) == 2
size(this.nan.field.piSplit[]) == 2
size(this.nan.field.eSplit[]) == 2
size(this.nan.field.ln2Split[]) == 2
size(this.nan.field.ln5Split[]) == 2
size(this.snan.mant[]) == 5
size(this.snan.field.sqr2Split[]) == 2
size(this.snan.field.piSplit[]) == 2
size(this.snan.field.eSplit[]) == 2
size(this.snan.field.ln2Split[]) == 2
size(this.snan.field.ln5Split[]) == 2
size(this.qnan.mant[]) == 5
size(this.qnan.field.sqr2Split[]) == 2
size(this.qnan.field.piSplit[]) == 2
size(this.qnan.field.eSplit[]) == 2
size(this.qnan.field.ln2Split[]) == 2
size(this.qnan.field.ln5Split[]) == 2
===========================================================================
org.apache.commons.math3.dfp.DfpTest.DfpTest():::EXIT
this.field == null
this.pinf == null
this.ninf == null
this.nan == null
this.snan == null
this.qnan == null
===========================================================================
org.apache.commons.math3.dfp.DfpTest.build(double):::ENTER
===========================================================================
org.apache.commons.math3.dfp.DfpTest.build(double):::EXIT
this.field == orig(this.field)
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
this.field.radixDigits == orig(this.field.radixDigits)
this.field.zero == orig(this.field.zero)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
this.field.zero.mant == orig(this.field.zero.mant)
this.field.zero.mant[] == orig(this.field.zero.mant[])
this.field.zero.sign == orig(this.field.zero.sign)
this.field.zero.exp == orig(this.field.zero.exp)
this.field.zero.nans == orig(this.field.zero.nans)
this.field.zero.field == orig(this.field.zero.field)
this.field.one == orig(this.field.one)
this.field.one.mant == orig(this.field.one.mant)
this.field.one.mant[] == orig(this.field.one.mant[])
this.field.one.sign == orig(this.field.one.sign)
this.field.one.exp == orig(this.field.one.exp)
this.field.one.nans == orig(this.field.one.nans)
this.field.one.field == orig(this.field.one.field)
this.field.two == orig(this.field.two)
this.field.two.mant == orig(this.field.two.mant)
this.field.two.mant[] == orig(this.field.two.mant[])
this.field.two.sign == orig(this.field.two.sign)
this.field.two.exp == orig(this.field.two.exp)
this.field.two.nans == orig(this.field.two.nans)
this.field.two.field == orig(this.field.two.field)
this.field.sqr2 == orig(this.field.sqr2)
this.field.sqr2.mant == orig(this.field.sqr2.mant)
this.field.sqr2.mant[] == orig(this.field.sqr2.mant[])
this.field.sqr2.sign == orig(this.field.sqr2.sign)
this.field.sqr2.exp == orig(this.field.sqr2.exp)
this.field.sqr2.nans == orig(this.field.sqr2.nans)
this.field.sqr2.field == orig(this.field.sqr2.field)
this.field.sqr2Split == orig(this.field.sqr2Split)
this.field.sqr2Split.getClass().getName() == orig(this.field.sqr2Split.getClass().getName())
this.field.sqr2Split[] == orig(this.field.sqr2Split[])
this.field.sqr2Split[].mant == orig(this.field.sqr2Split[].mant)
this.field.sqr2Split[].sign == orig(this.field.sqr2Split[].sign)
this.field.sqr2Split[].exp == orig(this.field.sqr2Split[].exp)
this.field.sqr2Split[].nans == orig(this.field.sqr2Split[].nans)
this.field.sqr2Split[].field == orig(this.field.sqr2Split[].field)
this.field.sqr2Reciprocal == orig(this.field.sqr2Reciprocal)
this.field.sqr2Reciprocal.mant == orig(this.field.sqr2Reciprocal.mant)
this.field.sqr2Reciprocal.mant[] == orig(this.field.sqr2Reciprocal.mant[])
this.field.sqr2Reciprocal.sign == orig(this.field.sqr2Reciprocal.sign)
this.field.sqr2Reciprocal.exp == orig(this.field.sqr2Reciprocal.exp)
this.field.sqr2Reciprocal.nans == orig(this.field.sqr2Reciprocal.nans)
this.field.sqr2Reciprocal.field == orig(this.field.sqr2Reciprocal.field)
this.field.sqr3 == orig(this.field.sqr3)
this.field.sqr3.mant == orig(this.field.sqr3.mant)
this.field.sqr3.mant[] == orig(this.field.sqr3.mant[])
this.field.sqr3.sign == orig(this.field.sqr3.sign)
this.field.sqr3.exp == orig(this.field.sqr3.exp)
this.field.sqr3.nans == orig(this.field.sqr3.nans)
this.field.sqr3.field == orig(this.field.sqr3.field)
this.field.sqr3Reciprocal == orig(this.field.sqr3Reciprocal)
this.field.sqr3Reciprocal.mant == orig(this.field.sqr3Reciprocal.mant)
this.field.sqr3Reciprocal.mant[] == orig(this.field.sqr3Reciprocal.mant[])
this.field.sqr3Reciprocal.sign == orig(this.field.sqr3Reciprocal.sign)
this.field.sqr3Reciprocal.exp == orig(this.field.sqr3Reciprocal.exp)
this.field.sqr3Reciprocal.nans == orig(this.field.sqr3Reciprocal.nans)
this.field.sqr3Reciprocal.field == orig(this.field.sqr3Reciprocal.field)
this.field.pi == orig(this.field.pi)
this.field.pi.mant == orig(this.field.pi.mant)
this.field.pi.mant[] == orig(this.field.pi.mant[])
this.field.pi.sign == orig(this.field.pi.sign)
this.field.pi.exp == orig(this.field.pi.exp)
this.field.pi.nans == orig(this.field.pi.nans)
this.field.pi.field == orig(this.field.pi.field)
this.field.piSplit == orig(this.field.piSplit)
this.field.piSplit.getClass().getName() == orig(this.field.piSplit.getClass().getName())
this.field.piSplit[] == orig(this.field.piSplit[])
this.field.piSplit[].mant == orig(this.field.piSplit[].mant)
this.field.piSplit[].sign == orig(this.field.piSplit[].sign)
this.field.piSplit[].exp == orig(this.field.piSplit[].exp)
this.field.piSplit[].nans == orig(this.field.piSplit[].nans)
this.field.piSplit[].field == orig(this.field.piSplit[].field)
this.field.e == orig(this.field.e)
this.field.e.mant == orig(this.field.e.mant)
this.field.e.mant[] == orig(this.field.e.mant[])
this.field.e.sign == orig(this.field.e.sign)
this.field.e.exp == orig(this.field.e.exp)
this.field.e.nans == orig(this.field.e.nans)
this.field.e.field == orig(this.field.e.field)
this.field.eSplit == orig(this.field.eSplit)
this.field.eSplit.getClass().getName() == orig(this.field.eSplit.getClass().getName())
this.field.eSplit[] == orig(this.field.eSplit[])
this.field.eSplit[].mant == orig(this.field.eSplit[].mant)
this.field.eSplit[].sign == orig(this.field.eSplit[].sign)
this.field.eSplit[].exp == orig(this.field.eSplit[].exp)
this.field.eSplit[].nans == orig(this.field.eSplit[].nans)
this.field.eSplit[].field == orig(this.field.eSplit[].field)
this.field.ln2 == orig(this.field.ln2)
this.field.ln2.mant == orig(this.field.ln2.mant)
this.field.ln2.mant[] == orig(this.field.ln2.mant[])
this.field.ln2.sign == orig(this.field.ln2.sign)
this.field.ln2.exp == orig(this.field.ln2.exp)
this.field.ln2.nans == orig(this.field.ln2.nans)
this.field.ln2.field == orig(this.field.ln2.field)
this.field.ln2Split == orig(this.field.ln2Split)
this.field.ln2Split.getClass().getName() == orig(this.field.ln2Split.getClass().getName())
this.field.ln2Split[] == orig(this.field.ln2Split[])
this.field.ln2Split[].mant == orig(this.field.ln2Split[].mant)
this.field.ln2Split[].sign == orig(this.field.ln2Split[].sign)
this.field.ln2Split[].exp == orig(this.field.ln2Split[].exp)
this.field.ln2Split[].nans == orig(this.field.ln2Split[].nans)
this.field.ln2Split[].field == orig(this.field.ln2Split[].field)
this.field.ln5 == orig(this.field.ln5)
this.field.ln5.mant == orig(this.field.ln5.mant)
this.field.ln5.mant[] == orig(this.field.ln5.mant[])
this.field.ln5.sign == orig(this.field.ln5.sign)
this.field.ln5.exp == orig(this.field.ln5.exp)
this.field.ln5.nans == orig(this.field.ln5.nans)
this.field.ln5.field == orig(this.field.ln5.field)
this.field.ln5Split == orig(this.field.ln5Split)
this.field.ln5Split.getClass().getName() == orig(this.field.ln5Split.getClass().getName())
this.field.ln5Split[] == orig(this.field.ln5Split[])
this.field.ln5Split[].mant == orig(this.field.ln5Split[].mant)
this.field.ln5Split[].sign == orig(this.field.ln5Split[].sign)
this.field.ln5Split[].exp == orig(this.field.ln5Split[].exp)
this.field.ln5Split[].nans == orig(this.field.ln5Split[].nans)
this.field.ln5Split[].field == orig(this.field.ln5Split[].field)
this.field.ln10 == orig(this.field.ln10)
this.field.ln10.mant == orig(this.field.ln10.mant)
this.field.ln10.mant[] == orig(this.field.ln10.mant[])
this.field.ln10.sign == orig(this.field.ln10.sign)
this.field.ln10.exp == orig(this.field.ln10.exp)
this.field.ln10.nans == orig(this.field.ln10.nans)
this.field.ln10.field == orig(this.field.ln10.field)
this.field.rMode == orig(this.field.rMode)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.pinf == orig(this.pinf)
this.pinf.mant == orig(this.pinf.mant)
this.pinf.mant[] == orig(this.pinf.mant[])
this.pinf.sign == orig(this.pinf.sign)
this.pinf.exp == orig(this.pinf.exp)
this.pinf.nans == orig(this.pinf.nans)
this.pinf.field == orig(this.pinf.field)
this.pinf.field.radixDigits == orig(this.pinf.field.radixDigits)
this.pinf.field.zero == orig(this.pinf.field.zero)
this.pinf.field.one == orig(this.pinf.field.one)
this.pinf.field.two == orig(this.pinf.field.two)
this.pinf.field.sqr2 == orig(this.pinf.field.sqr2)
this.pinf.field.sqr2Split == orig(this.pinf.field.sqr2Split)
this.pinf.field.sqr2Split.getClass().getName() == orig(this.pinf.field.sqr2Split.getClass().getName())
this.pinf.field.sqr2Split[] == orig(this.pinf.field.sqr2Split[])
this.pinf.field.sqr2Split[].mant == orig(this.pinf.field.sqr2Split[].mant)
this.pinf.field.sqr2Split[].sign == orig(this.pinf.field.sqr2Split[].sign)
this.pinf.field.sqr2Split[].exp == orig(this.pinf.field.sqr2Split[].exp)
this.pinf.field.sqr2Split[].nans == orig(this.pinf.field.sqr2Split[].nans)
this.pinf.field.sqr2Split[].field == orig(this.pinf.field.sqr2Split[].field)
this.pinf.field.sqr2Reciprocal == orig(this.pinf.field.sqr2Reciprocal)
this.pinf.field.sqr3 == orig(this.pinf.field.sqr3)
this.pinf.field.sqr3Reciprocal == orig(this.pinf.field.sqr3Reciprocal)
this.pinf.field.pi == orig(this.pinf.field.pi)
this.pinf.field.piSplit == orig(this.pinf.field.piSplit)
this.pinf.field.piSplit.getClass().getName() == orig(this.pinf.field.piSplit.getClass().getName())
this.pinf.field.piSplit[] == orig(this.pinf.field.piSplit[])
this.pinf.field.piSplit[].mant == orig(this.pinf.field.piSplit[].mant)
this.pinf.field.piSplit[].sign == orig(this.pinf.field.piSplit[].sign)
this.pinf.field.piSplit[].exp == orig(this.pinf.field.piSplit[].exp)
this.pinf.field.piSplit[].nans == orig(this.pinf.field.piSplit[].nans)
this.pinf.field.piSplit[].field == orig(this.pinf.field.piSplit[].field)
this.pinf.field.e == orig(this.pinf.field.e)
this.pinf.field.eSplit == orig(this.pinf.field.eSplit)
this.pinf.field.eSplit.getClass().getName() == orig(this.pinf.field.eSplit.getClass().getName())
this.pinf.field.eSplit[] == orig(this.pinf.field.eSplit[])
this.pinf.field.eSplit[].mant == orig(this.pinf.field.eSplit[].mant)
this.pinf.field.eSplit[].sign == orig(this.pinf.field.eSplit[].sign)
this.pinf.field.eSplit[].exp == orig(this.pinf.field.eSplit[].exp)
this.pinf.field.eSplit[].nans == orig(this.pinf.field.eSplit[].nans)
this.pinf.field.eSplit[].field == orig(this.pinf.field.eSplit[].field)
this.pinf.field.ln2 == orig(this.pinf.field.ln2)
this.pinf.field.ln2Split == orig(this.pinf.field.ln2Split)
this.pinf.field.ln2Split.getClass().getName() == orig(this.pinf.field.ln2Split.getClass().getName())
this.pinf.field.ln2Split[] == orig(this.pinf.field.ln2Split[])
this.pinf.field.ln2Split[].mant == orig(this.pinf.field.ln2Split[].mant)
this.pinf.field.ln2Split[].sign == orig(this.pinf.field.ln2Split[].sign)
this.pinf.field.ln2Split[].exp == orig(this.pinf.field.ln2Split[].exp)
this.pinf.field.ln2Split[].nans == orig(this.pinf.field.ln2Split[].nans)
this.pinf.field.ln2Split[].field == orig(this.pinf.field.ln2Split[].field)
this.pinf.field.ln5 == orig(this.pinf.field.ln5)
this.pinf.field.ln5Split == orig(this.pinf.field.ln5Split)
this.pinf.field.ln5Split.getClass().getName() == orig(this.pinf.field.ln5Split.getClass().getName())
this.pinf.field.ln5Split[] == orig(this.pinf.field.ln5Split[])
this.pinf.field.ln5Split[].mant == orig(this.pinf.field.ln5Split[].mant)
this.pinf.field.ln5Split[].sign == orig(this.pinf.field.ln5Split[].sign)
this.pinf.field.ln5Split[].exp == orig(this.pinf.field.ln5Split[].exp)
this.pinf.field.ln5Split[].nans == orig(this.pinf.field.ln5Split[].nans)
this.pinf.field.ln5Split[].field == orig(this.pinf.field.ln5Split[].field)
this.pinf.field.ln10 == orig(this.pinf.field.ln10)
this.pinf.field.rMode == orig(this.pinf.field.rMode)
this.ninf == orig(this.ninf)
this.ninf.mant == orig(this.ninf.mant)
this.ninf.mant[] == orig(this.ninf.mant[])
this.ninf.sign == orig(this.ninf.sign)
this.ninf.exp == orig(this.ninf.exp)
this.ninf.nans == orig(this.ninf.nans)
this.ninf.field == orig(this.ninf.field)
this.ninf.field.radixDigits == orig(this.ninf.field.radixDigits)
this.ninf.field.zero == orig(this.ninf.field.zero)
this.ninf.field.one == orig(this.ninf.field.one)
this.ninf.field.two == orig(this.ninf.field.two)
this.ninf.field.sqr2 == orig(this.ninf.field.sqr2)
this.ninf.field.sqr2Split == orig(this.ninf.field.sqr2Split)
this.ninf.field.sqr2Split.getClass().getName() == orig(this.ninf.field.sqr2Split.getClass().getName())
this.ninf.field.sqr2Split[] == orig(this.ninf.field.sqr2Split[])
this.ninf.field.sqr2Split[].mant == orig(this.ninf.field.sqr2Split[].mant)
this.ninf.field.sqr2Split[].sign == orig(this.ninf.field.sqr2Split[].sign)
this.ninf.field.sqr2Split[].exp == orig(this.ninf.field.sqr2Split[].exp)
this.ninf.field.sqr2Split[].nans == orig(this.ninf.field.sqr2Split[].nans)
this.ninf.field.sqr2Split[].field == orig(this.ninf.field.sqr2Split[].field)
this.ninf.field.sqr2Reciprocal == orig(this.ninf.field.sqr2Reciprocal)
this.ninf.field.sqr3 == orig(this.ninf.field.sqr3)
this.ninf.field.sqr3Reciprocal == orig(this.ninf.field.sqr3Reciprocal)
this.ninf.field.pi == orig(this.ninf.field.pi)
this.ninf.field.piSplit == orig(this.ninf.field.piSplit)
this.ninf.field.piSplit.getClass().getName() == orig(this.ninf.field.piSplit.getClass().getName())
this.ninf.field.piSplit[] == orig(this.ninf.field.piSplit[])
this.ninf.field.piSplit[].mant == orig(this.ninf.field.piSplit[].mant)
this.ninf.field.piSplit[].sign == orig(this.ninf.field.piSplit[].sign)
this.ninf.field.piSplit[].exp == orig(this.ninf.field.piSplit[].exp)
this.ninf.field.piSplit[].nans == orig(this.ninf.field.piSplit[].nans)
this.ninf.field.piSplit[].field == orig(this.ninf.field.piSplit[].field)
this.ninf.field.e == orig(this.ninf.field.e)
this.ninf.field.eSplit == orig(this.ninf.field.eSplit)
this.ninf.field.eSplit.getClass().getName() == orig(this.ninf.field.eSplit.getClass().getName())
this.ninf.field.eSplit[] == orig(this.ninf.field.eSplit[])
this.ninf.field.eSplit[].mant == orig(this.ninf.field.eSplit[].mant)
this.ninf.field.eSplit[].sign == orig(this.ninf.field.eSplit[].sign)
this.ninf.field.eSplit[].exp == orig(this.ninf.field.eSplit[].exp)
this.ninf.field.eSplit[].nans == orig(this.ninf.field.eSplit[].nans)
this.ninf.field.eSplit[].field == orig(this.ninf.field.eSplit[].field)
this.ninf.field.ln2 == orig(this.ninf.field.ln2)
this.ninf.field.ln2Split == orig(this.ninf.field.ln2Split)
this.ninf.field.ln2Split.getClass().getName() == orig(this.ninf.field.ln2Split.getClass().getName())
this.ninf.field.ln2Split[] == orig(this.ninf.field.ln2Split[])
this.ninf.field.ln2Split[].mant == orig(this.ninf.field.ln2Split[].mant)
this.ninf.field.ln2Split[].sign == orig(this.ninf.field.ln2Split[].sign)
this.ninf.field.ln2Split[].exp == orig(this.ninf.field.ln2Split[].exp)
this.ninf.field.ln2Split[].nans == orig(this.ninf.field.ln2Split[].nans)
this.ninf.field.ln2Split[].field == orig(this.ninf.field.ln2Split[].field)
this.ninf.field.ln5 == orig(this.ninf.field.ln5)
this.ninf.field.ln5Split == orig(this.ninf.field.ln5Split)
this.ninf.field.ln5Split.getClass().getName() == orig(this.ninf.field.ln5Split.getClass().getName())
this.ninf.field.ln5Split[] == orig(this.ninf.field.ln5Split[])
this.ninf.field.ln5Split[].mant == orig(this.ninf.field.ln5Split[].mant)
this.ninf.field.ln5Split[].sign == orig(this.ninf.field.ln5Split[].sign)
this.ninf.field.ln5Split[].exp == orig(this.ninf.field.ln5Split[].exp)
this.ninf.field.ln5Split[].nans == orig(this.ninf.field.ln5Split[].nans)
this.ninf.field.ln5Split[].field == orig(this.ninf.field.ln5Split[].field)
this.ninf.field.ln10 == orig(this.ninf.field.ln10)
this.ninf.field.rMode == orig(this.ninf.field.rMode)
this.nan == orig(this.nan)
this.nan.mant == orig(this.nan.mant)
this.nan.mant[] == orig(this.nan.mant[])
this.nan.sign == orig(this.nan.sign)
this.nan.exp == orig(this.nan.exp)
this.nan.nans == orig(this.nan.nans)
this.nan.field == orig(this.nan.field)
this.nan.field.radixDigits == orig(this.nan.field.radixDigits)
this.nan.field.zero == orig(this.nan.field.zero)
this.nan.field.one == orig(this.nan.field.one)
this.nan.field.two == orig(this.nan.field.two)
this.nan.field.sqr2 == orig(this.nan.field.sqr2)
this.nan.field.sqr2Split == orig(this.nan.field.sqr2Split)
this.nan.field.sqr2Split.getClass().getName() == orig(this.nan.field.sqr2Split.getClass().getName())
this.nan.field.sqr2Split[] == orig(this.nan.field.sqr2Split[])
this.nan.field.sqr2Split[].mant == orig(this.nan.field.sqr2Split[].mant)
this.nan.field.sqr2Split[].sign == orig(this.nan.field.sqr2Split[].sign)
this.nan.field.sqr2Split[].exp == orig(this.nan.field.sqr2Split[].exp)
this.nan.field.sqr2Split[].nans == orig(this.nan.field.sqr2Split[].nans)
this.nan.field.sqr2Split[].field == orig(this.nan.field.sqr2Split[].field)
this.nan.field.sqr2Reciprocal == orig(this.nan.field.sqr2Reciprocal)
this.nan.field.sqr3 == orig(this.nan.field.sqr3)
this.nan.field.sqr3Reciprocal == orig(this.nan.field.sqr3Reciprocal)
this.nan.field.pi == orig(this.nan.field.pi)
this.nan.field.piSplit == orig(this.nan.field.piSplit)
this.nan.field.piSplit.getClass().getName() == orig(this.nan.field.piSplit.getClass().getName())
this.nan.field.piSplit[] == orig(this.nan.field.piSplit[])
this.nan.field.piSplit[].mant == orig(this.nan.field.piSplit[].mant)
this.nan.field.piSplit[].sign == orig(this.nan.field.piSplit[].sign)
this.nan.field.piSplit[].exp == orig(this.nan.field.piSplit[].exp)
this.nan.field.piSplit[].nans == orig(this.nan.field.piSplit[].nans)
this.nan.field.piSplit[].field == orig(this.nan.field.piSplit[].field)
this.nan.field.e == orig(this.nan.field.e)
this.nan.field.eSplit == orig(this.nan.field.eSplit)
this.nan.field.eSplit.getClass().getName() == orig(this.nan.field.eSplit.getClass().getName())
this.nan.field.eSplit[] == orig(this.nan.field.eSplit[])
this.nan.field.eSplit[].mant == orig(this.nan.field.eSplit[].mant)
this.nan.field.eSplit[].sign == orig(this.nan.field.eSplit[].sign)
this.nan.field.eSplit[].exp == orig(this.nan.field.eSplit[].exp)
this.nan.field.eSplit[].nans == orig(this.nan.field.eSplit[].nans)
this.nan.field.eSplit[].field == orig(this.nan.field.eSplit[].field)
this.nan.field.ln2 == orig(this.nan.field.ln2)
this.nan.field.ln2Split == orig(this.nan.field.ln2Split)
this.nan.field.ln2Split.getClass().getName() == orig(this.nan.field.ln2Split.getClass().getName())
this.nan.field.ln2Split[] == orig(this.nan.field.ln2Split[])
this.nan.field.ln2Split[].mant == orig(this.nan.field.ln2Split[].mant)
this.nan.field.ln2Split[].sign == orig(this.nan.field.ln2Split[].sign)
this.nan.field.ln2Split[].exp == orig(this.nan.field.ln2Split[].exp)
this.nan.field.ln2Split[].nans == orig(this.nan.field.ln2Split[].nans)
this.nan.field.ln2Split[].field == orig(this.nan.field.ln2Split[].field)
this.nan.field.ln5 == orig(this.nan.field.ln5)
this.nan.field.ln5Split == orig(this.nan.field.ln5Split)
this.nan.field.ln5Split.getClass().getName() == orig(this.nan.field.ln5Split.getClass().getName())
this.nan.field.ln5Split[] == orig(this.nan.field.ln5Split[])
this.nan.field.ln5Split[].mant == orig(this.nan.field.ln5Split[].mant)
this.nan.field.ln5Split[].sign == orig(this.nan.field.ln5Split[].sign)
this.nan.field.ln5Split[].exp == orig(this.nan.field.ln5Split[].exp)
this.nan.field.ln5Split[].nans == orig(this.nan.field.ln5Split[].nans)
this.nan.field.ln5Split[].field == orig(this.nan.field.ln5Split[].field)
this.nan.field.ln10 == orig(this.nan.field.ln10)
this.nan.field.rMode == orig(this.nan.field.rMode)
this.snan == orig(this.snan)
this.snan.mant == orig(this.snan.mant)
this.snan.mant[] == orig(this.snan.mant[])
this.snan.sign == orig(this.snan.sign)
this.snan.exp == orig(this.snan.exp)
this.snan.nans == orig(this.snan.nans)
this.snan.field == orig(this.snan.field)
this.snan.field.radixDigits == orig(this.snan.field.radixDigits)
this.snan.field.zero == orig(this.snan.field.zero)
this.snan.field.one == orig(this.snan.field.one)
this.snan.field.two == orig(this.snan.field.two)
this.snan.field.sqr2 == orig(this.snan.field.sqr2)
this.snan.field.sqr2Split == orig(this.snan.field.sqr2Split)
this.snan.field.sqr2Split.getClass().getName() == orig(this.snan.field.sqr2Split.getClass().getName())
this.snan.field.sqr2Split[] == orig(this.snan.field.sqr2Split[])
this.snan.field.sqr2Split[].mant == orig(this.snan.field.sqr2Split[].mant)
this.snan.field.sqr2Split[].sign == orig(this.snan.field.sqr2Split[].sign)
this.snan.field.sqr2Split[].exp == orig(this.snan.field.sqr2Split[].exp)
this.snan.field.sqr2Split[].nans == orig(this.snan.field.sqr2Split[].nans)
this.snan.field.sqr2Split[].field == orig(this.snan.field.sqr2Split[].field)
this.snan.field.sqr2Reciprocal == orig(this.snan.field.sqr2Reciprocal)
this.snan.field.sqr3 == orig(this.snan.field.sqr3)
this.snan.field.sqr3Reciprocal == orig(this.snan.field.sqr3Reciprocal)
this.snan.field.pi == orig(this.snan.field.pi)
this.snan.field.piSplit == orig(this.snan.field.piSplit)
this.snan.field.piSplit.getClass().getName() == orig(this.snan.field.piSplit.getClass().getName())
this.snan.field.piSplit[] == orig(this.snan.field.piSplit[])
this.snan.field.piSplit[].mant == orig(this.snan.field.piSplit[].mant)
this.snan.field.piSplit[].sign == orig(this.snan.field.piSplit[].sign)
this.snan.field.piSplit[].exp == orig(this.snan.field.piSplit[].exp)
this.snan.field.piSplit[].nans == orig(this.snan.field.piSplit[].nans)
this.snan.field.piSplit[].field == orig(this.snan.field.piSplit[].field)
this.snan.field.e == orig(this.snan.field.e)
this.snan.field.eSplit == orig(this.snan.field.eSplit)
this.snan.field.eSplit.getClass().getName() == orig(this.snan.field.eSplit.getClass().getName())
this.snan.field.eSplit[] == orig(this.snan.field.eSplit[])
this.snan.field.eSplit[].mant == orig(this.snan.field.eSplit[].mant)
this.snan.field.eSplit[].sign == orig(this.snan.field.eSplit[].sign)
this.snan.field.eSplit[].exp == orig(this.snan.field.eSplit[].exp)
this.snan.field.eSplit[].nans == orig(this.snan.field.eSplit[].nans)
this.snan.field.eSplit[].field == orig(this.snan.field.eSplit[].field)
this.snan.field.ln2 == orig(this.snan.field.ln2)
this.snan.field.ln2Split == orig(this.snan.field.ln2Split)
this.snan.field.ln2Split.getClass().getName() == orig(this.snan.field.ln2Split.getClass().getName())
this.snan.field.ln2Split[] == orig(this.snan.field.ln2Split[])
this.snan.field.ln2Split[].mant == orig(this.snan.field.ln2Split[].mant)
this.snan.field.ln2Split[].sign == orig(this.snan.field.ln2Split[].sign)
this.snan.field.ln2Split[].exp == orig(this.snan.field.ln2Split[].exp)
this.snan.field.ln2Split[].nans == orig(this.snan.field.ln2Split[].nans)
this.snan.field.ln2Split[].field == orig(this.snan.field.ln2Split[].field)
this.snan.field.ln5 == orig(this.snan.field.ln5)
this.snan.field.ln5Split == orig(this.snan.field.ln5Split)
this.snan.field.ln5Split.getClass().getName() == orig(this.snan.field.ln5Split.getClass().getName())
this.snan.field.ln5Split[] == orig(this.snan.field.ln5Split[])
this.snan.field.ln5Split[].mant == orig(this.snan.field.ln5Split[].mant)
this.snan.field.ln5Split[].sign == orig(this.snan.field.ln5Split[].sign)
this.snan.field.ln5Split[].exp == orig(this.snan.field.ln5Split[].exp)
this.snan.field.ln5Split[].nans == orig(this.snan.field.ln5Split[].nans)
this.snan.field.ln5Split[].field == orig(this.snan.field.ln5Split[].field)
this.snan.field.ln10 == orig(this.snan.field.ln10)
this.snan.field.rMode == orig(this.snan.field.rMode)
this.qnan == orig(this.qnan)
this.qnan.mant == orig(this.qnan.mant)
this.qnan.mant[] == orig(this.qnan.mant[])
this.qnan.sign == orig(this.qnan.sign)
this.qnan.exp == orig(this.qnan.exp)
this.qnan.nans == orig(this.qnan.nans)
this.qnan.field == orig(this.qnan.field)
this.qnan.field.radixDigits == orig(this.qnan.field.radixDigits)
this.qnan.field.zero == orig(this.qnan.field.zero)
this.qnan.field.one == orig(this.qnan.field.one)
this.qnan.field.two == orig(this.qnan.field.two)
this.qnan.field.sqr2 == orig(this.qnan.field.sqr2)
this.qnan.field.sqr2Split == orig(this.qnan.field.sqr2Split)
this.qnan.field.sqr2Split.getClass().getName() == orig(this.qnan.field.sqr2Split.getClass().getName())
this.qnan.field.sqr2Split[] == orig(this.qnan.field.sqr2Split[])
this.qnan.field.sqr2Split[].mant == orig(this.qnan.field.sqr2Split[].mant)
this.qnan.field.sqr2Split[].sign == orig(this.qnan.field.sqr2Split[].sign)
this.qnan.field.sqr2Split[].exp == orig(this.qnan.field.sqr2Split[].exp)
this.qnan.field.sqr2Split[].nans == orig(this.qnan.field.sqr2Split[].nans)
this.qnan.field.sqr2Split[].field == orig(this.qnan.field.sqr2Split[].field)
this.qnan.field.sqr2Reciprocal == orig(this.qnan.field.sqr2Reciprocal)
this.qnan.field.sqr3 == orig(this.qnan.field.sqr3)
this.qnan.field.sqr3Reciprocal == orig(this.qnan.field.sqr3Reciprocal)
this.qnan.field.pi == orig(this.qnan.field.pi)
this.qnan.field.piSplit == orig(this.qnan.field.piSplit)
this.qnan.field.piSplit.getClass().getName() == orig(this.qnan.field.piSplit.getClass().getName())
this.qnan.field.piSplit[] == orig(this.qnan.field.piSplit[])
this.qnan.field.piSplit[].mant == orig(this.qnan.field.piSplit[].mant)
this.qnan.field.piSplit[].sign == orig(this.qnan.field.piSplit[].sign)
this.qnan.field.piSplit[].exp == orig(this.qnan.field.piSplit[].exp)
this.qnan.field.piSplit[].nans == orig(this.qnan.field.piSplit[].nans)
this.qnan.field.piSplit[].field == orig(this.qnan.field.piSplit[].field)
this.qnan.field.e == orig(this.qnan.field.e)
this.qnan.field.eSplit == orig(this.qnan.field.eSplit)
this.qnan.field.eSplit.getClass().getName() == orig(this.qnan.field.eSplit.getClass().getName())
this.qnan.field.eSplit[] == orig(this.qnan.field.eSplit[])
this.qnan.field.eSplit[].mant == orig(this.qnan.field.eSplit[].mant)
this.qnan.field.eSplit[].sign == orig(this.qnan.field.eSplit[].sign)
this.qnan.field.eSplit[].exp == orig(this.qnan.field.eSplit[].exp)
this.qnan.field.eSplit[].nans == orig(this.qnan.field.eSplit[].nans)
this.qnan.field.eSplit[].field == orig(this.qnan.field.eSplit[].field)
this.qnan.field.ln2 == orig(this.qnan.field.ln2)
this.qnan.field.ln2Split == orig(this.qnan.field.ln2Split)
this.qnan.field.ln2Split.getClass().getName() == orig(this.qnan.field.ln2Split.getClass().getName())
this.qnan.field.ln2Split[] == orig(this.qnan.field.ln2Split[])
this.qnan.field.ln2Split[].mant == orig(this.qnan.field.ln2Split[].mant)
this.qnan.field.ln2Split[].sign == orig(this.qnan.field.ln2Split[].sign)
this.qnan.field.ln2Split[].exp == orig(this.qnan.field.ln2Split[].exp)
this.qnan.field.ln2Split[].nans == orig(this.qnan.field.ln2Split[].nans)
this.qnan.field.ln2Split[].field == orig(this.qnan.field.ln2Split[].field)
this.qnan.field.ln5 == orig(this.qnan.field.ln5)
this.qnan.field.ln5Split == orig(this.qnan.field.ln5Split)
this.qnan.field.ln5Split.getClass().getName() == orig(this.qnan.field.ln5Split.getClass().getName())
this.qnan.field.ln5Split[] == orig(this.qnan.field.ln5Split[])
this.qnan.field.ln5Split[].mant == orig(this.qnan.field.ln5Split[].mant)
this.qnan.field.ln5Split[].sign == orig(this.qnan.field.ln5Split[].sign)
this.qnan.field.ln5Split[].exp == orig(this.qnan.field.ln5Split[].exp)
this.qnan.field.ln5Split[].nans == orig(this.qnan.field.ln5Split[].nans)
this.qnan.field.ln5Split[].field == orig(this.qnan.field.ln5Split[].field)
this.qnan.field.ln10 == orig(this.qnan.field.ln10)
this.qnan.field.rMode == orig(this.qnan.field.rMode)
return.mant[] elements >= 0
return.sign == 1
return.exp one of { -1, 0 }
return.nans == 0
return.field.radixDigits == 5
return.field.sqr2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.sqr2Split[] elements != null
return.field.sqr2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.sqr2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.sqr2Split[].sign == [1, 1]
return.field.sqr2Split[].sign elements == 1
return.field.sqr2Split[].exp == [1, -1]
return.field.sqr2Split[].exp elements one of { -1, 1 }
return.field.sqr2Split[].exp elements != 0
return.field.sqr2Split[].exp sorted by >
return.field.sqr2Split[].nans == [0, 0]
return.field.sqr2Split[].nans elements == 0
return.field.sqr2Split[].field elements != null
return.field.sqr2Split[].field elements are equal
return.field.piSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.piSplit[] elements != null
return.field.piSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.piSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.piSplit[].mant sorted by <
return.field.piSplit[].sign == [1, 1]
return.field.piSplit[].sign elements == 1
return.field.piSplit[].exp == [1, -1]
return.field.piSplit[].exp elements one of { -1, 1 }
return.field.piSplit[].exp elements != 0
return.field.piSplit[].exp sorted by >
return.field.piSplit[].nans == [0, 0]
return.field.piSplit[].nans elements == 0
return.field.piSplit[].field elements != null
return.field.piSplit[].field elements are equal
return.field.eSplit.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.eSplit[] elements != null
return.field.eSplit[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.eSplit[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.eSplit[].sign == [1, 1]
return.field.eSplit[].sign elements == 1
return.field.eSplit[].exp == [1, -1]
return.field.eSplit[].exp elements one of { -1, 1 }
return.field.eSplit[].exp elements != 0
return.field.eSplit[].exp sorted by >
return.field.eSplit[].nans == [0, 0]
return.field.eSplit[].nans elements == 0
return.field.eSplit[].field elements != null
return.field.eSplit[].field elements are equal
return.field.ln2Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln2Split[] elements != null
return.field.ln2Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln2Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln2Split[].mant sorted by >
return.field.ln2Split[].sign == [1, 1]
return.field.ln2Split[].sign elements == 1
return.field.ln2Split[].exp == [0, -2]
return.field.ln2Split[].exp elements one of { -2, 0 }
return.field.ln2Split[].exp sorted by >
return.field.ln2Split[].nans == [0, 0]
return.field.ln2Split[].nans elements == 0
return.field.ln2Split[].field elements != null
return.field.ln2Split[].field elements are equal
return.field.ln5Split.getClass().getName() == org.apache.commons.math3.dfp.Dfp[].class
return.field.ln5Split[] elements != null
return.field.ln5Split[].getClass().getName() == [org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp]
return.field.ln5Split[].getClass().getName() elements == org.apache.commons.math3.dfp.Dfp.class
return.field.ln5Split[].mant sorted by >
return.field.ln5Split[].sign == [1, 1]
return.field.ln5Split[].sign elements == 1
return.field.ln5Split[].exp == [1, -1]
return.field.ln5Split[].exp elements one of { -1, 1 }
return.field.ln5Split[].exp elements != 0
return.field.ln5Split[].exp sorted by >
return.field.ln5Split[].nans == [0, 0]
return.field.ln5Split[].nans elements == 0
return.field.ln5Split[].field elements != null
return.field.ln5Split[].field elements are equal
return.field.rMode has only one value
return.field.ieeeFlags one of { 0, 16 }
size(return.mant[]) == 5
size(return.field.sqr2Split[]) == 2
size(return.field.piSplit[]) == 2
size(return.field.eSplit[]) == 2
size(return.field.ln2Split[]) == 2
size(return.field.ln5Split[]) == 2
this.field.ieeeFlags >= orig(this.field.ieeeFlags)
this.pinf.field.ieeeFlags >= orig(this.pinf.field.ieeeFlags)
this.ninf.field.ieeeFlags >= orig(this.ninf.field.ieeeFlags)
this.nan.field.ieeeFlags >= orig(this.nan.field.ieeeFlags)
this.snan.field.ieeeFlags >= orig(this.snan.field.ieeeFlags)
this.qnan.field.ieeeFlags >= orig(this.qnan.field.ieeeFlags)
===========================================================================
org.apache.commons.math3.dfp.DfpTest.setUp():::ENTER
this.field == null
this.pinf == null
this.ninf == null
this.nan == null
this.snan == null
this.qnan == null
===========================================================================
org.apache.commons.math3.dfp.DfpTest.setUp():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName())
this.field.ieeeFlags == 0
this.pinf.field.ieeeFlags == 0
this.ninf.field.ieeeFlags == 0
this.nan.field.ieeeFlags == 0
this.snan.field.ieeeFlags == 0
this.qnan.field.ieeeFlags == 0
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[]) (elementwise)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
org.apache.commons.math3.dfp.DfpTest.tearDown():::ENTER
this.field.ieeeFlags == 16
this.pinf.field.ieeeFlags == 16
this.ninf.field.ieeeFlags == 16
this.nan.field.ieeeFlags == 16
this.snan.field.ieeeFlags == 16
this.qnan.field.ieeeFlags == 16
===========================================================================
org.apache.commons.math3.dfp.DfpTest.tearDown():::EXIT
org.apache.commons.math3.dfp.DfpField.sqr2String == orig(org.apache.commons.math3.dfp.DfpField.sqr2String)
org.apache.commons.math3.dfp.DfpField.sqr2String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2String.toString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr2ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.sqr3String == orig(org.apache.commons.math3.dfp.DfpField.sqr3String)
org.apache.commons.math3.dfp.DfpField.sqr3String.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3String.toString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString)
org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString == orig(org.apache.commons.math3.dfp.DfpField.sqr3ReciprocalString.toString)
org.apache.commons.math3.dfp.DfpField.piString == orig(org.apache.commons.math3.dfp.DfpField.piString)
org.apache.commons.math3.dfp.DfpField.piString.toString == orig(org.apache.commons.math3.dfp.DfpField.piString.toString)
org.apache.commons.math3.dfp.DfpField.eString == orig(org.apache.commons.math3.dfp.DfpField.eString)
org.apache.commons.math3.dfp.DfpField.eString.toString == orig(org.apache.commons.math3.dfp.DfpField.eString.toString)
org.apache.commons.math3.dfp.DfpField.ln2String == orig(org.apache.commons.math3.dfp.DfpField.ln2String)
org.apache.commons.math3.dfp.DfpField.ln2String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln2String.toString)
org.apache.commons.math3.dfp.DfpField.ln5String == orig(org.apache.commons.math3.dfp.DfpField.ln5String)
org.apache.commons.math3.dfp.DfpField.ln5String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln5String.toString)
org.apache.commons.math3.dfp.DfpField.ln10String == orig(org.apache.commons.math3.dfp.DfpField.ln10String)
org.apache.commons.math3.dfp.DfpField.ln10String.toString == orig(org.apache.commons.math3.dfp.DfpField.ln10String.toString)
org.apache.commons.math3.dfp.Dfp.NAN_STRING == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING)
org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NAN_STRING.toString)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.POS_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING)
org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString == orig(org.apache.commons.math3.dfp.Dfp.NEG_INFINITY_STRING.toString)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP)
org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ADD_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP)
org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.MULTIPLY_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP)
org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.DIVIDE_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP)
org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.SQRT_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP)
org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.ALIGN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP)
org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.TRUNC_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP)
org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEXT_AFTER_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.LESS_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP)
org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.GREATER_THAN_TRAP.toString)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP)
org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString == orig(org.apache.commons.math3.dfp.Dfp.NEW_INSTANCE_TRAP.toString)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_UP)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_DOWN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_EVEN)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_HALF_ODD)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_CEIL)
org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.ROUND_FLOOR)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES)
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES.getClass().getName())
org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[] == orig(org.apache.commons.math3.dfp.DfpField$RoundingMode.$VALUES[])
this.field == null
this.pinf == null
this.ninf == null
this.nan == null
this.snan == null
this.qnan == null
===========================================================================
org.apache.commons.math3.random.AbstractWell:::CLASS
===========================================================================
org.apache.commons.math3.random.AbstractWell:::OBJECT
this.getClass().getName() == org.apache.commons.math3.random.Well1024a.class
this.index == 0
this.v != null
this.iRm1 != null
this.iRm1[] == [31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
this.iRm1[] elements >= 0
this.iRm2 != null
this.iRm2[] == [30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
this.iRm2[] elements >= 0
this.i1 != null
this.i1[] == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2]
this.i1[] elements >= 0
this.i2 != null
this.i2[] == [24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
this.i2[] elements >= 0
this.i3 != null
this.i3[] == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
this.i3[] elements >= 0
this.nextGaussian == Double.NaN
size(this.v[]) == 32
size(this.iRm1[]) == 32
size(this.iRm2[]) == 32
size(this.i1[]) == 32
size(this.i2[]) == 32
size(this.i3[]) == 32
===========================================================================
org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int, int[]):::ENTER
k == 1024
m1 == 3
m2 == 24
m3 == 10
seed[] one of { [0, 56058], [0, 64250], [128817584, 2091588370] }
seed[] elements >= 0
seed[] sorted by <
size(seed[]) == 2
===========================================================================
org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int, int[]):::EXIT
seed[] == orig(seed[])
this.v[] one of { [0, 56058, 2, -363057499, -670100786, -434060665, -648819365, -79660961, -75120964, -1803214295, 1040030329, -317549346, 1913107145, 1608969490, 1596887286, -360729714, -1548459901, -409099866, -90517149, 1673255472, 1562435488, -2076684694, 1594647451, -19053701, -765020710, -516750291, -1456796237, 1415625717, 1405734269, 577485665, -67539446, 1198446180], [0, 64250, 2, -611791195, -670100786, 2112201351, -648819365, -1992502043, -75120964, -556895056, 1040030329, -1086177994, 1913107145, -879566603, 1596887286, 636459265, -1548459901, -881858954, -90517149, 1497588768, 1562435488, -250402278, 1594647451, 388690032, -765020710, -240333751, -1456796237, 1601817833, 1405734269, 1410203557, -67539446, -724525101], [128817584, 2091588370, 1653396082, -2105288318, -2091675037, 1341623025, -1308933129, 311705783, 1086193813, -1541376196, -1387172242, 1957611157, -977961508, 1866828913, 838800093, 900225087, -87706047, 1079871468, 1839711752, 639595924, 1114305185, -2023647367, -1838589642, 740326490, -886516480, 701708699, -1075876427, -2123977406, 1597037235, -1830272951, -970093992, 838373970] }
seed[] one of { [0, 56058], [0, 64250], [128817584, 2091588370] }
seed[] elements >= 0
seed[] sorted by <
===========================================================================
org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int, long):::ENTER
k == 1024
m1 == 3
m2 == 24
m3 == 10
seed one of { 56058, 64250, 553267312521321234L }
===========================================================================
org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int, long):::EXIT
this.v[] one of { [0, 56058, 2, -363057499, -670100786, -434060665, -648819365, -79660961, -75120964, -1803214295, 1040030329, -317549346, 1913107145, 1608969490, 1596887286, -360729714, -1548459901, -409099866, -90517149, 1673255472, 1562435488, -2076684694, 1594647451, -19053701, -765020710, -516750291, -1456796237, 1415625717, 1405734269, 577485665, -67539446, 1198446180], [0, 64250, 2, -611791195, -670100786, 2112201351, -648819365, -1992502043, -75120964, -556895056, 1040030329, -1086177994, 1913107145, -879566603, 1596887286, 636459265, -1548459901, -881858954, -90517149, 1497588768, 1562435488, -250402278, 1594647451, 388690032, -765020710, -240333751, -1456796237, 1601817833, 1405734269, 1410203557, -67539446, -724525101], [128817584, 2091588370, 1653396082, -2105288318, -2091675037, 1341623025, -1308933129, 311705783, 1086193813, -1541376196, -1387172242, 1957611157, -977961508, 1866828913, 838800093, 900225087, -87706047, 1079871468, 1839711752, 639595924, 1114305185, -2023647367, -1838589642, 740326490, -886516480, 701708699, -1075876427, -2123977406, 1597037235, -1830272951, -970093992, 838373970] }
===========================================================================
org.apache.commons.math3.random.AbstractWell.setSeed(int[]):::ENTER
this.v[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.v[] elements == 0
seed[] one of { [0, 56058], [0, 64250], [128817584, 2091588370] }
seed[] elements >= 0
seed[] sorted by <
size(seed[]) == 2
===========================================================================
org.apache.commons.math3.random.AbstractWell.setSeed(int[]):::EXIT170
===========================================================================
org.apache.commons.math3.random.AbstractWell.setSeed(int[]):::EXIT
this.index == orig(this.index)
this.v == orig(this.v)
this.iRm1 == orig(this.iRm1)
this.iRm1[] == orig(this.iRm1[])
this.iRm2 == orig(this.iRm2)
this.iRm2[] == orig(this.iRm2[])
this.i1 == orig(this.i1)
this.i1[] == orig(this.i1[])
this.i2 == orig(this.i2)
this.i2[] == orig(this.i2[])
this.i3 == orig(this.i3)
this.i3[] == orig(this.i3[])
seed[] == orig(seed[])
size(this.v[]) == orig(size(this.v[]))
this.v[] one of { [0, 56058, 2, -363057499, -670100786, -434060665, -648819365, -79660961, -75120964, -1803214295, 1040030329, -317549346, 1913107145, 1608969490, 1596887286, -360729714, -1548459901, -409099866, -90517149, 1673255472, 1562435488, -2076684694, 1594647451, -19053701, -765020710, -516750291, -1456796237, 1415625717, 1405734269, 577485665, -67539446, 1198446180], [0, 64250, 2, -611791195, -670100786, 2112201351, -648819365, -1992502043, -75120964, -556895056, 1040030329, -1086177994, 1913107145, -879566603, 1596887286, 636459265, -1548459901, -881858954, -90517149, 1497588768, 1562435488, -250402278, 1594647451, 388690032, -765020710, -240333751, -1456796237, 1601817833, 1405734269, 1410203557, -67539446, -724525101], [128817584, 2091588370, 1653396082, -2105288318, -2091675037, 1341623025, -1308933129, 311705783, 1086193813, -1541376196, -1387172242, 1957611157, -977961508, 1866828913, 838800093, 900225087, -87706047, 1079871468, 1839711752, 639595924, 1114305185, -2023647367, -1838589642, 740326490, -886516480, 701708699, -1075876427, -2123977406, 1597037235, -1830272951, -970093992, 838373970] }
seed[] one of { [0, 56058], [0, 64250], [128817584, 2091588370] }
seed[] elements >= 0
seed[] sorted by <
===========================================================================
org.apache.commons.math3.random.BitsStreamGenerator:::CLASS
===========================================================================
org.apache.commons.math3.random.BitsStreamGenerator:::OBJECT
this.getClass().getName() == org.apache.commons.math3.random.Well1024a.class
this.nextGaussian == Double.NaN
===========================================================================
org.apache.commons.math3.random.BitsStreamGenerator.BitsStreamGenerator():::EXIT
===========================================================================
org.apache.commons.math3.random.BitsStreamGenerator.clear():::ENTER
===========================================================================
org.apache.commons.math3.random.BitsStreamGenerator.clear():::EXIT
===========================================================================
org.apache.commons.math3.random.BitsStreamGenerator.nextDouble():::ENTER
===========================================================================
org.apache.commons.math3.random.BitsStreamGenerator.nextDouble():::EXIT
===========================================================================
org.apache.commons.math3.random.Well1024a:::CLASS
===========================================================================
org.apache.commons.math3.random.Well1024a:::OBJECT
this.index >= 0
this.v != null
this.iRm1 != null
this.iRm1[] == [31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
this.iRm1[] elements >= 0
this.iRm2 != null
this.iRm2[] == [30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
this.iRm2[] elements >= 0
this.i1 != null
this.i1[] == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2]
this.i1[] elements >= 0
this.i2 != null
this.i2[] == [24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
this.i2[] elements >= 0
this.i3 != null
this.i3[] == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
this.i3[] elements >= 0
this.nextGaussian == Double.NaN
size(this.v[]) == 32
size(this.iRm1[]) == 32
size(this.iRm2[]) == 32
size(this.i1[]) == 32
size(this.i2[]) == 32
size(this.i3[]) == 32
===========================================================================
org.apache.commons.math3.random.Well1024a.Well1024a(long):::ENTER
seed one of { 56058, 64250, 553267312521321234L }
===========================================================================
org.apache.commons.math3.random.Well1024a.Well1024a(long):::EXIT
this.index == 0
this.v[] one of { [0, 56058, 2, -363057499, -670100786, -434060665, -648819365, -79660961, -75120964, -1803214295, 1040030329, -317549346, 1913107145, 1608969490, 1596887286, -360729714, -1548459901, -409099866, -90517149, 1673255472, 1562435488, -2076684694, 1594647451, -19053701, -765020710, -516750291, -1456796237, 1415625717, 1405734269, 577485665, -67539446, 1198446180], [0, 64250, 2, -611791195, -670100786, 2112201351, -648819365, -1992502043, -75120964, -556895056, 1040030329, -1086177994, 1913107145, -879566603, 1596887286, 636459265, -1548459901, -881858954, -90517149, 1497588768, 1562435488, -250402278, 1594647451, 388690032, -765020710, -240333751, -1456796237, 1601817833, 1405734269, 1410203557, -67539446, -724525101], [128817584, 2091588370, 1653396082, -2105288318, -2091675037, 1341623025, -1308933129, 311705783, 1086193813, -1541376196, -1387172242, 1957611157, -977961508, 1866828913, 838800093, 900225087, -87706047, 1079871468, 1839711752, 639595924, 1114305185, -2023647367, -1838589642, 740326490, -886516480, 701708699, -1075876427, -2123977406, 1597037235, -1830272951, -970093992, 838373970] }
===========================================================================
org.apache.commons.math3.random.Well1024a.next(int):::ENTER
bits == 26
===========================================================================
org.apache.commons.math3.random.Well1024a.next(int):::EXIT
this.v == orig(this.v)
this.iRm1 == orig(this.iRm1)
this.iRm1[] == orig(this.iRm1[])
this.iRm2 == orig(this.iRm2)
this.iRm2[] == orig(this.iRm2[])
this.i1 == orig(this.i1)
this.i1[] == orig(this.i1[])
this.i2 == orig(this.i2)
this.i2[] == orig(this.i2[])
this.i3 == orig(this.i3)
this.i3[] == orig(this.i3[])
size(this.v[]) == orig(size(this.v[]))
this.index != orig(this.index)
===========================================================================
org.apache.commons.math3.util.Decimal64:::CLASS
org.apache.commons.math3.util.Decimal64.ZERO has only one value
org.apache.commons.math3.util.Decimal64.ONE has only one value
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY has only one value
org.apache.commons.math3.util.Decimal64.NAN has only one value
org.apache.commons.math3.util.Decimal64.ZERO.value == 0.0
org.apache.commons.math3.util.Decimal64.ONE.value == 1.0
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value == -Infinity
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value == Infinity
org.apache.commons.math3.util.Decimal64.NAN.value == Double.NaN
===========================================================================
org.apache.commons.math3.util.Decimal64:::OBJECT
===========================================================================
org.apache.commons.math3.util.Decimal64.Decimal64(double):::ENTER
===========================================================================
org.apache.commons.math3.util.Decimal64.Decimal64(double):::EXIT
===========================================================================
org.apache.commons.math3.util.Decimal64.getField():::ENTER
this.value == 0.0
===========================================================================
org.apache.commons.math3.util.Decimal64.getField():::EXIT
org.apache.commons.math3.util.Decimal64.ZERO == orig(org.apache.commons.math3.util.Decimal64.ZERO)
org.apache.commons.math3.util.Decimal64.ONE == orig(org.apache.commons.math3.util.Decimal64.ONE)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.NAN == orig(org.apache.commons.math3.util.Decimal64.NAN)
org.apache.commons.math3.util.Decimal64.ZERO.value == orig(org.apache.commons.math3.util.Decimal64.ZERO.value)
org.apache.commons.math3.util.Decimal64.ONE.value == orig(org.apache.commons.math3.util.Decimal64.ONE.value)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value)
this.value == orig(this.value)
this.value == 0.0
return has only one value
return.getClass().getName() == org.apache.commons.math3.util.Decimal64Field.class
===========================================================================
org.apache.commons.math3.util.Decimal64.getReal():::ENTER
===========================================================================
org.apache.commons.math3.util.Decimal64.getReal():::EXIT
org.apache.commons.math3.util.Decimal64.ZERO == orig(org.apache.commons.math3.util.Decimal64.ZERO)
org.apache.commons.math3.util.Decimal64.ONE == orig(org.apache.commons.math3.util.Decimal64.ONE)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.NAN == orig(org.apache.commons.math3.util.Decimal64.NAN)
org.apache.commons.math3.util.Decimal64.ZERO.value == orig(org.apache.commons.math3.util.Decimal64.ZERO.value)
org.apache.commons.math3.util.Decimal64.ONE.value == orig(org.apache.commons.math3.util.Decimal64.ONE.value)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value)
this.value == orig(this.value)
===========================================================================
org.apache.commons.math3.util.Decimal64.linearCombination(double[], org.apache.commons.math3.util.Decimal64[]):::ENTER
b.getClass().getName() == org.apache.commons.math3.util.Decimal64[].class
b[] elements != null
size(a[]) == 10
size(b[]) == 10
===========================================================================
org.apache.commons.math3.util.Decimal64.linearCombination(double[], org.apache.commons.math3.util.Decimal64[]):::EXIT
org.apache.commons.math3.util.Decimal64.ZERO == orig(org.apache.commons.math3.util.Decimal64.ZERO)
org.apache.commons.math3.util.Decimal64.ONE == orig(org.apache.commons.math3.util.Decimal64.ONE)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.NAN == orig(org.apache.commons.math3.util.Decimal64.NAN)
org.apache.commons.math3.util.Decimal64.ZERO.value == orig(org.apache.commons.math3.util.Decimal64.ZERO.value)
org.apache.commons.math3.util.Decimal64.ONE.value == orig(org.apache.commons.math3.util.Decimal64.ONE.value)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value)
this.value == orig(this.value)
a[] == orig(a[])
b[] == orig(b[])
b[].value == orig(b[].value)
b[] elements != null
===========================================================================
org.apache.commons.math3.util.Decimal64.linearCombination(org.apache.commons.math3.util.Decimal64[], org.apache.commons.math3.util.Decimal64[]):::ENTER
a.getClass().getName() == org.apache.commons.math3.util.Decimal64[].class
a[] elements != null
b.getClass().getName() == org.apache.commons.math3.util.Decimal64[].class
b[] elements != null
size(a[]) == 10
size(b[]) == 10
===========================================================================
org.apache.commons.math3.util.Decimal64.linearCombination(org.apache.commons.math3.util.Decimal64[], org.apache.commons.math3.util.Decimal64[]):::EXIT
org.apache.commons.math3.util.Decimal64.ZERO == orig(org.apache.commons.math3.util.Decimal64.ZERO)
org.apache.commons.math3.util.Decimal64.ONE == orig(org.apache.commons.math3.util.Decimal64.ONE)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.NAN == orig(org.apache.commons.math3.util.Decimal64.NAN)
org.apache.commons.math3.util.Decimal64.ZERO.value == orig(org.apache.commons.math3.util.Decimal64.ZERO.value)
org.apache.commons.math3.util.Decimal64.ONE.value == orig(org.apache.commons.math3.util.Decimal64.ONE.value)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value)
this.value == orig(this.value)
a[] == orig(a[])
a[].value == orig(a[].value)
b[] == orig(b[])
b[].value == orig(b[].value)
a[] elements != null
b[] elements != null
===========================================================================
org.apache.commons.math3.util.Decimal64Field:::CLASS
org.apache.commons.math3.util.Decimal64Field.INSTANCE has only one value
===========================================================================
org.apache.commons.math3.util.Decimal64Field:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.util.Decimal64Field.Decimal64Field():::EXIT
===========================================================================
org.apache.commons.math3.util.Decimal64Field.getInstance():::ENTER
===========================================================================
org.apache.commons.math3.util.Decimal64Field.getInstance():::EXIT
org.apache.commons.math3.util.Decimal64Field.INSTANCE == orig(org.apache.commons.math3.util.Decimal64Field.INSTANCE)
return has only one value
===========================================================================
org.apache.commons.math3.util.Decimal64Field.getRuntimeClass():::ENTER
===========================================================================
org.apache.commons.math3.util.Decimal64Field.getRuntimeClass():::EXIT
org.apache.commons.math3.util.Decimal64Field.INSTANCE == orig(org.apache.commons.math3.util.Decimal64Field.INSTANCE)
return has only one value
===========================================================================
org.apache.commons.math3.util.Decimal64Field.getZero():::ENTER
===========================================================================
org.apache.commons.math3.util.Decimal64Field.getZero():::EXIT
org.apache.commons.math3.util.Decimal64Field.INSTANCE == orig(org.apache.commons.math3.util.Decimal64Field.INSTANCE)
return has only one value
org.apache.commons.math3.util.Decimal64.ZERO has only one value
org.apache.commons.math3.util.Decimal64.ONE has only one value
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY has only one value
org.apache.commons.math3.util.Decimal64.NAN has only one value
org.apache.commons.math3.util.Decimal64.ZERO.value == 0.0
org.apache.commons.math3.util.Decimal64.ONE.value == 1.0
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value == -Infinity
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value == Infinity
org.apache.commons.math3.util.Decimal64.NAN.value == Double.NaN
return.value == 0.0
===========================================================================
org.apache.commons.math3.util.Decimal64Test:::CLASS
org.apache.commons.math3.util.Decimal64Test.PLUS_X has only one value
org.apache.commons.math3.util.Decimal64.ZERO has only one value
org.apache.commons.math3.util.Decimal64.ONE has only one value
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY has only one value
org.apache.commons.math3.util.Decimal64.NAN has only one value
org.apache.commons.math3.util.Decimal64.ZERO.value == 0.0
org.apache.commons.math3.util.Decimal64.ONE.value == 1.0
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value == -Infinity
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value == Infinity
org.apache.commons.math3.util.Decimal64.NAN.value == Double.NaN
org.apache.commons.math3.util.Decimal64Test.PLUS_X.value == 1.2345
org.apache.commons.math3.util.Decimal64Test.MINUS_X has only one value
org.apache.commons.math3.util.Decimal64Test.MINUS_X.value == -1.2345
org.apache.commons.math3.util.Decimal64Test.PLUS_Y has only one value
org.apache.commons.math3.util.Decimal64Test.PLUS_Y.value == 6.789
org.apache.commons.math3.util.Decimal64Test.MINUS_Y has only one value
org.apache.commons.math3.util.Decimal64Test.MINUS_Y.value == -6.789
org.apache.commons.math3.util.Decimal64Test.PLUS_ZERO has only one value
org.apache.commons.math3.util.Decimal64Test.PLUS_ZERO.value == 0.0
org.apache.commons.math3.util.Decimal64Test.MINUS_ZERO has only one value
org.apache.commons.math3.util.Decimal64Test.MINUS_ZERO.value == 0.0
===========================================================================
org.apache.commons.math3.util.Decimal64Test:::OBJECT
===========================================================================
org.apache.commons.math3.util.Decimal64Test.Decimal64Test():::EXIT
===========================================================================
org.apache.commons.math3.util.Decimal64Test.build(double):::ENTER
===========================================================================
org.apache.commons.math3.util.Decimal64Test.build(double):::EXIT
org.apache.commons.math3.util.Decimal64Test.PLUS_X == orig(org.apache.commons.math3.util.Decimal64Test.PLUS_X)
org.apache.commons.math3.util.Decimal64.ZERO == orig(org.apache.commons.math3.util.Decimal64.ZERO)
org.apache.commons.math3.util.Decimal64.ONE == orig(org.apache.commons.math3.util.Decimal64.ONE)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY)
org.apache.commons.math3.util.Decimal64.NAN == orig(org.apache.commons.math3.util.Decimal64.NAN)
org.apache.commons.math3.util.Decimal64.ZERO.value == orig(org.apache.commons.math3.util.Decimal64.ZERO.value)
org.apache.commons.math3.util.Decimal64.ONE.value == orig(org.apache.commons.math3.util.Decimal64.ONE.value)
org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY.value)
org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value == orig(org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY.value)
org.apache.commons.math3.util.Decimal64Test.PLUS_X.value == orig(org.apache.commons.math3.util.Decimal64Test.PLUS_X.value)
org.apache.commons.math3.util.Decimal64Test.MINUS_X == orig(org.apache.commons.math3.util.Decimal64Test.MINUS_X)
org.apache.commons.math3.util.Decimal64Test.MINUS_X.value == orig(org.apache.commons.math3.util.Decimal64Test.MINUS_X.value)
org.apache.commons.math3.util.Decimal64Test.PLUS_Y == orig(org.apache.commons.math3.util.Decimal64Test.PLUS_Y)
org.apache.commons.math3.util.Decimal64Test.PLUS_Y.value == orig(org.apache.commons.math3.util.Decimal64Test.PLUS_Y.value)
org.apache.commons.math3.util.Decimal64Test.MINUS_Y == orig(org.apache.commons.math3.util.Decimal64Test.MINUS_Y)
org.apache.commons.math3.util.Decimal64Test.MINUS_Y.value == orig(org.apache.commons.math3.util.Decimal64Test.MINUS_Y.value)
org.apache.commons.math3.util.Decimal64Test.PLUS_ZERO == orig(org.apache.commons.math3.util.Decimal64Test.PLUS_ZERO)
org.apache.commons.math3.util.Decimal64Test.PLUS_ZERO.value == orig(org.apache.commons.math3.util.Decimal64Test.PLUS_ZERO.value)
org.apache.commons.math3.util.Decimal64Test.MINUS_ZERO == orig(org.apache.commons.math3.util.Decimal64Test.MINUS_ZERO)
org.apache.commons.math3.util.Decimal64Test.MINUS_ZERO.value == orig(org.apache.commons.math3.util.Decimal64Test.MINUS_ZERO.value)
===========================================================================
org.apache.commons.math3.util.MathArraysTest:::OBJECT
===========================================================================
org.apache.commons.math3.util.MathArraysTest.MathArraysTest():::EXIT
===========================================================================
org.apache.commons.math3.util.MathArraysTest.testLinearCombination1():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.util.MathArraysTest.testLinearCombination1():::EXIT
===========================================================================
org.apache.commons.math3.util.MathArraysTest.testLinearCombination2():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.util.MathArraysTest.testLinearCombination2():::EXIT
===========================================================================
org.apache.commons.math3.util.MathArraysTest.testLinearCombinationInfinite():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.util.MathArraysTest.testLinearCombinationInfinite():::EXIT
