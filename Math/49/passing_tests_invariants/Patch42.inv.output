===========================================================================
org.apache.commons.math.MathRuntimeException$7:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException$7:::OBJECT
this.val$pattern has only one value
this.val$pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.val$arguments.getClass().getName() == java.lang.Object[].class
this.val$arguments[] == []
this.val$arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.MathRuntimeException$7.(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
$hidden$2.getClass().getName() == java.lang.Object[].class
$hidden$2[] == []
===========================================================================
org.apache.commons.math.MathRuntimeException$7.(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
$hidden$2[] == orig($hidden$2[])
$hidden$2[] == []
===========================================================================
org.apache.commons.math.MathRuntimeException:::CLASS
org.apache.commons.math.MathRuntimeException.DEPRECATION_MESSAGE has only one value
org.apache.commons.math.MathRuntimeException.DEPRECATION_MESSAGE.toString == "This class is deprecated; calling this method is a bug."
===========================================================================
org.apache.commons.math.MathRuntimeException.createNoSuchElementException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.MathRuntimeException.createNoSuchElementException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
org.apache.commons.math.MathRuntimeException.DEPRECATION_MESSAGE == orig(org.apache.commons.math.MathRuntimeException.DEPRECATION_MESSAGE)
org.apache.commons.math.MathRuntimeException.DEPRECATION_MESSAGE.toString == orig(org.apache.commons.math.MathRuntimeException.DEPRECATION_MESSAGE.toString)
arguments[] == orig(arguments[])
arguments[] == []
===========================================================================
org.apache.commons.math.analysis.FunctionUtils$7:::OBJECT
this.val$fixed one of { 0.4155844155844156, 3.7416573867739413 }
===========================================================================
org.apache.commons.math.analysis.FunctionUtils$7.(org.apache.commons.math.analysis.BivariateRealFunction, double):::ENTER
$hidden$2 one of { 0.4155844155844156, 3.7416573867739413 }
===========================================================================
org.apache.commons.math.analysis.FunctionUtils$7.(org.apache.commons.math.analysis.BivariateRealFunction, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.FunctionUtils$7.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.FunctionUtils$7.value(double):::EXIT
this.val$f == orig(this.val$f)
this.val$f.getClass().getName() == orig(this.val$f.getClass().getName())
this.val$fixed == orig(this.val$fixed)
===========================================================================
org.apache.commons.math.analysis.FunctionUtils.fix2ndArgument(org.apache.commons.math.analysis.BivariateRealFunction, double):::ENTER
fixed one of { 0.4155844155844156, 3.7416573867739413 }
===========================================================================
org.apache.commons.math.analysis.FunctionUtils.fix2ndArgument(org.apache.commons.math.analysis.BivariateRealFunction, double):::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.FunctionUtils$7.class
===========================================================================
org.apache.commons.math.analysis.function.Divide:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.function.Divide.Divide():::EXIT
===========================================================================
org.apache.commons.math.analysis.function.Divide.value(double, double):::ENTER
y == 3.7416573867739413
===========================================================================
org.apache.commons.math.analysis.function.Divide.value(double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.function.Multiply:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.function.Multiply.Multiply():::EXIT
===========================================================================
org.apache.commons.math.analysis.function.Multiply.value(double, double):::ENTER
y == 0.4155844155844156
===========================================================================
org.apache.commons.math.analysis.function.Multiply.value(double, double):::EXIT
===========================================================================
org.apache.commons.math.exception.MathArithmeticException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathArithmeticException:::OBJECT
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathArithmeticException.MathArithmeticException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math.exception.MathArithmeticException.MathArithmeticException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] == []
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
array[] == []
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
array[] == []
return.getClass().getName() == java.lang.Object[].class
return[] == []
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::CLASS
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::OBJECT
this.msgPatterns[] elements has only one value
this.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.msgPatterns[].getClass().getName() one of { [], [org.apache.commons.math.exception.util.LocalizedFormats] }
this.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.msgArguments[].getClass().getName() one of { [], [java.lang.Object[]] }
this.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.getClass().getName() == java.util.HashMap.class
size(this.msgPatterns[]) one of { 0, 1 }
size(this.msgArguments[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.ExceptionContext():::EXIT
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
this.msgPatterns == orig(this.msgPatterns)
this.msgPatterns.getClass().getName() == orig(this.msgPatterns.getClass().getName())
this.msgArguments == orig(this.msgArguments)
this.msgArguments.getClass().getName() == orig(this.msgArguments.getClass().getName())
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
arguments[] == orig(arguments[])
size(this.msgPatterns[])-1 == orig(size(this.msgPatterns[]))
size(this.msgArguments[])-1 == orig(size(this.msgArguments[]))
this.msgPatterns[] contains no nulls and has only one value, of length 1
this.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.msgArguments[].getClass().getName() == [java.lang.Object[]]
arguments[] == []
size(this.msgPatterns[]) == 1
size(this.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats:::OBJECT
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension == 3
columnDimension == 3
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl:::OBJECT
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
this.index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.EntryImpl(org.apache.commons.math.linear.AbstractRealVector):::ENTER
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.EntryImpl(org.apache.commons.math.linear.AbstractRealVector):::EXIT
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
this.index == 0
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.getValue():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.getValue():::EXIT
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
this.index == orig(this.index)
return one of { 4.0, 5.0, 6.0 }
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator:::OBJECT
this.dim == 3
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
this.current.index one of { 0, 1, 2 }
this.next.index <= 2
this.next.index >= -1
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.SparseEntryIterator(org.apache.commons.math.linear.AbstractRealVector):::ENTER
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.SparseEntryIterator(org.apache.commons.math.linear.AbstractRealVector):::EXIT
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
this.current.index == 0
this.next.index == 0
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl):::ENTER
this.next.index one of { 0, 1, 2 }
e.index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl):::EXIT611
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl):::EXIT
this.dim == orig(this.dim)
this.current == orig(this.current)
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
this.current.index == orig(this.current.index)
this.next == orig(this.next)
this.next.index one of { -1, 1, 2 }
e.index one of { -1, 1, 2 }
this.next.index != orig(this.next.index)
e.index != orig(e.index)
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.hasNext():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.hasNext():::EXIT
this.dim == orig(this.dim)
this.current == orig(this.current)
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
this.current.index == orig(this.current.index)
this.next == orig(this.next)
this.next.index == orig(this.next.index)
(this.current.index == 2)  <==>  (return == false)
(this.current.index == 2)  <==>  (this.next.index == -1)
(this.current.index one of { 0, 1 })  <==>  (return == true)
(this.current.index one of { 0, 1 })  <==>  (this.next.index one of { 0, 1, 2 })
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.hasNext():::EXIT;condition="return == true"
this.current.index one of { 0, 1 }
this.next.index one of { 0, 1, 2 }
return == true
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.hasNext():::EXIT;condition="not(return == true)"
this.current.index == 2
this.next.index == -1
return == false
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.next():::ENTER
this.current.index one of { 0, 1 }
this.next.index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.next():::EXIT
this.dim == orig(this.dim)
this.current == orig(this.current)
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
this.next == orig(this.next)
this.next.index one of { -1, 1, 2 }
return.getClass().getName() == org.apache.commons.math.linear.AbstractRealVector$EntryImpl.class
return.index one of { 0, 1, 2 }
this.current.index >= orig(this.current.index)
this.next.index != orig(this.next.index)
===========================================================================
org.apache.commons.math.linear.AbstractRealVector:::OBJECT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.AbstractRealVector():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.add(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.add(org.apache.commons.math.linear.RealVector):::EXIT123
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.add(org.apache.commons.math.linear.RealVector):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.checkIndex(int):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.checkIndex(int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.checkVectorDimensions(int):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
n == 3
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.checkVectorDimensions(int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.checkVectorDimensions(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.checkVectorDimensions(org.apache.commons.math.linear.RealVector):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT
return == 32.0
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.getL1Norm():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.getL1Norm():::EXIT
return == 17.0
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.getLInfNorm():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.getLInfNorm():::EXIT
return == 6.0
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.getNorm():::ENTER
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.getNorm():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapDivide(double):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
d == 3.7416573867739413
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapDivide(double):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapDivideToSelf(double):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
d == 3.7416573867739413
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapDivideToSelf(double):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapMultiply(double):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
d == 0.4155844155844156
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapMultiply(double):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapMultiplyToSelf(double):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
d == 0.4155844155844156
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapMultiplyToSelf(double):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
function.getClass().getName() == org.apache.commons.math.analysis.FunctionUtils$7.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.outerProduct(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.outerProduct(org.apache.commons.math.linear.RealVector):::EXIT
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.sparseIterator():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.sparseIterator():::EXIT
return.getClass().getName() == org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.OpenMapRealMatrix.class
column one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkRowIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.OpenMapRealMatrix.class
row one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkRowIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix:::OBJECT
this.rows == 3
this.columns == 3
this.entries != null
this.entries.keys != null
this.entries.keys[] elements >= 0
this.entries.values != null
this.entries.values[] elements >= 0.0
this.entries.states != null
this.entries.states[] elements one of { 0, 1 }
this.entries.states[] sorted by >=
this.entries.missingEntries == 0.0
this.entries.size >= 0
this.entries.mask == 31
this.entries.count >= 0
size(this.entries.keys[]) == 32
size(this.entries.values[]) == 32
size(this.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.OpenMapRealMatrix(int, int):::ENTER
rowDimension == 3
columnDimension == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.OpenMapRealMatrix(int, int):::EXIT
this.entries.keys[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements == 0
this.entries.values[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements == 0.0
this.entries.states[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.states[] elements == 0
this.entries.size == 0
this.entries.count == 0
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.computeKey(int, int):::ENTER
row one of { 0, 1, 2 }
column one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.computeKey(int, int):::EXIT
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
return >= 0
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.getColumnDimension():::EXIT
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
return == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.getEntry(int, int):::ENTER
this.entries.keys[] == [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.values[] == [4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 12.0, 15.0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.states[] == [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 9
this.entries.count == 9
row == 0
column == 0
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.getEntry(int, int):::EXIT
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.entries.keys[] == [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.values[] == [4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 12.0, 15.0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.states[] == [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 9
this.entries.count == 9
return == 4.0
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.getRowDimension():::EXIT
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
return == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.setEntry(int, int, double):::ENTER
row one of { 0, 1, 2 }
column one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealMatrix.setEntry(int, int, double):::EXIT
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.values == orig(this.entries.values)
this.entries.states == orig(this.entries.states)
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.mask == orig(this.entries.mask)
size(this.entries.keys[]) == orig(size(this.entries.keys[]))
size(this.entries.values[]) == orig(size(this.entries.values[]))
size(this.entries.states[]) == orig(size(this.entries.states[]))
this.entries.keys[] >= orig(this.entries.keys[]) (elementwise)
this.entries.values[] > orig(this.entries.values[]) (lexically)
this.entries.values[] >= orig(this.entries.values[]) (elementwise)
this.entries.states[] > orig(this.entries.states[]) (lexically)
this.entries.states[] >= orig(this.entries.states[]) (elementwise)
this.entries.size - orig(this.entries.size) - 1 == 0
this.entries.count - orig(this.entries.count) - 1 == 0
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry:::OBJECT
this.iter.referenceCount one of { 0, 3, 5 }
this.iter.current >= -1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements one of { 0, 1 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 0, 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == 31
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] elements >= 0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] elements one of { 0, 1 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == 0.0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == 31
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize one of { 3, 6 }
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == 1.0E-12
this.index == 0
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.OpenMapEntry(org.apache.commons.math.linear.OpenMapRealVector, org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator):::ENTER
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] elements >= 0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] elements one of { 0, 1 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == 0.0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == 31
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize one of { 3, 6 }
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == 1.0E-12
iter.referenceCount one of { 0, 3, 5 }
iter.current == -1
iter.next one of { -2, 0 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements one of { 0, 1 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 0, 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == 31
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 0, 3, 5 }
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.OpenMapEntry(org.apache.commons.math.linear.OpenMapRealVector, org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
org.apache.commons.math.linear.OpenMapRealVector.this == orig(org.apache.commons.math.linear.OpenMapRealVector.this)
org.apache.commons.math.linear.OpenMapRealVector.this.entries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.size)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.count)
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == orig(org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize)
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == orig(org.apache.commons.math.linear.OpenMapRealVector.this.epsilon)
iter.referenceCount == orig(iter.referenceCount)
iter.current == orig(iter.current)
iter.next == orig(iter.next)
this.iter.current == -1
this.iter.next one of { -2, 0 }
iter.referenceCount one of { 0, 3, 5 }
iter.current == -1
iter.next one of { -2, 0 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.getIndex():::ENTER
this.iter.referenceCount == 3
this.iter.current one of { 0, 1, 2 }
this.iter.next one of { -2, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] elements >= 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] sorted by >=
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == 3
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == 3
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] elements >= 0.0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] sorted by >=
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == 3
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == 3
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.getIndex():::EXIT
this.iter == orig(this.iter)
this.iter.referenceCount == orig(this.iter.referenceCount)
this.iter.current == orig(this.iter.current)
this.iter.next == orig(this.iter.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
org.apache.commons.math.linear.OpenMapRealVector.this == orig(org.apache.commons.math.linear.OpenMapRealVector.this)
org.apache.commons.math.linear.OpenMapRealVector.this.entries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.size)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.count)
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == orig(org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize)
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == orig(org.apache.commons.math.linear.OpenMapRealVector.this.epsilon)
this.index == orig(this.index)
this.iter.referenceCount == 3
this.iter.current one of { 0, 1, 2 }
this.iter.next one of { -2, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] elements >= 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] sorted by >=
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == 3
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == 3
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] elements >= 0.0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] sorted by >=
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == 3
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == 3
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == 3
return one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.getValue():::ENTER
this.iter.referenceCount one of { 3, 5 }
this.iter.current >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 3, 5 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.getValue():::EXIT
this.iter == orig(this.iter)
this.iter.referenceCount == orig(this.iter.referenceCount)
this.iter.current == orig(this.iter.current)
this.iter.next == orig(this.iter.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
org.apache.commons.math.linear.OpenMapRealVector.this == orig(org.apache.commons.math.linear.OpenMapRealVector.this)
org.apache.commons.math.linear.OpenMapRealVector.this.entries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.size)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.count)
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == orig(org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize)
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == orig(org.apache.commons.math.linear.OpenMapRealVector.this.epsilon)
this.index == orig(this.index)
this.iter.referenceCount one of { 3, 5 }
this.iter.current >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 3, 5 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.setValue(double):::ENTER
this.iter.referenceCount == 3
this.iter.current one of { 0, 1, 2 }
this.iter.next one of { -2, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] elements >= 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == 3
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == 3
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] elements >= 0.0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == 3
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == 3
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.setValue(double):::EXIT
this.iter == orig(this.iter)
this.iter.referenceCount == orig(this.iter.referenceCount)
this.iter.current == orig(this.iter.current)
this.iter.next == orig(this.iter.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
org.apache.commons.math.linear.OpenMapRealVector.this == orig(org.apache.commons.math.linear.OpenMapRealVector.this)
org.apache.commons.math.linear.OpenMapRealVector.this.entries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.size)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.count)
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == orig(org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize)
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == orig(org.apache.commons.math.linear.OpenMapRealVector.this.epsilon)
this.index == orig(this.index)
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[]) == orig(size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[]))
this.iter.referenceCount == 3
this.iter.current one of { 0, 1, 2 }
this.iter.next one of { -2, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] elements >= 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == 3
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == 3
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] elements >= 0.0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == 3
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == 3
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator:::OBJECT
this.iter.referenceCount one of { 0, 3, 5 }
this.iter.current >= -1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements one of { 0, 1 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 0, 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == 31
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 0, 3, 5 }
this.current.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.class
this.current.index == 0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] elements >= 0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] elements one of { 0, 1 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == 0.0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == 31
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize one of { 3, 6 }
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == 1.0E-12
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.OpenMapSparseIterator(org.apache.commons.math.linear.OpenMapRealVector):::ENTER
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] elements >= 0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] elements one of { 0, 1 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == 0.0
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == 31
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 0, 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize one of { 3, 6 }
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == 1.0E-12
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[]) == 32
size(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.OpenMapSparseIterator(org.apache.commons.math.linear.OpenMapRealVector):::EXIT
org.apache.commons.math.linear.OpenMapRealVector.this == orig(org.apache.commons.math.linear.OpenMapRealVector.this)
org.apache.commons.math.linear.OpenMapRealVector.this.entries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.size)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.count)
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == orig(org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize)
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == orig(org.apache.commons.math.linear.OpenMapRealVector.this.epsilon)
this.iter.current == -1
this.iter.next one of { -2, 0 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.hasNext():::ENTER
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.hasNext():::EXIT
this.iter == orig(this.iter)
this.iter.referenceCount == orig(this.iter.referenceCount)
this.iter.current == orig(this.iter.current)
this.iter.next == orig(this.iter.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.current == orig(this.current)
this.current.getClass().getName() == orig(this.current.getClass().getName())
this.current.index == orig(this.current.index)
org.apache.commons.math.linear.OpenMapRealVector.this == orig(org.apache.commons.math.linear.OpenMapRealVector.this)
org.apache.commons.math.linear.OpenMapRealVector.this.entries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.size)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.count)
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == orig(org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize)
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == orig(org.apache.commons.math.linear.OpenMapRealVector.this.epsilon)
(this.iter.next == -2)  <==>  (return == false)
(this.iter.next == -2)  ==>  (org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 0, 3, 5 })
(this.iter.next == -2)  ==>  (org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.iter.next == -2)  ==>  (org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 0, 3, 5 })
(this.iter.next == -2)  ==>  (org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.iter.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 0, 3, 5 })
(this.iter.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.iter.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 0, 3, 5 })
(this.iter.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.iter.next == -2)  ==>  (this.iter.current one of { -1, 2, 5 })
(this.iter.next == -2)  ==>  (this.iter.referenceCount one of { 0, 3, 5 })
(this.iter.next >= 0)  <==>  (return == true)
(this.iter.next >= 0)  ==>  (org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 3, 5 })
(this.iter.next >= 0)  ==>  (org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.iter.next >= 0)  ==>  (org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 3, 5 })
(this.iter.next >= 0)  ==>  (org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.iter.next >= 0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 })
(this.iter.next >= 0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.iter.next >= 0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 })
(this.iter.next >= 0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.iter.next >= 0)  ==>  (this.iter.referenceCount one of { 3, 5 })
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.hasNext():::EXIT;condition="return == true"
this.iter.referenceCount one of { 3, 5 }
this.iter.next >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 3, 5 }
return == true
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.hasNext():::EXIT;condition="not(return == true)"
this.iter.current one of { -1, 2, 5 }
this.iter.next == -2
return == false
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.next():::ENTER
this.iter.referenceCount one of { 3, 5 }
this.iter.next >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 3, 5 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.next():::EXIT
this.iter == orig(this.iter)
this.iter.referenceCount == orig(this.iter.referenceCount)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.current == orig(this.current)
this.current.getClass().getName() == orig(this.current.getClass().getName())
this.current.index == orig(this.current.index)
org.apache.commons.math.linear.OpenMapRealVector.this == orig(org.apache.commons.math.linear.OpenMapRealVector.this)
org.apache.commons.math.linear.OpenMapRealVector.this.entries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.values[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[])
org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.missingEntries)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.size)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.mask)
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count == orig(org.apache.commons.math.linear.OpenMapRealVector.this.entries.count)
org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize == orig(org.apache.commons.math.linear.OpenMapRealVector.this.virtualSize)
org.apache.commons.math.linear.OpenMapRealVector.this.epsilon == orig(org.apache.commons.math.linear.OpenMapRealVector.this.epsilon)
this.iter.referenceCount one of { 3, 5 }
this.iter.current >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.size one of { 3, 5 }
org.apache.commons.math.linear.OpenMapRealVector.this.entries.count one of { 3, 5 }
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry.class
return.index == 0
this.iter.current > orig(this.iter.current)
this.iter.next != orig(this.iter.next)
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector:::CLASS
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector:::OBJECT
this.entries != null
this.entries.keys != null
this.entries.keys[] elements >= 0
this.entries.values != null
this.entries.states != null
this.entries.states[] elements one of { 0, 1 }
this.entries.missingEntries == 0.0
this.entries.mask == 31
this.virtualSize one of { 3, 6 }
this.epsilon == 1.0E-12
size(this.entries.keys[]) == 32
size(this.entries.values[]) == 32
size(this.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(double[]):::ENTER
size(values[]) one of { 3, 6 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(double[]):::EXIT
values[] == orig(values[])
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 0, 3, 5 }
this.entries.count one of { 0, 3, 5 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(double[], double):::ENTER
epsilon == 1.0E-12
size(values[]) one of { 3, 6 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(double[], double):::EXIT
values[] == orig(values[])
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 0, 3, 5 }
this.entries.count one of { 0, 3, 5 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(org.apache.commons.math.linear.OpenMapRealVector):::ENTER
v != null
v.entries != null
v.entries.keys != null
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
v.entries.values != null
v.entries.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
v.entries.values[] elements >= 0.0
v.entries.states != null
v.entries.states[] elements one of { 0, 1 }
v.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
v.entries.states[] sorted by >=
v.entries.missingEntries == 0.0
v.entries.size one of { 0, 3 }
v.entries.mask == 31
v.entries.count one of { 0, 3 }
v.virtualSize == 3
v.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(org.apache.commons.math.linear.OpenMapRealVector):::EXIT
v.entries == orig(v.entries)
v.entries.keys == orig(v.entries.keys)
v.entries.keys[] == orig(v.entries.keys[])
v.entries.values == orig(v.entries.values)
v.entries.values[] == orig(v.entries.values[])
v.entries.states == orig(v.entries.states)
v.entries.states[] == orig(v.entries.states[])
v.entries.missingEntries == orig(v.entries.missingEntries)
v.entries.size == orig(v.entries.size)
v.entries.mask == orig(v.entries.mask)
v.entries.count == orig(v.entries.count)
v.virtualSize == orig(v.virtualSize)
v.epsilon == orig(v.epsilon)
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] sorted by >=
this.entries.size one of { 0, 3 }
this.entries.count one of { 0, 3 }
this.virtualSize == 3
v.entries != null
v.entries.keys != null
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
v.entries.values != null
v.entries.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
v.entries.values[] elements >= 0.0
v.entries.states != null
v.entries.states[] elements one of { 0, 1 }
v.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
v.entries.states[] sorted by >=
v.entries.missingEntries == 0.0
v.entries.size one of { 0, 3 }
v.entries.mask == 31
v.entries.count one of { 0, 3 }
v.virtualSize == 3
v.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.add(org.apache.commons.math.linear.OpenMapRealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.add(org.apache.commons.math.linear.OpenMapRealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v.entries == orig(v.entries)
v.entries.keys == orig(v.entries.keys)
v.entries.keys[] == orig(v.entries.keys[])
v.entries.values == orig(v.entries.values)
v.entries.values[] == orig(v.entries.values[])
v.entries.states == orig(v.entries.states)
v.entries.states[] == orig(v.entries.states[])
v.entries.missingEntries == orig(v.entries.missingEntries)
v.entries.size == orig(v.entries.size)
v.entries.mask == orig(v.entries.mask)
v.entries.count == orig(v.entries.count)
v.virtualSize == orig(v.virtualSize)
v.epsilon == orig(v.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
return has only one value
return.entries has only one value
return.entries.keys has only one value
return.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.keys[] elements one of { 0, 1, 2 }
return.entries.values has only one value
return.entries.values[] == [5.0, 7.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.entries.values[] elements >= 0.0
return.entries.states has only one value
return.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.states[] elements one of { 0, 1 }
return.entries.missingEntries == 0.0
return.entries.size == 3
return.entries.mask == 31
return.entries.count == 3
return.virtualSize == 3
return.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
size(return.entries.keys[]) == 32
size(return.entries.values[]) == 32
size(return.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.add(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.add(org.apache.commons.math.linear.RealVector):::EXIT230
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.add(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.copy():::ENTER
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] sorted by >=
this.entries.size one of { 0, 3 }
this.entries.count one of { 0, 3 }
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.copy():::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] sorted by >=
this.entries.size one of { 0, 3 }
this.entries.count one of { 0, 3 }
this.virtualSize == 3
return.entries.keys[] elements one of { 0, 1, 2 }
return.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.entries.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
return.entries.values[] elements >= 0.0
return.entries.states[] elements one of { 0, 1 }
return.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.entries.states[] sorted by >=
return.entries.missingEntries == 0.0
return.entries.size one of { 0, 3 }
return.entries.mask == 31
return.entries.count one of { 0, 3 }
return.virtualSize == 3
return.epsilon == 1.0E-12
size(return.entries.keys[]) == 32
size(return.entries.values[]) == 32
size(return.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.dotProduct(org.apache.commons.math.linear.OpenMapRealVector):::ENTER
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.dotProduct(org.apache.commons.math.linear.OpenMapRealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v.entries == orig(v.entries)
v.entries.keys == orig(v.entries.keys)
v.entries.keys[] == orig(v.entries.keys[])
v.entries.values == orig(v.entries.values)
v.entries.values[] == orig(v.entries.values[])
v.entries.states == orig(v.entries.states)
v.entries.states[] == orig(v.entries.states[])
v.entries.missingEntries == orig(v.entries.missingEntries)
v.entries.size == orig(v.entries.size)
v.entries.mask == orig(v.entries.mask)
v.entries.count == orig(v.entries.count)
v.virtualSize == orig(v.virtualSize)
v.epsilon == orig(v.epsilon)
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
return one of { 32.0, 77.0 }
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::ENTER
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT335
orig(v) has only one value
orig(v.getClass().getName()) == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT337
this.entries has only one value
this.entries.keys has only one value
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.states has only one value
return == 32.0
orig(this) has only one value
orig(v) has only one value
orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
(orig(v.getClass().getName()) == org.apache.commons.math.linear.OpenMapRealVector.class)  ==>  (return one of { 32.0, 77.0 })
(orig(v.getClass().getName()) == org.apache.commons.math.linear.OpenMapRealVector.class)  ==>  (this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
(orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class)  ==>  (orig(this) has only one value)
(orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class)  ==>  (return == 32.0)
(orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class)  ==>  (this.entries has only one value)
(orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class)  ==>  (this.entries.keys has only one value)
(orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class)  ==>  (this.entries.states has only one value)
(orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class)  ==>  (this.entries.values has only one value)
(orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class)  ==>  (this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return one of { 32.0, 77.0 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.ebeDivide(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.ebeDivide(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.keys[] elements one of { 0, 1, 2 }
return.entries.values[] == [0.25, 0.4, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.entries.values[] elements >= 0.0
return.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.states[] elements one of { 0, 1 }
return.entries.missingEntries == 0.0
return.entries.size == 3
return.entries.mask == 31
return.entries.count == 3
return.virtualSize == 3
return.epsilon == 1.0E-12
size(return.entries.keys[]) == 32
size(return.entries.values[]) == 32
size(return.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.keys[] elements one of { 0, 1, 2 }
return.entries.values[] == [4.0, 10.0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.entries.values[] elements >= 0.0
return.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.states[] elements one of { 0, 1 }
return.entries.missingEntries == 0.0
return.entries.size == 3
return.entries.mask == 31
return.entries.count == 3
return.virtualSize == 3
return.epsilon == 1.0E-12
size(return.entries.keys[]) == 32
size(return.entries.values[]) == 32
size(return.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getData():::ENTER
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.states[] sorted by >=
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getData():::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.states[] sorted by >=
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return != null
return[] sorted by <=
size(return[]) == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDimension():::ENTER
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] sorted by >=
this.entries.size one of { 0, 3 }
this.entries.count one of { 0, 3 }
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDimension():::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] sorted by >=
this.entries.size one of { 0, 3 }
this.entries.count one of { 0, 3 }
this.virtualSize == 3
return == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDistance(double[]):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v[] == [4.0, 5.0, 6.0]
v[] elements one of { 4.0, 5.0, 6.0 }
size(v[]) == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDistance(double[]):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v[] == orig(v[])
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v[] == [4.0, 5.0, 6.0]
v[] elements one of { 4.0, 5.0, 6.0 }
return == 5.196152422706632
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDistance(org.apache.commons.math.linear.OpenMapRealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDistance(org.apache.commons.math.linear.OpenMapRealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v.entries == orig(v.entries)
v.entries.keys == orig(v.entries.keys)
v.entries.keys[] == orig(v.entries.keys[])
v.entries.values == orig(v.entries.values)
v.entries.values[] == orig(v.entries.values[])
v.entries.states == orig(v.entries.states)
v.entries.states[] == orig(v.entries.states[])
v.entries.missingEntries == orig(v.entries.missingEntries)
v.entries.size == orig(v.entries.size)
v.entries.mask == orig(v.entries.mask)
v.entries.count == orig(v.entries.count)
v.virtualSize == orig(v.virtualSize)
v.epsilon == orig(v.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
return == 5.196152422706632
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDistance(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDistance(org.apache.commons.math.linear.RealVector):::EXIT462
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDistance(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return == 5.196152422706632
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getEntries():::ENTER
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] sorted by >=
this.entries.size one of { 0, 3 }
this.entries.count one of { 0, 3 }
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getEntries():::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] sorted by >=
this.entries.size one of { 0, 3 }
this.entries.count one of { 0, 3 }
this.virtualSize == 3
return != null
return.keys != null
return.keys[] elements one of { 0, 1, 2 }
return.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.values != null
return.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
return.values[] elements >= 0.0
return.states != null
return.states[] elements one of { 0, 1 }
return.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.states[] sorted by >=
return.missingEntries == 0.0
return.size one of { 0, 3 }
return.mask == 31
return.count one of { 0, 3 }
size(return.keys[]) == 32
size(return.values[]) == 32
size(return.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getEntry(int):::ENTER
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.states[] sorted by >=
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getEntry(int):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.values[] elements >= 0.0
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.states[] sorted by >=
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getL1Distance(double[]):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v[] == [4.0, 5.0, 6.0]
v[] elements one of { 4.0, 5.0, 6.0 }
size(v[]) == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getL1Distance(double[]):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v[] == orig(v[])
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v[] == [4.0, 5.0, 6.0]
v[] elements one of { 4.0, 5.0, 6.0 }
return == 9.0
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getL1Distance(org.apache.commons.math.linear.OpenMapRealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getL1Distance(org.apache.commons.math.linear.OpenMapRealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v.entries == orig(v.entries)
v.entries.keys == orig(v.entries.keys)
v.entries.keys[] == orig(v.entries.keys[])
v.entries.values == orig(v.entries.values)
v.entries.values[] == orig(v.entries.values[])
v.entries.states == orig(v.entries.states)
v.entries.states[] == orig(v.entries.states[])
v.entries.missingEntries == orig(v.entries.missingEntries)
v.entries.size == orig(v.entries.size)
v.entries.mask == orig(v.entries.mask)
v.entries.count == orig(v.entries.count)
v.virtualSize == orig(v.virtualSize)
v.epsilon == orig(v.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
return == 9.0
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getL1Distance(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getL1Distance(org.apache.commons.math.linear.RealVector):::EXIT519
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getL1Distance(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return == 9.0
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getLInfDistance(double[]):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v[] == [4.0, 5.0, 6.0]
v[] elements one of { 4.0, 5.0, 6.0 }
size(v[]) == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getLInfDistance(double[]):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v[] == orig(v[])
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v[] == [4.0, 5.0, 6.0]
v[] elements one of { 4.0, 5.0, 6.0 }
return == 3.0
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v.entries == orig(v.entries)
v.entries.keys == orig(v.entries.keys)
v.entries.keys[] == orig(v.entries.keys[])
v.entries.values == orig(v.entries.values)
v.entries.values[] == orig(v.entries.values[])
v.entries.states == orig(v.entries.states)
v.entries.states[] == orig(v.entries.states[])
v.entries.missingEntries == orig(v.entries.missingEntries)
v.entries.size == orig(v.entries.size)
v.entries.mask == orig(v.entries.mask)
v.entries.count == orig(v.entries.count)
v.virtualSize == orig(v.virtualSize)
v.epsilon == orig(v.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
return == 3.0
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getLInfDistance(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getLInfDistance(org.apache.commons.math.linear.RealVector):::EXIT568
orig(v) has only one value
orig(v.getClass().getName()) == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getLInfDistance(org.apache.commons.math.linear.RealVector):::EXIT570
orig(v) has only one value
orig(v.getClass().getName()) == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getLInfDistance(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return == 3.0
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::ENTER
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
(return == true)  <==>  (orig(value) == 0.0)
(return == true)  ==>  (this.entries.count one of { 0, 1 })
(return == true)  ==>  (this.entries.keys[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == true)  ==>  (this.entries.keys[] elements == 0)
(return == true)  ==>  (this.entries.size one of { 0, 1 })
(return == true)  ==>  (this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.entries.values[] elements one of { -4.0, 0.0 })
(return == true)  ==>  (this.entries.values[] one of { [-4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT;condition="return == true"
this.entries.keys[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements == 0
this.entries.values[] elements one of { -4.0, 0.0 }
this.entries.values[] one of { [-4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 0, 1 }
this.entries.count one of { 0, 1 }
return == true
orig(value) == 0.0
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.projection(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.projection(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.setEntry(int, double):::ENTER
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.states[] sorted by >=
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.setEntry(int, double):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
size(this.entries.values[]) == orig(size(this.entries.values[]))
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.states[] sorted by >=
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.sparseIterator():::ENTER
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 0, 3, 5 }
this.entries.count one of { 0, 3, 5 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.sparseIterator():::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 0, 3, 5 }
this.entries.count one of { 0, 3, 5 }
return != null
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.subtract(double[]):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v[] == [4.0, 5.0, 6.0]
v[] elements one of { 4.0, 5.0, 6.0 }
size(v[]) == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.subtract(double[]):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v[] == orig(v[])
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v[] == [4.0, 5.0, 6.0]
v[] elements one of { 4.0, 5.0, 6.0 }
return has only one value
return.entries has only one value
return.entries.keys has only one value
return.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.keys[] elements one of { 0, 1, 2 }
return.entries.values has only one value
return.entries.values[] == [-3.0, -3.0, -3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.entries.values[] elements one of { -3.0, 0.0 }
return.entries.states has only one value
return.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.states[] elements one of { 0, 1 }
return.entries.missingEntries == 0.0
return.entries.size == 3
return.entries.mask == 31
return.entries.count == 3
return.virtualSize == 3
return.epsilon == 1.0E-12
size(return.entries.keys[]) == 32
size(return.entries.values[]) == 32
size(return.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.subtract(org.apache.commons.math.linear.OpenMapRealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.subtract(org.apache.commons.math.linear.OpenMapRealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
v.entries == orig(v.entries)
v.entries.keys == orig(v.entries.keys)
v.entries.keys[] == orig(v.entries.keys[])
v.entries.values == orig(v.entries.values)
v.entries.values[] == orig(v.entries.values[])
v.entries.states == orig(v.entries.states)
v.entries.states[] == orig(v.entries.states[])
v.entries.missingEntries == orig(v.entries.missingEntries)
v.entries.size == orig(v.entries.size)
v.entries.mask == orig(v.entries.mask)
v.entries.count == orig(v.entries.count)
v.virtualSize == orig(v.virtualSize)
v.epsilon == orig(v.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v.entries has only one value
v.entries.keys has only one value
v.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.keys[] elements one of { 0, 1, 2 }
v.entries.values has only one value
v.entries.values[] == [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
v.entries.values[] elements >= 0.0
v.entries.states has only one value
v.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v.entries.states[] elements one of { 0, 1 }
v.entries.missingEntries == 0.0
v.entries.size == 3
v.entries.mask == 31
v.entries.count == 3
v.virtualSize == 3
v.epsilon == 1.0E-12
return.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.keys[] elements one of { 0, 1, 2 }
return.entries.values[] == [-3.0, -3.0, -3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.entries.values[] elements one of { -3.0, 0.0 }
return.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.states[] elements one of { 0, 1 }
return.entries.missingEntries == 0.0
return.entries.size == 3
return.entries.mask == 31
return.entries.count == 3
return.virtualSize == 3
return.epsilon == 1.0E-12
size(v.entries.keys[]) == 32
size(v.entries.values[]) == 32
size(v.entries.states[]) == 32
size(return.entries.keys[]) == 32
size(return.entries.values[]) == 32
size(return.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.subtract(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT728
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return has only one value
return.entries has only one value
return.entries.keys has only one value
return.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.keys[] elements one of { 0, 1, 2 }
return.entries.values has only one value
return.entries.values[] == [-3.0, -3.0, -3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.entries.values[] elements one of { -3.0, 0.0 }
return.entries.states has only one value
return.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.states[] elements one of { 0, 1 }
return.entries.missingEntries == 0.0
return.entries.size == 3
return.entries.mask == 31
return.entries.count == 3
return.virtualSize == 3
return.epsilon == 1.0E-12
size(return.entries.keys[]) == 32
size(return.entries.values[]) == 32
size(return.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.unitVector():::ENTER
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.unitVector():::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values has only one value
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states has only one value
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
return has only one value
return.entries has only one value
return.entries.keys has only one value
return.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.keys[] elements one of { 0, 1, 2 }
return.entries.values has only one value
return.entries.values[] == [0.2672612419124244, 0.5345224838248488, 0.8017837257372732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.entries.values[] elements >= 0.0
return.entries.states has only one value
return.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return.entries.states[] elements one of { 0, 1 }
return.entries.missingEntries == 0.0
return.entries.size == 3
return.entries.mask == 31
return.entries.count == 3
return.virtualSize == 3
return.epsilon == 1.0E-12
size(return.entries.keys[]) == 32
size(return.entries.values[]) == 32
size(return.entries.states[]) == 32
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.unitize():::ENTER
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values[] == [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.unitize():::EXIT
this.entries == orig(this.entries)
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
this.epsilon == orig(this.epsilon)
size(this.entries.values[]) == orig(size(this.entries.values[]))
this.entries.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values[] == [0.2672612419124244, 0.5345224838248488, 0.8017837257372732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements >= 0.0
this.entries.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.size == 3
this.entries.count == 3
this.virtualSize == 3
9.007199254740992E15 * this.entries.values[] - 2.407275258974741E15 * orig(this.entries.values[]) == 0
===========================================================================
org.apache.commons.math.linear.RealLinearOperator:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealMatrix.class
===========================================================================
org.apache.commons.math.linear.RealLinearOperator.RealLinearOperator():::EXIT
===========================================================================
org.apache.commons.math.linear.RealVector$Entry:::OBJECT
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.Entry():::EXIT
this.index == 0
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.getIndex():::ENTER
this.getClass().getName() == org.apache.commons.math.linear.AbstractRealVector$EntryImpl.class
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.getIndex():::EXIT
this.index == orig(this.index)
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.setIndex(int):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.AbstractRealVector$EntryImpl.class
this.index >= 0
index >= -1
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.setIndex(int):::EXIT
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl:::OBJECT
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.SparseRealVectorTestImpl(double[]):::ENTER
d[] == [4.0, 5.0, 6.0]
d[] elements one of { 4.0, 5.0, 6.0 }
size(d[]) == 3
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.SparseRealVectorTestImpl(double[]):::EXIT
d[] == orig(d[])
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
d[] == [4.0, 5.0, 6.0]
d[] elements one of { 4.0, 5.0, 6.0 }
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.copy():::ENTER
this has only one value
this.data has only one value
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.copy():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.dotProduct(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.data has only one value
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
return == 77.0
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.getData():::ENTER
this.data[] one of { [4.0, 5.0, 6.0], [5.0, 7.0, 9.0] }
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.getData():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] one of { [4.0, 5.0, 6.0], [5.0, 7.0, 9.0] }
return[] one of { [4.0, 5.0, 6.0], [5.0, 7.0, 9.0] }
size(return[]) == 3
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.getDimension():::ENTER
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
this.data[] sorted by <
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.getDimension():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
this.data[] sorted by <
return == 3
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.getEntry(int):::ENTER
this.data[] one of { [4.0, 5.0, 6.0], [5.0, 5.0, 6.0], [5.0, 7.0, 6.0] }
index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.getEntry(int):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] one of { [4.0, 5.0, 6.0], [5.0, 5.0, 6.0], [5.0, 7.0, 6.0] }
return one of { 4.0, 5.0, 6.0 }
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.mapMultiply(double):::ENTER
this has only one value
this.data has only one value
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
d == 0.4155844155844156
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.mapMultiply(double):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [4.0, 5.0, 6.0]
this.data[] elements one of { 4.0, 5.0, 6.0 }
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.setEntry(int, double):::ENTER
this has only one value
this.data has only one value
this.data[] one of { [4.0, 5.0, 6.0], [5.0, 5.0, 6.0], [5.0, 7.0, 6.0] }
index one of { 0, 1, 2 }
value one of { 5.0, 7.0, 9.0 }
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl.setEntry(int, double):::EXIT
this.data == orig(this.data)
size(this.data[]) == orig(size(this.data[]))
this.data has only one value
this.data[] one of { [5.0, 5.0, 6.0], [5.0, 7.0, 6.0], [5.0, 7.0, 9.0] }
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest:::OBJECT
this has only one value
this.ma1 has only one value
this.ma1 != null
this.ma1.getClass().getName() == double[][].class
this.ma1[] contains no nulls and has only one value, of length 3
this.ma1[] elements != null
this.vec1 has only one value
this.vec1 != null
this.vec1[] == [1.0, 2.0, 3.0]
this.vec1[] elements one of { 1.0, 2.0, 3.0 }
this.vec1[] sorted by <
this.vec2 has only one value
this.vec2 != null
this.vec2[] == [4.0, 5.0, 6.0]
this.vec2[] elements one of { 4.0, 5.0, 6.0 }
this.vec2[] sorted by <
this.vec3 has only one value
this.vec3 != null
this.vec3[] == [7.0, 8.0, 9.0]
this.vec3[] elements one of { 7.0, 8.0, 9.0 }
this.vec3[] sorted by <
this.vec4 has only one value
this.vec4 != null
this.vec4[] == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
this.vec4[] elements >= 1.0
this.vec4[] sorted by <
this.vec5 has only one value
this.vec5 != null
this.vec5[] == [-4.0, 0.0, 3.0, 1.0, -6.0, 3.0]
this.vec_null has only one value
this.vec_null != null
this.vec_null[] == [0.0, 0.0, 0.0]
this.vec_null[] elements == 0.0
this.dvec1 has only one value
this.dvec1 != null
this.dvec1.getClass().getName() == java.lang.Double[].class
this.dvec1[] contains no nulls and has only one value, of length 9
this.dvec1[] elements != null
this.dvec1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
this.dvec1[].getClass().getName() elements == java.lang.Double.class
this.mat1 has only one value
this.mat1 != null
this.mat1.getClass().getName() == double[][].class
this.mat1[] contains no nulls and has only one value, of length 3
this.mat1[] elements != null
this.entryTolerance == 1.0E-15
this.normTolerance == 1.0E-13
size(this.ma1[]) == 3
size(this.vec1[]) == 3
size(this.vec2[]) == 3
size(this.vec3[]) == 3
size(this.vec4[]) == 9
size(this.vec5[]) == 6
size(this.vec_null[]) == 3
size(this.dvec1[]) == 9
size(this.mat1[]) == 3
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest.SparseRealVectorTest():::EXIT
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest.assertClose(java.lang.String, double[], double[], double):::ENTER
msg has only one value
msg != null
msg.toString == "compare vect"
m != null
m[] sorted by <=
n != null
n[] sorted by <=
tolerance == 1.0E-13
size(m[]) == 3
size(n[]) == 3
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest.assertClose(java.lang.String, double[], double[], double):::EXIT
this.ma1 == orig(this.ma1)
this.ma1.getClass().getName() == orig(this.ma1.getClass().getName())
this.ma1[] == orig(this.ma1[])
this.vec1 == orig(this.vec1)
this.vec1[] == orig(this.vec1[])
this.vec2 == orig(this.vec2)
this.vec2[] == orig(this.vec2[])
this.vec3 == orig(this.vec3)
this.vec3[] == orig(this.vec3[])
this.vec4 == orig(this.vec4)
this.vec4[] == orig(this.vec4[])
this.vec5 == orig(this.vec5)
this.vec5[] == orig(this.vec5[])
this.vec_null == orig(this.vec_null)
this.vec_null[] == orig(this.vec_null[])
this.dvec1 == orig(this.dvec1)
this.dvec1.getClass().getName() == orig(this.dvec1.getClass().getName())
this.dvec1[] == orig(this.dvec1[])
this.mat1 == orig(this.mat1)
this.mat1.getClass().getName() == orig(this.mat1.getClass().getName())
this.mat1[] == orig(this.mat1[])
this.entryTolerance == orig(this.entryTolerance)
this.normTolerance == orig(this.normTolerance)
msg.toString == orig(msg.toString)
m[] == orig(m[])
n[] == orig(n[])
msg.toString == "compare vect"
m[] sorted by <=
n[] sorted by <=
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions():::ENTER
===========================================================================
org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions():::EXIT
this.ma1 == orig(this.ma1)
this.ma1.getClass().getName() == orig(this.ma1.getClass().getName())
this.ma1[] == orig(this.ma1[])
this.vec1 == orig(this.vec1)
this.vec1[] == orig(this.vec1[])
this.vec2 == orig(this.vec2)
this.vec2[] == orig(this.vec2[])
this.vec3 == orig(this.vec3)
this.vec3[] == orig(this.vec3[])
this.vec4 == orig(this.vec4)
this.vec4[] == orig(this.vec4[])
this.vec5 == orig(this.vec5)
this.vec5[] == orig(this.vec5[])
this.vec_null == orig(this.vec_null)
this.vec_null[] == orig(this.vec_null[])
this.dvec1 == orig(this.dvec1)
this.dvec1.getClass().getName() == orig(this.dvec1.getClass().getName())
this.dvec1[] == orig(this.dvec1[])
this.mat1 == orig(this.mat1)
this.mat1.getClass().getName() == orig(this.mat1.getClass().getName())
this.mat1[] == orig(this.mat1[])
this.entryTolerance == orig(this.entryTolerance)
this.normTolerance == orig(this.normTolerance)
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a[] sorted by >
b[] sorted by >
size(a[]) == 2
size(b[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] sorted by >
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return[] sorted by >=
size(return[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] sorted by >=
result[] <= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
size(split[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
b[] elements <= 2.0
ans[] sorted by >=
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
result[] elements <= 1.0
size(in[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::EXIT
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:::OBJECT
this.referenceCount one of { 0, 3, 5 }
this.current >= -1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements one of { 0, 1 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 0, 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == 31
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 0, 3, 5 }
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]) == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.Iterator(org.apache.commons.math.util.OpenIntToDoubleHashMap):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements one of { 0, 1 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 0, 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == 31
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 0, 3, 5 }
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]) == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.Iterator(org.apache.commons.math.util.OpenIntToDoubleHashMap):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.current == -1
this.next one of { -2, 0 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance():::ENTER
this.referenceCount one of { 3, 5 }
this.next >= -1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance():::EXIT
this.referenceCount == orig(this.referenceCount)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.referenceCount one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
this.current != orig(this.current)
this.next != orig(this.next)
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::ENTER
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT
this.referenceCount == orig(this.referenceCount)
this.current == orig(this.current)
this.next == orig(this.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
(this.next == -2)  <==>  (return == false)
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 0, 3, 5 })
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 0, 3, 5 })
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.next == -2)  ==>  (this.current one of { -1, 2, 5 })
(this.next == -2)  ==>  (this.referenceCount one of { 0, 3, 5 })
(this.next >= 0)  <==>  (return == true)
(this.next >= 0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 })
(this.next >= 0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.next >= 0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 })
(this.next >= 0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.next >= 0)  ==>  (this.referenceCount one of { 3, 5 })
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT;condition="return == true"
this.referenceCount one of { 3, 5 }
this.next >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
return == true
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT;condition="not(return == true)"
this.current one of { -1, 2, 5 }
this.next == -2
return == false
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.key():::ENTER
this.referenceCount == 3
this.current one of { 0, 1, 2 }
this.next one of { -2, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] sorted by >=
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == 3
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == 3
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.key():::EXIT
this.referenceCount == orig(this.referenceCount)
this.current == orig(this.current)
this.next == orig(this.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.referenceCount == 3
this.current one of { 0, 1, 2 }
this.next one of { -2, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] sorted by >=
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == 3
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == 3
return one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.value():::ENTER
this.referenceCount one of { 3, 5 }
this.current >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.value():::EXIT
this.referenceCount == orig(this.referenceCount)
this.current == orig(this.current)
this.next == orig(this.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.referenceCount one of { 3, 5 }
this.current >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 3, 5 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap:::CLASS
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap:::OBJECT
this.keys[] elements >= 0
this.states[] elements one of { 0, 1 }
this.missingEntries == 0.0
this.size >= 0
this.mask == 31
this.count >= 0
size(this.keys[]) == 32
size(this.values[]) == 32
size(this.states[]) == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(double):::ENTER
missingEntries == 0.0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(double):::EXIT
this.keys[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements == 0
this.values[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements == 0.0
this.states[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] elements == 0
this.size == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(int, double):::ENTER
expectedSize == 16
missingEntries == 0.0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(int, double):::EXIT
this.keys[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements == 0
this.values[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements == 0.0
this.states[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] elements == 0
this.size == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(org.apache.commons.math.util.OpenIntToDoubleHashMap):::ENTER
source != null
source.keys != null
source.keys[] elements one of { 0, 1, 2 }
source.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
source.values != null
source.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
source.values[] elements >= 0.0
source.states != null
source.states[] elements one of { 0, 1 }
source.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
source.states[] sorted by >=
source.missingEntries == 0.0
source.size one of { 0, 3 }
source.mask == 31
source.count one of { 0, 3 }
size(source.keys[]) == 32
size(source.values[]) == 32
size(source.states[]) == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(org.apache.commons.math.util.OpenIntToDoubleHashMap):::EXIT
source.keys == orig(source.keys)
source.keys[] == orig(source.keys[])
source.values == orig(source.values)
source.values[] == orig(source.values[])
source.states == orig(source.states)
source.states[] == orig(source.states[])
source.missingEntries == orig(source.missingEntries)
source.size == orig(source.size)
source.mask == orig(source.mask)
source.count == orig(source.count)
this.keys != null
this.keys[] elements one of { 0, 1, 2 }
this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values != null
this.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states != null
this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.states[] sorted by >=
this.size one of { 0, 3 }
this.count one of { 0, 3 }
source.keys != null
source.keys[] elements one of { 0, 1, 2 }
source.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
source.values != null
source.values[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
source.values[] elements >= 0.0
source.states != null
source.states[] elements one of { 0, 1 }
source.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
source.states[] sorted by >=
source.missingEntries == 0.0
source.size one of { 0, 3 }
source.mask == 31
source.count one of { 0, 3 }
size(source.keys[]) == 32
size(source.values[]) == 32
size(source.states[]) == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(int):::ENTER
index <= 2
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(int):::EXIT
return <= 2
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.computeCapacity(int):::ENTER
expectedSize == 16
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.computeCapacity(int):::EXIT159
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.computeCapacity(int):::EXIT
return == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::ENTER
this.keys != null
this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 1, 2 }
this.values != null
this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states != null
this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] sorted by >=
this.size == 3
this.count == 3
key one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::EXIT213
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::EXIT213;condition="return == true"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.count == orig(this.count)
this.keys != null
this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 1, 2 }
this.values != null
this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states != null
this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] sorted by >=
this.size == 3
this.count == 3
return == true
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::ENTER
this.keys[] one of { [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 12.0, 15.0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.states[] sorted by >=
this.size one of { 3, 9 }
this.count one of { 3, 9 }
key one of { 0, 1, 2 }
index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.count == orig(this.count)
this.keys[] one of { [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 12.0, 15.0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.states[] sorted by >=
this.size one of { 3, 9 }
this.count one of { 3, 9 }
return == true
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int):::ENTER
key >= 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.count == orig(this.count)
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int):::ENTER
keys[] elements >= 0
states[] elements one of { 0, 1 }
key >= 0
mask == 31
size(keys[]) == 32
size(states[]) == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int):::EXIT275
return >= 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int):::EXIT277
keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
keys[] elements one of { 0, 1, 2 }
states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
states[] sorted by >=
return one of { -3, -2, -1 }
orig(key) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int):::EXIT
keys[] == orig(keys[])
states[] == orig(states[])
keys[] elements >= 0
states[] elements one of { 0, 1 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.get(int):::ENTER
this.keys != null
this.keys[] one of { [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values != null
this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 12.0, 15.0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states != null
this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.states[] sorted by >=
this.size one of { 3, 9 }
this.count one of { 3, 9 }
key one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.get(int):::EXIT183
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.get(int):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.count == orig(this.count)
this.keys != null
this.keys[] one of { [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values != null
this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 8.0, 10.0, 12.0, 12.0, 15.0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states != null
this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.states[] sorted by >=
this.size one of { 3, 9 }
this.count one of { 3, 9 }
return >= 1.0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.hashOf(int):::ENTER
key >= 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.hashOf(int):::EXIT
return >= 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.iterator():::ENTER
this.keys != null
this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values != null
this.states != null
this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 5 }
this.count one of { 0, 3, 5 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.iterator():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.count == orig(this.count)
this.keys != null
this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values != null
this.states != null
this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 5 }
this.count one of { 0, 3, 5 }
return != null
return.referenceCount one of { 0, 3, 5 }
return.current == -1
return.next one of { -2, 0 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= 0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements one of { 0, 1 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size one of { 0, 3, 5 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == 31
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count one of { 0, 3, 5 }
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]) == 32
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]) == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.put(int, double):::ENTER
key >= 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.put(int, double):::EXIT
this.keys == orig(this.keys)
this.values == orig(this.values)
this.states == orig(this.states)
this.missingEntries == orig(this.missingEntries)
this.mask == orig(this.mask)
size(this.keys[]) == orig(size(this.keys[]))
size(this.values[]) == orig(size(this.values[]))
size(this.states[]) == orig(size(this.states[]))
this.size >= 1
this.count >= 1
return >= 0.0
this.keys[] >= orig(this.keys[]) (elementwise)
this.states[] >= orig(this.states[]) (elementwise)
this.size >= orig(this.size)
this.count >= orig(this.count)
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable():::ENTER
this.size >= 1
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.count == orig(this.count)
this.size >= 1
return == false
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.size():::ENTER
this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 1, 2 }
this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] sorted by >=
this.size == 3
this.count == 3
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.size():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.count == orig(this.count)
this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 1, 2 }
this.values[] one of { [1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.values[] elements >= 0.0
this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] sorted by >=
this.size == 3
this.count == 3
return == 3
