{"org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor":[{"OBJECT":[{"f.inv.output":{"invs":["this has only one value","this.boundarySize >= 0.0"]}},{"b.inv.output":"N/A"}]},{"visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)":[{"ENTER":[{"f.inv.output":{"invs":["this.boundarySize one of { 0.0, 21.99999594688441 }","node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class"]}},{"b.inv.output":"N/A"}]},{"EXIT":[{"f.inv.output":{"invs":["this.boundarySize one of { 0.0, 21.99999594688441 }","return has only one value","node.cut == orig(node.cut)","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value","node.plus.plus == orig(node.plus.plus)","node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())","node.parent == orig(node.parent)","node.parent.cut == orig(node.parent.cut)","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value","node.attribute == orig(node.attribute)","node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.minus.attribute == orig(node.minus.attribute)","node.minus.minus == orig(node.minus.minus)","node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value","node.plus.parent == orig(node.plus.parent)","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6","node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())","node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())","node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())","node.parent.attribute == orig(node.parent.attribute)","node.minus == orig(node.minus)","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class","size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6","node.plus.cut == orig(node.plus.cut)","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]","this.boundarySize == orig(this.boundarySize)","node.plus.attribute == orig(node.plus.attribute)","node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value","node.parent.parent == orig(node.parent.parent)","node.plus.minus == orig(node.plus.minus)","node.parent.plus == orig(node.parent.plus)","node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value","node.cut.getClass().getName() == orig(node.cut.getClass().getName())","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value","node.minus.parent == orig(node.minus.parent)","node.parent.minus == orig(node.parent.minus)","org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class","node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())","node.plus == orig(node.plus)","node.minus.plus == orig(node.minus.plus)","node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.minus.cut == orig(node.minus.cut)","node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class"]}},{"b.inv.output":"N/A"}]}]},{"visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)":[{"ENTER":[{"f.inv.output":{"invs":["node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.attribute.getClass().getName() == java.lang.Boolean.class","node.cut == null","node.plus == null","node.minus == null","node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class"]}},{"b.inv.output":"N/A"}]},{"EXIT":[{"f.inv.output":{"invs":["node.parent.minus == orig(node.parent.minus)","node.cut == orig(node.cut)","node.attribute == orig(node.attribute)","this.boundarySize == orig(this.boundarySize)","node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.attribute.getClass().getName() == java.lang.Boolean.class","node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())","node.minus == null","node.plus == orig(node.plus)","node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.parent.parent == orig(node.parent.parent)","node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())","node.parent.plus == orig(node.parent.plus)","node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())","node.cut == null","node.parent.attribute == orig(node.parent.attribute)","node.parent == orig(node.parent)","node.minus == orig(node.minus)","node.parent.cut == orig(node.parent.cut)","node.plus == null"]}},{"b.inv.output":"N/A"}]}]},{"getSize()":[{"ENTER":[{"f.inv.output":{"invs":["this.boundarySize == 23.999995946884667"]}},{"b.inv.output":"N/A"}]},{"EXIT":[{"f.inv.output":{"invs":["this.boundarySize == orig(this.boundarySize)","this.boundarySize == 23.999995946884667","return == 23.999995946884667"]}},{"b.inv.output":"N/A"}]}]},{"BoundarySizeVisitor()":[{"EXIT":[{"f.inv.output":{"invs":["this.boundarySize == 0.0"]}},{"b.inv.output":"N/A"}]}]},{"visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)":[{"ENTER":[{"f.inv.output":{"invs":["node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class"]}},{"b.inv.output":"N/A"}]},{"EXIT":[{"f.inv.output":{"invs":["node.cut == orig(node.cut)","node.plus.cut == orig(node.plus.cut)","node.plus.attribute == orig(node.plus.attribute)","this.boundarySize >= orig(this.boundarySize)","node.plus.plus == orig(node.plus.plus)","node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())","node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.parent.parent == orig(node.parent.parent)","node.plus.minus == orig(node.plus.minus)","node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())","node.parent.plus == orig(node.parent.plus)","node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.cut.getClass().getName() == orig(node.cut.getClass().getName())","node.parent == orig(node.parent)","node.parent.cut == orig(node.parent.cut)","node.minus.parent == orig(node.minus.parent)","node.parent.minus == orig(node.parent.minus)","node.attribute == orig(node.attribute)","node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class","node.minus.attribute == orig(node.minus.attribute)","node.minus.minus == orig(node.minus.minus)","node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())","node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())","node.plus == orig(node.plus)","node.minus.plus == orig(node.minus.plus)","node.plus.parent == orig(node.plus.parent)","node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())","node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())","node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())","node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class","node.parent.attribute == orig(node.parent.attribute)","node.minus == orig(node.minus)","node.minus.cut == orig(node.minus.cut)","node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class"]}},{"b.inv.output":"N/A"}]}]}]}