===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval:::OBJECT
this.lower one of { -1.4142135623730951, -1.0, 0.999998986721039 }
this.upper one of { -0.9999989867210388, 1.0, 1.4142135623730951 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.Interval(double, double):::ENTER
lower one of { -1.4142135623730951, -1.0, 0.999998986721039 }
upper one of { -0.9999989867210388, 1.0, 1.4142135623730951 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.Interval(double, double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getLength():::ENTER
this.lower one of { -1.4142135623730951, -1.0 }
this.upper one of { 1.0, 1.4142135623730951 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getLength():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
this.lower one of { -1.4142135623730951, -1.0 }
this.upper one of { 1.0, 1.4142135623730951 }
return one of { 2.0, 2.8284271247461903 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getLower():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getLower():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
return one of { -1.414213562373095, -0.9999999999999999, 0.999998986721039 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getMidPoint():::ENTER
this.lower one of { -1.4142135623730951, -1.0 }
this.upper one of { 1.0, 1.4142135623730951 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getMidPoint():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
this.lower one of { -1.4142135623730951, -1.0 }
this.upper one of { 1.0, 1.4142135623730951 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getUpper():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getUpper():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
return one of { -0.9999989867210388, 0.9999999999999998, 1.4142135623730954 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:::OBJECT
this.tree != null
this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
this.tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
this.tree.plus.parent != null
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
this.tree.minus.parent != null
this.tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.parent == null
this.tree.attribute.getClass().getName() == java.lang.Boolean.class
this.size one of { 0.0, 2.0, 2.8284271247461903 }
this.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.Vector1D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet():::EXIT
this.tree.cut == null
this.tree.plus == null
this.tree.minus == null
this.tree.attribute has only one value
this.tree.attribute != null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet(double, double):::ENTER
lower one of { -1.4142135623730951, -1.0 }
upper one of { 1.0, 1.4142135623730951 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet(double, double):::EXIT
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
tree != null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.asList():::ENTER
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.asList():::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
return != null
return[] elements != null
return[].getClass().getName() == [org.apache.commons.math3.geometry.euclidean.oned.Interval]
return[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.oned.Interval.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
this.tree.cut != null
this.tree.plus != null
this.tree.minus != null
this.tree.minus.cut == null
this.tree.minus.plus == null
this.tree.minus.minus == null
this.tree.minus.attribute has only one value
this.tree.minus.attribute != null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
tree != null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.cut != null
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.plus != null
tree.plus.minus != null
tree.plus.parent != null
tree.plus.attribute == null
tree.minus.cut == null
tree.minus.plus == null
tree.minus.minus == null
tree.minus.parent != null
tree.minus.attribute has only one value
tree.minus.attribute != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.tree.cut != null
this.tree.plus != null
this.tree.minus != null
this.tree.minus.cut == null
this.tree.minus.plus == null
this.tree.minus.minus == null
this.tree.minus.attribute has only one value
this.tree.minus.attribute != null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.cut != null
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.plus != null
tree.plus.minus != null
tree.plus.parent != null
tree.plus.attribute == null
tree.minus.cut == null
tree.minus.plus == null
tree.minus.minus == null
tree.minus.parent != null
tree.minus.attribute has only one value
tree.minus.attribute != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
return != null
return.tree != null
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.tree.parent == null
return.tree.attribute.getClass().getName() == java.lang.Boolean.class
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildTree(double, double):::ENTER
lower one of { -1.4142135623730951, -1.0 }
upper one of { 1.0, 1.4142135623730951 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildTree(double, double):::EXIT120
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildTree(double, double):::EXIT
return != null
return.cut != null
return.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.plus != null
return.plus.cut == null
return.plus.plus == null
return.plus.minus == null
return.plus.parent != null
return.plus.attribute has only one value
return.plus.attribute != null
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus != null
return.minus.cut != null
return.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.minus.plus != null
return.minus.minus != null
return.minus.parent != null
return.minus.attribute == null
return.parent == null
return.attribute == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.computeGeometricalProperties():::ENTER
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.computeGeometricalProperties():::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size one of { 2.0, 2.8284271247461903 }
this.barycenter != null
this.size > orig(this.size)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.List, double, double):::ENTER
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
node != null
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.parent != null
node.plus.attribute has only one value
node.plus.attribute != null
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.minus.parent != null
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.cut != null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.parent.plus != null
node.parent.minus != null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
list != null
list[] elements != null
list[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.oned.Interval.class
list[].getClass().getName() one of { [], [org.apache.commons.math3.geometry.euclidean.oned.Interval] }
list.getClass().getName() == java.util.ArrayList.class
lower != 0
upper != 0
size(list[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.List, double, double):::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.parent != null
node.plus.attribute has only one value
node.plus.attribute != null
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.minus.parent != null
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.cut != null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.parent.plus != null
node.parent.minus != null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
list[] elements != null
list[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.oned.Interval.class
list[].getClass().getName() one of { [], [org.apache.commons.math3.geometry.euclidean.oned.Interval] }
size(list[])-1 <= orig(size(list[]))
size(list[])-1 >= orig(size(list[]))-1
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:::OBJECT
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == 1.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, boolean):::ENTER
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == 1.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, boolean):::EXIT
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
location.x == orig(location.x)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.getLocation():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.getLocation():::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.getOffset(org.apache.commons.math3.geometry.Vector):::ENTER
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.Vector1D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.getOffset(org.apache.commons.math3.geometry.Vector):::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.isDirect():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.isDirect():::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.isDirect():::EXIT;condition="return == true"
this.location.x one of { -0.9999989867210388, 1.0, 1.4142135623730951 }
this.direct == true
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.isDirect():::EXIT;condition="not(return == true)"
this.location.x one of { -1.4142135623730951, -1.0, 0.999998986721039 }
this.direct == false
return == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
other.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="not(return == true)"
this.location.x one of { -1.0000000000000002, 1.0000005066393522 }
return == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.wholeHyperplane():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.wholeHyperplane():::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
return.remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint:::OBJECT
this.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
this.remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
return.remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
org.apache.commons.math3.geometry.partitioning.Side.PLUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.MINUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.BOTH has only one value
org.apache.commons.math3.geometry.partitioning.Side.HYPER has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side]
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Side.class
size(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
return.plus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.minus == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D:::CLASS
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == 1.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.Vector1D(double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.Vector1D(double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.getX():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.getX():::EXIT
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.x == orig(this.x)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line:::OBJECT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
this.zero.x one of { -1.0, 0.0, 0.9999994933603911 }
this.zero.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
p1 != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
p1.x one of { -1.0, 0.0, 0.9999994933603911 }
p1.z >= -1.0
p2 != null
p2.x one of { -1.0, 0.9999994933601344 }
p2.x != 0
p2.y != 0
p2.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p1.z == orig(p1.z)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
p2.z == orig(p2.z)
this.direction != null
this.zero != null
p1.x one of { -1.0, 0.0, 0.9999994933603911 }
p1.z >= -1.0
p2.x one of { -1.0, 0.9999994933601344 }
p2.x != 0
p2.y != 0
p2.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.getDirection():::ENTER
this.direction != null
this.zero != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.getDirection():::EXIT
this.direction == orig(this.direction)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.direction.x == orig(this.direction.x)
this.direction.y == orig(this.direction.y)
this.direction.z == orig(this.direction.z)
this.zero == orig(this.zero)
this.zero.x == orig(this.zero.x)
this.zero.y == orig(this.zero.y)
this.zero.z == orig(this.zero.z)
this.direction != null
this.zero != null
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.pointAt(double):::ENTER
this.direction != null
this.zero != null
abscissa one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.pointAt(double):::EXIT
this.direction == orig(this.direction)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.direction.x == orig(this.direction.x)
this.direction.y == orig(this.direction.y)
this.direction.z == orig(this.direction.z)
this.zero == orig(this.zero)
this.zero.x == orig(this.zero.x)
this.zero.y == orig(this.zero.y)
this.zero.z == orig(this.zero.z)
this.direction != null
this.zero != null
return != null
return.x one of { -1.0, 0.0, 0.9999994933603911 }
return.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
this.direction == null
this.zero == null
p1 != null
p1.x one of { -1.0, 0.0, 0.9999994933603911 }
p1.z >= -1.0
p2 != null
p2.x one of { -1.0, 0.9999994933601344 }
p2.x != 0
p2.y != 0
p2.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p1.z == orig(p1.z)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
p2.z == orig(p2.z)
this.direction != null
this.zero != null
p1.x one of { -1.0, 0.0, 0.9999994933603911 }
p1.z >= -1.0
p2.x one of { -1.0, 0.9999994933601344 }
p2.x != 0
p2.y != 0
p2.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.toSpace(org.apache.commons.math3.geometry.Vector):::ENTER
this.direction != null
this.zero != null
point != null
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.Vector1D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.toSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.direction == orig(this.direction)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.direction.x == orig(this.direction.x)
this.direction.y == orig(this.direction.y)
this.direction.z == orig(this.direction.z)
this.zero == orig(this.zero)
this.zero.x == orig(this.zero.x)
this.zero.y == orig(this.zero.y)
this.zero.z == orig(this.zero.z)
this.direction != null
this.zero != null
return != null
return.x one of { -1.0, 0.0, 0.9999994933603911 }
return.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane:::OBJECT
this.originOffset one of { -0.9999994933603911, 0.0 }
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
this.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
this.u.x one of { -5.066394805907553E-7, 0.0 }
this.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
this.v.y >= -1.0
this.v.z one of { -5.066394805907553E-7, -2.5331974029539385E-7, 0.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Plane):::ENTER
plane != null
plane.originOffset == -0.9999994933603911
plane.origin != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
plane.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
plane.u != null
plane.u.x one of { -5.066394805907553E-7, 0.0 }
plane.u.y one of { -1.0, 0.0, 1.0 }
plane.u.z one of { -1.0, 0.0, 0.9999999999998717 }
plane.v != null
plane.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
plane.v.y one of { -1.0, 0.0 }
plane.v.z == 0.0
plane.w != null
plane.w.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
plane.originOffset == orig(plane.originOffset)
plane.origin == orig(plane.origin)
plane.origin.x == orig(plane.origin.x)
plane.origin.y == orig(plane.origin.y)
plane.origin.z == orig(plane.origin.z)
plane.u == orig(plane.u)
plane.u.x == orig(plane.u.x)
plane.u.y == orig(plane.u.y)
plane.u.z == orig(plane.u.z)
plane.v == orig(plane.v)
plane.v.x == orig(plane.v.x)
plane.v.y == orig(plane.v.y)
plane.v.z == orig(plane.v.z)
plane.w == orig(plane.w)
plane.w.x == orig(plane.w.x)
plane.w.y == orig(plane.w.y)
plane.w.z == orig(plane.w.z)
this.originOffset == -0.9999994933603911
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 0.9999999999998717 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
plane.originOffset == -0.9999994933603911
plane.origin != null
plane.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
plane.u != null
plane.u.x one of { -5.066394805907553E-7, 0.0 }
plane.u.y one of { -1.0, 0.0, 1.0 }
plane.u.z one of { -1.0, 0.0, 0.9999999999998717 }
plane.v != null
plane.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
plane.v.y one of { -1.0, 0.0 }
plane.v.z == 0.0
plane.w != null
plane.w.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
normal != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
normal.x == orig(normal.x)
normal.y == orig(normal.y)
normal.z == orig(normal.z)
this.originOffset == 0.0
this.origin != null
this.origin.x == 0.0
this.origin.y == 0.0
this.origin.z == 0.0
this.u != null
this.u.x == 0.0
this.v != null
this.v.x one of { -0.9999999999999357, 0.0 }
this.w != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
p != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
p.x one of { -1.0, 1.0 }
p.x != 0
p.y one of { -1.0, 1.0 }
p.y != 0
p.z one of { -1.0, 1.0 }
p.z != 0
normal != null
normal.x one of { -4.0, 0.0, 4.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
p.x == orig(p.x)
p.y == orig(p.y)
p.z == orig(p.z)
normal.x == orig(normal.x)
normal.y == orig(normal.y)
normal.z == orig(normal.z)
this.originOffset == -1.0
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
p.x one of { -1.0, 1.0 }
p.x != 0
p.y one of { -1.0, 1.0 }
p.y != 0
p.z one of { -1.0, 1.0 }
p.z != 0
normal.x one of { -4.0, 0.0, 4.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
p1 != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
p1.x one of { -1.0, 1.0 }
p1.x != 0
p1.y one of { -1.0, 1.0 }
p1.y != 0
p1.z one of { -1.0, 1.0 }
p1.z != 0
p2 != null
p2.x one of { -1.0, 1.0 }
p2.x != 0
p2.y one of { -1.0, 1.0 }
p2.y != 0
p2.z one of { -1.0, 1.0 }
p2.z != 0
p3 != null
p3.x one of { -1.0, 0.9999989867210388 }
p3.x != 0
p3.y one of { -1.0, 1.0 }
p3.y != 0
p3.z one of { -1.0, 1.0 }
p3.z != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p1.z == orig(p1.z)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
p2.z == orig(p2.z)
p3.x == orig(p3.x)
p3.y == orig(p3.y)
p3.z == orig(p3.z)
this.originOffset == -1.0
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
p1.x one of { -1.0, 1.0 }
p1.x != 0
p1.y one of { -1.0, 1.0 }
p1.y != 0
p1.z one of { -1.0, 1.0 }
p1.z != 0
p2.x one of { -1.0, 1.0 }
p2.x != 0
p2.y one of { -1.0, 1.0 }
p2.y != 0
p2.z one of { -1.0, 1.0 }
p2.z != 0
p3.x one of { -1.0, 0.9999989867210388 }
p3.x != 0
p3.y one of { -1.0, 1.0 }
p3.y != 0
p3.z one of { -1.0, 1.0 }
p3.z != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.copySelf():::ENTER
this.originOffset == -0.9999994933603911
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 0.9999999999998717 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.copySelf():::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.originOffset == -0.9999994933603911
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 0.9999999999998717 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
return != null
return.originOffset == -0.9999994933603911
return.origin != null
return.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
return.u != null
return.u.x one of { -5.066394805907553E-7, 0.0 }
return.u.y one of { -1.0, 0.0, 1.0 }
return.u.z one of { -1.0, 0.0, 0.9999999999998717 }
return.v != null
return.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
return.v.y one of { -1.0, 0.0 }
return.v.z == 0.0
return.w != null
return.w.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getNormal():::ENTER
this.originOffset == -0.9999994933603911
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.y one of { -0.9999999999998717, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getNormal():::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.originOffset == -0.9999994933603911
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.y one of { -0.9999999999998717, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
return != null
return.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane):::ENTER
this.originOffset == -1.0
this.origin != null
this.origin.x one of { -1.0, 0.0 }
this.origin.y one of { -1.0, 0.0, 1.0 }
this.origin.z one of { -1.0, 0.0, 1.0 }
this.u != null
this.u.x == 0.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
plane != null
plane.originOffset == -1.0
plane.origin != null
plane.origin.x one of { -1.0, 0.0 }
plane.origin.y one of { -1.0, 0.0, 1.0 }
plane.origin.z one of { -1.0, 0.0, 1.0 }
plane.u != null
plane.u.x == 0.0
plane.u.y one of { -1.0, 0.0, 1.0 }
plane.u.z one of { -1.0, 0.0, 1.0 }
plane.v != null
plane.v.x one of { -1.0, 0.0 }
plane.v.y one of { -1.0, 0.0 }
plane.v.z == 0.0
plane.w != null
plane.w.x one of { -1.0, 0.0 }
plane.w.y one of { -1.0, 0.0, 1.0 }
plane.w.z one of { -1.0, 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
plane.originOffset == orig(plane.originOffset)
plane.origin == orig(plane.origin)
plane.origin.x == orig(plane.origin.x)
plane.origin.y == orig(plane.origin.y)
plane.origin.z == orig(plane.origin.z)
plane.u == orig(plane.u)
plane.u.x == orig(plane.u.x)
plane.u.y == orig(plane.u.y)
plane.u.z == orig(plane.u.z)
plane.v == orig(plane.v)
plane.v.x == orig(plane.v.x)
plane.v.y == orig(plane.v.y)
plane.v.z == orig(plane.v.z)
plane.w == orig(plane.w)
plane.w.x == orig(plane.w.x)
plane.w.y == orig(plane.w.y)
plane.w.z == orig(plane.w.z)
this.originOffset == -1.0
this.origin != null
this.origin.x one of { -1.0, 0.0 }
this.origin.y one of { -1.0, 0.0, 1.0 }
this.origin.z one of { -1.0, 0.0, 1.0 }
this.u != null
this.u.x == 0.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
plane.originOffset == -1.0
plane.origin != null
plane.origin.x one of { -1.0, 0.0 }
plane.origin.y one of { -1.0, 0.0, 1.0 }
plane.origin.z one of { -1.0, 0.0, 1.0 }
plane.u != null
plane.u.x == 0.0
plane.u.y one of { -1.0, 0.0, 1.0 }
plane.u.z one of { -1.0, 0.0, 1.0 }
plane.v != null
plane.v.x one of { -1.0, 0.0 }
plane.v.y one of { -1.0, 0.0 }
plane.v.z == 0.0
plane.w != null
plane.w.x one of { -1.0, 0.0 }
plane.w.y one of { -1.0, 0.0, 1.0 }
plane.w.z one of { -1.0, 0.0, 1.0 }
return one of { -2.0, 0.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane):::ENTER
this.originOffset == -1.0
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
other != null
other.originOffset == -1.0
other.origin != null
other.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
other.u != null
other.u.x one of { -5.066394805907553E-7, 0.0 }
other.u.y one of { -1.0, 0.0, 1.0 }
other.u.z one of { -1.0, 0.0, 1.0 }
other.v != null
other.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
other.v.y one of { -1.0, 0.0 }
other.v.z == 0.0
other.w != null
other.w.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT324
this.origin.x one of { -1.0, 0.0 }
this.origin.y one of { -1.0, 0.0, 1.0 }
this.origin.z one of { -1.0, 0.0, 1.0 }
this.u.x == 0.0
this.v.x one of { -1.0, 0.0 }
this.w.x one of { -1.0, 0.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
other.origin.x one of { -1.0, 0.0 }
other.origin.y one of { -1.0, 0.0, 1.0 }
other.origin.z one of { -1.0, 0.0, 1.0 }
other.u.x == 0.0
other.v.x one of { -1.0, 0.0 }
other.w.x one of { -1.0, 0.0 }
other.w.y one of { -1.0, 0.0, 1.0 }
other.w.z one of { -1.0, 0.0, 1.0 }
return == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT327
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
other.originOffset == orig(other.originOffset)
other.origin == orig(other.origin)
other.origin.x == orig(other.origin.x)
other.origin.y == orig(other.origin.y)
other.origin.z == orig(other.origin.z)
other.u == orig(other.u)
other.u.x == orig(other.u.x)
other.u.y == orig(other.u.y)
other.u.z == orig(other.u.z)
other.v == orig(other.v)
other.v.x == orig(other.v.x)
other.v.y == orig(other.v.y)
other.v.z == orig(other.v.z)
other.w == orig(other.w)
other.w.x == orig(other.w.x)
other.w.y == orig(other.w.y)
other.w.z == orig(other.w.z)
this.originOffset == -1.0
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
other.originOffset == -1.0
other.origin != null
other.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
other.u != null
other.u.x one of { -5.066394805907553E-7, 0.0 }
other.u.y one of { -1.0, 0.0, 1.0 }
other.u.z one of { -1.0, 0.0, 1.0 }
other.v != null
other.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
other.v.y one of { -1.0, 0.0 }
other.v.z == 0.0
other.w != null
other.w.x one of { -1.0, 0.0, 0.9999999999998717 }
return.direction != null
return.zero != null
return.zero.x one of { -1.0, 0.0, 0.9999994933603911 }
return.zero.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane):::ENTER
plane1 != null
plane1.originOffset == -0.9999994933603911
plane1.origin != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
plane1.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
plane1.u != null
plane1.u.x one of { -5.066394805907553E-7, 0.0 }
plane1.u.y one of { -1.0, 0.0, 1.0 }
plane1.u.z one of { -1.0, 0.0, 0.9999999999998717 }
plane1.v != null
plane1.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
plane1.v.y one of { -1.0, 0.0 }
plane1.v.z == 0.0
plane1.w != null
plane1.w.x one of { -1.0, 0.0, 0.9999999999998717 }
plane2 != null
plane2.originOffset == -0.9999994933603911
plane2.origin != null
plane2.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
plane2.u != null
plane2.u.x one of { -5.066394805907553E-7, 0.0 }
plane2.u.y one of { -1.0, 0.0, 1.0 }
plane2.u.z one of { -1.0, 0.0, 1.0 }
plane2.v != null
plane2.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
plane2.v.y one of { -0.9999999999998717, 0.0 }
plane2.v.z == 0.0
plane2.w != null
plane2.w.x one of { -1.0, 0.0, 0.9999999999998717 }
plane3 != null
plane3.originOffset == 0.0
plane3.origin != null
plane3.origin.x == 0.0
plane3.origin.y == 0.0
plane3.origin.z == 0.0
plane3.u != null
plane3.u.x == 0.0
plane3.v != null
plane3.v.x one of { -0.9999999999999357, 0.0 }
plane3.v.z one of { -5.066394805907553E-7, -2.5331974029539385E-7, 0.0 }
plane3.w != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT365
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT
plane1.originOffset == orig(plane1.originOffset)
plane1.origin == orig(plane1.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
plane1.origin.x == orig(plane1.origin.x)
plane1.origin.y == orig(plane1.origin.y)
plane1.origin.z == orig(plane1.origin.z)
plane1.u == orig(plane1.u)
plane1.u.x == orig(plane1.u.x)
plane1.u.y == orig(plane1.u.y)
plane1.u.z == orig(plane1.u.z)
plane1.v == orig(plane1.v)
plane1.v.x == orig(plane1.v.x)
plane1.v.y == orig(plane1.v.y)
plane1.v.z == orig(plane1.v.z)
plane1.w == orig(plane1.w)
plane1.w.x == orig(plane1.w.x)
plane1.w.y == orig(plane1.w.y)
plane1.w.z == orig(plane1.w.z)
plane2.originOffset == orig(plane2.originOffset)
plane2.origin == orig(plane2.origin)
plane2.origin.x == orig(plane2.origin.x)
plane2.origin.y == orig(plane2.origin.y)
plane2.origin.z == orig(plane2.origin.z)
plane2.u == orig(plane2.u)
plane2.u.x == orig(plane2.u.x)
plane2.u.y == orig(plane2.u.y)
plane2.u.z == orig(plane2.u.z)
plane2.v == orig(plane2.v)
plane2.v.x == orig(plane2.v.x)
plane2.v.y == orig(plane2.v.y)
plane2.v.z == orig(plane2.v.z)
plane2.w == orig(plane2.w)
plane2.w.x == orig(plane2.w.x)
plane2.w.y == orig(plane2.w.y)
plane2.w.z == orig(plane2.w.z)
plane3.originOffset == orig(plane3.originOffset)
plane3.origin == orig(plane3.origin)
plane3.origin.x == orig(plane3.origin.x)
plane3.origin.y == orig(plane3.origin.y)
plane3.origin.z == orig(plane3.origin.z)
plane3.u == orig(plane3.u)
plane3.u.x == orig(plane3.u.x)
plane3.u.y == orig(plane3.u.y)
plane3.u.z == orig(plane3.u.z)
plane3.v == orig(plane3.v)
plane3.v.x == orig(plane3.v.x)
plane3.v.y == orig(plane3.v.y)
plane3.v.z == orig(plane3.v.z)
plane3.w == orig(plane3.w)
plane3.w.x == orig(plane3.w.x)
plane3.w.y == orig(plane3.w.y)
plane3.w.z == orig(plane3.w.z)
plane1.originOffset == -0.9999994933603911
plane1.origin != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
plane1.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
plane1.u != null
plane1.u.x one of { -5.066394805907553E-7, 0.0 }
plane1.u.y one of { -1.0, 0.0, 1.0 }
plane1.u.z one of { -1.0, 0.0, 0.9999999999998717 }
plane1.v != null
plane1.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
plane1.v.y one of { -1.0, 0.0 }
plane1.v.z == 0.0
plane1.w != null
plane1.w.x one of { -1.0, 0.0, 0.9999999999998717 }
plane2.originOffset == -0.9999994933603911
plane2.origin != null
plane2.origin.x one of { -1.0, 0.0, 0.9999994933602627 }
plane2.u != null
plane2.u.x one of { -5.066394805907553E-7, 0.0 }
plane2.u.y one of { -1.0, 0.0, 1.0 }
plane2.u.z one of { -1.0, 0.0, 1.0 }
plane2.v != null
plane2.v.x one of { -1.0, 0.0, 5.066394805907553E-7 }
plane2.v.y one of { -0.9999999999998717, 0.0 }
plane2.v.z == 0.0
plane2.w != null
plane2.w.x one of { -1.0, 0.0, 0.9999999999998717 }
plane3.originOffset == 0.0
plane3.origin != null
plane3.origin.x == 0.0
plane3.origin.y == 0.0
plane3.origin.z == 0.0
plane3.u != null
plane3.u.x == 0.0
plane3.v != null
plane3.v.x one of { -0.9999999999999357, 0.0 }
plane3.v.z one of { -5.066394805907553E-7, -2.5331974029539385E-7, 0.0 }
plane3.w != null
return != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
return.x one of { -1.0, 0.0, 0.9999994933603911 }
return.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
this.originOffset == -1.0
this.origin != null
this.origin.x one of { -1.0, 0.0 }
this.origin.y one of { -1.0, 0.0, 1.0 }
this.origin.z one of { -1.0, 0.0, 1.0 }
this.u != null
this.u.x == 0.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
other != null
other.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.originOffset == -1.0
this.origin != null
this.origin.x one of { -1.0, 0.0 }
this.origin.y one of { -1.0, 0.0, 1.0 }
this.origin.z one of { -1.0, 0.0, 1.0 }
this.u != null
this.u.x == 0.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="not(return == true)"
this.origin.x == 0.0
this.v.x == -1.0
this.v.y == 0.0
this.w.x == 0.0
return == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.setFrame():::ENTER
this.origin == null
this.u == null
this.v == null
this.w != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.setFrame():::EXIT
this.originOffset == orig(this.originOffset)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.origin != null
this.u != null
this.v != null
this.w != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
this.originOffset == 0.0
this.origin == null
this.u == null
this.v == null
this.w == null
normal != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.u == orig(this.u)
this.v == orig(this.v)
normal.x == orig(normal.x)
normal.y == orig(normal.y)
normal.z == orig(normal.z)
this.originOffset == 0.0
this.origin == null
this.u == null
this.v == null
this.w != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.toSpace(org.apache.commons.math3.geometry.Vector):::ENTER
this.originOffset == -1.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.toSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.originOffset == -1.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.toSubSpace(org.apache.commons.math3.geometry.Vector):::ENTER
this.originOffset == -1.0
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
point != null
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.toSubSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.originOffset == -1.0
this.origin != null
this.u != null
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v != null
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w != null
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
return != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.wholeHyperplane():::ENTER
this.originOffset == -0.9999994933603911
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 0.9999999999998717 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.wholeHyperplane():::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.originOffset == -0.9999994933603911
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 0.9999999999998717 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 0.9999999999998717 }
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
return.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor:::OBJECT
this has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == null
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size >= 0.0
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.FacetsContributionVisitor(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == null
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute has only one value
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == 0.0
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.FacetsContributionVisitor(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == 0.0
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::ENTER
facet.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
reversed == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size >= orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName())
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size >= orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName())
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size one of { 0.0, 21.999994933605194 }
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName())
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size one of { 0.0, 21.999994933605194 }
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet:::OBJECT
this has only one value
this.tree has only one value
this.tree.cut has only one value
this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.tree.plus has only one value
this.tree.plus.cut has only one value
this.tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.tree.plus.plus has only one value
this.tree.plus.minus has only one value
this.tree.plus.parent has only one value
this.tree.plus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.minus has only one value
this.tree.minus.cut has only one value
this.tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.tree.minus.plus has only one value
this.tree.minus.minus has only one value
this.tree.minus.parent has only one value
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.parent == null
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size one of { 0.0, 7.999997973442078 }
this.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.PolyhedronsSet(java.util.Collection):::ENTER
boundary has only one value
boundary.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.PolyhedronsSet(java.util.Collection):::EXIT
this.tree.plus.attribute == null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.computeGeometricalProperties():::ENTER
this.tree.plus.attribute == null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.computeGeometricalProperties():::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.parent == orig(this.tree.parent)
this.tree.plus.attribute has only one value
this.tree.minus.attribute has only one value
this.tree.attribute has only one value
this.size == 7.999997973442078
this.barycenter has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.PolyhedronsSetTest():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testIssue780():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testIssue780():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane:::OBJECT
this.hyperplane != null
this.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
this.remainingRegion != null
this.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.SubPlane(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane != null
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
remainingRegion != null
remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.SubPlane(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane != null
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
remainingRegion != null
remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return != null
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
return.hyperplane != null
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
return.remainingRegion != null
return.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane != null
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT64
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT86
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return != null
org.apache.commons.math3.geometry.partitioning.Side.PLUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.PLUS != null
org.apache.commons.math3.geometry.partitioning.Side.MINUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.MINUS != null
org.apache.commons.math3.geometry.partitioning.Side.BOTH has only one value
org.apache.commons.math3.geometry.partitioning.Side.BOTH != null
org.apache.commons.math3.geometry.partitioning.Side.HYPER has only one value
org.apache.commons.math3.geometry.partitioning.Side.HYPER != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side]
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Side.class
size(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane != null
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT106
return.plus == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT136
return.plus != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
(return.plus != null)  ==>  (return.plus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class)
return != null
return.plus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
return.minus != null
return.minus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D:::CLASS
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, double, double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, double, double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
a >= 0.0
u != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
u.x == orig(u.x)
u.y == orig(u.y)
u.z == orig(u.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
a1 == 1.0
u1 != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
u2 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
u1.x == orig(u1.x)
u1.y == orig(u1.y)
u1.z == orig(u1.z)
u2.x == orig(u2.x)
u2.y == orig(u2.y)
u2.z == orig(u2.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
u1.x one of { -5.066394805907553E-7, 0.0 }
u1.y one of { -1.0, 0.0, 1.0 }
u1.z one of { -1.0, 0.0, 1.0 }
u2.x one of { -1.0, 0.0, 5.066394805907553E-7 }
u2.y one of { -1.0, 0.0 }
u2.z == 0.0
a3 == 1.0
u3.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
u1.x == orig(u1.x)
u1.y == orig(u1.y)
u1.z == orig(u1.z)
u2.x == orig(u2.x)
u2.y == orig(u2.y)
u2.z == orig(u2.z)
u3.x == orig(u3.x)
u3.y == orig(u3.y)
u3.z == orig(u3.z)
u1.x one of { -5.066394805907553E-7, 0.0 }
u1.y one of { -1.0, 0.0, 1.0 }
u1.z one of { -1.0, 0.0, 1.0 }
u2.x one of { -1.0, 0.0, 5.066394805907553E-7 }
u2.y one of { -1.0, 0.0 }
u2.z == 0.0
u3.x one of { -1.0, 0.0, 0.9999999999998717 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.add(org.apache.commons.math3.geometry.Vector):::ENTER
this.x one of { -1.0, 0.0, 0.9999994933603911 }
this.z >= -1.0
v != null
v.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.add(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
this.x one of { -1.0, 0.0, 0.9999994933603911 }
this.z >= -1.0
return != null
return.x one of { -1.0, 0.9999994933601344 }
return.x != 0
return.y != 0
return.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(org.apache.commons.math3.geometry.Vector):::ENTER
v != null
v.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
v1 != null
v2 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
v1.x == orig(v1.x)
v1.y == orig(v1.y)
v1.z == orig(v1.z)
v2.x == orig(v2.x)
v2.y == orig(v2.y)
v2.z == orig(v2.z)
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(org.apache.commons.math3.geometry.Vector):::ENTER
this.z >= -1.0
v != null
v.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
this.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getNorm():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getNorm():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getNormSq():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getNormSq():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
return one of { 2.566835632932703E-13, 5.133671265864749E-13, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getX():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getX():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getY():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getY():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getZ():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getZ():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::EXIT328
return.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::EXIT331
this.x one of { -1.0, 0.9999999999998717 }
this.x != 0
this.y one of { 0.0, 5.066394805907553E-7 }
this.z one of { 0.0, 5.066394805907553E-7 }
return.y == 0.0
return.z one of { -1.0, 0.9999999999998717 }
return.z != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
return != null
return.x one of { -5.066394805907553E-7, 0.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.subtract(org.apache.commons.math3.geometry.Vector):::ENTER
this.x one of { -1.0, 1.0 }
this.x != 0
this.y != 0
this.z >= -1.0
v != null
v.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.subtract(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
this.x one of { -1.0, 1.0 }
this.x != 0
this.y != 0
this.z >= -1.0
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line:::OBJECT
this.angle >= 0.0
this.cos <= 1.0
this.cos >= -1.0
this.sin <= 1.0
this.sin >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
line != null
line.cos != 0
line.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
line.angle == orig(line.angle)
line.cos == orig(line.cos)
line.sin == orig(line.sin)
line.originOffset == orig(line.originOffset)
this.cos != 0
this.originOffset <= 1.0000005066393522
line.cos != 0
line.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::ENTER
p1 != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
p2 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
this.cos != 0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.copySelf():::ENTER
this.cos != 0
this.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.copySelf():::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
this.cos != 0
this.originOffset <= 1.0000005066393522
return != null
return.cos != 0
return.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getAngle():::ENTER
this.cos != 0
this.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getAngle():::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
this.cos != 0
this.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
this.cos != 0
line != null
line.cos != 0
line.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
line.angle == orig(line.angle)
line.cos == orig(line.cos)
line.sin == orig(line.sin)
line.originOffset == orig(line.originOffset)
this.cos != 0
line.cos != 0
line.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.intersection(org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
this.cos != 0
this.originOffset <= 1.0000005066393522
other != null
other.cos != 0
other.originOffset <= 1.0000005066393522
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.intersection(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT200
return == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.intersection(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT202
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.intersection(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
other.angle == orig(other.angle)
other.cos == orig(other.cos)
other.sin == orig(other.sin)
other.originOffset == orig(other.originOffset)
(return != null)  ==>  (return.x != 0)
(return != null)  ==>  (return.y != 0)
(return != null)  ==>  (return.y one of { -1.0, 0.9999999999999997, 3947579.2352941176 })
this.cos != 0
this.originOffset <= 1.0000005066393522
other.cos != 0
other.originOffset <= 1.0000005066393522
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
return.x != 0
return.y one of { -1.0, 0.9999999999999997, 3947579.2352941176 }
return.y != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::ENTER
this.angle == 0.0
this.cos == 0.0
this.sin == 0.0
this.originOffset == 0.0
p1 != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
p2 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
this.cos != 0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
this.angle >= orig(this.angle)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
this.cos != 0
this.originOffset != 0
other != null
other.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
(return == true)  ==>  (this.originOffset == -1.0)
this.cos != 0
this.originOffset != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="return == true"
this.originOffset == -1.0
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.toSpace(org.apache.commons.math3.geometry.Vector):::ENTER
this.cos != 0
point != null
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.Vector1D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.toSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
this.cos != 0
return != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
return.x one of { -1.0000000000000002, 0.9999999999999999 }
return.x != 0
return.y one of { -1.0, 0.9999999999999997 }
return.y != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.toSubSpace(org.apache.commons.math3.geometry.Vector):::ENTER
this.cos != 0
this.originOffset <= 1.0000005066393522
point != null
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.toSubSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
this.cos != 0
this.originOffset <= 1.0000005066393522
return != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == 1.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == -Infinity
return.x != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.wholeHyperplane():::ENTER
this.cos != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.wholeHyperplane():::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
this.cos != 0
return != null
return.hyperplane != null
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
return.remainingRegion != null
return.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:::OBJECT
this.sortingKey.components[] elements one of { -1.0000000001, 0.9999999998999999 }
this.sortingKey.components[] elements != 0
this.sortingKey.offset == 32
this.sortingKey.lsb one of { -53, -52, -51 }
this.sortingKey.encoding[] elements >= 0
this.sortingKey.posInf == false
this.sortingKey.negInf == false
this.sortingKey.nan == false
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
this.start.x one of { -1.0000000000000002, 0.9999999999999999 }
this.start.y one of { -1.0, 0.9999999999999998 }
this.end.x one of { -1.0000000000000004, 1.0 }
this.end.y one of { -1.0, 0.9999999999999997 }
size(this.sortingKey.components[]) == 2
size(this.sortingKey.encoding[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, double):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
start.x one of { -0.9999999999999998, 0.9999999999999999 }
start.y one of { -1.0, 0.9999999999999997 }
dx one of { -1.0E-10, 1.0E-10 }
dy one of { -1.0E-10, 1.0E-10 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, double):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
this.start == null
this.end == null
this.line == null
start.x one of { -0.9999999999999998, 0.9999999999999999 }
start.y one of { -1.0, 0.9999999999999997 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
start.x one of { -1.0000000000000002, 0.9999999999999999 }
start.y one of { -1.0, 0.9999999999999998 }
end.x one of { -1.0000000000000004, 1.0 }
end.y one of { -1.0, 0.9999999999999997 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
end.x == orig(end.x)
end.y == orig(end.y)
line.angle == orig(line.angle)
line.cos == orig(line.cos)
line.sin == orig(line.sin)
line.originOffset == orig(line.originOffset)
start.x one of { -1.0000000000000002, 0.9999999999999999 }
start.y one of { -1.0, 0.9999999999999998 }
end.x one of { -1.0000000000000004, 1.0 }
end.y one of { -1.0, 0.9999999999999997 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment):::ENTER
o.sortingKey.components[] elements one of { -1.0, 0.9999999999999999 }
o.sortingKey.components[] elements != 0
o.sortingKey.offset == 32
o.sortingKey.lsb one of { -53, -52, -51 }
o.sortingKey.encoding[] elements >= 0
o.sortingKey.posInf == false
o.sortingKey.negInf == false
o.sortingKey.nan == false
o.start.x one of { -0.9999999999999998, 0.9999999999999999 }
o.start.y one of { -1.0, 1.0000000000000002 }
o.end.x one of { -1.0000000000000002, 1.0 }
o.end.y one of { -1.0, 0.9999999999999997 }
o.line.originOffset one of { -1.0, 3.5824803083984214E-7, 0.9999994933603911 }
size(o.sortingKey.components[]) == 2
size(o.sortingKey.encoding[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment):::EXIT
this.sortingKey == orig(this.sortingKey)
this.sortingKey.components == orig(this.sortingKey.components)
this.sortingKey.components[] == orig(this.sortingKey.components[])
this.sortingKey.offset == orig(this.sortingKey.offset)
this.sortingKey.lsb == orig(this.sortingKey.lsb)
this.sortingKey.encoding == orig(this.sortingKey.encoding)
this.sortingKey.encoding[] == orig(this.sortingKey.encoding[])
this.sortingKey.posInf == orig(this.sortingKey.posInf)
this.sortingKey.negInf == orig(this.sortingKey.negInf)
this.sortingKey.nan == orig(this.sortingKey.nan)
this.start == orig(this.start)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.start.x == orig(this.start.x)
this.start.y == orig(this.start.y)
this.end == orig(this.end)
this.end.x == orig(this.end.x)
this.end.y == orig(this.end.y)
this.line == orig(this.line)
this.line.angle == orig(this.line.angle)
this.line.cos == orig(this.line.cos)
this.line.sin == orig(this.line.sin)
this.line.originOffset == orig(this.line.originOffset)
o.sortingKey == orig(o.sortingKey)
o.sortingKey.components == orig(o.sortingKey.components)
o.sortingKey.components[] == orig(o.sortingKey.components[])
o.sortingKey.offset == orig(o.sortingKey.offset)
o.sortingKey.lsb == orig(o.sortingKey.lsb)
o.sortingKey.encoding == orig(o.sortingKey.encoding)
o.sortingKey.encoding[] == orig(o.sortingKey.encoding[])
o.sortingKey.posInf == orig(o.sortingKey.posInf)
o.sortingKey.negInf == orig(o.sortingKey.negInf)
o.sortingKey.nan == orig(o.sortingKey.nan)
o.start == orig(o.start)
o.start.x == orig(o.start.x)
o.start.y == orig(o.start.y)
o.end == orig(o.end)
o.end.x == orig(o.end.x)
o.end.y == orig(o.end.y)
o.line == orig(o.line)
o.line.angle == orig(o.line.angle)
o.line.cos == orig(o.line.cos)
o.line.sin == orig(o.line.sin)
o.line.originOffset == orig(o.line.originOffset)
o.sortingKey.components[] elements one of { -1.0, 0.9999999999999999 }
o.sortingKey.components[] elements != 0
o.sortingKey.offset == 32
o.sortingKey.lsb one of { -53, -52, -51 }
o.sortingKey.encoding[] elements >= 0
o.sortingKey.posInf == false
o.sortingKey.negInf == false
o.sortingKey.nan == false
o.start.x one of { -0.9999999999999998, 0.9999999999999999 }
o.start.y one of { -1.0, 1.0000000000000002 }
o.end.x one of { -1.0000000000000002, 1.0 }
o.end.y one of { -1.0, 0.9999999999999997 }
o.line.originOffset one of { -1.0, 3.5824803083984214E-7, 0.9999994933603911 }
return one of { -1, 1 }
size(o.sortingKey.components[]) == 2
size(o.sortingKey.encoding[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:::OBJECT
this.sorted.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.sorted.top.parent == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.SegmentsBuilder():::EXIT
this.sorted.top == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::ENTER
sub.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
reversed == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::EXIT
this.sorted == orig(this.sorted)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.parent == orig(this.sorted.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.getSorted():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.getSorted():::EXIT
this.sorted == orig(this.sorted)
this.sorted.top == orig(this.sorted.top)
this.sorted.top.element == orig(this.sorted.top.element)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.left == orig(this.sorted.top.left)
this.sorted.top.right == orig(this.sorted.top.right)
this.sorted.top.parent == orig(this.sorted.top.parent)
this.sorted.top.skew == orig(this.sorted.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
return.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.top.parent == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.sorted == orig(this.sorted)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.parent == orig(this.sorted.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.sorted == orig(this.sorted)
this.sorted.top == orig(this.sorted.top)
this.sorted.top.element == orig(this.sorted.top.element)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.left == orig(this.sorted.top.left)
this.sorted.top.right == orig(this.sorted.top.right)
this.sorted.top.parent == orig(this.sorted.top.parent)
this.sorted.top.skew == orig(this.sorted.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
this.sorted.top == null
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.sorted == orig(this.sorted)
this.sorted.top == orig(this.sorted.top)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
this.sorted.top == null
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:::OBJECT
this.vertices.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].class
this.vertices[] elements != null
this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.tree.parent == null
this.size one of { 0.0, 2.0, 4.0 }
this.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
size(this.vertices[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet():::EXIT
this.vertices == null
this.tree.cut == null
this.tree.plus == null
this.tree.minus == null
this.tree.attribute has only one value
this.tree.attribute.getClass().getName() == java.lang.Boolean.class
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet(java.util.Collection):::ENTER
boundary != null
boundary.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet(java.util.Collection):::EXIT
this.vertices == null
this.tree != null
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent != null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.parent != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
tree != null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.vertices == null
this.tree != null
this.tree.plus.parent != null
this.tree.minus.parent != null
this.tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.attribute.getClass().getName() == java.lang.Boolean.class
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
this.vertices == null
this.tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.attribute == null
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.vertices == orig(this.vertices)
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
this.vertices == null
this.tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.attribute == null
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute == null
return.vertices == null
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.tree.parent == null
return.tree.attribute == null
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.computeGeometricalProperties():::ENTER
this.vertices == null
this.tree != null
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent != null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.parent != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.computeGeometricalProperties():::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.parent == orig(this.tree.parent)
this.vertices != null
this.tree != null
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent != null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.parent != null
this.tree.minus.attribute != null
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute != null
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.barycenter != null
this.size >= orig(this.size)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree):::ENTER
this.vertices == null
this.tree != null
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent != null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.parent != null
this.tree.minus.attribute != null
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute != null
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
node != null
node.element != null
node.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
node.left == null
node.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
node.right.left == null
node.right.right == null
node.right.skew has only one value
node.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
sorted.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
sorted.top.parent == null
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree):::EXIT330
return == null
orig(node.right.element) has only one value
orig(node.right.parent) has only one value
orig(node.parent.parent) == null
orig(node.parent.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree):::EXIT348
sorted.top == null
orig(node.right.element) has only one value
orig(node.right.parent) has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree):::EXIT
this.vertices == orig(this.vertices)
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
sorted.top.element.getClass().getName() == orig(sorted.top.element.getClass().getName())
sorted.top.parent == orig(sorted.top.parent)
this.vertices == null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
sorted.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
sorted.top.left == null
sorted.top.parent == null
return[] elements != null
return[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment.class
return[].getClass().getName() one of { [org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment], [org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment] }
return.getClass().getName() == java.util.ArrayList.class
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
size(return[]) one of { 3, 4 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.getVertices():::ENTER
this.vertices == null
this.tree != null
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent != null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.parent != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.getVertices():::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.parent == orig(this.tree.parent)
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
this.vertices != null
this.tree != null
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent != null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.parent != null
this.tree.minus.attribute != null
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute != null
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
return != null
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].class
return[] elements != null
size(return[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment:::OBJECT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
this.start.x one of { -1.0000000000000002, 0.9999999999999999 }
this.start.x != 0
this.start.y one of { -1.0, 0.9999999999999998 }
this.start.y != 0
this.end.x one of { -1.0000000000000004, 1.0 }
this.end.x != 0
this.end.y one of { -1.0, 0.9999999999999997 }
this.end.y != 0
this.line.cos != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.Segment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
start.x one of { -1.0000000000000002, 0.9999999999999999 }
start.x != 0
start.y one of { -1.0, 0.9999999999999998 }
start.y != 0
end.x one of { -1.0000000000000004, 1.0 }
end.x != 0
end.y one of { -1.0, 0.9999999999999997 }
end.y != 0
line.cos != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.Segment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
end.x == orig(end.x)
end.y == orig(end.y)
line.angle == orig(line.angle)
line.cos == orig(line.cos)
line.sin == orig(line.sin)
line.originOffset == orig(line.originOffset)
start.x one of { -1.0000000000000002, 0.9999999999999999 }
start.x != 0
start.y one of { -1.0, 0.9999999999999998 }
start.y != 0
end.x one of { -1.0000000000000004, 1.0 }
end.x != 0
end.y one of { -1.0, 0.9999999999999997 }
end.y != 0
line.cos != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.getEnd():::ENTER
this.start != null
this.end != null
this.line != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.getEnd():::EXIT
this.start == orig(this.start)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.start.x == orig(this.start.x)
this.start.y == orig(this.start.y)
this.end == orig(this.end)
this.end.x == orig(this.end.x)
this.end.y == orig(this.end.y)
this.line == orig(this.line)
this.line.angle == orig(this.line.angle)
this.line.cos == orig(this.line.cos)
this.line.sin == orig(this.line.sin)
this.line.originOffset == orig(this.line.originOffset)
this.start != null
this.end != null
this.line != null
return != null
return.x one of { -1.0000000000000004, 0.9999999999999999 }
return.x != 0
return.y one of { -1.0, 0.9999999999999997 }
return.y != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.getStart():::ENTER
this.start != null
this.end != null
this.line != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.getStart():::EXIT
this.start == orig(this.start)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.start.x == orig(this.start.x)
this.start.y == orig(this.start.y)
this.end == orig(this.end)
this.end.x == orig(this.end.x)
this.end.y == orig(this.end.y)
this.line == orig(this.line)
this.line.angle == orig(this.line.angle)
this.line.cos == orig(this.line.cos)
this.line.sin == orig(this.line.sin)
this.line.originOffset == orig(this.line.originOffset)
this.start != null
this.end != null
this.line != null
return != null
return.x one of { -1.0000000000000002, 0.9999999999999999 }
return.x != 0
return.y one of { -1.0, 0.9999999999999998 }
return.y != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine:::OBJECT
this.hyperplane != null
this.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
this.remainingRegion != null
this.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::ENTER
start != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
start.x one of { -1.0, 1.0 }
start.x != 0
start.y one of { -1.0, 1.0 }
start.y != 0
end != null
end.x one of { -1.0, 1.0 }
end.x != 0
end.y one of { -1.0, 1.0 }
end.y != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
end.x == orig(end.x)
end.y == orig(end.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
start.x one of { -1.0, 1.0 }
start.x != 0
start.y one of { -1.0, 1.0 }
start.y != 0
end.x one of { -1.0, 1.0 }
end.x != 0
end.y one of { -1.0, 1.0 }
end.y != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane != null
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
remainingRegion != null
remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::ENTER
start != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
start.x one of { -1.0, 1.0 }
start.x != 0
start.y one of { -1.0, 1.0 }
start.y != 0
end != null
end.x one of { -1.0, 1.0 }
end.x != 0
end.y one of { -1.0, 1.0 }
end.y != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
end.x == orig(end.x)
end.y == orig(end.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
start.x one of { -1.0, 1.0 }
start.x != 0
start.y one of { -1.0, 1.0 }
start.y != 0
end.x one of { -1.0, 1.0 }
end.x != 0
end.y one of { -1.0, 1.0 }
end.y != 0
return != null
return.tree != null
return.tree.cut != null
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.tree.plus != null
return.tree.minus != null
return.tree.parent == null
return.tree.attribute == null
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane != null
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
remainingRegion != null
remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return != null
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.hyperplane != null
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
return.remainingRegion != null
return.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane != null
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT162
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT168
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return != null
org.apache.commons.math3.geometry.partitioning.Side.PLUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.PLUS != null
org.apache.commons.math3.geometry.partitioning.Side.MINUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.MINUS != null
org.apache.commons.math3.geometry.partitioning.Side.BOTH has only one value
org.apache.commons.math3.geometry.partitioning.Side.BOTH != null
org.apache.commons.math3.geometry.partitioning.Side.HYPER has only one value
org.apache.commons.math3.geometry.partitioning.Side.HYPER != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side]
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Side.class
size(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane != null
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT183
return.minus == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT204
return.minus != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
(return.minus != null)  ==>  (return.minus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class)
return != null
return.plus != null
return.plus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.minus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D:::CLASS
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.Vector2D(double, double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.Vector2D(double, double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distance(org.apache.commons.math3.geometry.Vector):::ENTER
this.x one of { -1.0000000000000002, 0.9999999999999999 }
this.x != 0
this.y one of { -1.0, 0.9999999999999997 }
this.y != 0
p != null
p.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distance(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.x == orig(this.x)
this.y == orig(this.y)
this.x one of { -1.0000000000000002, 0.9999999999999999 }
this.x != 0
this.y one of { -1.0, 0.9999999999999997 }
this.y != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getX():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getX():::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getY():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getY():::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1:::OBJECT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == 0.0
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1.(org.apache.commons.math3.geometry.partitioning.AbstractRegion):::ENTER
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == 0.0
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1.(org.apache.commons.math3.geometry.partitioning.AbstractRegion):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1.compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1.compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2:::OBJECT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == 0.0
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.(org.apache.commons.math3.geometry.partitioning.AbstractRegion):::ENTER
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == 0.0
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.(org.apache.commons.math3.geometry.partitioning.AbstractRegion):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.attribute == null
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.attribute == null
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.cut == null
node.plus == null
node.minus == null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.attribute == null
node.minus.attribute == null
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.attribute == null
node.minus.attribute == null
node.parent.attribute == null
node.attribute == null
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.Sides():::EXIT
this.plusFound == false
this.minusFound == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.minusFound():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.minusFound():::EXIT
this.plusFound == orig(this.plusFound)
this.minusFound == orig(this.minusFound)
(this.minusFound == false)  <==>  (return == false)
(this.minusFound == false)  ==>  (this.plusFound == true)
(this.minusFound == true)  <==>  (return == true)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.minusFound():::EXIT;condition="return == true"
this.minusFound == true
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.minusFound():::EXIT;condition="not(return == true)"
this.plusFound == true
this.minusFound == false
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.plusFound():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.plusFound():::EXIT
this.plusFound == orig(this.plusFound)
this.minusFound == orig(this.minusFound)
(this.plusFound == false)  <==>  (return == false)
(this.plusFound == true)  <==>  (return == true)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.plusFound():::EXIT;condition="return == true"
this.plusFound == true
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.plusFound():::EXIT;condition="not(return == true)"
this.plusFound == false
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.rememberMinusFound():::ENTER
this.minusFound == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.rememberMinusFound():::EXIT
this.plusFound == orig(this.plusFound)
this.minusFound == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.rememberPlusFound():::ENTER
this.plusFound == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.rememberPlusFound():::EXIT
this.minusFound == orig(this.minusFound)
this.plusFound == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion:::OBJECT
this.tree != null
this.tree.plus.parent != null
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus.parent != null
this.tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.parent == null
this.tree.attribute.getClass().getName() == java.lang.Boolean.class
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion():::EXIT
this.tree.cut == null
this.tree.plus == null
this.tree.minus == null
this.tree.attribute has only one value
this.tree.attribute != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion(java.util.Collection):::ENTER
boundary != null
boundary.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion(java.util.Collection):::EXIT
this.tree.cut != null
this.tree.plus != null
this.tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
tree != null
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:::OBJECT
this.hyperplane != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.copySelf():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.copySelf():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return != null
return.hyperplane != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getHyperplane():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getHyperplane():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getRemainingRegion():::ENTER
this.remainingRegion != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getRemainingRegion():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
this.remainingRegion != null
return != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getSize():::ENTER
this.remainingRegion != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getSize():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
this.remainingRegion != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.isEmpty():::ENTER
this.remainingRegion != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.isEmpty():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
this.remainingRegion != null
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.isEmpty():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane):::ENTER
this.remainingRegion != null
other != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
this.remainingRegion != null
return != null
return.hyperplane != null
return.remainingRegion != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree:::OBJECT
this.plus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.plus.plus.parent != null
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.parent != null
this.plus.parent != null
this.plus.parent.cut != null
this.plus.parent.plus != null
this.plus.parent.minus != null
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.minus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.minus.plus.parent != null
this.minus.minus.parent != null
this.minus.parent != null
this.minus.parent.cut != null
this.minus.parent.plus != null
this.minus.parent.minus != null
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.parent.cut != null
this.parent.plus != null
this.parent.plus.parent != null
this.parent.minus != null
this.parent.minus.parent != null
this.parent.parent.cut != null
this.parent.parent.plus != null
this.parent.parent.minus != null
this.parent.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree():::EXIT
this.cut == null
this.plus == null
this.minus == null
this.parent == null
this.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree(java.lang.Object):::ENTER
attribute != null
attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree(java.lang.Object):::EXIT
this.cut == null
this.plus == null
this.minus == null
this.parent == null
this.attribute != null
this.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, java.lang.Object):::ENTER
cut != null
plus != null
plus.plus.cut == null
plus.plus.plus == null
plus.plus.minus == null
plus.plus.parent != null
plus.plus.attribute != null
plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
plus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
plus.minus.parent != null
plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
plus.parent.cut != null
plus.parent.plus != null
plus.parent.minus != null
plus.parent.parent == null
plus.parent.attribute == null
plus.attribute.getClass().getName() == java.lang.Boolean.class
minus != null
minus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
minus.plus.parent != null
minus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
minus.minus.parent != null
minus.parent.cut != null
minus.parent.plus != null
minus.parent.minus != null
minus.parent.parent == null
minus.parent.attribute == null
minus.attribute.getClass().getName() == java.lang.Boolean.class
attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, java.lang.Object):::EXIT
plus.cut == orig(plus.cut)
plus.cut.getClass().getName() == orig(plus.cut.getClass().getName())
plus.plus == orig(plus.plus)
plus.plus.cut == orig(plus.plus.cut)
plus.plus.plus == orig(plus.plus.plus)
plus.plus.minus == orig(plus.plus.minus)
plus.plus.parent == orig(plus.plus.parent)
plus.plus.attribute == orig(plus.plus.attribute)
plus.plus.attribute.getClass().getName() == orig(plus.plus.attribute.getClass().getName())
plus.minus == orig(plus.minus)
plus.minus.cut == orig(plus.minus.cut)
plus.minus.cut.getClass().getName() == orig(plus.minus.cut.getClass().getName())
plus.minus.plus == orig(plus.minus.plus)
plus.minus.minus == orig(plus.minus.minus)
plus.minus.parent == orig(plus.minus.parent)
plus.minus.attribute == orig(plus.minus.attribute)
plus.minus.attribute.getClass().getName() == orig(plus.minus.attribute.getClass().getName())
plus.parent.cut.getClass().getName() == orig(plus.parent.cut.getClass().getName())
plus.parent.parent == orig(plus.parent.parent)
plus.parent.attribute == orig(plus.parent.attribute)
plus.attribute == orig(plus.attribute)
plus.attribute.getClass().getName() == orig(plus.attribute.getClass().getName())
minus.cut == orig(minus.cut)
minus.cut.getClass().getName() == orig(minus.cut.getClass().getName())
minus.plus == orig(minus.plus)
minus.plus.cut == orig(minus.plus.cut)
minus.plus.cut.getClass().getName() == orig(minus.plus.cut.getClass().getName())
minus.plus.plus == orig(minus.plus.plus)
minus.plus.minus == orig(minus.plus.minus)
minus.plus.parent == orig(minus.plus.parent)
minus.plus.attribute == orig(minus.plus.attribute)
minus.plus.attribute.getClass().getName() == orig(minus.plus.attribute.getClass().getName())
minus.minus == orig(minus.minus)
minus.minus.cut == orig(minus.minus.cut)
minus.minus.cut.getClass().getName() == orig(minus.minus.cut.getClass().getName())
minus.minus.plus == orig(minus.minus.plus)
minus.minus.minus == orig(minus.minus.minus)
minus.minus.parent == orig(minus.minus.parent)
minus.minus.attribute == orig(minus.minus.attribute)
minus.minus.attribute.getClass().getName() == orig(minus.minus.attribute.getClass().getName())
minus.parent.cut.getClass().getName() == orig(minus.parent.cut.getClass().getName())
minus.parent.parent == orig(minus.parent.parent)
minus.attribute == orig(minus.attribute)
minus.attribute.getClass().getName() == orig(minus.attribute.getClass().getName())
this.cut != null
this.plus != null
this.plus.plus.cut == null
this.plus.plus.plus == null
this.plus.plus.minus == null
this.plus.plus.attribute != null
this.plus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.parent == null
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus != null
this.minus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.minus.parent.parent == null
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent == null
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
plus.plus.cut == null
plus.plus.plus == null
plus.plus.minus == null
plus.plus.parent != null
plus.plus.attribute != null
plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
plus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
plus.minus.parent != null
plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
plus.parent != null
plus.parent.cut != null
plus.parent.plus != null
plus.parent.minus != null
plus.parent.parent == null
plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
plus.attribute.getClass().getName() == java.lang.Boolean.class
minus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
minus.plus.parent != null
minus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
minus.minus.parent != null
minus.parent != null
minus.parent.cut != null
minus.parent.plus != null
minus.parent.minus != null
minus.parent.parent == null
minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
minus.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.copySelf():::ENTER
this.plus.cut == null
this.plus.plus == null
this.plus.minus == null
this.plus.parent.attribute == null
this.plus.attribute has only one value
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.minus.plus.cut == null
this.minus.plus.plus == null
this.minus.plus.minus == null
this.minus.plus.attribute has only one value
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.minus.cut == null
this.minus.minus.plus == null
this.minus.minus.minus == null
this.minus.minus.attribute has only one value
this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute == null
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.copySelf():::EXIT182
this.cut == null
this.plus == null
this.minus == null
this.attribute != null
return.cut == null
return.plus == null
return.minus == null
return.attribute != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.copySelf():::EXIT185
this.parent.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute == null
return.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.copySelf():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.plus == orig(this.plus.plus)
this.plus.minus == orig(this.plus.minus)
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
(this.cut == null)  <==>  (return.attribute != null)
(this.cut == null)  <==>  (return.cut == null)
(this.cut == null)  <==>  (return.minus == null)
(this.cut == null)  <==>  (return.plus == null)
(this.cut == null)  <==>  (this.attribute != null)
(this.cut == null)  <==>  (this.minus == null)
(this.cut == null)  <==>  (this.plus == null)
(this.cut == null)  ==>  (return.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut == null)  ==>  (this.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut == null)  ==>  (this.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)
(this.cut == null)  ==>  (this.parent.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)
this.plus.cut == null
this.plus.plus == null
this.plus.minus == null
this.plus.parent.attribute == null
this.plus.attribute has only one value
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.minus.plus.cut == null
this.minus.plus.plus == null
this.minus.plus.minus == null
this.minus.plus.attribute has only one value
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.minus.cut == null
this.minus.minus.plus == null
this.minus.minus.minus == null
this.minus.minus.attribute has only one value
this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute == null
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.attribute.getClass().getName() == java.lang.Boolean.class
return != null
return.plus.cut == null
return.plus.plus == null
return.plus.minus == null
return.plus.attribute has only one value
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.minus.attribute.getClass().getName() == java.lang.Boolean.class
return.parent == null
return.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getAttribute():::ENTER
this.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.plus.plus.cut == null
this.plus.plus.plus == null
this.plus.plus.minus == null
this.plus.plus.parent has only one value
this.plus.plus.attribute has only one value
this.plus.minus.cut has only one value
this.plus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.plus.minus.plus has only one value
this.plus.minus.minus has only one value
this.plus.minus.parent has only one value
this.plus.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.minus.plus.cut == null
this.minus.plus.plus == null
this.minus.plus.minus == null
this.minus.plus.attribute has only one value
this.minus.plus.attribute != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getAttribute():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.parent.attribute.getClass().getName() == orig(this.plus.parent.attribute.getClass().getName())
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.parent.attribute.getClass().getName() == orig(this.minus.parent.attribute.getClass().getName())
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.plus.plus.cut == null
this.plus.plus.plus == null
this.plus.plus.minus == null
this.plus.plus.parent has only one value
this.plus.plus.attribute has only one value
this.plus.minus.cut has only one value
this.plus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.plus.minus.plus has only one value
this.plus.minus.minus has only one value
this.plus.minus.parent has only one value
this.plus.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.minus.plus.cut == null
this.minus.plus.plus == null
this.minus.plus.minus == null
this.minus.plus.attribute has only one value
this.minus.plus.attribute != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getCut():::ENTER
this.plus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getCut():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.parent.attribute.getClass().getName() == orig(this.plus.parent.attribute.getClass().getName())
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.parent.attribute.getClass().getName() == orig(this.minus.parent.attribute.getClass().getName())
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.plus.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getMinus():::ENTER
this.cut != null
this.plus != null
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getMinus():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.parent.attribute.getClass().getName() == orig(this.plus.parent.attribute.getClass().getName())
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.parent.attribute.getClass().getName() == orig(this.minus.parent.attribute.getClass().getName())
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.cut != null
this.plus != null
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return != null
return.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.plus.parent != null
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.parent != null
return.parent != null
return.parent.cut != null
return.parent.plus != null
return.parent.minus != null
return.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getParent():::ENTER
this.cut == null
this.plus == null
this.minus == null
this.parent != null
this.parent.plus.cut == null
this.parent.plus.plus == null
this.parent.plus.minus == null
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.attribute == null
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getParent():::EXIT
this.cut == orig(this.cut)
this.plus == orig(this.plus)
this.minus == orig(this.minus)
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.attribute == orig(this.parent.attribute)
this.attribute == orig(this.attribute)
this.cut == null
this.plus == null
this.minus == null
this.parent != null
this.parent.plus.cut == null
this.parent.plus.plus == null
this.parent.plus.minus == null
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.attribute == null
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute == null
return != null
return.cut != null
return.plus != null
return.plus.cut == null
return.plus.plus == null
return.plus.minus == null
return.plus.parent != null
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus != null
return.minus.parent != null
return.minus.attribute == null
return.parent.cut != null
return.parent.plus != null
return.parent.minus != null
return.parent.attribute == null
return.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getPlus():::ENTER
this.cut != null
this.plus != null
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getPlus():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.parent.attribute.getClass().getName() == orig(this.plus.parent.attribute.getClass().getName())
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.parent.attribute.getClass().getName() == orig(this.minus.parent.attribute.getClass().getName())
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.cut != null
this.plus != null
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return != null
return.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.plus.parent != null
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.parent != null
return.parent != null
return.parent.cut != null
return.parent.plus != null
return.parent.minus != null
return.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
this.cut == null
this.plus == null
this.minus == null
this.parent.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.parent.plus.attribute == null
this.parent.minus.cut == null
this.parent.minus.plus == null
this.parent.minus.minus == null
this.parent.minus.attribute == null
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute == null
hyperplane != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT168
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT168;condition="return == true"
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.minus == orig(this.parent.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.attribute == orig(this.parent.attribute)
this.attribute == orig(this.attribute)
this.cut != null
this.plus != null
this.plus.cut == null
this.plus.plus == null
this.plus.minus == null
this.plus.parent.attribute == null
this.plus.attribute == null
this.minus != null
this.minus.cut == null
this.minus.plus == null
this.minus.minus == null
this.minus.parent.attribute == null
this.minus.attribute == null
this.parent.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.parent.plus.attribute == null
this.parent.minus.attribute == null
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute == null
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.setAttribute(java.lang.Object):::ENTER
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.attribute == null
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.plus.cut == null
this.minus.plus.plus == null
this.minus.plus.minus == null
this.minus.plus.attribute has only one value
this.minus.plus.attribute != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute == null
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.setAttribute(java.lang.Object):::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.plus.cut == null
this.minus.plus.plus == null
this.minus.plus.minus == null
this.minus.plus.attribute has only one value
this.minus.plus.attribute != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order:::CLASS
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.Order(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.Order(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.values():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.values():::EXIT
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
return[] contains no nulls and has only one value, of length 6
size(return[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute:::OBJECT
this.plusInside == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.BoundaryAttribute(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::ENTER
plusInside == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.BoundaryAttribute(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.getPlusInside():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.getPlusInside():::EXIT
this.plusOutside == orig(this.plusOutside)
this.plusOutside.getClass().getName() == orig(this.plusOutside.getClass().getName())
this.plusInside == orig(this.plusInside)
return == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.getPlusOutside():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.getPlusOutside():::EXIT
this.plusOutside == orig(this.plusOutside)
this.plusOutside.getClass().getName() == orig(this.plusOutside.getClass().getName())
this.plusInside == orig(this.plusInside)
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor:::OBJECT
this has only one value
this.boundarySize >= 0.0
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.BoundarySizeVisitor():::EXIT
this.boundarySize == 0.0
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.getSize():::ENTER
this.boundarySize == 23.999995946884667
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.getSize():::EXIT
this.boundarySize == orig(this.boundarySize)
this.boundarySize == 23.999995946884667
return == 23.999995946884667
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.boundarySize >= orig(this.boundarySize)
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.boundarySize == orig(this.boundarySize)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
this.boundarySize one of { 0.0, 21.99999594688441 }
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.boundarySize == orig(this.boundarySize)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
this.boundarySize one of { 0.0, 21.99999594688441 }
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.Characterization():::EXIT
this.in == null
this.out == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.add(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::ENTER
this.in == null
sub != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.add(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::EXIT
this.out.getClass().getName() == orig(this.out.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.getIn():::ENTER
this.in != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.getIn():::EXIT
this.in == orig(this.in)
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out == orig(this.out)
this.out.getClass().getName() == orig(this.out.getClass().getName())
this.in != null
return != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.getOut():::ENTER
this.in.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.out != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.getOut():::EXIT
this.in == orig(this.in)
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out == orig(this.out)
this.out.getClass().getName() == orig(this.out.getClass().getName())
this.in.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.out != null
return != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasIn():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasIn():::EXIT
this.in == orig(this.in)
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out == orig(this.out)
this.out.getClass().getName() == orig(this.out.getClass().getName())
(this.in != null)  <==>  (return == true)
(this.in == null)  <==>  (return == false)
(this.in == null)  ==>  (this.out != null)
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasIn():::EXIT;condition="return == true"
this.in != null
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasIn():::EXIT;condition="not(return == true)"
this.in == null
this.out != null
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasOut():::ENTER
this.in.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasOut():::EXIT
this.in == orig(this.in)
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out == orig(this.out)
this.out.getClass().getName() == orig(this.out.getClass().getName())
(this.out != null)  <==>  (return == true)
(this.out == null)  <==>  (return == false)
(this.out == null)  ==>  (orig(this) has only one value)
(this.out == null)  ==>  (this.in has only one value)
this.in.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasOut():::EXIT;condition="return == true"
this.out != null
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasOut():::EXIT;condition="not(return == true)"
this.in has only one value
this.out == null
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.Region$Location:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.Region$Location.Location(java.lang.String, int):::ENTER
$hidden$1.toString one of { "BOUNDARY", "INSIDE", "OUTSIDE" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.Region$Location.Location(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "BOUNDARY", "INSIDE", "OUTSIDE" }
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.NodesCleaner(org.apache.commons.math3.geometry.partitioning.RegionFactory):::ENTER
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.NodesCleaner(org.apache.commons.math3.geometry.partitioning.RegionFactory):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute == null
node.attribute == null
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.UnionMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.UnionMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean):::ENTER
leaf.cut == null
leaf.plus == null
leaf.minus == null
leaf.parent.attribute == null
leaf.attribute.getClass().getName() == java.lang.Boolean.class
tree.plus.cut == null
tree.plus.plus == null
tree.plus.minus == null
tree.plus.attribute has only one value
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent.attribute == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.plus.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.minus.cut == null
parentTree.minus.plus == null
parentTree.minus.minus == null
parentTree.minus.attribute has only one value
parentTree.minus.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.parent.attribute == null
parentTree.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean):::EXIT167
leaf.parent.minus == orig(leaf.parent.minus)
tree.cut == orig(tree.cut)
tree.parent == orig(tree.parent)
tree.parent.plus == orig(tree.parent.plus)
parentTree.plus.cut == orig(parentTree.plus.cut)
parentTree.minus.cut == orig(parentTree.minus.cut)
parentTree.minus.plus == orig(parentTree.minus.plus)
parentTree.minus.minus == orig(parentTree.minus.minus)
leaf.attribute has only one value
tree.cut == null
tree.plus == null
tree.minus == null
tree.attribute has only one value
parentTree.minus.cut == null
parentTree.minus.plus == null
parentTree.minus.minus == null
parentTree.minus.attribute has only one value
return.cut == null
return.plus == null
return.minus == null
return.attribute has only one value
orig(isPlusChild) == false
orig(leafFromInstance) == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean):::EXIT171
leaf.parent == orig(leaf.parent)
leaf.parent.plus == orig(leaf.parent.plus)
leaf.parent.parent == orig(leaf.parent.parent)
tree.parent.minus == orig(tree.parent.minus)
leaf.attribute has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
leaf.cut == orig(leaf.cut)
leaf.plus == orig(leaf.plus)
leaf.minus == orig(leaf.minus)
leaf.parent.cut == orig(leaf.parent.cut)
leaf.parent.cut.getClass().getName() == orig(leaf.parent.cut.getClass().getName())
leaf.parent.attribute == orig(leaf.parent.attribute)
leaf.attribute == orig(leaf.attribute)
leaf.attribute.getClass().getName() == orig(leaf.attribute.getClass().getName())
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent.cut == orig(tree.parent.cut)
tree.parent.cut.getClass().getName() == orig(tree.parent.cut.getClass().getName())
tree.parent.parent == orig(tree.parent.parent)
tree.parent.attribute == orig(tree.parent.attribute)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
parentTree.cut == orig(parentTree.cut)
parentTree.cut.getClass().getName() == orig(parentTree.cut.getClass().getName())
parentTree.plus == orig(parentTree.plus)
parentTree.plus.cut.getClass().getName() == orig(parentTree.plus.cut.getClass().getName())
parentTree.plus.plus == orig(parentTree.plus.plus)
parentTree.plus.minus == orig(parentTree.plus.minus)
parentTree.plus.parent == orig(parentTree.plus.parent)
parentTree.plus.attribute == orig(parentTree.plus.attribute)
parentTree.plus.attribute.getClass().getName() == orig(parentTree.plus.attribute.getClass().getName())
parentTree.minus.parent == orig(parentTree.minus.parent)
parentTree.minus.attribute.getClass().getName() == orig(parentTree.minus.attribute.getClass().getName())
parentTree.parent == orig(parentTree.parent)
parentTree.parent.cut == orig(parentTree.parent.cut)
parentTree.parent.cut.getClass().getName() == orig(parentTree.parent.cut.getClass().getName())
parentTree.parent.plus == orig(parentTree.parent.plus)
parentTree.parent.minus == orig(parentTree.parent.minus)
parentTree.parent.parent == orig(parentTree.parent.parent)
parentTree.parent.attribute == orig(parentTree.parent.attribute)
parentTree.attribute == orig(parentTree.attribute)
(tree.attribute has only one value)  <==>  (parentTree.minus.attribute has only one value)
(tree.attribute has only one value)  ==>  (leaf.parent.minus == orig(leaf.parent.minus))
(tree.attribute has only one value)  ==>  (orig(isPlusChild) == false)
(tree.attribute has only one value)  ==>  (orig(leafFromInstance) == true)
(tree.attribute has only one value)  ==>  (orig(tree.cut) == null)
(tree.attribute has only one value)  ==>  (parentTree.minus.cut == null)
(tree.attribute has only one value)  ==>  (parentTree.minus.cut == orig(parentTree.minus.cut))
(tree.attribute has only one value)  ==>  (parentTree.minus.minus == null)
(tree.attribute has only one value)  ==>  (parentTree.minus.minus == orig(parentTree.minus.minus))
(tree.attribute has only one value)  ==>  (parentTree.minus.plus == null)
(tree.attribute has only one value)  ==>  (parentTree.minus.plus == orig(parentTree.minus.plus))
(tree.attribute has only one value)  ==>  (parentTree.plus.cut == orig(parentTree.plus.cut))
(tree.attribute has only one value)  ==>  (return.attribute has only one value)
(tree.attribute has only one value)  ==>  (return.cut == null)
(tree.attribute has only one value)  ==>  (return.minus == null)
(tree.attribute has only one value)  ==>  (return.plus == null)
(tree.attribute has only one value)  ==>  (tree.cut == null)
(tree.attribute has only one value)  ==>  (tree.cut == orig(tree.cut))
(tree.attribute has only one value)  ==>  (tree.minus == null)
(tree.attribute has only one value)  ==>  (tree.parent == orig(tree.parent))
(tree.attribute has only one value)  ==>  (tree.parent.plus == orig(tree.parent.plus))
(tree.attribute has only one value)  ==>  (tree.plus == null)
leaf.cut == null
leaf.plus == null
leaf.minus == null
leaf.parent.attribute == null
leaf.attribute.getClass().getName() == java.lang.Boolean.class
tree.plus.cut == null
tree.plus.plus == null
tree.plus.minus == null
tree.plus.attribute has only one value
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent.attribute == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.plus.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
parentTree.minus.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.parent.attribute == null
parentTree.attribute == null
return.plus.cut == null
return.plus.plus == null
return.plus.minus == null
return.plus.attribute has only one value
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.minus.attribute.getClass().getName() == java.lang.Boolean.class
return.parent.attribute == null
return.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.RegionFactory():::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.union(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.union(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
this.nodeCleaner == orig(this.nodeCleaner)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side:::CLASS
org.apache.commons.math3.geometry.partitioning.Side.PLUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.MINUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.BOTH has only one value
org.apache.commons.math3.geometry.partitioning.Side.HYPER has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side]
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Side.class
size(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side.Side(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side.Side(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side.values():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side.values():::EXIT
org.apache.commons.math3.geometry.partitioning.Side.PLUS == orig(org.apache.commons.math3.geometry.partitioning.Side.PLUS)
org.apache.commons.math3.geometry.partitioning.Side.MINUS == orig(org.apache.commons.math3.geometry.partitioning.Side.MINUS)
org.apache.commons.math3.geometry.partitioning.Side.BOTH == orig(org.apache.commons.math3.geometry.partitioning.Side.BOTH)
org.apache.commons.math3.geometry.partitioning.Side.HYPER == orig(org.apache.commons.math3.geometry.partitioning.Side.HYPER)
org.apache.commons.math3.geometry.partitioning.Side.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.Side.$VALUES)
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[])
return.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
return[] contains no nulls and has only one value, of length 4
size(return[]) == 4
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.getMinus():::ENTER
this.minus != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.getMinus():::EXIT
this.plus == orig(this.plus)
this.plus.getClass().getName() == orig(this.plus.getClass().getName())
this.minus == orig(this.minus)
this.minus.getClass().getName() == orig(this.minus.getClass().getName())
this.minus != null
return != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.getPlus():::ENTER
this.plus != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.getPlus():::EXIT
this.plus == orig(this.plus)
this.plus.getClass().getName() == orig(this.plus.getClass().getName())
this.minus == orig(this.minus)
this.minus.getClass().getName() == orig(this.minus.getClass().getName())
this.plus != null
return != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node:::OBJECT
this.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.left.left.element has only one value
this.left.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.left.left.left == null
this.left.left.right == null
this.left.left.parent has only one value
this.left.left.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this has only one value
this.left.right.element has only one value
this.left.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.left.right.left == null
this.left.right.right == null
this.left.right.parent has only one value
this.left.right.skew has only one value
this.left.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
this.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.right.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.right.left.left == null
this.right.left.right == null
this.right.left.skew has only one value
this.right.right.element has only one value
this.right.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.right.right.left == null
this.right.right.right == null
this.right.right.parent has only one value
this.right.right.skew has only one value
this.right.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.parent.parent == null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == null
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.Node(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, java.lang.Comparable, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node):::ENTER
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == null
element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.left.left == null
parent.left.right == null
parent.left.skew has only one value
parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.right.left == null
parent.right.right == null
parent.right.skew has only one value
parent.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.parent.parent == null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.Node(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, java.lang.Comparable, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node):::EXIT
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
parent.element == orig(parent.element)
parent.element.getClass().getName() == orig(parent.element.getClass().getName())
parent.left == orig(parent.left)
parent.left.element == orig(parent.left.element)
parent.left.element.getClass().getName() == orig(parent.left.element.getClass().getName())
parent.left.left == orig(parent.left.left)
parent.left.right == orig(parent.left.right)
parent.left.parent == orig(parent.left.parent)
parent.left.skew == orig(parent.left.skew)
parent.right == orig(parent.right)
parent.right.element == orig(parent.right.element)
parent.right.element.getClass().getName() == orig(parent.right.element.getClass().getName())
parent.right.left == orig(parent.right.left)
parent.right.right == orig(parent.right.right)
parent.right.parent == orig(parent.right.parent)
parent.right.skew == orig(parent.right.skew)
parent.parent == orig(parent.parent)
parent.parent.element == orig(parent.parent.element)
parent.parent.element.getClass().getName() == orig(parent.parent.element.getClass().getName())
parent.parent.left == orig(parent.parent.left)
parent.parent.right == orig(parent.parent.right)
parent.parent.parent == orig(parent.parent.parent)
parent.parent.skew == orig(parent.parent.skew)
parent.skew == orig(parent.skew)
this.left == null
this.right == null
this.parent.left.left == null
this.parent.left.right == null
this.parent.left.skew has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.skew has only one value
parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.left.left == null
parent.left.right == null
parent.left.skew has only one value
parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.right.left == null
parent.right.right == null
parent.right.skew has only one value
parent.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.parent.parent == null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) (elementwise)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.delete():::ENTER
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.skew has only one value
this.parent.left.left == null
this.parent.parent.element has only one value
this.parent.parent.left has only one value
this.parent.parent.right has only one value
this.parent.parent.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.delete():::EXIT403
this.left == orig(this.left)
this.right == null
this.parent.skew has only one value
this.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value
orig(this.right.parent.left) == null
orig(this.right.parent.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.delete():::EXIT410
this.right == orig(this.right)
this.parent.element == orig(this.parent.element)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.skew == orig(this.parent.right.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
this.parent.left == null
this.parent.parent == null
this.parent.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value
orig(this.right.parent.skew) has only one value
orig(this.parent.left.right) == null
orig(this.parent.left.skew) has only one value
orig(this.parent.skew) has only one value
orig(this.skew) has only one value
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.delete():::EXIT
this.element.getClass().getName() == orig(this.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.parent == orig(this.right.parent)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.right == orig(this.right.parent.right)
this.right.parent.parent == orig(this.right.parent.parent)
this.right.skew == orig(this.right.skew)
this.parent == orig(this.parent)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
this.left == null
this.right.left == null
this.right.right == null
this.right.parent.left == null
this.right.parent.parent == null
this.right.parent.skew has only one value
this.right.skew has only one value
this.parent.left.left == null
this.parent.left.right == null
this.parent.left.skew has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.parent.parent.element has only one value
this.parent.parent.left has only one value
this.parent.parent.right has only one value
this.parent.parent.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getElement():::ENTER
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.skew has only one value
this.parent.left.left == null
this.parent.parent.element has only one value
this.parent.parent.left has only one value
this.parent.parent.right has only one value
this.parent.parent.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getElement():::EXIT
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left == orig(this.left.left)
this.left.right == orig(this.left.right)
this.left.parent == orig(this.left.parent)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.left.parent.parent == orig(this.left.parent.parent)
this.left.parent.skew == orig(this.left.parent.skew)
this.left.skew == orig(this.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.parent == orig(this.right.parent)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.right.parent.parent == orig(this.right.parent.parent)
this.right.parent.skew == orig(this.right.parent.skew)
this.right.skew == orig(this.right.skew)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.left.skew == orig(this.parent.left.skew)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.right.skew == orig(this.parent.right.skew)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.skew == orig(this.parent.parent.skew)
this.parent.skew == orig(this.parent.skew)
this.skew == orig(this.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.skew has only one value
this.parent.left.left == null
this.parent.parent.element has only one value
this.parent.parent.left has only one value
this.parent.parent.right has only one value
this.parent.parent.skew has only one value
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getLargest():::ENTER
this.left == null
this.right == null
this.parent.left.left == null
this.parent.left.right == null
this.parent.left.skew has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.parent.parent == null
this.parent.skew has only one value
this.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getLargest():::EXIT
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left == orig(this.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
this.right == orig(this.right)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.left.skew == orig(this.parent.left.skew)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.right.skew == orig(this.parent.right.skew)
this.parent.parent == orig(this.parent.parent)
this.parent.skew == orig(this.parent.skew)
this.skew == orig(this.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
this.left == null
this.right == null
this.parent.left.left == null
this.parent.left.right == null
this.parent.left.skew has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.parent.parent == null
this.parent.skew has only one value
this.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left == null
return.right == null
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.parent.parent == null
return.parent.skew has only one value
return.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::ENTER
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.parent.parent == null
this.right.skew has only one value
this.parent.left == null
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.parent.parent == null
this.parent.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::EXIT330
this.parent == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::EXIT340
this.left == null
this.right == null
this.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == null
return == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::EXIT
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left == orig(this.left.left)
this.left.right == orig(this.left.right)
this.left.parent == orig(this.left.parent)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.left.parent.parent == orig(this.left.parent.parent)
this.left.parent.skew == orig(this.left.parent.skew)
this.left.skew == orig(this.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.parent == orig(this.right.parent)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.right.parent.parent == orig(this.right.parent.parent)
this.right.parent.skew == orig(this.right.parent.skew)
this.right.skew == orig(this.right.skew)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.right.skew == orig(this.parent.right.skew)
this.parent.parent == orig(this.parent.parent)
this.parent.skew == orig(this.parent.skew)
this.skew == orig(this.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.parent.parent == null
this.right.skew has only one value
this.parent.left == null
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.parent.parent == null
this.parent.skew has only one value
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left == null
return.right == null
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.parent.parent == null
return.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getSmallest():::ENTER
this.left.parent.parent == null
this.right.parent.parent == null
this.parent.left.left == null
this.parent.left.right == null
this.parent.left.skew has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.parent.parent.element has only one value
this.parent.parent.left has only one value
this.parent.parent.right has only one value
this.parent.parent.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getSmallest():::EXIT
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left == orig(this.left.left)
this.left.left.element == orig(this.left.left.element)
this.left.left.element.getClass().getName() == orig(this.left.left.element.getClass().getName())
this.left.left.left == orig(this.left.left.left)
this.left.left.right == orig(this.left.left.right)
this.left.left.parent == orig(this.left.left.parent)
this.left.left.skew == orig(this.left.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.left.right == orig(this.left.right)
this.left.right.element == orig(this.left.right.element)
this.left.right.element.getClass().getName() == orig(this.left.right.element.getClass().getName())
this.left.right.left == orig(this.left.right.left)
this.left.right.right == orig(this.left.right.right)
this.left.right.parent == orig(this.left.right.parent)
this.left.right.skew == orig(this.left.right.skew)
this.left.parent == orig(this.left.parent)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.left.parent.parent == orig(this.left.parent.parent)
this.left.parent.skew == orig(this.left.parent.skew)
this.left.skew == orig(this.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left == orig(this.right.left)
this.right.left.element == orig(this.right.left.element)
this.right.left.element.getClass().getName() == orig(this.right.left.element.getClass().getName())
this.right.left.left == orig(this.right.left.left)
this.right.left.right == orig(this.right.left.right)
this.right.left.parent == orig(this.right.left.parent)
this.right.left.skew == orig(this.right.left.skew)
this.right.right == orig(this.right.right)
this.right.right.element == orig(this.right.right.element)
this.right.right.element.getClass().getName() == orig(this.right.right.element.getClass().getName())
this.right.right.left == orig(this.right.right.left)
this.right.right.right == orig(this.right.right.right)
this.right.right.parent == orig(this.right.right.parent)
this.right.right.skew == orig(this.right.right.skew)
this.right.parent == orig(this.right.parent)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.right.parent.parent == orig(this.right.parent.parent)
this.right.parent.skew == orig(this.right.parent.skew)
this.right.skew == orig(this.right.skew)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.left.skew == orig(this.parent.left.skew)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.right.skew == orig(this.parent.right.skew)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.skew == orig(this.parent.parent.skew)
this.parent.skew == orig(this.parent.skew)
this.skew == orig(this.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
this.left.parent.parent == null
this.right.parent.parent == null
this.parent.left.left == null
this.parent.left.right == null
this.parent.left.skew has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.parent.parent.element has only one value
this.parent.parent.left has only one value
this.parent.parent.right has only one value
this.parent.parent.skew has only one value
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left == null
return.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.right.left == null
return.right.right == null
return.right.skew has only one value
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::ENTER
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.parent.parent == null
this.right.skew has only one value
this.parent.left.left == null
this.parent.left.right == null
this.parent.left.skew has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.parent.parent == null
newElement.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT353
this.element == orig(this.element)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.right == orig(this.right.parent.right)
this.right.skew == orig(this.right.skew)
this.parent.left.right == orig(this.parent.left.right)
this.parent.right.right == orig(this.parent.right.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
(return == false)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value)
(return == false)  ==>  (orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left) == null)
(return == false)  ==>  (orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value)
(return == false)  ==>  (orig(this.right.parent.left) == null)
(return == false)  ==>  (orig(this.right.parent.skew) has only one value)
(return == false)  ==>  (this.left.parent.parent == null)
(return == false)  ==>  (this.parent == null)
(return == false)  ==>  (this.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.right.left == null)
(return == false)  ==>  (this.right.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.right.parent.parent == null)
(return == false)  ==>  (this.right.parent.skew has only one value)
(return == false)  ==>  (this.right.right == null)
(return == false)  ==>  (this.right.skew has only one value)
(return == true)  ==>  (orig(this.parent.left.left) == null)
(return == true)  ==>  (orig(this.parent.left.skew) has only one value)
(return == true)  ==>  (orig(this.parent.right.left) == null)
(return == true)  ==>  (orig(this.parent.right.skew) has only one value)
(return == true)  ==>  (this.left.parent.right == null)
(return == true)  ==>  (this.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.parent.left.right == null)
(return == true)  ==>  (this.parent.parent == null)
(return == true)  ==>  (this.parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.parent.right.right == null)
(return == true)  ==>  (this.right == null)
this.left.left == null
this.left.right == null
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.parent.parent == null
this.right.parent.skew has only one value
this.right.skew has only one value
this.parent.left.right == null
this.parent.right.right == null
orig(this.left) == null
orig(this.right.parent.left) == null
orig(this.right.parent.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT353;condition="return == true"
this.left.parent.right == null
this.left.parent.skew has only one value
this.right == null
this.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT353;condition="not(return == true)"
orig(this.skew) has only one value
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left) == null
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT355
this.right.element == orig(this.right.element)
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.right.skew == orig(this.right.skew)
(return == false)  ==>  (orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right) == null)
(return == false)  ==>  (orig(this.left.parent.right) == null)
(return == false)  ==>  (orig(this.right) == null)
(return == false)  ==>  (this.left.left == null)
(return == false)  ==>  (this.left.left == orig(this.left.left))
(return == false)  ==>  (this.left.right == null)
(return == false)  ==>  (this.left.right == orig(this.left.right))
(return == false)  ==>  (this.left.skew == orig(this.left.skew))
(return == false)  ==>  (this.left.skew has only one value)
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this has only one value)
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right))
(return == true)  ==>  (orig(this.right.element.getClass().getName()) == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (orig(this.right.left) == null)
(return == true)  ==>  (orig(this.right.parent.element.getClass().getName()) == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (orig(this.right.parent.parent) == null)
(return == true)  ==>  (orig(this.right.parent.skew) has only one value)
(return == true)  ==>  (orig(this.right.right) == null)
(return == true)  ==>  (orig(this.right.skew) has only one value)
(return == true)  ==>  (this.element == orig(this.element))
(return == true)  ==>  (this.left == orig(this.left))
(return == true)  ==>  (this.left.element == orig(this.left.element))
(return == true)  ==>  (this.left.left.element has only one value)
(return == true)  ==>  (this.left.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.left.left.left == null)
(return == true)  ==>  (this.left.left.parent has only one value)
(return == true)  ==>  (this.left.left.right == null)
(return == true)  ==>  (this.left.left.skew has only one value)
(return == true)  ==>  (this.left.parent.element == orig(this.left.parent.element))
(return == true)  ==>  (this.left.parent.left == orig(this.left.parent.left))
(return == true)  ==>  (this.left.parent.right == orig(this.left.parent.right))
(return == true)  ==>  (this.left.right.element has only one value)
(return == true)  ==>  (this.left.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.left.right.left == null)
(return == true)  ==>  (this.left.right.parent has only one value)
(return == true)  ==>  (this.left.right.right == null)
(return == true)  ==>  (this.left.right.skew has only one value)
(return == true)  ==>  (this.right == orig(this.right))
(return == true)  ==>  (this.right.element == orig(this.right.element))
(return == true)  ==>  (this.right.element.getClass().getName() == orig(this.right.element.getClass().getName()))
(return == true)  ==>  (this.right.left == orig(this.right.left))
(return == true)  ==>  (this.right.parent == orig(this.right.parent))
(return == true)  ==>  (this.right.parent.element == orig(this.right.parent.element))
(return == true)  ==>  (this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName()))
(return == true)  ==>  (this.right.parent.left == orig(this.right.parent.left))
(return == true)  ==>  (this.right.parent.parent == orig(this.right.parent.parent))
(return == true)  ==>  (this.right.parent.right == orig(this.right.parent.right))
(return == true)  ==>  (this.right.right == orig(this.right.right))
(return == true)  ==>  (this.right.skew == orig(this.right.skew))
this.left.parent.parent == null
this.right.left == null
this.right.right == null
this.right.parent.parent == null
this.right.skew has only one value
this.parent == null
orig(this.right.parent.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT355;condition="return == true"
this.left == orig(this.left)
this.right == orig(this.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
this.left.parent.skew has only one value
this.right.parent.skew has only one value
this.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT355;condition="not(return == true)"
orig(this.right) == null
orig(this.skew) has only one value
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right) == null
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT361
this.element == orig(this.element)
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.left == orig(this.left.left)
this.left.right == orig(this.left.right)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.left == orig(this.left.parent.left)
this.left.skew == orig(this.left.skew)
this.parent.left.left == orig(this.parent.left.left)
this.parent.right.left == orig(this.parent.right.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
(return == false)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value)
(return == false)  ==>  (orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right) == null)
(return == false)  ==>  (orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value)
(return == false)  ==>  (orig(this.left.parent.right) == null)
(return == false)  ==>  (orig(this.left.parent.skew) has only one value)
(return == false)  ==>  (this.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.left.left == null)
(return == false)  ==>  (this.left.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.left.parent.parent == null)
(return == false)  ==>  (this.left.parent.skew has only one value)
(return == false)  ==>  (this.left.right == null)
(return == false)  ==>  (this.left.skew has only one value)
(return == false)  ==>  (this.parent == null)
(return == false)  ==>  (this.right.parent.parent == null)
(return == true)  ==>  (orig(this.parent.left.right) == null)
(return == true)  ==>  (orig(this.parent.left.skew) has only one value)
(return == true)  ==>  (orig(this.parent.right.right) == null)
(return == true)  ==>  (orig(this.parent.right.skew) has only one value)
(return == true)  ==>  (this.left == null)
(return == true)  ==>  (this.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.parent.left.left == null)
(return == true)  ==>  (this.parent.parent == null)
(return == true)  ==>  (this.parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.parent.right.left == null)
(return == true)  ==>  (this.right.parent.left == null)
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.skew has only one value
this.parent.left.left == null
this.parent.right.left == null
orig(this.left.parent.right) == null
orig(this.left.parent.skew) has only one value
orig(this.right) == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT361;condition="return == true"
this.left == null
this.right.parent.left == null
this.right.parent.skew has only one value
this.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT361;condition="not(return == true)"
orig(this.skew) has only one value
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right) == null
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT363
this.left.element == orig(this.left.element)
this.left.left == orig(this.left.left)
this.left.right == orig(this.left.right)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.left.skew == orig(this.left.skew)
(return == false)  ==>  (orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left) == null)
(return == false)  ==>  (orig(this.left) == null)
(return == false)  ==>  (orig(this.right.parent.left) == null)
(return == false)  ==>  (this.right.left == null)
(return == false)  ==>  (this.right.left == orig(this.right.left))
(return == false)  ==>  (this.right.right == null)
(return == false)  ==>  (this.right.right == orig(this.right.right))
(return == false)  ==>  (this.right.skew == orig(this.right.skew))
(return == false)  ==>  (this.right.skew has only one value)
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right))
(return == true)  ==>  (orig(this.left.element.getClass().getName()) == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (orig(this.left.left) == null)
(return == true)  ==>  (orig(this.left.parent.element.getClass().getName()) == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (orig(this.left.parent.parent) == null)
(return == true)  ==>  (orig(this.left.parent.skew) has only one value)
(return == true)  ==>  (orig(this.left.right) == null)
(return == true)  ==>  (orig(this.left.skew) has only one value)
(return == true)  ==>  (this.element == orig(this.element))
(return == true)  ==>  (this.left == orig(this.left))
(return == true)  ==>  (this.left.element == orig(this.left.element))
(return == true)  ==>  (this.left.element.getClass().getName() == orig(this.left.element.getClass().getName()))
(return == true)  ==>  (this.left.left == orig(this.left.left))
(return == true)  ==>  (this.left.parent == orig(this.left.parent))
(return == true)  ==>  (this.left.parent.element == orig(this.left.parent.element))
(return == true)  ==>  (this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName()))
(return == true)  ==>  (this.left.parent.left == orig(this.left.parent.left))
(return == true)  ==>  (this.left.parent.parent == orig(this.left.parent.parent))
(return == true)  ==>  (this.left.parent.right == orig(this.left.parent.right))
(return == true)  ==>  (this.left.right == orig(this.left.right))
(return == true)  ==>  (this.left.skew == orig(this.left.skew))
(return == true)  ==>  (this.right == orig(this.right))
(return == true)  ==>  (this.right.element == orig(this.right.element))
(return == true)  ==>  (this.right.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.right.left.left == null)
(return == true)  ==>  (this.right.left.right == null)
(return == true)  ==>  (this.right.left.skew has only one value)
(return == true)  ==>  (this.right.parent.element == orig(this.right.parent.element))
(return == true)  ==>  (this.right.parent.left == orig(this.right.parent.left))
(return == true)  ==>  (this.right.parent.right == orig(this.right.parent.right))
(return == true)  ==>  (this.right.right.element has only one value)
(return == true)  ==>  (this.right.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.right.right.left == null)
(return == true)  ==>  (this.right.right.parent has only one value)
(return == true)  ==>  (this.right.right.right == null)
(return == true)  ==>  (this.right.right.skew has only one value)
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.skew has only one value
this.right.parent.parent == null
this.parent == null
orig(this.left.parent.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT363;condition="return == true"
this.left == orig(this.left)
this.right == orig(this.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
this.left.parent.skew has only one value
this.right.parent.skew has only one value
this.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT363;condition="not(return == true)"
orig(this.left) == null
orig(this.skew) has only one value
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left) == null
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.parent == orig(this.left.parent)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.parent == orig(this.left.parent.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.parent == orig(this.right.parent)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.parent == orig(this.right.parent.parent)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.parent == orig(this.parent.parent)
this.parent.skew == orig(this.parent.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
(return == false)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value)
(return == false)  ==>  (orig(this.left.parent.right) == null)
(return == false)  ==>  (orig(this.right.parent.left) == null)
(return == false)  ==>  (this.left.left == null)
(return == false)  ==>  (this.left.left == orig(this.left.left))
(return == false)  ==>  (this.left.parent.parent == null)
(return == false)  ==>  (this.left.parent.skew has only one value)
(return == false)  ==>  (this.left.right == null)
(return == false)  ==>  (this.left.right == orig(this.left.right))
(return == false)  ==>  (this.left.skew == orig(this.left.skew))
(return == false)  ==>  (this.left.skew has only one value)
(return == false)  ==>  (this.parent == null)
(return == false)  ==>  (this.right.left == null)
(return == false)  ==>  (this.right.left == orig(this.right.left))
(return == false)  ==>  (this.right.parent.parent == null)
(return == false)  ==>  (this.right.parent.skew has only one value)
(return == false)  ==>  (this.right.right == null)
(return == false)  ==>  (this.right.right == orig(this.right.right))
(return == false)  ==>  (this.right.skew == orig(this.right.skew))
(return == false)  ==>  (this.right.skew has only one value)
(return == false)  ==>  (this.skew has only one value)
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this has only one value)
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element))
(return == true)  ==>  (orig(this.parent.left.left) == null)
(return == true)  ==>  (orig(this.parent.left.right) == null)
(return == true)  ==>  (orig(this.parent.left.skew) has only one value)
(return == true)  ==>  (orig(this.parent.right.left) == null)
(return == true)  ==>  (orig(this.parent.right.right) == null)
(return == true)  ==>  (orig(this.parent.right.skew) has only one value)
(return == true)  ==>  (orig(this.skew) has only one value)
(return == true)  ==>  (this.element == orig(this.element))
(return == true)  ==>  (this.left.element == orig(this.left.element))
(return == true)  ==>  (this.left.left.element has only one value)
(return == true)  ==>  (this.left.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.left.left.left == null)
(return == true)  ==>  (this.left.left.parent has only one value)
(return == true)  ==>  (this.left.left.right == null)
(return == true)  ==>  (this.left.left.skew has only one value)
(return == true)  ==>  (this.left.parent.element == orig(this.left.parent.element))
(return == true)  ==>  (this.left.parent.left == orig(this.left.parent.left))
(return == true)  ==>  (this.left.parent.right == orig(this.left.parent.right))
(return == true)  ==>  (this.left.right.element has only one value)
(return == true)  ==>  (this.left.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.left.right.left == null)
(return == true)  ==>  (this.left.right.parent has only one value)
(return == true)  ==>  (this.left.right.right == null)
(return == true)  ==>  (this.left.right.skew has only one value)
(return == true)  ==>  (this.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.parent.parent == null)
(return == true)  ==>  (this.parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.right.element == orig(this.right.element))
(return == true)  ==>  (this.right.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.right.left.left == null)
(return == true)  ==>  (this.right.left.right == null)
(return == true)  ==>  (this.right.left.skew has only one value)
(return == true)  ==>  (this.right.parent.element == orig(this.right.parent.element))
(return == true)  ==>  (this.right.parent.left == orig(this.right.parent.left))
(return == true)  ==>  (this.right.parent.right == orig(this.right.parent.right))
(return == true)  ==>  (this.right.right.element has only one value)
(return == true)  ==>  (this.right.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.right.right.left == null)
(return == true)  ==>  (this.right.right.parent has only one value)
(return == true)  ==>  (this.right.right.right == null)
(return == true)  ==>  (this.right.right.skew has only one value)
this.parent.parent == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT;condition="return == true"
this.element == orig(this.element)
this.left.element == orig(this.left.element)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.right.element == orig(this.right.element)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
return == true
orig(this.left.parent.skew) has only one value
orig(this.right.parent.skew) has only one value
orig(this.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT;condition="not(return == true)"
this.left.left == orig(this.left.left)
this.left.right == orig(this.left.right)
this.left.skew == orig(this.left.skew)
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.skew == orig(this.right.skew)
this.left.left == null
this.left.right == null
this.left.parent.parent == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.parent.parent == null
this.right.parent.skew has only one value
this.right.skew has only one value
this.parent == null
this.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value
return == false
orig(this.left.parent.right) == null
orig(this.left.parent.skew) has only one value
orig(this.right.parent.left) == null
orig(this.right.parent.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew:::CLASS
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.Skew(java.lang.String, int):::ENTER
$hidden$1.toString one of { "BALANCED", "LEFT_HIGH", "RIGHT_HIGH" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.Skew(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "BALANCED", "LEFT_HIGH", "RIGHT_HIGH" }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.values():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.values():::EXIT
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
return[] contains no nulls and has only one value, of length 3
size(return[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:::OBJECT
this.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.top.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.top.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.top.parent == null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.AVLTree():::EXIT
this.top == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::ENTER
this.top.left.left == null
this.top.left.right == null
this.top.left.skew has only one value
this.top.right.left == null
this.top.right.right == null
this.top.right.skew has only one value
reference.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::EXIT156
return.parent == null
return.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::EXIT162
this.top.left == null
return.left == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::EXIT167
this.top == null
return == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::EXIT
this.top == orig(this.top)
this.top.element == orig(this.top.element)
this.top.element.getClass().getName() == orig(this.top.element.getClass().getName())
this.top.left == orig(this.top.left)
this.top.left.element == orig(this.top.left.element)
this.top.left.element.getClass().getName() == orig(this.top.left.element.getClass().getName())
this.top.left.left == orig(this.top.left.left)
this.top.left.right == orig(this.top.left.right)
this.top.left.parent == orig(this.top.left.parent)
this.top.left.skew == orig(this.top.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.top.right == orig(this.top.right)
this.top.right.element == orig(this.top.right.element)
this.top.right.element.getClass().getName() == orig(this.top.right.element.getClass().getName())
this.top.right.left == orig(this.top.right.left)
this.top.right.right == orig(this.top.right.right)
this.top.right.parent == orig(this.top.right.parent)
this.top.right.skew == orig(this.top.right.skew)
this.top.parent == orig(this.top.parent)
this.top.skew == orig(this.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.top.left.left == null
this.top.left.right == null
this.top.left.skew has only one value
this.top.right.left == null
this.top.right.right == null
this.top.right.skew has only one value
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left.left == null
return.left.right == null
return.left.skew has only one value
return.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.right.left == null
return.right.right == null
return.right.skew has only one value
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.parent.left == null
return.parent.parent == null
return.parent.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getSmallest():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getSmallest():::EXIT
this.top == orig(this.top)
this.top.element == orig(this.top.element)
this.top.element.getClass().getName() == orig(this.top.element.getClass().getName())
this.top.left == orig(this.top.left)
this.top.left.element == orig(this.top.left.element)
this.top.left.element.getClass().getName() == orig(this.top.left.element.getClass().getName())
this.top.left.left == orig(this.top.left.left)
this.top.left.right == orig(this.top.left.right)
this.top.left.parent == orig(this.top.left.parent)
this.top.left.skew == orig(this.top.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.top.right == orig(this.top.right)
this.top.right.element == orig(this.top.right.element)
this.top.right.element.getClass().getName() == orig(this.top.right.element.getClass().getName())
this.top.right.left == orig(this.top.right.left)
this.top.right.right == orig(this.top.right.right)
this.top.right.parent == orig(this.top.right.parent)
this.top.right.skew == orig(this.top.right.skew)
this.top.parent == orig(this.top.parent)
this.top.skew == orig(this.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left == null
return.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.right.left == null
return.right.right == null
return.right.skew has only one value
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.insert(java.lang.Comparable):::ENTER
this.top.left.left == null
this.top.left.right == null
this.top.left.skew has only one value
this.top.right.left == null
this.top.right.right == null
this.top.right.skew has only one value
element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.insert(java.lang.Comparable):::EXIT
this.top.element.getClass().getName() == orig(this.top.element.getClass().getName())
this.top.left.element.getClass().getName() == orig(this.top.left.element.getClass().getName())
this.top.left.parent == orig(this.top.left.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.top.right.element.getClass().getName() == orig(this.top.right.element.getClass().getName())
this.top.right.parent == orig(this.top.right.parent)
this.top.parent == orig(this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) (elementwise)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.isEmpty():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.isEmpty():::EXIT
this.top == orig(this.top)
this.top.element == orig(this.top.element)
this.top.element.getClass().getName() == orig(this.top.element.getClass().getName())
this.top.left == orig(this.top.left)
this.top.left.element == orig(this.top.left.element)
this.top.left.element.getClass().getName() == orig(this.top.left.element.getClass().getName())
this.top.left.left == orig(this.top.left.left)
this.top.left.right == orig(this.top.left.right)
this.top.left.parent == orig(this.top.left.parent)
this.top.left.skew == orig(this.top.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.top.right == orig(this.top.right)
this.top.right.element == orig(this.top.right.element)
this.top.right.element.getClass().getName() == orig(this.top.right.element.getClass().getName())
this.top.right.left == orig(this.top.right.left)
this.top.right.right == orig(this.top.right.right)
this.top.right.parent == orig(this.top.right.parent)
this.top.right.skew == orig(this.top.right.skew)
this.top.parent == orig(this.top.parent)
this.top.skew == orig(this.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
(return == false)  ==>  (this.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.top.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.top.parent == null)
(return == false)  ==>  (this.top.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.top == null)
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.isEmpty():::EXIT;condition="return == true"
this.top == null
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.isEmpty():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:::CLASS
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:::OBJECT
this.components[] elements one of { -1.0, 0.9999999999999999 }
this.components[] elements != 0
this.offset one of { 0, 32 }
this.lsb one of { -53, -52, -51 }
this.encoding[] elements >= 0
this.posInf == false
this.negInf == false
this.nan == false
size(this.components[]) == 2
size(this.encoding[]) == 4
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.OrderedTuple(double[]):::ENTER
components[] elements one of { -1.0, 0.9999999999999999 }
components[] elements != 0
size(components[]) == 2
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.OrderedTuple(double[]):::EXIT
components[] == orig(components[])
this.offset == 32
components[] elements one of { -1.0, 0.9999999999999999 }
components[] elements != 0
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::ENTER
this.offset == 32
ot.components[] elements one of { -1.0, 0.9999999999999999 }
ot.components[] elements != 0
ot.offset == 32
ot.lsb one of { -53, -52, -51 }
ot.encoding[] elements >= 0
ot.posInf == false
ot.negInf == false
ot.nan == false
size(ot.components[]) == 2
size(ot.encoding[]) == 4
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::EXIT268
return == -1
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::EXIT270
this.lsb one of { -53, -52 }
return == 1
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::EXIT
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.offset == orig(this.offset)
this.lsb == orig(this.lsb)
this.encoding == orig(this.encoding)
this.encoding[] == orig(this.encoding[])
this.posInf == orig(this.posInf)
this.negInf == orig(this.negInf)
this.nan == orig(this.nan)
ot.components == orig(ot.components)
ot.components[] == orig(ot.components[])
ot.offset == orig(ot.offset)
ot.lsb == orig(ot.lsb)
ot.encoding == orig(ot.encoding)
ot.encoding[] == orig(ot.encoding[])
ot.posInf == orig(ot.posInf)
ot.negInf == orig(ot.negInf)
ot.nan == orig(ot.nan)
this.offset == 32
ot.components[] elements one of { -1.0, 0.9999999999999999 }
ot.components[] elements != 0
ot.offset == 32
ot.lsb one of { -53, -52, -51 }
ot.encoding[] elements >= 0
ot.posInf == false
ot.negInf == false
ot.nan == false
return one of { -1, 1 }
size(ot.components[]) == 2
size(ot.encoding[]) == 4
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeLSB(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeLSB(long):::EXIT
return >= 0
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeMSB(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeMSB(long):::EXIT
return == 52
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.encode(int):::ENTER
this.offset == 0
this.encoding == null
minOffset one of { 15, 16 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.encode(int):::EXIT215
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.encode(int):::EXIT
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.lsb == orig(this.lsb)
this.posInf == orig(this.posInf)
this.negInf == orig(this.negInf)
this.nan == orig(this.nan)
this.offset == 32
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.exponent(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.exponent(long):::EXIT
return one of { -53, -52 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::ENTER
this.offset == 32
i one of { 0, 1 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT407
return == 0
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT409
this.encoding[] == [0, 0, 0, 0]
this.encoding[] elements == 0
orig(k) == 32
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT411
this.encoding[] sorted by >=
orig(k) >= 0
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT414
orig(k) <= 0
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.offset == orig(this.offset)
this.lsb == orig(this.lsb)
this.encoding == orig(this.encoding)
this.encoding[] == orig(this.encoding[])
this.posInf == orig(this.posInf)
this.negInf == orig(this.negInf)
this.nan == orig(this.nan)
this.offset == 32
return one of { 0, 1 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.mantissa(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.mantissa(long):::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.sign(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.sign(long):::EXIT
return one of { -9223372036854775808L, 0 }
===========================================================================
org.apache.commons.math3.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math3.util.FastMath.cosQ(double, double):::ENTER
xb == 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.cosQ(double, double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.doubleHighPart(double):::ENTER
d != 0
===========================================================================
org.apache.commons.math3.util.FastMath.doubleHighPart(double):::EXIT366
===========================================================================
org.apache.commons.math3.util.FastMath.doubleHighPart(double):::EXIT
return != 0
===========================================================================
org.apache.commons.math3.util.FastMath.polyCosine(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.polyCosine(double):::EXIT
return one of { -0.0014686594601684196, -6.264495685173429E-4, 0.0 }
===========================================================================
org.apache.commons.math3.util.FastMath.polySine(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.polySine(double):::EXIT
return one of { -7.3920301443112E-6, 0.0, 2.6538178167060653E-5 }
===========================================================================
org.apache.commons.math3.util.FastMath.sinQ(double, double):::ENTER
xa <= 1.5707963267948966
===========================================================================
org.apache.commons.math3.util.FastMath.sinQ(double, double):::EXIT
return <= 1.0
===========================================================================
org.apache.commons.math3.util.FastMath.sqrt(double):::ENTER
a >= 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.sqrt(double):::EXIT
return >= 0.0
===========================================================================
org.apache.commons.math3.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math3.util.MathUtils.normalizeAngle(double, double):::ENTER
center == 3.141592653589793
===========================================================================
org.apache.commons.math3.util.MathUtils.normalizeAngle(double, double):::EXIT
