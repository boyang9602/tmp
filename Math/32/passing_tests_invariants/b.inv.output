===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.Interval(double, double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.Interval(double, double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getLength():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getLength():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getLower():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getLower():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getMidPoint():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getMidPoint():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getUpper():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Interval.getUpper():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:::OBJECT
this.tree != null
this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
this.tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
this.tree.plus.parent != null
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
this.tree.minus.parent != null
this.tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.parent == null
this.tree.attribute.getClass().getName() == java.lang.Boolean.class
this.size >= 0.0
this.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.Vector1D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet():::EXIT
this.tree.cut == null
this.tree.plus == null
this.tree.minus == null
this.tree.attribute has only one value
this.tree.attribute != null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet(double, double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet(double, double):::EXIT
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
tree != null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.asList():::ENTER
this.tree.cut != null
this.tree.plus != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.asList():::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
this.tree.cut != null
this.tree.plus != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
return != null
return[] elements != null
return[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.oned.Interval.class
return[].getClass().getName() one of { [org.apache.commons.math3.geometry.euclidean.oned.Interval], [org.apache.commons.math3.geometry.euclidean.oned.Interval, org.apache.commons.math3.geometry.euclidean.oned.Interval] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
this.size == 0.0
this.barycenter == null
tree != null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
tree.minus.parent != null
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
return != null
return.tree != null
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.tree.parent == null
return.tree.attribute.getClass().getName() == java.lang.Boolean.class
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildTree(double, double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildTree(double, double):::EXIT120
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildTree(double, double):::EXIT
return.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.plus.cut == null
return.plus.plus == null
return.plus.minus == null
return.plus.attribute has only one value
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.minus.attribute == null
return.parent == null
return.attribute == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.computeGeometricalProperties():::ENTER
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.computeGeometricalProperties():::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.attribute has only one value
this.tree.minus.attribute == null
this.tree.attribute == null
this.size > orig(this.size)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.List, double, double):::ENTER
this.tree.cut != null
this.tree.plus != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
node != null
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.plus.parent != null
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.minus.parent != null
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.cut != null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.parent.plus != null
node.parent.minus != null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
list != null
list[] elements != null
list[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.oned.Interval.class
list.getClass().getName() == java.util.ArrayList.class
size(list[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.List, double, double):::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
this.tree.cut != null
this.tree.plus != null
this.tree.minus != null
this.tree.minus.cut != null
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.plus.parent != null
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.minus.parent != null
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.cut != null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
node.parent.plus != null
node.parent.minus != null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
list[] elements != null
list[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.oned.Interval.class
size(list[])-1 >= orig(size(list[]))-1
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:::OBJECT
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == 1.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, boolean):::ENTER
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == 1.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, boolean):::EXIT
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
location.x == orig(location.x)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.getLocation():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.getLocation():::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.getOffset(org.apache.commons.math3.geometry.Vector):::ENTER
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.Vector1D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.getOffset(org.apache.commons.math3.geometry.Vector):::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.isDirect():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.isDirect():::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.isDirect():::EXIT;condition="return == true"
this.direct == true
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.isDirect():::EXIT;condition="not(return == true)"
this.direct == false
return == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
other.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.wholeHyperplane():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.wholeHyperplane():::EXIT
this.location == orig(this.location)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.location.x == orig(this.location.x)
this.direct == orig(this.direct)
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
return.remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint:::OBJECT
this.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
this.remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
return.remainingRegion == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
org.apache.commons.math3.geometry.partitioning.Side.PLUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.MINUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.BOTH has only one value
org.apache.commons.math3.geometry.partitioning.Side.HYPER has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side]
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Side.class
size(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
return.plus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
return.minus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D:::CLASS
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == 1.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.Vector1D(double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.Vector1D(double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.getX():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.getX():::EXIT
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x)
this.x == orig(this.x)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line:::OBJECT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
this.direction.x <= 1.0
this.direction.x >= -1.0
this.direction.y <= 1.0
this.direction.y >= -1.0
this.direction.z <= 1.0
this.direction.z >= -1.0
this.zero.z >= 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
p1 != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
p2 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p1.z == orig(p1.z)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
p2.z == orig(p2.z)
this.direction != null
this.zero != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.getDirection():::ENTER
this.direction != null
this.zero != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.getDirection():::EXIT
this.direction == orig(this.direction)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.direction.x == orig(this.direction.x)
this.direction.y == orig(this.direction.y)
this.direction.z == orig(this.direction.z)
this.zero == orig(this.zero)
this.zero.x == orig(this.zero.x)
this.zero.y == orig(this.zero.y)
this.zero.z == orig(this.zero.z)
this.direction != null
this.zero != null
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.pointAt(double):::ENTER
this.direction != null
this.zero != null
abscissa one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.pointAt(double):::EXIT
this.direction == orig(this.direction)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.direction.x == orig(this.direction.x)
this.direction.y == orig(this.direction.y)
this.direction.z == orig(this.direction.z)
this.zero == orig(this.zero)
this.zero.x == orig(this.zero.x)
this.zero.y == orig(this.zero.y)
this.zero.z == orig(this.zero.z)
this.direction != null
this.zero != null
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
this.direction == null
this.zero == null
p1 != null
p2 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p1.z == orig(p1.z)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
p2.z == orig(p2.z)
this.direction != null
this.zero != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.toSpace(org.apache.commons.math3.geometry.Vector):::ENTER
this.direction != null
this.zero != null
point != null
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.Vector1D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Line.toSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.direction == orig(this.direction)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.direction.x == orig(this.direction.x)
this.direction.y == orig(this.direction.y)
this.direction.z == orig(this.direction.z)
this.zero == orig(this.zero)
this.zero.x == orig(this.zero.x)
this.zero.y == orig(this.zero.y)
this.zero.z == orig(this.zero.z)
this.direction != null
this.zero != null
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane:::OBJECT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
this.u.y <= 1.0
this.u.y >= -1.0
this.u.z <= 1.0
this.u.z >= -1.0
this.v.x >= -1.0
this.v.y >= -1.0
this.w.x <= 1.0
this.w.x >= -1.0
this.w.y <= 1.0
this.w.y >= -1.0
this.w.z <= 1.0
this.w.z >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Plane):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
plane.u.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
plane.originOffset == orig(plane.originOffset)
plane.origin == orig(plane.origin)
plane.origin.x == orig(plane.origin.x)
plane.origin.y == orig(plane.origin.y)
plane.origin.z == orig(plane.origin.z)
plane.u == orig(plane.u)
plane.u.x == orig(plane.u.x)
plane.u.y == orig(plane.u.y)
plane.u.z == orig(plane.u.z)
plane.v == orig(plane.v)
plane.v.x == orig(plane.v.x)
plane.v.y == orig(plane.v.y)
plane.v.z == orig(plane.v.z)
plane.w == orig(plane.w)
plane.w.x == orig(plane.w.x)
plane.w.y == orig(plane.w.y)
plane.w.z == orig(plane.w.z)
this.u.x == 0.0
plane.u.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
normal.x == orig(normal.x)
normal.y == orig(normal.y)
normal.z == orig(normal.z)
this.originOffset == 0.0
this.origin.x == 0.0
this.origin.y == 0.0
this.origin.z == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
p.x == orig(p.x)
p.y == orig(p.y)
p.z == orig(p.z)
normal.x == orig(normal.x)
normal.y == orig(normal.y)
normal.z == orig(normal.z)
this.u.x one of { -0.735658794554988, 0.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
p2.x one of { 2.0, 2.8 }
p3.x one of { 1.0, 1.1 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p1.z == orig(p1.z)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
p2.z == orig(p2.z)
p3.x == orig(p3.x)
p3.y == orig(p3.y)
p3.z == orig(p3.z)
this.u.x == 0.0
p2.x one of { 2.0, 2.8 }
p3.x one of { 1.0, 1.1 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.copySelf():::ENTER
this.u.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.copySelf():::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.u.x == 0.0
return.u.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getNormal():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getNormal():::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getOffset(org.apache.commons.math3.geometry.Vector):::ENTER
this.origin.z >= 0.0
this.u.x == 0.0
this.v.x one of { -1.0, -0.8164965809277261, 0.0 }
this.v.z one of { -0.4082482904638631, 0.0, 0.4082482904638631 }
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getOffset(org.apache.commons.math3.geometry.Vector):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.origin.z >= 0.0
this.u.x == 0.0
this.v.x one of { -1.0, -0.8164965809277261, 0.0 }
this.v.z one of { -0.4082482904638631, 0.0, 0.4082482904638631 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane):::ENTER
this.u.x == 0.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 1.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
plane.u.x == 0.0
plane.u.y one of { -1.0, 0.0, 1.0 }
plane.u.z one of { -1.0, 0.0, 1.0 }
plane.v.x one of { -1.0, 0.0 }
plane.v.y one of { -1.0, 0.0 }
plane.v.z == 0.0
plane.w.x one of { -1.0, 0.0, 1.0 }
plane.w.y one of { -1.0, 0.0, 1.0 }
plane.w.z one of { -1.0, 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
plane.originOffset == orig(plane.originOffset)
plane.origin == orig(plane.origin)
plane.origin.x == orig(plane.origin.x)
plane.origin.y == orig(plane.origin.y)
plane.origin.z == orig(plane.origin.z)
plane.u == orig(plane.u)
plane.u.x == orig(plane.u.x)
plane.u.y == orig(plane.u.y)
plane.u.z == orig(plane.u.z)
plane.v == orig(plane.v)
plane.v.x == orig(plane.v.x)
plane.v.y == orig(plane.v.y)
plane.v.z == orig(plane.v.z)
plane.w == orig(plane.w)
plane.w.x == orig(plane.w.x)
plane.w.y == orig(plane.w.y)
plane.w.z == orig(plane.w.z)
this.u.x == 0.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 1.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
plane.u.x == 0.0
plane.u.y one of { -1.0, 0.0, 1.0 }
plane.u.z one of { -1.0, 0.0, 1.0 }
plane.v.x one of { -1.0, 0.0 }
plane.v.y one of { -1.0, 0.0 }
plane.v.z == 0.0
plane.w.x one of { -1.0, 0.0, 1.0 }
plane.w.y one of { -1.0, 0.0, 1.0 }
plane.w.z one of { -1.0, 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getOrigin():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.getOrigin():::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane):::ENTER
this.u.x == 0.0
other.u.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT324
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 1.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
other.u.y one of { -1.0, 0.0, 1.0 }
other.u.z one of { -1.0, 0.0, 1.0 }
other.v.x one of { -1.0, 0.0 }
other.v.y one of { -1.0, 0.0 }
other.v.z == 0.0
other.w.x one of { -1.0, 0.0, 1.0 }
other.w.y one of { -1.0, 0.0, 1.0 }
other.w.z one of { -1.0, 0.0, 1.0 }
return == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT327
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
other.originOffset == orig(other.originOffset)
other.origin == orig(other.origin)
other.origin.x == orig(other.origin.x)
other.origin.y == orig(other.origin.y)
other.origin.z == orig(other.origin.z)
other.u == orig(other.u)
other.u.x == orig(other.u.x)
other.u.y == orig(other.u.y)
other.u.z == orig(other.u.z)
other.v == orig(other.v)
other.v.x == orig(other.v.x)
other.v.y == orig(other.v.y)
other.v.z == orig(other.v.z)
other.w == orig(other.w)
other.w.x == orig(other.w.x)
other.w.y == orig(other.w.y)
other.w.z == orig(other.w.z)
this.u.x == 0.0
other.u.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
plane1.u.x == 0.0
plane2.u.x == 0.0
plane3.originOffset == 0.0
plane3.origin.x == 0.0
plane3.origin.y == 0.0
plane3.origin.z == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT365
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane):::EXIT
plane1.originOffset == orig(plane1.originOffset)
plane1.origin == orig(plane1.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
plane1.origin.x == orig(plane1.origin.x)
plane1.origin.y == orig(plane1.origin.y)
plane1.origin.z == orig(plane1.origin.z)
plane1.u == orig(plane1.u)
plane1.u.x == orig(plane1.u.x)
plane1.u.y == orig(plane1.u.y)
plane1.u.z == orig(plane1.u.z)
plane1.v == orig(plane1.v)
plane1.v.x == orig(plane1.v.x)
plane1.v.y == orig(plane1.v.y)
plane1.v.z == orig(plane1.v.z)
plane1.w == orig(plane1.w)
plane1.w.x == orig(plane1.w.x)
plane1.w.y == orig(plane1.w.y)
plane1.w.z == orig(plane1.w.z)
plane2.originOffset == orig(plane2.originOffset)
plane2.origin == orig(plane2.origin)
plane2.origin.x == orig(plane2.origin.x)
plane2.origin.y == orig(plane2.origin.y)
plane2.origin.z == orig(plane2.origin.z)
plane2.u == orig(plane2.u)
plane2.u.x == orig(plane2.u.x)
plane2.u.y == orig(plane2.u.y)
plane2.u.z == orig(plane2.u.z)
plane2.v == orig(plane2.v)
plane2.v.x == orig(plane2.v.x)
plane2.v.y == orig(plane2.v.y)
plane2.v.z == orig(plane2.v.z)
plane2.w == orig(plane2.w)
plane2.w.x == orig(plane2.w.x)
plane2.w.y == orig(plane2.w.y)
plane2.w.z == orig(plane2.w.z)
plane3.originOffset == orig(plane3.originOffset)
plane3.origin == orig(plane3.origin)
plane3.origin.x == orig(plane3.origin.x)
plane3.origin.y == orig(plane3.origin.y)
plane3.origin.z == orig(plane3.origin.z)
plane3.u == orig(plane3.u)
plane3.u.x == orig(plane3.u.x)
plane3.u.y == orig(plane3.u.y)
plane3.u.z == orig(plane3.u.z)
plane3.v == orig(plane3.v)
plane3.v.x == orig(plane3.v.x)
plane3.v.y == orig(plane3.v.y)
plane3.v.z == orig(plane3.v.z)
plane3.w == orig(plane3.w)
plane3.w.x == orig(plane3.w.x)
plane3.w.y == orig(plane3.w.y)
plane3.w.z == orig(plane3.w.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
plane1.u.x == 0.0
plane2.u.x == 0.0
plane3.originOffset == 0.0
plane3.origin.x == 0.0
plane3.origin.y == 0.0
plane3.origin.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation):::ENTER
this.u.x == 0.0
center has only one value
center.x == -0.2
center.y == 2.1
center.z == -3.2
rotation has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == 0.0
rotation.q0 == 0.9982005399352042
rotation.q1 == -0.0471359463928705
rotation.q2 == 0.03345131679494035
rotation.q3 == -0.015965401197585168
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
center.x == orig(center.x)
center.y == orig(center.y)
center.z == orig(center.z)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3)
rotation.q0 == orig(rotation.q0)
rotation.q1 == orig(rotation.q1)
rotation.q2 == orig(rotation.q2)
rotation.q3 == orig(rotation.q3)
this.u.x == 0.0
center.x == -0.2
center.y == 2.1
center.z == -3.2
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == 0.0
rotation.q0 == 0.9982005399352042
rotation.q1 == -0.0471359463928705
rotation.q2 == 0.03345131679494035
rotation.q3 == -0.015965401197585168
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
this.u.x == 0.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 1.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
other.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.u.x == 0.0
this.u.y one of { -1.0, 0.0, 1.0 }
this.u.z one of { -1.0, 0.0, 1.0 }
this.v.x one of { -1.0, 0.0 }
this.v.y one of { -1.0, 0.0 }
this.v.z == 0.0
this.w.x one of { -1.0, 0.0, 1.0 }
this.w.y one of { -1.0, 0.0, 1.0 }
this.w.z one of { -1.0, 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.setFrame():::ENTER
this.origin == null
this.u == null
this.v == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.setFrame():::EXIT
this.originOffset == orig(this.originOffset)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
this.originOffset == 0.0
this.origin == null
this.u == null
this.v == null
this.w == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.u == orig(this.u)
this.v == orig(this.v)
normal.x == orig(normal.x)
normal.y == orig(normal.y)
normal.z == orig(normal.z)
this.originOffset == 0.0
this.origin == null
this.u == null
this.v == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.toSpace(org.apache.commons.math3.geometry.Vector):::ENTER
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.toSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.toSubSpace(org.apache.commons.math3.geometry.Vector):::ENTER
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.toSubSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
translation has only one value
translation.x == 10.2
translation.y == 4.3
translation.z == -6.7
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
translation.x == orig(translation.x)
translation.y == orig(translation.y)
translation.z == orig(translation.z)
translation.x == 10.2
translation.y == 4.3
translation.z == -6.7
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.wholeHyperplane():::ENTER
this.u.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.wholeHyperplane():::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.u.x == 0.0
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
return.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.wholeSpace():::ENTER
this.origin.y one of { 0.0, 1.3333333333333337, 1.6606451612903228 }
this.origin.z one of { 0.0, 0.9225806451612905, 1.3333333333333337 }
this.u.x == 0.0
this.u.y one of { -0.7071067811865476, -0.4856429311786321, 0.0 }
this.u.z one of { -1.0, 0.7071067811865476, 0.8741572761215377 }
this.v.x one of { -0.8269649132471918, -0.8164965809277261, 0.0 }
this.v.y one of { -1.0, -0.4914980144771045, -0.4082482904638631 }
this.v.z one of { -0.4082482904638631, -0.27305445248728033, 0.0 }
this.w.x one of { -1.0, 0.5622535302317492, 0.5773502691896258 }
this.w.y one of { -0.722897396012249, -0.5773502691896258, 0.0 }
this.w.z one of { -0.5773502691896258, -0.40160966445124946, 0.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Plane.wholeSpace():::EXIT
this.originOffset == orig(this.originOffset)
this.origin == orig(this.origin)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.origin.x == orig(this.origin.x)
this.origin.y == orig(this.origin.y)
this.origin.z == orig(this.origin.z)
this.u == orig(this.u)
this.u.x == orig(this.u.x)
this.u.y == orig(this.u.y)
this.u.z == orig(this.u.z)
this.v == orig(this.v)
this.v.x == orig(this.v.x)
this.v.y == orig(this.v.y)
this.v.z == orig(this.v.z)
this.w == orig(this.w)
this.w.x == orig(this.w.x)
this.w.y == orig(this.w.y)
this.w.z == orig(this.w.z)
this.origin.y one of { 0.0, 1.3333333333333337, 1.6606451612903228 }
this.origin.z one of { 0.0, 0.9225806451612905, 1.3333333333333337 }
this.u.x == 0.0
this.u.y one of { -0.7071067811865476, -0.4856429311786321, 0.0 }
this.u.z one of { -1.0, 0.7071067811865476, 0.8741572761215377 }
this.v.x one of { -0.8269649132471918, -0.8164965809277261, 0.0 }
this.v.y one of { -1.0, -0.4914980144771045, -0.4082482904638631 }
this.v.z one of { -0.4082482904638631, -0.27305445248728033, 0.0 }
this.w.x one of { -1.0, 0.5622535302317492, 0.5773502691896258 }
this.w.y one of { -0.722897396012249, -0.5773502691896258, 0.0 }
this.w.z one of { -0.5773502691896258, -0.40160966445124946, 0.0 }
return.tree.cut == null
return.tree.plus == null
return.tree.minus == null
return.tree.parent == null
return.tree.attribute has only one value
return.tree.attribute.getClass().getName() == java.lang.Boolean.class
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor:::OBJECT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == null
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.FacetsContributionVisitor(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == null
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == 0.0
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.FacetsContributionVisitor(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::ENTER
facet.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
reversed == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName())
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName())
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.plus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.minus)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.parent)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.tree.attribute.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.size)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName() == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.this.barycenter.getClass().getName())
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform:::OBJECT
this has only one value
this.center has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
this.center.x == -0.2
this.center.y == 2.1
this.center.z == -3.2
this.rotation has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == 0.0
this.rotation.q0 == 0.9982005399352042
this.rotation.q1 == -0.0471359463928705
this.rotation.q2 == 0.03345131679494035
this.rotation.q3 == -0.015965401197585168
this.cachedOriginal.u.x == 0.0
this.cachedTransform.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform.RotationTransform(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation):::ENTER
center has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
center.x == -0.2
center.y == 2.1
center.z == -3.2
rotation has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == 0.0
rotation.q0 == 0.9982005399352042
rotation.q1 == -0.0471359463928705
rotation.q2 == 0.03345131679494035
rotation.q3 == -0.015965401197585168
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform.RotationTransform(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3)
center.x == orig(center.x)
center.y == orig(center.y)
center.z == orig(center.z)
rotation.q0 == orig(rotation.q0)
rotation.q1 == orig(rotation.q1)
rotation.q2 == orig(rotation.q2)
rotation.q3 == orig(rotation.q3)
this.cachedOriginal == null
this.cachedTransform == null
center.x == -0.2
center.y == 2.1
center.z == -3.2
rotation.q0 == 0.9982005399352042
rotation.q1 == -0.0471359463928705
rotation.q2 == 0.03345131679494035
rotation.q3 == -0.015965401197585168
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform.apply(org.apache.commons.math3.geometry.Vector):::ENTER
this.cachedOriginal.originOffset one of { -4.916401001703543, 1.3435239486942716, 2.297207280661147 }
this.cachedOriginal.origin.x one of { -1.2916129032258066, 0.3064201511153533, 2.0665063840713334 }
this.cachedOriginal.origin.y one of { -0.8386235714735992, 0.6175766205270656, 1.6606451612903228 }
this.cachedOriginal.origin.z one of { 0.9225806451612905, 1.0039291793121448, 4.418048131462851 }
this.cachedOriginal.u.y one of { -0.7674628280992708, -0.4856429311786321, 0.9903709690740474 }
this.cachedOriginal.u.z one of { -0.6410934467656562, -0.1384389526662648, 0.8741572761215377 }
this.cachedOriginal.v.x one of { -0.9736442766148887, -0.9073717274819202, -0.8269649132471918 }
this.cachedOriginal.v.y one of { -0.4914980144771045, -0.14621544411464546, 0.058189919697326634 }
this.cachedOriginal.v.z one of { -0.27305445248728033, 0.17503675761801302, 0.41628173321933637 }
this.cachedOriginal.w.x one of { -0.22807196806067606, 0.42032909507489014, 0.5622535302317492 }
this.cachedOriginal.w.y one of { -0.722897396012249, 0.12561559163157646, 0.624196965218693 }
this.cachedOriginal.w.z one of { -0.7472357900935311, -0.40160966445124946, 0.8986346170566617 }
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform.apply(org.apache.commons.math3.geometry.Vector):::EXIT
this.center == orig(this.center)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.center.x == orig(this.center.x)
this.center.y == orig(this.center.y)
this.center.z == orig(this.center.z)
this.rotation == orig(this.rotation)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3)
this.rotation.q0 == orig(this.rotation.q0)
this.rotation.q1 == orig(this.rotation.q1)
this.rotation.q2 == orig(this.rotation.q2)
this.rotation.q3 == orig(this.rotation.q3)
this.cachedOriginal == orig(this.cachedOriginal)
this.cachedOriginal.originOffset == orig(this.cachedOriginal.originOffset)
this.cachedOriginal.origin == orig(this.cachedOriginal.origin)
this.cachedOriginal.origin.x == orig(this.cachedOriginal.origin.x)
this.cachedOriginal.origin.y == orig(this.cachedOriginal.origin.y)
this.cachedOriginal.origin.z == orig(this.cachedOriginal.origin.z)
this.cachedOriginal.u == orig(this.cachedOriginal.u)
this.cachedOriginal.u.x == orig(this.cachedOriginal.u.x)
this.cachedOriginal.u.y == orig(this.cachedOriginal.u.y)
this.cachedOriginal.u.z == orig(this.cachedOriginal.u.z)
this.cachedOriginal.v == orig(this.cachedOriginal.v)
this.cachedOriginal.v.x == orig(this.cachedOriginal.v.x)
this.cachedOriginal.v.y == orig(this.cachedOriginal.v.y)
this.cachedOriginal.v.z == orig(this.cachedOriginal.v.z)
this.cachedOriginal.w == orig(this.cachedOriginal.w)
this.cachedOriginal.w.x == orig(this.cachedOriginal.w.x)
this.cachedOriginal.w.y == orig(this.cachedOriginal.w.y)
this.cachedOriginal.w.z == orig(this.cachedOriginal.w.z)
this.cachedTransform == orig(this.cachedTransform)
this.cachedTransform.getClass().getName() == orig(this.cachedTransform.getClass().getName())
this.cachedOriginal.originOffset one of { -4.916401001703543, 1.3435239486942716, 2.297207280661147 }
this.cachedOriginal.origin.x one of { -1.2916129032258066, 0.3064201511153533, 2.0665063840713334 }
this.cachedOriginal.origin.y one of { -0.8386235714735992, 0.6175766205270656, 1.6606451612903228 }
this.cachedOriginal.origin.z one of { 0.9225806451612905, 1.0039291793121448, 4.418048131462851 }
this.cachedOriginal.u.y one of { -0.7674628280992708, -0.4856429311786321, 0.9903709690740474 }
this.cachedOriginal.u.z one of { -0.6410934467656562, -0.1384389526662648, 0.8741572761215377 }
this.cachedOriginal.v.x one of { -0.9736442766148887, -0.9073717274819202, -0.8269649132471918 }
this.cachedOriginal.v.y one of { -0.4914980144771045, -0.14621544411464546, 0.058189919697326634 }
this.cachedOriginal.v.z one of { -0.27305445248728033, 0.17503675761801302, 0.41628173321933637 }
this.cachedOriginal.w.x one of { -0.22807196806067606, 0.42032909507489014, 0.5622535302317492 }
this.cachedOriginal.w.y one of { -0.722897396012249, 0.12561559163157646, 0.624196965218693 }
this.cachedOriginal.w.z one of { -0.7472357900935311, -0.40160966445124946, 0.8986346170566617 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform.apply(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform.apply(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.center == orig(this.center)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.center.x == orig(this.center.x)
this.center.y == orig(this.center.y)
this.center.z == orig(this.center.z)
this.rotation == orig(this.rotation)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3)
this.rotation.q0 == orig(this.rotation.q0)
this.rotation.q1 == orig(this.rotation.q1)
this.rotation.q2 == orig(this.rotation.q2)
this.rotation.q3 == orig(this.rotation.q3)
this.cachedOriginal == orig(this.cachedOriginal)
this.cachedOriginal.originOffset == orig(this.cachedOriginal.originOffset)
this.cachedOriginal.origin == orig(this.cachedOriginal.origin)
this.cachedOriginal.origin.x == orig(this.cachedOriginal.origin.x)
this.cachedOriginal.origin.y == orig(this.cachedOriginal.origin.y)
this.cachedOriginal.origin.z == orig(this.cachedOriginal.origin.z)
this.cachedOriginal.u == orig(this.cachedOriginal.u)
this.cachedOriginal.u.x == orig(this.cachedOriginal.u.x)
this.cachedOriginal.u.y == orig(this.cachedOriginal.u.y)
this.cachedOriginal.u.z == orig(this.cachedOriginal.u.z)
this.cachedOriginal.v == orig(this.cachedOriginal.v)
this.cachedOriginal.v.x == orig(this.cachedOriginal.v.x)
this.cachedOriginal.v.y == orig(this.cachedOriginal.v.y)
this.cachedOriginal.v.z == orig(this.cachedOriginal.v.z)
this.cachedOriginal.w == orig(this.cachedOriginal.w)
this.cachedOriginal.w.x == orig(this.cachedOriginal.w.x)
this.cachedOriginal.w.y == orig(this.cachedOriginal.w.y)
this.cachedOriginal.w.z == orig(this.cachedOriginal.w.z)
this.cachedTransform == orig(this.cachedTransform)
this.cachedTransform.getClass().getName() == orig(this.cachedTransform.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform.apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
sub.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
original.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
transformed.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform.apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.center == orig(this.center)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.center.x == orig(this.center.x)
this.center.y == orig(this.center.y)
this.center.z == orig(this.center.z)
this.rotation == orig(this.rotation)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3)
this.rotation.q0 == orig(this.rotation.q0)
this.rotation.q1 == orig(this.rotation.q1)
this.rotation.q2 == orig(this.rotation.q2)
this.rotation.q3 == orig(this.rotation.q3)
this.cachedOriginal.u.x == orig(this.cachedOriginal.u.x)
this.cachedTransform.getClass().getName() == orig(this.cachedTransform.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.cachedOriginal.w.x <= orig(this.cachedOriginal.w.x)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform:::OBJECT
this has only one value
this.translation has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
this.translation.x == 10.2
this.translation.y == 4.3
this.translation.z == -6.7
this.cachedTransform.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform.TranslationTransform(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
translation has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
translation.x == 10.2
translation.y == 4.3
translation.z == -6.7
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform.TranslationTransform(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
translation.x == orig(translation.x)
translation.y == orig(translation.y)
translation.z == orig(translation.z)
this.cachedOriginal == null
this.cachedTransform == null
translation.x == 10.2
translation.y == 4.3
translation.z == -6.7
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform.apply(org.apache.commons.math3.geometry.Vector):::ENTER
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform.apply(org.apache.commons.math3.geometry.Vector):::EXIT
this.translation == orig(this.translation)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.translation.x == orig(this.translation.x)
this.translation.y == orig(this.translation.y)
this.translation.z == orig(this.translation.z)
this.cachedOriginal == orig(this.cachedOriginal)
this.cachedOriginal.originOffset == orig(this.cachedOriginal.originOffset)
this.cachedOriginal.origin == orig(this.cachedOriginal.origin)
this.cachedOriginal.origin.x == orig(this.cachedOriginal.origin.x)
this.cachedOriginal.origin.y == orig(this.cachedOriginal.origin.y)
this.cachedOriginal.origin.z == orig(this.cachedOriginal.origin.z)
this.cachedOriginal.u == orig(this.cachedOriginal.u)
this.cachedOriginal.u.x == orig(this.cachedOriginal.u.x)
this.cachedOriginal.u.y == orig(this.cachedOriginal.u.y)
this.cachedOriginal.u.z == orig(this.cachedOriginal.u.z)
this.cachedOriginal.v == orig(this.cachedOriginal.v)
this.cachedOriginal.v.x == orig(this.cachedOriginal.v.x)
this.cachedOriginal.v.y == orig(this.cachedOriginal.v.y)
this.cachedOriginal.v.z == orig(this.cachedOriginal.v.z)
this.cachedOriginal.w == orig(this.cachedOriginal.w)
this.cachedOriginal.w.x == orig(this.cachedOriginal.w.x)
this.cachedOriginal.w.y == orig(this.cachedOriginal.w.y)
this.cachedOriginal.w.z == orig(this.cachedOriginal.w.z)
this.cachedTransform == orig(this.cachedTransform)
this.cachedTransform.getClass().getName() == orig(this.cachedTransform.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform.apply(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform.apply(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.translation == orig(this.translation)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.translation.x == orig(this.translation.x)
this.translation.y == orig(this.translation.y)
this.translation.z == orig(this.translation.z)
this.cachedOriginal == orig(this.cachedOriginal)
this.cachedOriginal.originOffset == orig(this.cachedOriginal.originOffset)
this.cachedOriginal.origin == orig(this.cachedOriginal.origin)
this.cachedOriginal.origin.x == orig(this.cachedOriginal.origin.x)
this.cachedOriginal.origin.y == orig(this.cachedOriginal.origin.y)
this.cachedOriginal.origin.z == orig(this.cachedOriginal.origin.z)
this.cachedOriginal.u == orig(this.cachedOriginal.u)
this.cachedOriginal.u.x == orig(this.cachedOriginal.u.x)
this.cachedOriginal.u.y == orig(this.cachedOriginal.u.y)
this.cachedOriginal.u.z == orig(this.cachedOriginal.u.z)
this.cachedOriginal.v == orig(this.cachedOriginal.v)
this.cachedOriginal.v.x == orig(this.cachedOriginal.v.x)
this.cachedOriginal.v.y == orig(this.cachedOriginal.v.y)
this.cachedOriginal.v.z == orig(this.cachedOriginal.v.z)
this.cachedOriginal.w == orig(this.cachedOriginal.w)
this.cachedOriginal.w.x == orig(this.cachedOriginal.w.x)
this.cachedOriginal.w.y == orig(this.cachedOriginal.w.y)
this.cachedOriginal.w.z == orig(this.cachedOriginal.w.z)
this.cachedTransform == orig(this.cachedTransform)
this.cachedTransform.getClass().getName() == orig(this.cachedTransform.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform.apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
sub.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
original.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
transformed.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform.apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.translation == orig(this.translation)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.translation.x == orig(this.translation.x)
this.translation.y == orig(this.translation.y)
this.translation.z == orig(this.translation.z)
this.cachedTransform.getClass().getName() == orig(this.cachedTransform.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.cachedOriginal.w.x <= orig(this.cachedOriginal.w.x)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet:::OBJECT
this.tree != null
this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent != null
this.tree.plus.attribute has only one value
this.tree.plus.attribute != null
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus.cut != null
this.tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.tree.minus.plus != null
this.tree.minus.minus != null
this.tree.minus.parent != null
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.parent == null
this.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.PolyhedronsSet():::EXIT
this.tree.cut == null
this.tree.plus == null
this.tree.minus == null
this.tree.attribute has only one value
this.tree.attribute.getClass().getName() == java.lang.Boolean.class
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.PolyhedronsSet(double, double, double, double, double, double):::ENTER
xMin one of { 0.0, 0.9 }
xMax one of { 1.0, 1.1, 2.0 }
yMin one of { 0.0, 1.0, 1.9 }
yMax one of { 1.0, 2.1, 3.0 }
zMin one of { 0.0, 2.0, 2.9 }
zMax one of { 1.0, 3.1, 4.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.PolyhedronsSet(double, double, double, double, double, double):::EXIT
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.PolyhedronsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.plus.cut == null
tree.plus.plus == null
tree.plus.minus == null
tree.plus.attribute has only one value
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
tree.parent == null
tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.PolyhedronsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.plus.cut == null
tree.plus.plus == null
tree.plus.minus == null
tree.plus.attribute has only one value
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
tree.parent == null
tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size one of { 0.0, 0.4181666666666653 }
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.plus.cut == null
tree.plus.plus == null
tree.plus.minus == null
tree.plus.attribute has only one value
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
tree.parent == null
tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
this.barycenter.getClass().getName() == orig(this.barycenter.getClass().getName())
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size one of { 0.0, 0.4181666666666653 }
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.plus.cut == null
tree.plus.plus == null
tree.plus.minus == null
tree.plus.attribute has only one value
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
tree.parent == null
tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
return.tree.parent == null
return.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.computeGeometricalProperties():::ENTER
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.computeGeometricalProperties():::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation):::ENTER
this has only one value
this.tree has only one value
this.tree.cut has only one value
this.tree.plus has only one value
this.tree.plus.parent has only one value
this.tree.minus has only one value
this.tree.minus.cut has only one value
this.tree.minus.plus has only one value
this.tree.minus.minus has only one value
this.tree.minus.parent has only one value
this.tree.minus.attribute has only one value
this.tree.attribute has only one value
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.4181666666666653
this.barycenter has only one value
center has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
center.x == -0.2
center.y == 2.1
center.z == -3.2
rotation has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == 0.0
rotation.q0 == 0.9982005399352042
rotation.q1 == -0.0471359463928705
rotation.q2 == 0.03345131679494035
rotation.q3 == -0.015965401197585168
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation):::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
this.barycenter.getClass().getName() == orig(this.barycenter.getClass().getName())
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
center.x == orig(center.x)
center.y == orig(center.y)
center.z == orig(center.z)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3)
rotation.q0 == orig(rotation.q0)
rotation.q1 == orig(rotation.q1)
rotation.q2 == orig(rotation.q2)
rotation.q3 == orig(rotation.q3)
this.tree has only one value
this.tree.cut has only one value
this.tree.plus has only one value
this.tree.plus.parent has only one value
this.tree.minus has only one value
this.tree.minus.cut has only one value
this.tree.minus.plus has only one value
this.tree.minus.minus has only one value
this.tree.minus.parent has only one value
this.tree.minus.attribute has only one value
this.tree.attribute has only one value
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.4181666666666653
this.barycenter has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
center.x == -0.2
center.y == 2.1
center.z == -3.2
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == 0.0
rotation.q0 == 0.9982005399352042
rotation.q1 == -0.0471359463928705
rotation.q2 == 0.03345131679494035
rotation.q3 == -0.015965401197585168
return has only one value
return.tree has only one value
return.tree.cut has only one value
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
return.tree.plus has only one value
return.tree.minus has only one value
return.tree.parent == null
return.tree.attribute has only one value
return.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
this has only one value
this.tree has only one value
this.tree.cut has only one value
this.tree.plus has only one value
this.tree.plus.parent has only one value
this.tree.minus has only one value
this.tree.minus.cut has only one value
this.tree.minus.plus has only one value
this.tree.minus.minus has only one value
this.tree.minus.parent has only one value
this.tree.minus.attribute has only one value
this.tree.attribute has only one value
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
translation has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
translation.x == 10.2
translation.y == 4.3
translation.z == -6.7
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
translation.x == orig(translation.x)
translation.y == orig(translation.y)
translation.z == orig(translation.z)
this.tree has only one value
this.tree.cut has only one value
this.tree.plus has only one value
this.tree.plus.parent has only one value
this.tree.minus has only one value
this.tree.minus.cut has only one value
this.tree.minus.plus has only one value
this.tree.minus.minus has only one value
this.tree.minus.parent has only one value
this.tree.minus.attribute has only one value
this.tree.attribute has only one value
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
translation.x == 10.2
translation.y == 4.3
translation.z == -6.7
return has only one value
return.tree has only one value
return.tree.cut has only one value
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
return.tree.plus has only one value
return.tree.minus has only one value
return.tree.parent == null
return.tree.attribute has only one value
return.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1:::OBJECT
this has only one value
this.val$expectedV has only one value
this.val$expectedV.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D[].class
this.val$expectedV[] contains no nulls and has only one value, of length 4
this.val$expectedV[] elements != null
this.val$expectedV[].getClass().getName() == [org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D]
this.val$expectedV[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
this.val$expectedV[].x == [10.868623697159535, 11.700395891451603, 12.49931207740605, 10.641528278028046]
this.val$expectedV[].y == [5.91823295368953, 6.057436776316028, 7.023539782681806, 7.194221777028673]
this.val$expectedV[].y sorted by <
this.val$expectedV[].z == [-3.3453532981691367, -2.3713012910521005, -2.729599921960741, -2.029952145165585]
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this has only one value
size(this.val$expectedV[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3D[]):::ENTER
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D[].class
$hidden$2[] contains no nulls and has only one value, of length 4
$hidden$2[].x == [10.868623697159535, 11.700395891451603, 12.49931207740605, 10.641528278028046]
$hidden$2[].y == [5.91823295368953, 6.057436776316028, 7.023539782681806, 7.194221777028673]
$hidden$2[].z == [-3.3453532981691367, -2.3713012910521005, -2.729599921960741, -2.029952145165585]
size($hidden$2[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3D[]):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this)
$hidden$2[] == orig($hidden$2[])
$hidden$2[].x == orig($hidden$2[].x)
$hidden$2[].y == orig($hidden$2[].y)
$hidden$2[].z == orig($hidden$2[].z)
$hidden$2[] contains no nulls and has only one value, of length 4
$hidden$2[].x == [10.868623697159535, 11.700395891451603, 12.49931207740605, 10.641528278028046]
$hidden$2[].y == [5.91823295368953, 6.057436776316028, 7.023539782681806, 7.194221777028673]
$hidden$2[].z == [-3.3453532981691367, -2.3713012910521005, -2.729599921960741, -2.029952145165585]
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.checkFacet(org.apache.commons.math3.geometry.euclidean.threed.SubPlane):::ENTER
facet.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
facet.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.checkFacet(org.apache.commons.math3.geometry.euclidean.threed.SubPlane):::EXIT
this.val$expectedV == orig(this.val$expectedV)
this.val$expectedV.getClass().getName() == orig(this.val$expectedV.getClass().getName())
this.val$expectedV[] == orig(this.val$expectedV[])
this.val$expectedV[].x == orig(this.val$expectedV[].x)
this.val$expectedV[].y == orig(this.val$expectedV[].y)
this.val$expectedV[].z == orig(this.val$expectedV[].z)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this)
facet.hyperplane == orig(facet.hyperplane)
facet.hyperplane.getClass().getName() == orig(facet.hyperplane.getClass().getName())
facet.remainingRegion == orig(facet.remainingRegion)
facet.remainingRegion.getClass().getName() == orig(facet.remainingRegion.getClass().getName())
facet.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
facet.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.val$expectedV == orig(this.val$expectedV)
this.val$expectedV.getClass().getName() == orig(this.val$expectedV.getClass().getName())
this.val$expectedV[] == orig(this.val$expectedV[])
this.val$expectedV[].x == orig(this.val$expectedV[].x)
this.val$expectedV[].y == orig(this.val$expectedV[].y)
this.val$expectedV[].z == orig(this.val$expectedV[].z)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.val$expectedV == orig(this.val$expectedV)
this.val$expectedV.getClass().getName() == orig(this.val$expectedV.getClass().getName())
this.val$expectedV[] == orig(this.val$expectedV[])
this.val$expectedV[].x == orig(this.val$expectedV[].x)
this.val$expectedV[].y == orig(this.val$expectedV[].y)
this.val$expectedV[].z == orig(this.val$expectedV[].z)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest$1.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.val$expectedV == orig(this.val$expectedV)
this.val$expectedV.getClass().getName() == orig(this.val$expectedV.getClass().getName())
this.val$expectedV[] == orig(this.val$expectedV[])
this.val$expectedV[].x == orig(this.val$expectedV[].x)
this.val$expectedV[].y == orig(this.val$expectedV[].y)
this.val$expectedV[].z == orig(this.val$expectedV[].z)
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this == orig(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.this)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.PolyhedronsSetTest():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.checkPoints(org.apache.commons.math3.geometry.partitioning.Region$Location, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.euclidean.threed.Vector3D[]):::ENTER
org.apache.commons.math3.geometry.partitioning.Region$Location.INSIDE has only one value
org.apache.commons.math3.geometry.partitioning.Region$Location.OUTSIDE has only one value
org.apache.commons.math3.geometry.partitioning.Region$Location.BOUNDARY has only one value
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Region$Location[].class
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Region.Location, org.apache.commons.math3.geometry.partitioning.Region.Location, org.apache.commons.math3.geometry.partitioning.Region.Location]
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Region.Location.class
tree.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.tree.parent == null
tree.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
tree.size one of { 0.33333333333333354, 1.0 }
tree.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
points.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D[].class
size(org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[]) == 3
size(points[]) one of { 4, 6, 8 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.checkPoints(org.apache.commons.math3.geometry.partitioning.Region$Location, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.euclidean.threed.Vector3D[]):::EXIT
org.apache.commons.math3.geometry.partitioning.Region$Location.INSIDE == orig(org.apache.commons.math3.geometry.partitioning.Region$Location.INSIDE)
org.apache.commons.math3.geometry.partitioning.Region$Location.OUTSIDE == orig(org.apache.commons.math3.geometry.partitioning.Region$Location.OUTSIDE)
org.apache.commons.math3.geometry.partitioning.Region$Location.BOUNDARY == orig(org.apache.commons.math3.geometry.partitioning.Region$Location.BOUNDARY)
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES)
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[])
tree.tree == orig(tree.tree)
tree.tree.cut == orig(tree.tree.cut)
tree.tree.cut.getClass().getName() == orig(tree.tree.cut.getClass().getName())
tree.tree.plus == orig(tree.tree.plus)
tree.tree.minus == orig(tree.tree.minus)
tree.tree.parent == orig(tree.tree.parent)
tree.tree.attribute == orig(tree.tree.attribute)
tree.tree.attribute.getClass().getName() == orig(tree.tree.attribute.getClass().getName())
tree.size == orig(tree.size)
tree.barycenter == orig(tree.barycenter)
tree.barycenter.getClass().getName() == orig(tree.barycenter.getClass().getName())
points[] == orig(points[])
points[].x == orig(points[].x)
points[].y == orig(points[].y)
points[].z == orig(points[].z)
org.apache.commons.math3.geometry.partitioning.Region$Location.INSIDE has only one value
org.apache.commons.math3.geometry.partitioning.Region$Location.OUTSIDE has only one value
org.apache.commons.math3.geometry.partitioning.Region$Location.BOUNDARY has only one value
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Region$Location[].class
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Region.Location, org.apache.commons.math3.geometry.partitioning.Region.Location, org.apache.commons.math3.geometry.partitioning.Region.Location]
org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Region.Location.class
tree.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.tree.parent == null
tree.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
tree.size one of { 0.33333333333333354, 1.0 }
tree.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
size(org.apache.commons.math3.geometry.partitioning.Region$Location.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testBox():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testBox():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testBuildBox():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testBuildBox():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testCross():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testCross():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testIsometry():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testIsometry():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testTetrahedron():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testTetrahedron():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Rotation:::CLASS
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY != null
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Rotation:::OBJECT
this.q0 one of { 0.9982005399352042, 1.0 }
this.q1 one of { -0.0471359463928705, 0.0 }
this.q2 one of { 0.0, 0.03345131679494035 }
this.q3 one of { -0.015965401197585168, 0.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Rotation.Rotation(double, double, double, double, boolean):::ENTER
q0 == 1.0
q1 == 0.0
q2 == 0.0
q3 == 0.0
needsNormalization == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Rotation.Rotation(double, double, double, double, boolean):::EXIT
this.q0 == 1.0
this.q1 == 0.0
this.q2 == 0.0
this.q3 == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Rotation.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double):::ENTER
axis has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
axis.x == 6.2
axis.y == -4.4
axis.z == 2.1
angle == 0.12
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Rotation.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
axis.x == orig(axis.x)
axis.y == orig(axis.y)
axis.z == orig(axis.z)
this.q0 == 0.9982005399352042
this.q1 == -0.0471359463928705
this.q2 == 0.03345131679494035
this.q3 == -0.015965401197585168
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
axis.x == 6.2
axis.y == -4.4
axis.z == 2.1
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Rotation.applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
this has only one value
this.q0 == 0.9982005399352042
this.q1 == -0.0471359463928705
this.q2 == 0.03345131679494035
this.q3 == -0.015965401197585168
u != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
u.y != 0
u.z != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Rotation.applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q0)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q1)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q2)
org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3 == orig(org.apache.commons.math3.geometry.euclidean.threed.Rotation.IDENTITY.q3)
this.q0 == orig(this.q0)
this.q1 == orig(this.q1)
this.q2 == orig(this.q2)
this.q3 == orig(this.q3)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
u.x == orig(u.x)
u.y == orig(u.y)
u.z == orig(u.z)
this.q0 == 0.9982005399352042
this.q1 == -0.0471359463928705
this.q2 == 0.03345131679494035
this.q3 == -0.015965401197585168
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
u.y != 0
u.z != 0
return != null
return.x != 0
return.y != 0
return.z != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane:::OBJECT
this.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
this.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.SubPlane(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.SubPlane(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
return.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT64
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT86
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
org.apache.commons.math3.geometry.partitioning.Side.PLUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.MINUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.BOTH has only one value
org.apache.commons.math3.geometry.partitioning.Side.HYPER has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side]
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Side.class
size(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Plane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT106
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT136
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.SubPlane.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return.plus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
return.minus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D:::CLASS
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, double, double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, double, double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
u != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
u.x == orig(u.x)
u.y == orig(u.y)
u.z == orig(u.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
a1 == 1.0
u1 != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
u2 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
u1.x == orig(u1.x)
u1.y == orig(u1.y)
u1.z == orig(u1.z)
u2.x == orig(u2.x)
u2.y == orig(u2.y)
u2.z == orig(u2.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
u1 != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY != null
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == 1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == 0.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == -1.0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN.z == Double.NaN
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == -Infinity
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == -Infinity
u2 != null
u3 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
u1.x == orig(u1.x)
u1.y == orig(u1.y)
u1.z == orig(u1.z)
u2.x == orig(u2.x)
u2.y == orig(u2.y)
u2.z == orig(u2.z)
u3.x == orig(u3.x)
u3.y == orig(u3.y)
u3.z == orig(u3.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.add(org.apache.commons.math3.geometry.Vector):::ENTER
v != null
v.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.add(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(org.apache.commons.math3.geometry.Vector):::ENTER
v != null
v.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::ENTER
v1 != null
v2 != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
v1.x == orig(v1.x)
v1.y == orig(v1.y)
v1.z == orig(v1.z)
v2.x == orig(v2.x)
v2.y == orig(v2.y)
v2.z == orig(v2.z)
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(org.apache.commons.math3.geometry.Vector):::ENTER
v != null
v.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getNorm():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getNorm():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getNormSq():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getNormSq():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getX():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getX():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getY():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getY():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getZ():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.getZ():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::EXIT328
return.x == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::EXIT331
this.x != 0
return.y == 0.0
return.z != 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::EXIT334
this.x != 0
this.y != 0
return.x != 0
return.y != 0
return.z == 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.orthogonal():::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.subtract(org.apache.commons.math3.geometry.Vector):::ENTER
v != null
v.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.Vector3D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.subtract(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY.z)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z == orig(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY.z)
this.x == orig(this.x)
this.y == orig(this.y)
this.z == orig(this.z)
return != null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:::OBJECT
this.cXX == 0.9999999999999999
this.cXY one of { 5.746271514173174E-17, 3.3306690738754696E-16, 5.551115123125783E-16 }
this.cYY == 0.9999999999999996
this.c11 == 0.9999999999999994
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.LineTransform(java.awt.geom.AffineTransform):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.LineTransform(java.awt.geom.AffineTransform):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.apply(org.apache.commons.math3.geometry.Vector):::ENTER
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.apply(org.apache.commons.math3.geometry.Vector):::EXIT
this.cXX == orig(this.cXX)
this.cXY == orig(this.cXY)
this.cX1 == orig(this.cX1)
this.cYX == orig(this.cYX)
this.cYY == orig(this.cYY)
this.cY1 == orig(this.cY1)
this.c1Y == orig(this.c1Y)
this.c1X == orig(this.c1X)
this.c11 == orig(this.c11)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.apply(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.apply(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.cXX == orig(this.cXX)
this.cXY == orig(this.cXY)
this.cX1 == orig(this.cX1)
this.cYX == orig(this.cYX)
this.cYY == orig(this.cYY)
this.cY1 == orig(this.cY1)
this.c1Y == orig(this.c1Y)
this.c1X == orig(this.c1X)
this.c11 == orig(this.c11)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
sub.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
original.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
transformed.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.cXX == orig(this.cXX)
this.cXY == orig(this.cXY)
this.cX1 == orig(this.cX1)
this.cYX == orig(this.cYX)
this.cYY == orig(this.cYY)
this.cY1 == orig(this.cY1)
this.c1Y == orig(this.c1Y)
this.c1X == orig(this.c1X)
this.c11 == orig(this.c11)
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line:::OBJECT
this.angle >= 0.0
this.cos <= 1.0
this.cos >= -1.0
this.sin <= 1.0
this.sin >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(double, double, double, double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(double, double, double, double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
line.angle >= 0.0
line.cos <= 1.0
line.cos >= -1.0
line.sin <= 1.0
line.sin >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
line.angle == orig(line.angle)
line.cos == orig(line.cos)
line.sin == orig(line.sin)
line.originOffset == orig(line.originOffset)
line.angle >= 0.0
line.cos <= 1.0
line.cos >= -1.0
line.sin <= 1.0
line.sin >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.copySelf():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.copySelf():::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
return.angle >= 0.0
return.cos <= 1.0
return.cos >= -1.0
return.sin <= 1.0
return.sin >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getAngle():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getAngle():::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
return >= 0.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getOffset(org.apache.commons.math3.geometry.Vector):::ENTER
this.angle one of { 1.5707963267948966, 3.141592653589793, 4.71238898038469 }
this.cos one of { -1.0, -1.8369701987210297E-16, 6.123233995736766E-17 }
this.sin one of { -1.0, 1.2246467991473532E-16, 1.0 }
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getOffset(org.apache.commons.math3.geometry.Vector):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
this.angle one of { 1.5707963267948966, 3.141592653589793, 4.71238898038469 }
this.cos one of { -1.0, -1.8369701987210297E-16, 6.123233995736766E-17 }
this.sin one of { -1.0, 1.2246467991473532E-16, 1.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
line.angle == orig(line.angle)
line.cos == orig(line.cos)
line.sin == orig(line.sin)
line.originOffset == orig(line.originOffset)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getReverse():::ENTER
this.angle one of { 0.0, 3.141592653589793 }
this.cos one of { -1.0, 1.0 }
this.sin == 1.2246467991473532E-16
this.originOffset one of { -1.1, 0.9 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getReverse():::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
this.angle one of { 0.0, 3.141592653589793 }
this.cos one of { -1.0, 1.0 }
this.sin == 1.2246467991473532E-16
this.originOffset one of { -1.1, 0.9 }
return.angle one of { 0.0, 3.141592653589793 }
return.cos one of { -1.0, 1.0 }
return.sin == -1.2246467991473532E-16
return.originOffset one of { -0.9, 1.1 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(java.awt.geom.AffineTransform):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(java.awt.geom.AffineTransform):::EXIT
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.intersection(org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
other.angle >= 0.0
other.cos <= 1.0
other.cos >= -1.0
other.sin <= 1.0
other.sin >= -1.0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.intersection(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT200
return == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.intersection(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT202
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.intersection(org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
other.angle == orig(other.angle)
other.cos == orig(other.cos)
other.sin == orig(other.sin)
other.originOffset == orig(other.originOffset)
other.angle >= 0.0
other.cos <= 1.0
other.cos >= -1.0
other.sin <= 1.0
other.sin >= -1.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::ENTER
this.angle == 0.0
this.cos == 0.0
this.sin == 0.0
this.originOffset == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
this.angle >= orig(this.angle)
orig(this.cos) % this.cos == 0
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
other.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
(return == true)  ==>  (this.sin one of { -1.0, 0.0, 1.0 })
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="return == true"
this.sin one of { -1.0, 0.0, 1.0 }
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.toSpace(org.apache.commons.math3.geometry.Vector):::ENTER
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.Vector1D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.toSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.toSubSpace(org.apache.commons.math3.geometry.Vector):::ENTER
point.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.toSubSpace(org.apache.commons.math3.geometry.Vector):::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE.x == 1.0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NEGATIVE_INFINITY.x == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.wholeHyperplane():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Line.wholeHyperplane():::EXIT
this.angle == orig(this.angle)
this.cos == orig(this.cos)
this.sin == orig(this.sin)
this.originOffset == orig(this.originOffset)
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
return.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:::OBJECT
this.sortingKey.offset one of { 0, 32 }
this.sortingKey.encoding[] elements >= 0
this.sortingKey.posInf == false
this.sortingKey.negInf == false
this.sortingKey.nan == false
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
this.line.sin >= -1.0
size(this.sortingKey.components[]) == 2
size(this.sortingKey.encoding[]) one of { 1, 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, double):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
dx one of { -1.0E-10, 1.0E-10 }
dy one of { -1.0E-10, 1.0E-10 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, double):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
this.sortingKey.offset == 32
this.start == null
this.end == null
this.line == null
size(this.sortingKey.encoding[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
end.x == orig(end.x)
end.y == orig(end.y)
line.angle == orig(line.angle)
line.cos == orig(line.cos)
line.sin == orig(line.sin)
line.originOffset == orig(line.originOffset)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment):::ENTER
o.sortingKey.offset one of { 0, 32 }
o.sortingKey.encoding[] elements >= 0
o.sortingKey.posInf == false
o.sortingKey.negInf == false
o.sortingKey.nan == false
size(o.sortingKey.components[]) == 2
size(o.sortingKey.encoding[]) one of { 1, 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment):::EXIT
this.sortingKey == orig(this.sortingKey)
this.sortingKey.components == orig(this.sortingKey.components)
this.sortingKey.components[] == orig(this.sortingKey.components[])
this.sortingKey.lsb == orig(this.sortingKey.lsb)
this.sortingKey.encoding == orig(this.sortingKey.encoding)
this.sortingKey.encoding[] == orig(this.sortingKey.encoding[])
this.sortingKey.posInf == orig(this.sortingKey.posInf)
this.sortingKey.negInf == orig(this.sortingKey.negInf)
this.sortingKey.nan == orig(this.sortingKey.nan)
this.start == orig(this.start)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.start.x == orig(this.start.x)
this.start.y == orig(this.start.y)
this.end == orig(this.end)
this.end.x == orig(this.end.x)
this.end.y == orig(this.end.y)
this.line == orig(this.line)
this.line.angle == orig(this.line.angle)
this.line.cos == orig(this.line.cos)
this.line.sin == orig(this.line.sin)
this.line.originOffset == orig(this.line.originOffset)
o.sortingKey == orig(o.sortingKey)
o.sortingKey.components == orig(o.sortingKey.components)
o.sortingKey.components[] == orig(o.sortingKey.components[])
o.sortingKey.lsb == orig(o.sortingKey.lsb)
o.sortingKey.encoding == orig(o.sortingKey.encoding)
o.sortingKey.encoding[] == orig(o.sortingKey.encoding[])
o.sortingKey.posInf == orig(o.sortingKey.posInf)
o.sortingKey.negInf == orig(o.sortingKey.negInf)
o.sortingKey.nan == orig(o.sortingKey.nan)
o.start == orig(o.start)
o.start.x == orig(o.start.x)
o.start.y == orig(o.start.y)
o.end == orig(o.end)
o.end.x == orig(o.end.x)
o.end.y == orig(o.end.y)
o.line == orig(o.line)
o.line.angle == orig(o.line.angle)
o.line.cos == orig(o.line.cos)
o.line.sin == orig(o.line.sin)
o.line.originOffset == orig(o.line.originOffset)
this.sortingKey.offset == 32
o.sortingKey.offset == 32
o.sortingKey.encoding[] elements >= 0
o.sortingKey.posInf == false
o.sortingKey.negInf == false
o.sortingKey.nan == false
return one of { -1, 0, 1 }
size(o.sortingKey.components[]) == 2
size(o.sortingKey.encoding[]) one of { 1, 4, 6 }
this.sortingKey.offset >= orig(this.sortingKey.offset)
o.sortingKey.offset >= orig(o.sortingKey.offset)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:::OBJECT
this.sorted.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.sorted.top.parent == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.SegmentsBuilder():::EXIT
this.sorted.top == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::ENTER
sub.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::EXIT
this.sorted == orig(this.sorted)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.parent == orig(this.sorted.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.getSorted():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.getSorted():::EXIT
this.sorted == orig(this.sorted)
this.sorted.top == orig(this.sorted.top)
this.sorted.top.element == orig(this.sorted.top.element)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.left == orig(this.sorted.top.left)
this.sorted.top.right == orig(this.sorted.top.right)
this.sorted.top.parent == orig(this.sorted.top.parent)
this.sorted.top.skew == orig(this.sorted.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
return.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.top.parent == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.sorted == orig(this.sorted)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.parent == orig(this.sorted.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.sorted == orig(this.sorted)
this.sorted.top == orig(this.sorted.top)
this.sorted.top.element == orig(this.sorted.top.element)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.left == orig(this.sorted.top.left)
this.sorted.top.right == orig(this.sorted.top.right)
this.sorted.top.parent == orig(this.sorted.top.parent)
this.sorted.top.skew == orig(this.sorted.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.sorted == orig(this.sorted)
this.sorted.top == orig(this.sorted.top)
this.sorted.top.element == orig(this.sorted.top.element)
this.sorted.top.element.getClass().getName() == orig(this.sorted.top.element.getClass().getName())
this.sorted.top.left == orig(this.sorted.top.left)
this.sorted.top.right == orig(this.sorted.top.right)
this.sorted.top.parent == orig(this.sorted.top.parent)
this.sorted.top.skew == orig(this.sorted.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:::OBJECT
this.vertices.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].class
this.vertices[] elements != null
this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.tree.parent == null
this.size >= 0.0
this.barycenter.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
size(this.vertices[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet():::EXIT
this.vertices == null
this.tree.cut == null
this.tree.plus == null
this.tree.minus == null
this.tree.attribute has only one value
this.tree.attribute.getClass().getName() == java.lang.Boolean.class
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet(java.util.Collection):::ENTER
boundary has only one value
boundary.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet(java.util.Collection):::EXIT
this.vertices == null
this.tree has only one value
this.tree.cut has only one value
this.tree.plus has only one value
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent has only one value
this.tree.plus.attribute has only one value
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus has only one value
this.tree.minus.cut has only one value
this.tree.minus.plus has only one value
this.tree.minus.minus has only one value
this.tree.minus.parent has only one value
this.tree.minus.attribute == null
this.tree.attribute == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.parent == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.PolygonsSet(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.vertices == null
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.size == 0.0
this.barycenter == null
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.parent == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.parent == null
size(this.vertices[]) == 1
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.vertices == orig(this.vertices)
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.vertices[] == orig(this.vertices[])
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
this.barycenter.getClass().getName() == orig(this.barycenter.getClass().getName())
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.parent == null
return.vertices == null
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.tree.parent == null
return.size == 0.0
return.barycenter == null
size(this.vertices[]) == 1
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.computeGeometricalProperties():::ENTER
this.vertices[] contains no nulls and has only one value, of length 1
this.vertices[] elements has only one value
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
size(this.vertices[]) == 1
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.computeGeometricalProperties():::EXIT
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.vertices[] == orig(this.vertices[]) (elementwise)
this.vertices[] is the reverse of orig(this.vertices[])
orig(this.size) % this.size == 0
this.size > orig(this.size)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree):::ENTER
this.vertices == null
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
node.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
node.left == null
node.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
node.right.left == null
node.right.right == null
node.right.skew has only one value
node.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
sorted.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
sorted.top.parent == null
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree):::EXIT348
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree):::EXIT
this.vertices == orig(this.vertices)
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute == orig(this.tree.plus.attribute)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute == orig(this.tree.minus.attribute)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute == orig(this.tree.attribute)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
node.element.getClass().getName() == orig(node.element.getClass().getName())
node.left == orig(node.left)
node.parent == orig(node.parent)
node.parent.element.getClass().getName() == orig(node.parent.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
sorted.top.element.getClass().getName() == orig(sorted.top.element.getClass().getName())
sorted.top.parent == orig(sorted.top.parent)
this.vertices == null
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.size == 0.0
this.barycenter == null
node.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
node.left == null
node.right == null
node.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
node.parent.right == null
node.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
sorted.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
sorted.top.parent == null
return[] elements != null
return[].getClass().getName() elements == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ComparableSegment.class
return.getClass().getName() == java.util.ArrayList.class
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.getVertices():::ENTER
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
size(this.vertices[]) == 1
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.getVertices():::EXIT
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.tree == orig(this.tree)
this.tree.cut == orig(this.tree.cut)
this.tree.cut.getClass().getName() == orig(this.tree.cut.getClass().getName())
this.tree.plus == orig(this.tree.plus)
this.tree.plus.cut == orig(this.tree.plus.cut)
this.tree.plus.cut.getClass().getName() == orig(this.tree.plus.cut.getClass().getName())
this.tree.plus.plus == orig(this.tree.plus.plus)
this.tree.plus.minus == orig(this.tree.plus.minus)
this.tree.plus.parent == orig(this.tree.plus.parent)
this.tree.plus.attribute.getClass().getName() == orig(this.tree.plus.attribute.getClass().getName())
this.tree.minus == orig(this.tree.minus)
this.tree.minus.cut == orig(this.tree.minus.cut)
this.tree.minus.cut.getClass().getName() == orig(this.tree.minus.cut.getClass().getName())
this.tree.minus.plus == orig(this.tree.minus.plus)
this.tree.minus.minus == orig(this.tree.minus.minus)
this.tree.minus.parent == orig(this.tree.minus.parent)
this.tree.minus.attribute.getClass().getName() == orig(this.tree.minus.attribute.getClass().getName())
this.tree.parent == orig(this.tree.parent)
this.tree.attribute.getClass().getName() == orig(this.tree.attribute.getClass().getName())
this.size == orig(this.size)
this.barycenter == orig(this.barycenter)
this.barycenter.getClass().getName() == orig(this.barycenter.getClass().getName())
this.tree.minus.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.tree.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].class
return[] elements != null
size(return[]) one of { 1, 2, 3 }
this.vertices[] == orig(this.vertices[]) (elementwise)
this.vertices[] is the reverse of orig(this.vertices[])
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.PolygonsSetTest():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.buildSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.buildSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
end.x == orig(end.x)
end.y == orig(end.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.buildSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][]):::ENTER
vertices has only one value
vertices.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].class
vertices[] contains no nulls and has only one value, of length 1
vertices[] elements has only one value
size(vertices[]) == 1
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.buildSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][]):::EXIT
vertices[] == orig(vertices[])
vertices[] contains no nulls and has only one value, of length 1
vertices[] elements has only one value
return has only one value
return.vertices == null
return.tree has only one value
return.tree.cut has only one value
return.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.tree.plus has only one value
return.tree.minus has only one value
return.tree.parent == null
return.tree.attribute == null
return.size == 0.0
return.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
p2.y one of { 1.0, 1.5, 2.0 }
tolerance == 1.0E-10
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::EXIT859
p1.x one of { -1.3, -0.3, 0.0 }
p2.y one of { 1.5, 2.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::EXIT859;condition="return == true"
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::EXIT859;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::EXIT863
p.x == -1.7999999999999998
p.y == 2.0000000000000004
p1.x one of { -0.3, -0.1 }
p1.y one of { 1.0, 1.5, 2.0 }
p2.x one of { -1.3, -0.3, -0.1 }
p2.y one of { 1.0, 1.5 }
return == false
orig(p) has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::EXIT863;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
p.x == orig(p.x)
p.y == orig(p.y)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
p2.y one of { 1.0, 1.5, 2.0 }
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::EXIT;condition="return == true"
p1.x one of { -1.3, 0.0 }
p1.y one of { 0.0, 2.0 }
p2.x one of { -1.8, 0.0 }
p2.y == 2.0
return == true
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkInSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double):::EXIT;condition="not(return == true)"
p.x == -1.7999999999999998
p.y == 2.0000000000000004
return == false
orig(p) has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkVertices(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][], org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][]):::ENTER
rebuiltVertices has only one value
rebuiltVertices.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].class
rebuiltVertices[] contains no nulls and has only one value, of length 1
rebuiltVertices[] elements has only one value
vertices has only one value
vertices.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][].class
vertices[] contains no nulls and has only one value, of length 1
vertices[] elements has only one value
size(rebuiltVertices[]) == 1
size(vertices[]) == 1
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.checkVertices(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][], org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][]):::EXIT
rebuiltVertices[] == orig(rebuiltVertices[])
vertices[] == orig(vertices[])
rebuiltVertices[] contains no nulls and has only one value, of length 1
rebuiltVertices[] elements has only one value
vertices[] contains no nulls and has only one value, of length 1
vertices[] elements has only one value
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testStair():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testStair():::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment:::OBJECT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.Segment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Line):::ENTER
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.Segment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Line):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
start.x == orig(start.x)
start.y == orig(start.y)
end.x == orig(end.x)
end.y == orig(end.y)
line.angle == orig(line.angle)
line.cos == orig(line.cos)
line.sin == orig(line.sin)
line.originOffset == orig(line.originOffset)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.getEnd():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.getEnd():::EXIT
this.start == orig(this.start)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.start.x == orig(this.start.x)
this.start.y == orig(this.start.y)
this.end == orig(this.end)
this.end.x == orig(this.end.x)
this.end.y == orig(this.end.y)
this.line == orig(this.line)
this.line.angle == orig(this.line.angle)
this.line.cos == orig(this.line.cos)
this.line.sin == orig(this.line.sin)
this.line.originOffset == orig(this.line.originOffset)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.getStart():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Segment.getStart():::EXIT
this.start == orig(this.start)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.start.x == orig(this.start.x)
this.start.y == orig(this.start.y)
this.end == orig(this.end)
this.end.x == orig(this.end.x)
this.end.y == orig(this.end.y)
this.line == orig(this.line)
this.line.angle == orig(this.line.angle)
this.line.cos == orig(this.line.cos)
this.line.sin == orig(this.line.sin)
this.line.originOffset == orig(this.line.originOffset)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine:::OBJECT
this.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
this.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
return.remainingRegion.getClass().getName() == org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT162
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT168
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.side(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
org.apache.commons.math3.geometry.partitioning.Side.PLUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.MINUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.BOTH has only one value
org.apache.commons.math3.geometry.partitioning.Side.HYPER has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side]
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Side.class
size(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
hyperplane.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Line.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT183
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT204
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.SubLine.split(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return.plus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.minus.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D:::CLASS
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY has only one value
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == 0.0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.x == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN.y == Double.NaN
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == -Infinity
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == -Infinity
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.Vector2D(double, double):::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.Vector2D(double, double):::EXIT
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distance(org.apache.commons.math3.geometry.Vector):::ENTER
p.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.Vector2D.class
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distance(org.apache.commons.math3.geometry.Vector):::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getX():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getX():::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getY():::ENTER
===========================================================================
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.getY():::EXIT
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY.y)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.x)
org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y == orig(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NEGATIVE_INFINITY.y)
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1:::OBJECT
this has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == 0.0
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1.(org.apache.commons.math3.geometry.partitioning.AbstractRegion):::ENTER
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == 0.0
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1.(org.apache.commons.math3.geometry.partitioning.AbstractRegion):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1.compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::ENTER
o1.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
o2.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$1.compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2:::OBJECT
this has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == 0.0
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.(org.apache.commons.math3.geometry.partitioning.AbstractRegion):::ENTER
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.class
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus has only one value
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == null
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == 0.0
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.(org.apache.commons.math3.geometry.partitioning.AbstractRegion):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.attribute == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.attribute == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.attribute == null
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.attribute == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$2.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.cut.getClass().getName())
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.plus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.minus)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.parent)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.tree.attribute)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.size)
org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter == orig(org.apache.commons.math3.geometry.partitioning.AbstractRegion.this.barycenter)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.plus.attribute == null
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.minus.attribute == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
node.parent.attribute == null
node.attribute == null
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.Sides():::EXIT
this.plusFound == false
this.minusFound == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.minusFound():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.minusFound():::EXIT
this.plusFound == orig(this.plusFound)
this.minusFound == orig(this.minusFound)
(this.minusFound == false)  <==>  (return == false)
(this.minusFound == false)  ==>  (this.plusFound == true)
(this.minusFound == true)  <==>  (return == true)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.minusFound():::EXIT;condition="return == true"
this.minusFound == true
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.minusFound():::EXIT;condition="not(return == true)"
this.plusFound == true
this.minusFound == false
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.plusFound():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.plusFound():::EXIT
this.plusFound == orig(this.plusFound)
this.minusFound == orig(this.minusFound)
(this.plusFound == false)  <==>  (return == false)
(this.plusFound == true)  <==>  (return == true)
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.plusFound():::EXIT;condition="return == true"
this.plusFound == true
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.plusFound():::EXIT;condition="not(return == true)"
this.plusFound == false
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.rememberMinusFound():::ENTER
this.minusFound == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.rememberMinusFound():::EXIT
this.plusFound == orig(this.plusFound)
this.minusFound == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.rememberPlusFound():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides.rememberPlusFound():::EXIT
this.minusFound == orig(this.minusFound)
this.plusFound == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion:::OBJECT
this.tree != null
this.tree.plus.parent != null
this.tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.tree.minus.parent != null
this.tree.parent == null
this.size == 0.0
this.barycenter == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion():::EXIT
this.tree.cut == null
this.tree.plus == null
this.tree.minus == null
this.tree.attribute has only one value
this.tree.attribute != null
this.tree.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion(java.util.Collection):::ENTER
boundary has only one value
boundary.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion(java.util.Collection):::EXIT
this.tree has only one value
this.tree.cut has only one value
this.tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.tree.plus has only one value
this.tree.plus.cut == null
this.tree.plus.plus == null
this.tree.plus.minus == null
this.tree.plus.parent has only one value
this.tree.plus.attribute has only one value
this.tree.minus has only one value
this.tree.minus.cut has only one value
this.tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.tree.minus.plus has only one value
this.tree.minus.minus has only one value
this.tree.minus.parent has only one value
this.tree.minus.attribute == null
this.tree.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
tree != null
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.parent != null
tree.parent == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractRegion.AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
tree.cut == orig(tree.cut)
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut == orig(tree.plus.cut)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut == orig(tree.minus.cut)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent == orig(tree.parent)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
tree.plus.parent != null
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.parent != null
tree.parent == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.applyTransform(org.apache.commons.math3.geometry.partitioning.Transform):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.applyTransform(org.apache.commons.math3.geometry.partitioning.Transform):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.copySelf():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.copySelf():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getHyperplane():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getHyperplane():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getRemainingRegion():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getRemainingRegion():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getSize():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.getSize():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.isEmpty():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.isEmpty():::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.isEmpty():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Transform):::ENTER
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Transform):::EXIT127
node.cut == null
node.plus == null
node.minus == null
node.attribute.getClass().getName() == java.lang.Boolean.class
return.cut == null
return.plus == null
return.minus == null
return.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Transform):::EXIT141
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Transform):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
(node.attribute.getClass().getName() == java.lang.Boolean.class)  <==>  (return.attribute.getClass().getName() == java.lang.Boolean.class)
(node.attribute.getClass().getName() == java.lang.Boolean.class)  ==>  (node.cut == null)
(node.attribute.getClass().getName() == java.lang.Boolean.class)  ==>  (node.minus == null)
(node.attribute.getClass().getName() == java.lang.Boolean.class)  ==>  (node.plus == null)
(node.attribute.getClass().getName() == java.lang.Boolean.class)  ==>  (return.cut == null)
(node.attribute.getClass().getName() == java.lang.Boolean.class)  ==>  (return.minus == null)
(node.attribute.getClass().getName() == java.lang.Boolean.class)  ==>  (return.plus == null)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  <==>  (return.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (node.plus.attribute has only one value)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (node.plus.attribute.getClass().getName() == java.lang.Boolean.class)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (node.plus.cut == null)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (node.plus.minus == null)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (node.plus.plus == null)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (return.plus.attribute has only one value)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (return.plus.attribute.getClass().getName() == java.lang.Boolean.class)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (return.plus.cut == null)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (return.plus.minus == null)
(node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class)  ==>  (return.plus.plus == null)
node.plus.cut == null
node.plus.plus == null
node.plus.minus == null
node.plus.attribute has only one value
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.plus.cut == null
return.plus.plus == null
return.plus.minus == null
return.plus.attribute has only one value
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.parent == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane):::EXIT
this.hyperplane == orig(this.hyperplane)
this.hyperplane.getClass().getName() == orig(this.hyperplane.getClass().getName())
this.remainingRegion == orig(this.remainingRegion)
this.remainingRegion.getClass().getName() == orig(this.remainingRegion.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree:::OBJECT
this.plus.plus.parent != null
this.plus.minus.parent != null
this.plus.parent != null
this.plus.parent.cut != null
this.plus.parent.plus != null
this.plus.parent.minus != null
this.minus.plus.parent != null
this.minus.minus.parent != null
this.minus.parent != null
this.minus.parent.cut != null
this.minus.parent.plus != null
this.minus.parent.minus != null
this.parent.cut != null
this.parent.plus != null
this.parent.plus.parent != null
this.parent.minus != null
this.parent.minus.parent != null
this.parent.parent.cut != null
this.parent.parent.plus != null
this.parent.parent.minus != null
this.parent.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree():::EXIT
this.cut == null
this.plus == null
this.minus == null
this.parent == null
this.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree(java.lang.Object):::ENTER
attribute != null
attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree(java.lang.Object):::EXIT
this.cut == null
this.plus == null
this.minus == null
this.parent == null
this.attribute != null
this.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, java.lang.Object):::ENTER
cut != null
plus != null
plus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
plus.plus.parent != null
plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
plus.minus.parent != null
plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
plus.parent.cut != null
plus.parent.plus != null
plus.parent.minus != null
plus.parent.parent == null
plus.parent.attribute == null
plus.attribute.getClass().getName() == java.lang.Boolean.class
minus != null
minus.plus.parent != null
minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
minus.minus.parent != null
minus.parent.cut != null
minus.parent.plus != null
minus.parent.minus != null
minus.parent.parent == null
minus.parent.attribute == null
attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, java.lang.Object):::EXIT
plus.cut == orig(plus.cut)
plus.cut.getClass().getName() == orig(plus.cut.getClass().getName())
plus.plus == orig(plus.plus)
plus.plus.cut == orig(plus.plus.cut)
plus.plus.cut.getClass().getName() == orig(plus.plus.cut.getClass().getName())
plus.plus.plus == orig(plus.plus.plus)
plus.plus.minus == orig(plus.plus.minus)
plus.plus.parent == orig(plus.plus.parent)
plus.plus.attribute == orig(plus.plus.attribute)
plus.plus.attribute.getClass().getName() == orig(plus.plus.attribute.getClass().getName())
plus.minus == orig(plus.minus)
plus.minus.cut == orig(plus.minus.cut)
plus.minus.cut.getClass().getName() == orig(plus.minus.cut.getClass().getName())
plus.minus.plus == orig(plus.minus.plus)
plus.minus.minus == orig(plus.minus.minus)
plus.minus.parent == orig(plus.minus.parent)
plus.minus.attribute == orig(plus.minus.attribute)
plus.minus.attribute.getClass().getName() == orig(plus.minus.attribute.getClass().getName())
plus.parent.cut.getClass().getName() == orig(plus.parent.cut.getClass().getName())
plus.parent.parent == orig(plus.parent.parent)
plus.parent.attribute == orig(plus.parent.attribute)
plus.attribute == orig(plus.attribute)
plus.attribute.getClass().getName() == orig(plus.attribute.getClass().getName())
minus.cut == orig(minus.cut)
minus.cut.getClass().getName() == orig(minus.cut.getClass().getName())
minus.plus == orig(minus.plus)
minus.plus.cut == orig(minus.plus.cut)
minus.plus.cut.getClass().getName() == orig(minus.plus.cut.getClass().getName())
minus.plus.plus == orig(minus.plus.plus)
minus.plus.minus == orig(minus.plus.minus)
minus.plus.parent == orig(minus.plus.parent)
minus.plus.attribute == orig(minus.plus.attribute)
minus.plus.attribute.getClass().getName() == orig(minus.plus.attribute.getClass().getName())
minus.minus == orig(minus.minus)
minus.minus.cut == orig(minus.minus.cut)
minus.minus.cut.getClass().getName() == orig(minus.minus.cut.getClass().getName())
minus.minus.plus == orig(minus.minus.plus)
minus.minus.minus == orig(minus.minus.minus)
minus.minus.parent == orig(minus.minus.parent)
minus.minus.attribute == orig(minus.minus.attribute)
minus.minus.attribute.getClass().getName() == orig(minus.minus.attribute.getClass().getName())
minus.parent.cut.getClass().getName() == orig(minus.parent.cut.getClass().getName())
minus.parent.parent == orig(minus.parent.parent)
minus.parent.attribute == orig(minus.parent.attribute)
minus.attribute == orig(minus.attribute)
minus.attribute.getClass().getName() == orig(minus.attribute.getClass().getName())
this.cut != null
this.plus != null
this.plus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.parent == null
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.parent == null
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.parent == null
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
plus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
plus.plus.parent != null
plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
plus.minus.parent != null
plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
plus.parent != null
plus.parent.cut != null
plus.parent.plus != null
plus.parent.minus != null
plus.parent.parent == null
plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
plus.attribute.getClass().getName() == java.lang.Boolean.class
minus.plus.parent != null
minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
minus.minus.parent != null
minus.parent != null
minus.parent.cut != null
minus.parent.plus != null
minus.parent.minus != null
minus.parent.parent == null
minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.copySelf():::ENTER
this.plus.plus.cut == null
this.plus.plus.plus == null
this.plus.plus.minus == null
this.plus.plus.attribute has only one value
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.parent != null
this.plus.parent.attribute == null
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.parent != null
this.minus.parent.attribute == null
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.copySelf():::EXIT182
this.cut == null
this.plus == null
this.minus == null
this.attribute != null
return.cut == null
return.plus == null
return.minus == null
return.attribute != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.copySelf():::EXIT185
this.cut != null
this.plus != null
this.minus != null
this.parent != null
this.attribute == null
return.cut != null
return.plus != null
return.minus != null
return.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.copySelf():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.attribute == orig(this.parent.attribute)
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
(this.cut != null)  <==>  (return.attribute == null)
(this.cut != null)  <==>  (return.cut != null)
(this.cut != null)  <==>  (return.minus != null)
(this.cut != null)  <==>  (return.plus != null)
(this.cut != null)  <==>  (this.attribute == null)
(this.cut != null)  <==>  (this.minus != null)
(this.cut != null)  <==>  (this.plus != null)
(this.cut != null)  ==>  (return.minus.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut != null)  ==>  (return.minus.parent != null)
(this.cut != null)  ==>  (return.plus.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut != null)  ==>  (return.plus.parent != null)
(this.cut != null)  ==>  (this.minus.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut != null)  ==>  (this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut != null)  ==>  (this.minus.minus.parent != null)
(this.cut != null)  ==>  (this.minus.parent != null)
(this.cut != null)  ==>  (this.minus.parent.attribute == null)
(this.cut != null)  ==>  (this.minus.parent.cut != null)
(this.cut != null)  ==>  (this.minus.parent.minus != null)
(this.cut != null)  ==>  (this.minus.parent.parent != null)
(this.cut != null)  ==>  (this.minus.parent.plus != null)
(this.cut != null)  ==>  (this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut != null)  ==>  (this.minus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class)
(this.cut != null)  ==>  (this.minus.plus.parent != null)
(this.cut != null)  ==>  (this.parent != null)
(this.cut != null)  ==>  (this.plus.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut != null)  ==>  (this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut != null)  ==>  (this.plus.parent != null)
(this.cut != null)  ==>  (this.plus.parent.attribute == null)
(this.cut != null)  ==>  (this.plus.parent.cut != null)
(this.cut != null)  ==>  (this.plus.parent.minus != null)
(this.cut != null)  ==>  (this.plus.parent.parent != null)
(this.cut != null)  ==>  (this.plus.parent.plus != null)
(this.cut != null)  ==>  (this.plus.plus.attribute has only one value)
(this.cut != null)  ==>  (this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut != null)  ==>  (this.plus.plus.cut == null)
(this.cut != null)  ==>  (this.plus.plus.minus == null)
(this.cut != null)  ==>  (this.plus.plus.plus == null)
(this.cut == null)  <==>  (return.attribute != null)
(this.cut == null)  <==>  (return.cut == null)
(this.cut == null)  <==>  (return.minus == null)
(this.cut == null)  <==>  (return.plus == null)
(this.cut == null)  <==>  (this.attribute != null)
(this.cut == null)  <==>  (this.minus == null)
(this.cut == null)  <==>  (this.plus == null)
(this.cut == null)  ==>  (return.attribute.getClass().getName() == java.lang.Boolean.class)
(this.cut == null)  ==>  (this.attribute.getClass().getName() == java.lang.Boolean.class)
this.plus.plus.cut == null
this.plus.plus.plus == null
this.plus.plus.minus == null
this.plus.plus.attribute has only one value
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.parent != null
this.plus.parent.attribute == null
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.parent != null
this.minus.parent.attribute == null
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute.getClass().getName() == java.lang.Boolean.class
return != null
return.plus.parent != null
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.parent != null
return.minus.attribute.getClass().getName() == java.lang.Boolean.class
return.parent == null
return.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getAttribute():::ENTER
this.plus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.plus.plus.attribute != null
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getAttribute():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.parent.attribute.getClass().getName() == orig(this.plus.parent.attribute.getClass().getName())
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.parent.attribute.getClass().getName() == orig(this.minus.parent.attribute.getClass().getName())
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.plus.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.plus.plus.attribute != null
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getCut():::ENTER
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getCut():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.parent.attribute.getClass().getName() == orig(this.plus.parent.attribute.getClass().getName())
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.parent.attribute.getClass().getName() == orig(this.minus.parent.attribute.getClass().getName())
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getMinus():::ENTER
this.cut != null
this.plus != null
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getMinus():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.parent.attribute.getClass().getName() == orig(this.plus.parent.attribute.getClass().getName())
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.parent.attribute.getClass().getName() == orig(this.minus.parent.attribute.getClass().getName())
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.cut != null
this.plus != null
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return != null
return.plus.parent != null
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.parent != null
return.parent != null
return.parent.cut != null
return.parent.plus != null
return.parent.minus != null
return.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getParent():::ENTER
this.cut == null
this.plus == null
this.minus == null
this.parent != null
this.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.minus.attribute == null
this.parent.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getParent():::EXIT
this.cut == orig(this.cut)
this.plus == orig(this.plus)
this.minus == orig(this.minus)
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.attribute == orig(this.parent.attribute)
this.attribute == orig(this.attribute)
this.cut == null
this.plus == null
this.minus == null
this.parent != null
this.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.minus.attribute == null
this.parent.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute == null
return != null
return.cut != null
return.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.plus != null
return.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.plus.parent != null
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus != null
return.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.minus.parent != null
return.minus.attribute == null
return.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.parent.attribute == null
return.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getPlus():::ENTER
this.cut != null
this.plus != null
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.getPlus():::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.parent.attribute == orig(this.plus.parent.attribute)
this.plus.parent.attribute.getClass().getName() == orig(this.plus.parent.attribute.getClass().getName())
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.parent.attribute == orig(this.minus.parent.attribute)
this.minus.parent.attribute.getClass().getName() == orig(this.minus.parent.attribute.getClass().getName())
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.cut != null
this.plus != null
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus != null
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return != null
return.plus.parent != null
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.parent != null
return.minus.attribute.getClass().getName() == java.lang.Boolean.class
return.parent != null
return.parent.cut != null
return.parent.plus != null
return.parent.minus != null
return.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::ENTER
this.cut == null
this.plus == null
this.minus == null
this.parent.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.cut == null
this.parent.minus.plus == null
this.parent.minus.minus == null
this.parent.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute.getClass().getName() == java.lang.Boolean.class
hyperplane != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT168
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT168;condition="return == true"
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute == orig(this.parent.plus.attribute)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute == orig(this.parent.minus.attribute)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.attribute == orig(this.parent.attribute)
this.attribute == orig(this.attribute)
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.cut != null
this.plus != null
this.plus.cut == null
this.plus.plus == null
this.plus.minus == null
this.plus.parent.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.attribute == null
this.minus != null
this.minus.cut == null
this.minus.plus == null
this.minus.minus == null
this.minus.parent.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.attribute == null
this.parent.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
this.parent.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.parent.attribute == null
this.parent.attribute == null
this.attribute.getClass().getName() == java.lang.Boolean.class
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.setAttribute(java.lang.Object):::ENTER
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.parent.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTree.setAttribute(java.lang.Object):::EXIT
this.cut == orig(this.cut)
this.cut.getClass().getName() == orig(this.cut.getClass().getName())
this.plus == orig(this.plus)
this.plus.cut == orig(this.plus.cut)
this.plus.cut.getClass().getName() == orig(this.plus.cut.getClass().getName())
this.plus.plus == orig(this.plus.plus)
this.plus.plus.cut == orig(this.plus.plus.cut)
this.plus.plus.cut.getClass().getName() == orig(this.plus.plus.cut.getClass().getName())
this.plus.plus.plus == orig(this.plus.plus.plus)
this.plus.plus.minus == orig(this.plus.plus.minus)
this.plus.plus.parent == orig(this.plus.plus.parent)
this.plus.plus.attribute == orig(this.plus.plus.attribute)
this.plus.plus.attribute.getClass().getName() == orig(this.plus.plus.attribute.getClass().getName())
this.plus.minus == orig(this.plus.minus)
this.plus.minus.cut == orig(this.plus.minus.cut)
this.plus.minus.cut.getClass().getName() == orig(this.plus.minus.cut.getClass().getName())
this.plus.minus.plus == orig(this.plus.minus.plus)
this.plus.minus.minus == orig(this.plus.minus.minus)
this.plus.minus.parent == orig(this.plus.minus.parent)
this.plus.minus.attribute == orig(this.plus.minus.attribute)
this.plus.minus.attribute.getClass().getName() == orig(this.plus.minus.attribute.getClass().getName())
this.plus.parent == orig(this.plus.parent)
this.plus.parent.cut == orig(this.plus.parent.cut)
this.plus.parent.cut.getClass().getName() == orig(this.plus.parent.cut.getClass().getName())
this.plus.parent.plus == orig(this.plus.parent.plus)
this.plus.parent.minus == orig(this.plus.parent.minus)
this.plus.parent.parent == orig(this.plus.parent.parent)
this.plus.attribute == orig(this.plus.attribute)
this.plus.attribute.getClass().getName() == orig(this.plus.attribute.getClass().getName())
this.minus == orig(this.minus)
this.minus.cut == orig(this.minus.cut)
this.minus.cut.getClass().getName() == orig(this.minus.cut.getClass().getName())
this.minus.plus == orig(this.minus.plus)
this.minus.plus.cut == orig(this.minus.plus.cut)
this.minus.plus.cut.getClass().getName() == orig(this.minus.plus.cut.getClass().getName())
this.minus.plus.plus == orig(this.minus.plus.plus)
this.minus.plus.minus == orig(this.minus.plus.minus)
this.minus.plus.parent == orig(this.minus.plus.parent)
this.minus.plus.attribute == orig(this.minus.plus.attribute)
this.minus.plus.attribute.getClass().getName() == orig(this.minus.plus.attribute.getClass().getName())
this.minus.minus == orig(this.minus.minus)
this.minus.minus.cut == orig(this.minus.minus.cut)
this.minus.minus.cut.getClass().getName() == orig(this.minus.minus.cut.getClass().getName())
this.minus.minus.plus == orig(this.minus.minus.plus)
this.minus.minus.minus == orig(this.minus.minus.minus)
this.minus.minus.parent == orig(this.minus.minus.parent)
this.minus.minus.attribute == orig(this.minus.minus.attribute)
this.minus.minus.attribute.getClass().getName() == orig(this.minus.minus.attribute.getClass().getName())
this.minus.parent == orig(this.minus.parent)
this.minus.parent.cut == orig(this.minus.parent.cut)
this.minus.parent.cut.getClass().getName() == orig(this.minus.parent.cut.getClass().getName())
this.minus.parent.plus == orig(this.minus.parent.plus)
this.minus.parent.minus == orig(this.minus.parent.minus)
this.minus.parent.parent == orig(this.minus.parent.parent)
this.minus.attribute == orig(this.minus.attribute)
this.minus.attribute.getClass().getName() == orig(this.minus.attribute.getClass().getName())
this.parent == orig(this.parent)
this.parent.cut == orig(this.parent.cut)
this.parent.cut.getClass().getName() == orig(this.parent.cut.getClass().getName())
this.parent.plus == orig(this.parent.plus)
this.parent.plus.cut == orig(this.parent.plus.cut)
this.parent.plus.cut.getClass().getName() == orig(this.parent.plus.cut.getClass().getName())
this.parent.plus.plus == orig(this.parent.plus.plus)
this.parent.plus.minus == orig(this.parent.plus.minus)
this.parent.plus.parent == orig(this.parent.plus.parent)
this.parent.plus.attribute.getClass().getName() == orig(this.parent.plus.attribute.getClass().getName())
this.parent.minus == orig(this.parent.minus)
this.parent.minus.cut == orig(this.parent.minus.cut)
this.parent.minus.cut.getClass().getName() == orig(this.parent.minus.cut.getClass().getName())
this.parent.minus.plus == orig(this.parent.minus.plus)
this.parent.minus.minus == orig(this.parent.minus.minus)
this.parent.minus.parent == orig(this.parent.minus.parent)
this.parent.minus.attribute.getClass().getName() == orig(this.parent.minus.attribute.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.cut == orig(this.parent.parent.cut)
this.parent.parent.cut.getClass().getName() == orig(this.parent.parent.cut.getClass().getName())
this.parent.parent.plus == orig(this.parent.parent.plus)
this.parent.parent.minus == orig(this.parent.parent.minus)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.attribute == orig(this.parent.parent.attribute)
this.parent.parent.attribute.getClass().getName() == orig(this.parent.parent.attribute.getClass().getName())
this.parent.attribute == orig(this.parent.attribute)
this.parent.attribute.getClass().getName() == orig(this.parent.attribute.getClass().getName())
this.attribute.getClass().getName() == orig(this.attribute.getClass().getName())
this.plus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.plus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.plus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.minus.attribute.getClass().getName() == java.lang.Boolean.class
this.minus.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.minus.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order:::CLASS
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.Order(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.Order(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.values():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.values():::EXIT
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES)
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
return[] contains no nulls and has only one value, of length 6
size(return[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute:::OBJECT
this.plusInside.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.BoundaryAttribute(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::ENTER
plusInside.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.BoundaryAttribute(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.getPlusInside():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.getPlusInside():::EXIT
this.plusOutside == orig(this.plusOutside)
this.plusOutside.getClass().getName() == orig(this.plusOutside.getClass().getName())
this.plusInside == orig(this.plusInside)
this.plusInside.getClass().getName() == orig(this.plusInside.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.getPlusOutside():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.getPlusOutside():::EXIT
this.plusOutside == orig(this.plusOutside)
this.plusOutside.getClass().getName() == orig(this.plusOutside.getClass().getName())
this.plusInside == orig(this.plusInside)
this.plusInside.getClass().getName() == orig(this.plusInside.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.BoundarySizeVisitor():::EXIT
this.boundarySize == 0.0
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.getSize():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.getSize():::EXIT
this.boundarySize == orig(this.boundarySize)
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
this.boundarySize > orig(this.boundarySize)
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.boundarySize == orig(this.boundarySize)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
this.boundarySize == orig(this.boundarySize)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.parent.attribute.getClass().getName() == orig(node.parent.attribute.getClass().getName())
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
node.parent.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
node.attribute.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.class
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.Characterization():::EXIT
this.in == null
this.out == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.add(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::ENTER
sub != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.add(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean):::EXIT
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out.getClass().getName() == orig(this.out.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.getIn():::ENTER
this.in != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.getIn():::EXIT
this.in == orig(this.in)
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out == orig(this.out)
this.out.getClass().getName() == orig(this.out.getClass().getName())
this.in != null
return != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.getOut():::ENTER
this.out != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.getOut():::EXIT
this.in == orig(this.in)
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out == orig(this.out)
this.out.getClass().getName() == orig(this.out.getClass().getName())
this.out != null
return != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasIn():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasIn():::EXIT
this.in == orig(this.in)
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out == orig(this.out)
this.out.getClass().getName() == orig(this.out.getClass().getName())
(this.in != null)  <==>  (return == true)
(this.in == null)  <==>  (return == false)
(this.in == null)  ==>  (this.out != null)
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasIn():::EXIT;condition="return == true"
this.in != null
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasIn():::EXIT;condition="not(return == true)"
this.in == null
this.out != null
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasOut():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasOut():::EXIT
this.in == orig(this.in)
this.in.getClass().getName() == orig(this.in.getClass().getName())
this.out == orig(this.out)
this.out.getClass().getName() == orig(this.out.getClass().getName())
(this.out != null)  <==>  (return == true)
(this.out == null)  <==>  (return == false)
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasOut():::EXIT;condition="return == true"
this.out != null
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.Characterization.hasOut():::EXIT;condition="not(return == true)"
this.out == null
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.Region$Location:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.Region$Location.Location(java.lang.String, int):::ENTER
$hidden$1.toString one of { "BOUNDARY", "INSIDE", "OUTSIDE" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.Region$Location.Location(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "BOUNDARY", "INSIDE", "OUTSIDE" }
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.NodesCleaner(org.apache.commons.math3.geometry.partitioning.RegionFactory):::ENTER
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.NodesCleaner(org.apache.commons.math3.geometry.partitioning.RegionFactory):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.cut == null
node.plus == null
node.minus == null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
node.cut == orig(node.cut)
node.plus == orig(node.plus)
node.minus == orig(node.minus)
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.attribute.getClass().getName() == orig(node.attribute.getClass().getName())
node.cut == null
node.plus == null
node.minus == null
node.parent.attribute == null
node.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::ENTER
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute == null
node.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner.visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
node.cut == orig(node.cut)
node.cut.getClass().getName() == orig(node.cut.getClass().getName())
node.plus == orig(node.plus)
node.plus.cut == orig(node.plus.cut)
node.plus.cut.getClass().getName() == orig(node.plus.cut.getClass().getName())
node.plus.plus == orig(node.plus.plus)
node.plus.minus == orig(node.plus.minus)
node.plus.parent == orig(node.plus.parent)
node.plus.attribute == orig(node.plus.attribute)
node.plus.attribute.getClass().getName() == orig(node.plus.attribute.getClass().getName())
node.minus == orig(node.minus)
node.minus.cut == orig(node.minus.cut)
node.minus.cut.getClass().getName() == orig(node.minus.cut.getClass().getName())
node.minus.plus == orig(node.minus.plus)
node.minus.minus == orig(node.minus.minus)
node.minus.parent == orig(node.minus.parent)
node.minus.attribute == orig(node.minus.attribute)
node.minus.attribute.getClass().getName() == orig(node.minus.attribute.getClass().getName())
node.parent == orig(node.parent)
node.parent.cut == orig(node.parent.cut)
node.parent.cut.getClass().getName() == orig(node.parent.cut.getClass().getName())
node.parent.plus == orig(node.parent.plus)
node.parent.minus == orig(node.parent.minus)
node.parent.parent == orig(node.parent.parent)
node.parent.attribute == orig(node.parent.attribute)
node.attribute == orig(node.attribute)
node.plus.attribute.getClass().getName() == java.lang.Boolean.class
node.minus.attribute.getClass().getName() == java.lang.Boolean.class
node.parent.attribute == null
node.attribute == null
return has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_MINUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.PLUS_SUB_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_PLUS_SUB has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.MINUS_SUB_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_PLUS_MINUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.SUB_MINUS_PLUS has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[].class
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order, org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order]
org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.class
size(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order.$VALUES[]) == 6
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.UnionMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.UnionMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean):::ENTER
leaf.cut == null
leaf.plus == null
leaf.minus == null
leaf.parent.attribute == null
leaf.attribute.getClass().getName() == java.lang.Boolean.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent.attribute == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.plus.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.minus.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.parent.attribute == null
parentTree.attribute == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean):::EXIT167
leaf.parent.minus == orig(leaf.parent.minus)
tree.cut == orig(tree.cut)
tree.plus.cut == orig(tree.plus.cut)
tree.minus.cut == orig(tree.minus.cut)
tree.parent == orig(tree.parent)
tree.parent.plus == orig(tree.parent.plus)
tree.parent.parent == orig(tree.parent.parent)
parentTree.plus == orig(parentTree.plus)
parentTree.plus.cut == orig(parentTree.plus.cut)
parentTree.plus.plus == orig(parentTree.plus.plus)
parentTree.plus.minus == orig(parentTree.plus.minus)
parentTree.plus.attribute == orig(parentTree.plus.attribute)
leaf.attribute has only one value
tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.plus.cut == null
tree.plus.plus == null
tree.plus.minus == null
tree.plus.attribute has only one value
tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
tree.minus.attribute == null
parentTree.minus.cut == null
parentTree.minus.plus == null
parentTree.minus.minus == null
parentTree.minus.attribute has only one value
return.cut == null
return.plus == null
return.minus == null
return.attribute has only one value
orig(parentTree.minus.cut.getClass().getName()) == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class
orig(isPlusChild) == false
orig(leafFromInstance) == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean):::EXIT171
leaf.parent == orig(leaf.parent)
leaf.parent.parent == orig(leaf.parent.parent)
leaf.attribute has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger.merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean):::EXIT
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
leaf.cut == orig(leaf.cut)
leaf.plus == orig(leaf.plus)
leaf.minus == orig(leaf.minus)
leaf.parent.cut == orig(leaf.parent.cut)
leaf.parent.cut.getClass().getName() == orig(leaf.parent.cut.getClass().getName())
leaf.parent.attribute == orig(leaf.parent.attribute)
leaf.attribute == orig(leaf.attribute)
leaf.attribute.getClass().getName() == orig(leaf.attribute.getClass().getName())
tree.cut.getClass().getName() == orig(tree.cut.getClass().getName())
tree.plus == orig(tree.plus)
tree.plus.cut.getClass().getName() == orig(tree.plus.cut.getClass().getName())
tree.plus.plus == orig(tree.plus.plus)
tree.plus.minus == orig(tree.plus.minus)
tree.plus.parent == orig(tree.plus.parent)
tree.plus.attribute == orig(tree.plus.attribute)
tree.plus.attribute.getClass().getName() == orig(tree.plus.attribute.getClass().getName())
tree.minus == orig(tree.minus)
tree.minus.cut.getClass().getName() == orig(tree.minus.cut.getClass().getName())
tree.minus.plus == orig(tree.minus.plus)
tree.minus.minus == orig(tree.minus.minus)
tree.minus.parent == orig(tree.minus.parent)
tree.minus.attribute == orig(tree.minus.attribute)
tree.minus.attribute.getClass().getName() == orig(tree.minus.attribute.getClass().getName())
tree.parent.cut == orig(tree.parent.cut)
tree.parent.cut.getClass().getName() == orig(tree.parent.cut.getClass().getName())
tree.parent.attribute == orig(tree.parent.attribute)
tree.attribute == orig(tree.attribute)
tree.attribute.getClass().getName() == orig(tree.attribute.getClass().getName())
parentTree.cut == orig(parentTree.cut)
parentTree.cut.getClass().getName() == orig(parentTree.cut.getClass().getName())
parentTree.plus.cut.getClass().getName() == orig(parentTree.plus.cut.getClass().getName())
parentTree.plus.parent == orig(parentTree.plus.parent)
parentTree.plus.attribute.getClass().getName() == orig(parentTree.plus.attribute.getClass().getName())
parentTree.minus.cut.getClass().getName() == orig(parentTree.minus.cut.getClass().getName())
parentTree.minus.parent == orig(parentTree.minus.parent)
parentTree.minus.attribute.getClass().getName() == orig(parentTree.minus.attribute.getClass().getName())
parentTree.parent == orig(parentTree.parent)
parentTree.parent.cut == orig(parentTree.parent.cut)
parentTree.parent.cut.getClass().getName() == orig(parentTree.parent.cut.getClass().getName())
parentTree.parent.plus == orig(parentTree.parent.plus)
parentTree.parent.minus == orig(parentTree.parent.minus)
parentTree.parent.parent == orig(parentTree.parent.parent)
parentTree.parent.attribute == orig(parentTree.parent.attribute)
parentTree.attribute == orig(parentTree.attribute)
(parentTree.minus.attribute has only one value)  ==>  (leaf.parent.minus == orig(leaf.parent.minus))
(parentTree.minus.attribute has only one value)  ==>  (orig(isPlusChild) == false)
(parentTree.minus.attribute has only one value)  ==>  (orig(leafFromInstance) == true)
(parentTree.minus.attribute has only one value)  ==>  (orig(parentTree.minus.cut.getClass().getName()) == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class)
(parentTree.minus.attribute has only one value)  ==>  (orig(tree.plus.cut) == null)
(parentTree.minus.attribute has only one value)  ==>  (parentTree.minus.cut == null)
(parentTree.minus.attribute has only one value)  ==>  (parentTree.minus.minus == null)
(parentTree.minus.attribute has only one value)  ==>  (parentTree.minus.plus == null)
(parentTree.minus.attribute has only one value)  ==>  (parentTree.plus == orig(parentTree.plus))
(parentTree.minus.attribute has only one value)  ==>  (parentTree.plus.attribute == orig(parentTree.plus.attribute))
(parentTree.minus.attribute has only one value)  ==>  (parentTree.plus.cut == orig(parentTree.plus.cut))
(parentTree.minus.attribute has only one value)  ==>  (parentTree.plus.minus == orig(parentTree.plus.minus))
(parentTree.minus.attribute has only one value)  ==>  (parentTree.plus.plus == orig(parentTree.plus.plus))
(parentTree.minus.attribute has only one value)  ==>  (return.attribute has only one value)
(parentTree.minus.attribute has only one value)  ==>  (return.cut == null)
(parentTree.minus.attribute has only one value)  ==>  (return.minus == null)
(parentTree.minus.attribute has only one value)  ==>  (return.plus == null)
(parentTree.minus.attribute has only one value)  ==>  (tree.cut == orig(tree.cut))
(parentTree.minus.attribute has only one value)  ==>  (tree.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class)
(parentTree.minus.attribute has only one value)  ==>  (tree.minus.attribute == null)
(parentTree.minus.attribute has only one value)  ==>  (tree.minus.cut == orig(tree.minus.cut))
(parentTree.minus.attribute has only one value)  ==>  (tree.minus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.SubPlane.class)
(parentTree.minus.attribute has only one value)  ==>  (tree.parent == orig(tree.parent))
(parentTree.minus.attribute has only one value)  ==>  (tree.parent.parent == orig(tree.parent.parent))
(parentTree.minus.attribute has only one value)  ==>  (tree.parent.plus == orig(tree.parent.plus))
(parentTree.minus.attribute has only one value)  ==>  (tree.plus.attribute has only one value)
(parentTree.minus.attribute has only one value)  ==>  (tree.plus.cut == null)
(parentTree.minus.attribute has only one value)  ==>  (tree.plus.cut == orig(tree.plus.cut))
(parentTree.minus.attribute has only one value)  ==>  (tree.plus.minus == null)
(parentTree.minus.attribute has only one value)  ==>  (tree.plus.plus == null)
leaf.cut == null
leaf.plus == null
leaf.minus == null
leaf.parent.attribute == null
leaf.attribute.getClass().getName() == java.lang.Boolean.class
tree.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
tree.plus.attribute.getClass().getName() == java.lang.Boolean.class
tree.minus.attribute.getClass().getName() == java.lang.Boolean.class
tree.parent.attribute == null
tree.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.plus.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.minus.attribute.getClass().getName() == java.lang.Boolean.class
parentTree.parent.attribute == null
parentTree.attribute == null
return.plus.cut.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.SubLine.class
return.plus.attribute.getClass().getName() == java.lang.Boolean.class
return.minus.attribute.getClass().getName() == java.lang.Boolean.class
return.parent.attribute == null
return.attribute.getClass().getName() == java.lang.Boolean.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.RegionFactory():::EXIT
this.nodeCleaner != null
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[]):::ENTER
hyperplanes.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Hyperplane[].class
size(hyperplanes[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[]):::EXIT63
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[]):::EXIT
this.nodeCleaner == orig(this.nodeCleaner)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
hyperplanes[] == orig(hyperplanes[])
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.union(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.RegionFactory.union(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region):::EXIT
this.nodeCleaner == orig(this.nodeCleaner)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this)
org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner == orig(org.apache.commons.math3.geometry.partitioning.RegionFactory.this.nodeCleaner)
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side:::CLASS
org.apache.commons.math3.geometry.partitioning.Side.PLUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.MINUS has only one value
org.apache.commons.math3.geometry.partitioning.Side.BOTH has only one value
org.apache.commons.math3.geometry.partitioning.Side.HYPER has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side, org.apache.commons.math3.geometry.partitioning.Side]
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.Side.class
size(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side.Side(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side.Side(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side.values():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.Side.values():::EXIT
org.apache.commons.math3.geometry.partitioning.Side.PLUS == orig(org.apache.commons.math3.geometry.partitioning.Side.PLUS)
org.apache.commons.math3.geometry.partitioning.Side.MINUS == orig(org.apache.commons.math3.geometry.partitioning.Side.MINUS)
org.apache.commons.math3.geometry.partitioning.Side.BOTH == orig(org.apache.commons.math3.geometry.partitioning.Side.BOTH)
org.apache.commons.math3.geometry.partitioning.Side.HYPER == orig(org.apache.commons.math3.geometry.partitioning.Side.HYPER)
org.apache.commons.math3.geometry.partitioning.Side.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.Side.$VALUES)
org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.Side.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.Side.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.Side.$VALUES[])
return.getClass().getName() == org.apache.commons.math3.geometry.partitioning.Side[].class
return[] contains no nulls and has only one value, of length 4
size(return[]) == 4
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane):::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.getMinus():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.getMinus():::EXIT
this.plus == orig(this.plus)
this.plus.getClass().getName() == orig(this.plus.getClass().getName())
this.minus == orig(this.minus)
this.minus.getClass().getName() == orig(this.minus.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.getPlus():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane.getPlus():::EXIT
this.plus == orig(this.plus)
this.plus.getClass().getName() == orig(this.plus.getClass().getName())
this.minus == orig(this.minus)
this.minus.getClass().getName() == orig(this.minus.getClass().getName())
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node:::OBJECT
this.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.left.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.left.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.left.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
this.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.right.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.right.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.right.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.parent.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == null
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.Node(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, java.lang.Comparable, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node):::ENTER
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == null
element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.left.left == null
parent.left.right == null
parent.left.skew has only one value
parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.right.left == null
parent.right.right == null
parent.right.skew has only one value
parent.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.Node(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, java.lang.Comparable, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node):::EXIT
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
parent.element == orig(parent.element)
parent.element.getClass().getName() == orig(parent.element.getClass().getName())
parent.left == orig(parent.left)
parent.left.element == orig(parent.left.element)
parent.left.element.getClass().getName() == orig(parent.left.element.getClass().getName())
parent.left.left == orig(parent.left.left)
parent.left.right == orig(parent.left.right)
parent.left.parent == orig(parent.left.parent)
parent.left.skew == orig(parent.left.skew)
parent.right == orig(parent.right)
parent.right.element == orig(parent.right.element)
parent.right.element.getClass().getName() == orig(parent.right.element.getClass().getName())
parent.right.left == orig(parent.right.left)
parent.right.right == orig(parent.right.right)
parent.right.parent == orig(parent.right.parent)
parent.right.skew == orig(parent.right.skew)
parent.parent == orig(parent.parent)
parent.parent.element == orig(parent.parent.element)
parent.parent.element.getClass().getName() == orig(parent.parent.element.getClass().getName())
parent.parent.left == orig(parent.parent.left)
parent.parent.right == orig(parent.parent.right)
parent.parent.parent == orig(parent.parent.parent)
parent.parent.skew == orig(parent.parent.skew)
parent.skew == orig(parent.skew)
this.left == null
this.right == null
this.parent.left.left == null
this.parent.left.right == null
this.parent.left.skew has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.skew has only one value
this.skew has only one value
parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.left.left == null
parent.left.right == null
parent.left.skew has only one value
parent.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
parent.right.left == null
parent.right.right == null
parent.right.skew has only one value
parent.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) (elementwise)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.delete():::ENTER
this.left.left.left == null
this.left.right.left == null
this.left.right.right == null
this.left.right.skew has only one value
this.right.left.left == null
this.right.right.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.delete():::EXIT403
this.left.parent.skew has only one value
this.right.left.right == null
this.right.left.skew has only one value
this.right.right.left == null
this.right.right.right == null
this.right.parent.skew has only one value
this.parent.left.skew has only one value
this.parent.right.skew has only one value
this.parent.parent.skew has only one value
this.parent.skew has only one value
this.skew has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.delete():::EXIT410
this.left.left.right == orig(this.left.left.right)
this.left.left.parent == orig(this.left.left.parent)
this.left.left.skew == orig(this.left.left.skew)
this.right.left.element == orig(this.right.left.element)
this.right.left.right == orig(this.right.left.right)
this.right.left.parent == orig(this.right.left.parent)
this.right.left.skew == orig(this.right.left.skew)
this.right.right.parent == orig(this.right.right.parent)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.left.right == null
orig(this.left.left.right) == null
orig(this.left.left.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.delete():::EXIT
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left.element == orig(this.left.left.element)
this.left.left.element.getClass().getName() == orig(this.left.left.element.getClass().getName())
this.left.left.left == orig(this.left.left.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.left.right.element.getClass().getName() == orig(this.left.right.element.getClass().getName())
this.left.right.left == orig(this.left.right.left)
this.left.right.right == orig(this.left.right.right)
this.left.right.parent == orig(this.left.right.parent)
this.left.right.skew == orig(this.left.right.skew)
this.left.parent == orig(this.left.parent)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.parent == orig(this.left.parent.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left.element.getClass().getName() == orig(this.right.left.element.getClass().getName())
this.right.left.left == orig(this.right.left.left)
this.right.right == orig(this.right.right)
this.right.right.element == orig(this.right.right.element)
this.right.right.element.getClass().getName() == orig(this.right.right.element.getClass().getName())
this.right.right.left == orig(this.right.right.left)
this.right.right.right == orig(this.right.right.right)
this.right.right.skew == orig(this.right.right.skew)
this.right.parent == orig(this.right.parent)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.parent == orig(this.right.parent.parent)
this.parent == orig(this.parent)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
this.left.left.left == null
this.left.left.right == null
this.left.left.skew has only one value
this.left.right.left == null
this.left.right.right == null
this.left.right.skew has only one value
this.right.left.left == null
this.right.right.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getElement():::ENTER
this.left.left.left == null
this.left.right.left == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getElement():::EXIT
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left == orig(this.left.left)
this.left.left.element == orig(this.left.left.element)
this.left.left.element.getClass().getName() == orig(this.left.left.element.getClass().getName())
this.left.left.left == orig(this.left.left.left)
this.left.left.right == orig(this.left.left.right)
this.left.left.parent == orig(this.left.left.parent)
this.left.left.skew == orig(this.left.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.left.right == orig(this.left.right)
this.left.right.element == orig(this.left.right.element)
this.left.right.element.getClass().getName() == orig(this.left.right.element.getClass().getName())
this.left.right.left == orig(this.left.right.left)
this.left.right.right == orig(this.left.right.right)
this.left.right.parent == orig(this.left.right.parent)
this.left.right.skew == orig(this.left.right.skew)
this.left.parent == orig(this.left.parent)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.left.parent.parent == orig(this.left.parent.parent)
this.left.parent.skew == orig(this.left.parent.skew)
this.left.skew == orig(this.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left == orig(this.right.left)
this.right.left.element == orig(this.right.left.element)
this.right.left.element.getClass().getName() == orig(this.right.left.element.getClass().getName())
this.right.left.left == orig(this.right.left.left)
this.right.left.right == orig(this.right.left.right)
this.right.left.parent == orig(this.right.left.parent)
this.right.left.skew == orig(this.right.left.skew)
this.right.right == orig(this.right.right)
this.right.right.element == orig(this.right.right.element)
this.right.right.element.getClass().getName() == orig(this.right.right.element.getClass().getName())
this.right.right.left == orig(this.right.right.left)
this.right.right.right == orig(this.right.right.right)
this.right.right.parent == orig(this.right.right.parent)
this.right.right.skew == orig(this.right.right.skew)
this.right.parent == orig(this.right.parent)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.right.parent.parent == orig(this.right.parent.parent)
this.right.parent.skew == orig(this.right.parent.skew)
this.right.skew == orig(this.right.skew)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.left.skew == orig(this.parent.left.skew)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.right.skew == orig(this.parent.right.skew)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.skew == orig(this.parent.parent.skew)
this.parent.skew == orig(this.parent.skew)
this.skew == orig(this.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
this.left.left.left == null
this.left.right.left == null
return.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getLargest():::ENTER
this.left.left == null
this.left.right.left == null
this.left.right.right == null
this.left.right.skew has only one value
this.right.left == null
this.right.right == null
this.right.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getLargest():::EXIT
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left == orig(this.left.left)
this.left.right == orig(this.left.right)
this.left.right.element == orig(this.left.right.element)
this.left.right.element.getClass().getName() == orig(this.left.right.element.getClass().getName())
this.left.right.left == orig(this.left.right.left)
this.left.right.right == orig(this.left.right.right)
this.left.right.parent == orig(this.left.right.parent)
this.left.right.skew == orig(this.left.right.skew)
this.left.parent == orig(this.left.parent)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.left.parent.parent == orig(this.left.parent.parent)
this.left.parent.skew == orig(this.left.parent.skew)
this.left.skew == orig(this.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.parent == orig(this.right.parent)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.right.parent.parent == orig(this.right.parent.parent)
this.right.parent.skew == orig(this.right.parent.skew)
this.right.skew == orig(this.right.skew)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.left.skew == orig(this.parent.left.skew)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.right.skew == orig(this.parent.right.skew)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.skew == orig(this.parent.parent.skew)
this.parent.skew == orig(this.parent.skew)
this.skew == orig(this.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
this.left.left == null
this.left.right.left == null
this.left.right.right == null
this.left.right.skew has only one value
this.right.left == null
this.right.right == null
this.right.skew has only one value
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left.left == null
return.left.right == null
return.left.skew has only one value
return.right == null
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::ENTER
this.left.left.left == null
this.left.right.left == null
this.left.right.right == null
this.left.right.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::EXIT330
return.left == null
return.right.left == null
return.right.right == null
return.right.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::EXIT336
this.left.left == null
this.left.right == null
this.left.parent.right == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::EXIT340
this.left.left == null
this.left.right == null
this.left.parent.right == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right == null
this.parent.left.skew has only one value
this.parent.right.right == null
this.parent.parent.parent == null
return == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getNext():::EXIT
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left == orig(this.left.left)
this.left.left.element == orig(this.left.left.element)
this.left.left.element.getClass().getName() == orig(this.left.left.element.getClass().getName())
this.left.left.left == orig(this.left.left.left)
this.left.left.right == orig(this.left.left.right)
this.left.left.parent == orig(this.left.left.parent)
this.left.left.skew == orig(this.left.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.left.right == orig(this.left.right)
this.left.right.element == orig(this.left.right.element)
this.left.right.element.getClass().getName() == orig(this.left.right.element.getClass().getName())
this.left.right.left == orig(this.left.right.left)
this.left.right.right == orig(this.left.right.right)
this.left.right.parent == orig(this.left.right.parent)
this.left.right.skew == orig(this.left.right.skew)
this.left.parent == orig(this.left.parent)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.left.parent.parent == orig(this.left.parent.parent)
this.left.parent.skew == orig(this.left.parent.skew)
this.left.skew == orig(this.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left == orig(this.right.left)
this.right.left.element == orig(this.right.left.element)
this.right.left.element.getClass().getName() == orig(this.right.left.element.getClass().getName())
this.right.left.left == orig(this.right.left.left)
this.right.left.right == orig(this.right.left.right)
this.right.left.parent == orig(this.right.left.parent)
this.right.left.skew == orig(this.right.left.skew)
this.right.right == orig(this.right.right)
this.right.right.element == orig(this.right.right.element)
this.right.right.element.getClass().getName() == orig(this.right.right.element.getClass().getName())
this.right.right.left == orig(this.right.right.left)
this.right.right.right == orig(this.right.right.right)
this.right.right.parent == orig(this.right.right.parent)
this.right.right.skew == orig(this.right.right.skew)
this.right.parent == orig(this.right.parent)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.right.parent.parent == orig(this.right.parent.parent)
this.right.parent.skew == orig(this.right.parent.skew)
this.right.skew == orig(this.right.skew)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.left.skew == orig(this.parent.left.skew)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.right.skew == orig(this.parent.right.skew)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.skew == orig(this.parent.parent.skew)
this.parent.skew == orig(this.parent.skew)
this.skew == orig(this.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
this.left.left.left == null
this.left.right.left == null
this.left.right.right == null
this.left.right.skew has only one value
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getSmallest():::ENTER
this.right.right.right == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.getSmallest():::EXIT
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left == orig(this.left.left)
this.left.left.element == orig(this.left.left.element)
this.left.left.element.getClass().getName() == orig(this.left.left.element.getClass().getName())
this.left.left.left == orig(this.left.left.left)
this.left.left.right == orig(this.left.left.right)
this.left.left.parent == orig(this.left.left.parent)
this.left.left.skew == orig(this.left.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.left.right == orig(this.left.right)
this.left.right.element == orig(this.left.right.element)
this.left.right.element.getClass().getName() == orig(this.left.right.element.getClass().getName())
this.left.right.left == orig(this.left.right.left)
this.left.right.right == orig(this.left.right.right)
this.left.right.parent == orig(this.left.right.parent)
this.left.right.skew == orig(this.left.right.skew)
this.left.parent == orig(this.left.parent)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.left.parent.parent == orig(this.left.parent.parent)
this.left.parent.skew == orig(this.left.parent.skew)
this.left.skew == orig(this.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left == orig(this.right.left)
this.right.left.element == orig(this.right.left.element)
this.right.left.element.getClass().getName() == orig(this.right.left.element.getClass().getName())
this.right.left.left == orig(this.right.left.left)
this.right.left.right == orig(this.right.left.right)
this.right.left.parent == orig(this.right.left.parent)
this.right.left.skew == orig(this.right.left.skew)
this.right.right == orig(this.right.right)
this.right.right.element == orig(this.right.right.element)
this.right.right.element.getClass().getName() == orig(this.right.right.element.getClass().getName())
this.right.right.left == orig(this.right.right.left)
this.right.right.right == orig(this.right.right.right)
this.right.right.parent == orig(this.right.right.parent)
this.right.right.skew == orig(this.right.right.skew)
this.right.parent == orig(this.right.parent)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.right.parent.parent == orig(this.right.parent.parent)
this.right.parent.skew == orig(this.right.parent.skew)
this.right.skew == orig(this.right.skew)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.left.skew == orig(this.parent.left.skew)
this.parent.right == orig(this.parent.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.right.skew == orig(this.parent.right.skew)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.skew == orig(this.parent.parent.skew)
this.parent.skew == orig(this.parent.skew)
this.skew == orig(this.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew)
this.right.right.right == null
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left == null
return.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.right.left == null
return.right.right == null
return.right.skew has only one value
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::ENTER
newElement.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT353
this.element == orig(this.element)
this.right == orig(this.right)
this.right.element == orig(this.right.element)
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.right == orig(this.right.parent.right)
this.right.skew == orig(this.right.skew)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.right == orig(this.parent.left.right)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.right == orig(this.parent.right.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
(return == false)  ==>  (orig(this.right.parent.left) == null)
(return == false)  ==>  (orig(this.right.parent.skew) has only one value)
(return == false)  ==>  (this.parent.left.skew has only one value)
(return == false)  ==>  (this.parent.right.skew has only one value)
(return == false)  ==>  (this.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.right.left == null)
(return == false)  ==>  (this.right.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.right.parent.skew has only one value)
(return == false)  ==>  (this.right.right == null)
(return == false)  ==>  (this.right.skew has only one value)
(return == true)  ==>  (orig(this.parent.left.left) == null)
(return == true)  ==>  (this.left.parent.right == null)
(return == true)  ==>  (this.right == null)
this.left.left == null
this.left.right == null
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.parent.skew has only one value
this.right.skew has only one value
orig(this.left) == null
orig(this.right.parent.left) == null
orig(this.right.parent.skew) has only one value
orig(this.parent.right.left) == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT353;condition="return == true"
this.left.parent.right == null
this.left.parent.skew has only one value
this.right == null
this.skew has only one value
orig(this.parent.left.left) == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT353;condition="not(return == true)"
this.left.parent.skew has only one value
this.parent.left.skew has only one value
this.parent.right.skew has only one value
this.skew has only one value
orig(this.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT355
this.right.left.element == orig(this.right.left.element)
this.right.left.left == orig(this.right.left.left)
this.right.left.right == orig(this.right.left.right)
this.right.left.parent == orig(this.right.left.parent)
this.right.left.skew == orig(this.right.left.skew)
this.right.right.element == orig(this.right.right.element)
this.right.right.left == orig(this.right.right.left)
this.right.right.right == orig(this.right.right.right)
this.right.right.parent == orig(this.right.right.parent)
this.right.right.skew == orig(this.right.right.skew)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right))
(return == true)  ==>  (orig(this.left.parent.skew) has only one value)
(return == true)  ==>  (orig(this.left.right.skew) has only one value)
(return == true)  ==>  (orig(this.left.skew) has only one value)
(return == true)  ==>  (orig(this.right.left.right) == null)
(return == true)  ==>  (orig(this.right.parent.skew) has only one value)
(return == true)  ==>  (orig(this.right.right.right) == null)
(return == true)  ==>  (orig(this.skew) has only one value)
(return == true)  ==>  (this.element == orig(this.element))
(return == true)  ==>  (this.left == orig(this.left))
(return == true)  ==>  (this.left.element == orig(this.left.element))
(return == true)  ==>  (this.left.left.element == orig(this.left.left.element))
(return == true)  ==>  (this.left.left.parent == orig(this.left.left.parent))
(return == true)  ==>  (this.left.parent.element == orig(this.left.parent.element))
(return == true)  ==>  (this.left.parent.left == orig(this.left.parent.left))
(return == true)  ==>  (this.left.parent.right == orig(this.left.parent.right))
(return == true)  ==>  (this.left.parent.skew has only one value)
(return == true)  ==>  (this.left.right.element == orig(this.left.right.element))
(return == true)  ==>  (this.left.right.left == orig(this.left.right.left))
(return == true)  ==>  (this.left.right.parent == orig(this.left.right.parent))
(return == true)  ==>  (this.parent.left.element == orig(this.parent.left.element))
(return == true)  ==>  (this.parent.left.left == orig(this.parent.left.left))
(return == true)  ==>  (this.parent.left.right == orig(this.parent.left.right))
(return == true)  ==>  (this.right == orig(this.right))
(return == true)  ==>  (this.right.element == orig(this.right.element))
(return == true)  ==>  (this.right.left == orig(this.right.left))
(return == true)  ==>  (this.right.left.right == null)
(return == true)  ==>  (this.right.parent.element == orig(this.right.parent.element))
(return == true)  ==>  (this.right.parent.left == orig(this.right.parent.left))
(return == true)  ==>  (this.right.parent.right == orig(this.right.parent.right))
(return == true)  ==>  (this.right.parent.skew has only one value)
(return == true)  ==>  (this.right.right == orig(this.right.right))
(return == true)  ==>  (this.right.right.right == null)
(return == true)  ==>  (this.right.skew == orig(this.right.skew))
(return == true)  ==>  (this.skew has only one value)
this.parent.parent.parent == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT355;condition="return == true"
this.left == orig(this.left)
this.right == orig(this.right)
this.right.left == orig(this.right.left)
this.right.right == orig(this.right.right)
this.right.skew == orig(this.right.skew)
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
this.left.parent.skew has only one value
this.right.left.right == null
this.right.right.right == null
this.right.parent.skew has only one value
this.skew has only one value
orig(this.left.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT355;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT361
this.element == orig(this.element)
this.left == orig(this.left)
this.left.element == orig(this.left.element)
this.left.left == orig(this.left.left)
this.left.right == orig(this.left.right)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.left == orig(this.left.parent.left)
this.left.skew == orig(this.left.skew)
this.parent.left.element == orig(this.parent.left.element)
this.parent.left.left == orig(this.parent.left.left)
this.parent.right.element == orig(this.parent.right.element)
this.parent.right.left == orig(this.parent.right.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
(this.parent.left.left has only one value)  <==>  (return == false)
(this.parent.left.left has only one value)  ==>  (orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value)
(this.parent.left.left has only one value)  ==>  (orig(this.left.parent.right) == null)
(this.parent.left.left has only one value)  ==>  (orig(this.left.parent.skew) has only one value)
(this.parent.left.left has only one value)  ==>  (orig(this.parent.left.skew) has only one value)
(this.parent.left.left has only one value)  ==>  (orig(this.parent.right.right) == null)
(this.parent.left.left has only one value)  ==>  (orig(this.parent.right.skew) has only one value)
(this.parent.left.left has only one value)  ==>  (this.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(this.parent.left.left has only one value)  ==>  (this.left.left == null)
(this.parent.left.left has only one value)  ==>  (this.left.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(this.parent.left.left has only one value)  ==>  (this.left.parent.skew has only one value)
(this.parent.left.left has only one value)  ==>  (this.left.right == null)
(this.parent.left.left has only one value)  ==>  (this.left.skew has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.element has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.left has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.left.element has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.left.parent has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.left.right has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.left.skew has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.parent == null)
(this.parent.left.left has only one value)  ==>  (this.parent.right has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.right.element has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.right.left == null)
(this.parent.left.left has only one value)  ==>  (this.parent.right.parent has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.right.right == null)
(this.parent.left.left has only one value)  ==>  (this.parent.right.right == orig(this.parent.right.right))
(this.parent.left.left has only one value)  ==>  (this.parent.right.skew == orig(this.parent.right.skew))
(this.parent.left.left has only one value)  ==>  (this.parent.right.skew has only one value)
(this.parent.left.left has only one value)  ==>  (this.parent.skew has only one value)
this.left.left == null
this.left.right == null
this.left.parent.skew has only one value
this.left.skew has only one value
this.right.left == null
this.right.right == null
this.right.skew has only one value
orig(this.left.parent.right) == null
orig(this.left.parent.skew) has only one value
orig(this.right) == null
orig(this.parent.left.right) == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT361;condition="return == true"
this.left == null
this.right.parent.left == null
this.right.parent.skew has only one value
this.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT361;condition="not(return == true)"
this.parent.right.right == orig(this.parent.right.right)
this.parent.right.skew == orig(this.parent.right.skew)
this.right.parent.skew has only one value
this.parent.element has only one value
this.parent.left has only one value
this.parent.left.element has only one value
this.parent.left.left has only one value
this.parent.left.right has only one value
this.parent.left.parent has only one value
this.parent.left.skew has only one value
this.parent.right has only one value
this.parent.right.element has only one value
this.parent.right.left == null
this.parent.right.right == null
this.parent.right.parent has only one value
this.parent.right.skew has only one value
this.parent.parent == null
this.parent.skew has only one value
this.skew has only one value
orig(this.parent.left.skew) has only one value
orig(this.skew) has only one value
orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT363
this.left.left.skew == orig(this.left.left.skew)
this.left.right.left == orig(this.left.right.left)
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left))
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right))
(return == true)  ==>  (orig(this.left.left.left) == null)
(return == true)  ==>  (orig(this.left.left.right) == null)
(return == true)  ==>  (orig(this.left.left.skew) has only one value)
(return == true)  ==>  (orig(this.left.parent.skew) has only one value)
(return == true)  ==>  (orig(this.left.right.element) has only one value)
(return == true)  ==>  (orig(this.left.right.left) == null)
(return == true)  ==>  (orig(this.left.right.parent) has only one value)
(return == true)  ==>  (orig(this.left.right.right) == null)
(return == true)  ==>  (orig(this.left.right.skew) has only one value)
(return == true)  ==>  (orig(this.right.left.left) == null)
(return == true)  ==>  (orig(this.right.left.right) == null)
(return == true)  ==>  (orig(this.right.left.skew) has only one value)
(return == true)  ==>  (orig(this.right.parent.skew) has only one value)
(return == true)  ==>  (orig(this.right.right.left) == null)
(return == true)  ==>  (orig(this.right.right.right) == null)
(return == true)  ==>  (orig(this.right.right.skew) has only one value)
(return == true)  ==>  (orig(this.right.skew) has only one value)
(return == true)  ==>  (orig(this.skew) has only one value)
(return == true)  ==>  (this.element == orig(this.element))
(return == true)  ==>  (this.left == orig(this.left))
(return == true)  ==>  (this.left.element == orig(this.left.element))
(return == true)  ==>  (this.left.left == orig(this.left.left))
(return == true)  ==>  (this.left.left.element == orig(this.left.left.element))
(return == true)  ==>  (this.left.left.left == null)
(return == true)  ==>  (this.left.left.left == orig(this.left.left.left))
(return == true)  ==>  (this.left.left.parent == orig(this.left.left.parent))
(return == true)  ==>  (this.left.left.right == null)
(return == true)  ==>  (this.left.left.right == orig(this.left.left.right))
(return == true)  ==>  (this.left.left.skew has only one value)
(return == true)  ==>  (this.left.parent.element == orig(this.left.parent.element))
(return == true)  ==>  (this.left.parent.left == orig(this.left.parent.left))
(return == true)  ==>  (this.left.parent.right == orig(this.left.parent.right))
(return == true)  ==>  (this.left.parent.skew has only one value)
(return == true)  ==>  (this.left.right == orig(this.left.right))
(return == true)  ==>  (this.left.right.element == orig(this.left.right.element))
(return == true)  ==>  (this.left.right.element has only one value)
(return == true)  ==>  (this.left.right.left == null)
(return == true)  ==>  (this.left.right.parent == orig(this.left.right.parent))
(return == true)  ==>  (this.left.right.parent has only one value)
(return == true)  ==>  (this.left.right.right == null)
(return == true)  ==>  (this.left.right.right == orig(this.left.right.right))
(return == true)  ==>  (this.left.right.skew == orig(this.left.right.skew))
(return == true)  ==>  (this.left.right.skew has only one value)
(return == true)  ==>  (this.left.skew == orig(this.left.skew))
(return == true)  ==>  (this.parent.left.element == orig(this.parent.left.element))
(return == true)  ==>  (this.parent.left.left == orig(this.parent.left.left))
(return == true)  ==>  (this.parent.left.right == orig(this.parent.left.right))
(return == true)  ==>  (this.parent.right.element == orig(this.parent.right.element))
(return == true)  ==>  (this.parent.right.left == orig(this.parent.right.left))
(return == true)  ==>  (this.parent.right.right == orig(this.parent.right.right))
(return == true)  ==>  (this.right == orig(this.right))
(return == true)  ==>  (this.right.element == orig(this.right.element))
(return == true)  ==>  (this.right.left.element == orig(this.right.left.element))
(return == true)  ==>  (this.right.left.left == null)
(return == true)  ==>  (this.right.left.left == orig(this.right.left.left))
(return == true)  ==>  (this.right.left.parent == orig(this.right.left.parent))
(return == true)  ==>  (this.right.parent.element == orig(this.right.parent.element))
(return == true)  ==>  (this.right.parent.left == orig(this.right.parent.left))
(return == true)  ==>  (this.right.parent.right == orig(this.right.parent.right))
(return == true)  ==>  (this.right.parent.skew has only one value)
(return == true)  ==>  (this.right.right.element == orig(this.right.right.element))
(return == true)  ==>  (this.right.right.left == null)
(return == true)  ==>  (this.right.right.left == orig(this.right.right.left))
(return == true)  ==>  (this.right.right.parent == orig(this.right.right.parent))
(return == true)  ==>  (this.skew has only one value)
this.parent.parent.parent == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT363;condition="return == true"
this.left == orig(this.left)
this.left.left == orig(this.left.left)
this.left.left.left == orig(this.left.left.left)
this.left.left.right == orig(this.left.left.right)
this.left.right == orig(this.left.right)
this.left.right.right == orig(this.left.right.right)
this.left.right.skew == orig(this.left.right.skew)
this.left.skew == orig(this.left.skew)
this.right == orig(this.right)
this.parent.left.left == orig(this.parent.left.left)
this.parent.left.right == orig(this.parent.left.right)
this.parent.right.left == orig(this.parent.right.left)
this.parent.right.right == orig(this.parent.right.right)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.left)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.right)
this.left.left.left == null
this.left.left.right == null
this.left.left.skew has only one value
this.left.right.element has only one value
this.left.right.left == null
this.left.right.right == null
this.left.right.parent has only one value
this.left.right.skew has only one value
this.left.parent.skew has only one value
this.right.left.left == null
this.right.right.left == null
this.right.parent.skew has only one value
this.skew has only one value
orig(this.right.left.left) == null
orig(this.right.left.skew) has only one value
orig(this.right.right.left) == null
orig(this.right.right.skew) has only one value
orig(this.right.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT363;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.left.element.getClass().getName() == orig(this.left.element.getClass().getName())
this.left.left.element.getClass().getName() == orig(this.left.left.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.left.right.element.getClass().getName() == orig(this.left.right.element.getClass().getName())
this.left.parent == orig(this.left.parent)
this.left.parent.element.getClass().getName() == orig(this.left.parent.element.getClass().getName())
this.left.parent.parent == orig(this.left.parent.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
this.right.element.getClass().getName() == orig(this.right.element.getClass().getName())
this.right.left.element.getClass().getName() == orig(this.right.left.element.getClass().getName())
this.right.right.element.getClass().getName() == orig(this.right.right.element.getClass().getName())
this.right.parent == orig(this.right.parent)
this.right.parent.element.getClass().getName() == orig(this.right.parent.element.getClass().getName())
this.right.parent.parent == orig(this.right.parent.parent)
this.parent == orig(this.parent)
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.left == orig(this.parent.left)
this.parent.left.element.getClass().getName() == orig(this.parent.left.element.getClass().getName())
this.parent.left.parent == orig(this.parent.left.parent)
this.parent.right == orig(this.parent.right)
this.parent.right.element.getClass().getName() == orig(this.parent.right.element.getClass().getName())
this.parent.right.parent == orig(this.parent.right.parent)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.left == orig(this.parent.parent.left)
this.parent.parent.right == orig(this.parent.parent.right)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.skew == orig(this.parent.parent.skew)
this.parent.skew == orig(this.parent.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.parent)
(return == true)  ==>  (org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element))
(return == true)  ==>  (orig(this.left.parent.skew) has only one value)
(return == true)  ==>  (orig(this.left.right.skew) has only one value)
(return == true)  ==>  (orig(this.right.left.right) == null)
(return == true)  ==>  (orig(this.right.parent.skew) has only one value)
(return == true)  ==>  (orig(this.right.right.right) == null)
(return == true)  ==>  (orig(this.skew) has only one value)
(return == true)  ==>  (this.element == orig(this.element))
(return == true)  ==>  (this.left.element == orig(this.left.element))
(return == true)  ==>  (this.left.left.element == orig(this.left.left.element))
(return == true)  ==>  (this.left.left.parent == orig(this.left.left.parent))
(return == true)  ==>  (this.left.parent.element == orig(this.left.parent.element))
(return == true)  ==>  (this.left.parent.left == orig(this.left.parent.left))
(return == true)  ==>  (this.left.parent.right == orig(this.left.parent.right))
(return == true)  ==>  (this.left.right.element == orig(this.left.right.element))
(return == true)  ==>  (this.left.right.left == orig(this.left.right.left))
(return == true)  ==>  (this.left.right.parent == orig(this.left.right.parent))
(return == true)  ==>  (this.parent.left.element == orig(this.parent.left.element))
(return == true)  ==>  (this.parent.right.element == orig(this.parent.right.element))
(return == true)  ==>  (this.right.element == orig(this.right.element))
(return == true)  ==>  (this.right.left.element == orig(this.right.left.element))
(return == true)  ==>  (this.right.left.left == orig(this.right.left.left))
(return == true)  ==>  (this.right.left.parent == orig(this.right.left.parent))
(return == true)  ==>  (this.right.parent.element == orig(this.right.parent.element))
(return == true)  ==>  (this.right.parent.left == orig(this.right.parent.left))
(return == true)  ==>  (this.right.parent.right == orig(this.right.parent.right))
(return == true)  ==>  (this.right.right.element == orig(this.right.right.element))
(return == true)  ==>  (this.right.right.left == orig(this.right.right.left))
(return == true)  ==>  (this.right.right.parent == orig(this.right.right.parent))
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT;condition="return == true"
this.element == orig(this.element)
this.left.element == orig(this.left.element)
this.left.left.element == orig(this.left.left.element)
this.left.left.parent == orig(this.left.left.parent)
this.left.right.element == orig(this.left.right.element)
this.left.right.left == orig(this.left.right.left)
this.left.right.parent == orig(this.left.right.parent)
this.left.parent.element == orig(this.left.parent.element)
this.left.parent.left == orig(this.left.parent.left)
this.left.parent.right == orig(this.left.parent.right)
this.right.element == orig(this.right.element)
this.right.left.element == orig(this.right.left.element)
this.right.left.left == orig(this.right.left.left)
this.right.left.parent == orig(this.right.left.parent)
this.right.right.element == orig(this.right.right.element)
this.right.right.left == orig(this.right.right.left)
this.right.right.parent == orig(this.right.right.parent)
this.right.parent.element == orig(this.right.parent.element)
this.right.parent.left == orig(this.right.parent.left)
this.right.parent.right == orig(this.right.parent.right)
this.parent.left.element == orig(this.parent.left.element)
this.parent.right.element == orig(this.parent.right.element)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top.element)
return == true
orig(this.left.right.skew) has only one value
orig(this.left.parent.skew) has only one value
orig(this.right.left.right) == null
orig(this.right.right.right) == null
orig(this.right.parent.skew) has only one value
orig(this.skew) has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node.insert(java.lang.Comparable):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew:::CLASS
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew:::OBJECT
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.Skew(java.lang.String, int):::ENTER
$hidden$1.toString one of { "BALANCED", "LEFT_HIGH", "RIGHT_HIGH" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.Skew(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "BALANCED", "LEFT_HIGH", "RIGHT_HIGH" }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.values():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.values():::EXIT
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
return[] contains no nulls and has only one value, of length 3
size(return[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:::OBJECT
this.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.top.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.top.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
this.top.parent == null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES has only one value
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[].class
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] elements != null
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == [org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew]
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() elements == org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.class
size(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.AVLTree():::EXIT
this.top == null
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::ENTER
reference.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::EXIT156
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::EXIT162
return.left == null
return.right.left == null
return.right.right == null
return.right.skew has only one value
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getNotSmaller(java.lang.Comparable):::EXIT
this.top == orig(this.top)
this.top.element == orig(this.top.element)
this.top.element.getClass().getName() == orig(this.top.element.getClass().getName())
this.top.left == orig(this.top.left)
this.top.left.element == orig(this.top.left.element)
this.top.left.element.getClass().getName() == orig(this.top.left.element.getClass().getName())
this.top.left.left == orig(this.top.left.left)
this.top.left.right == orig(this.top.left.right)
this.top.left.parent == orig(this.top.left.parent)
this.top.left.skew == orig(this.top.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.top.right == orig(this.top.right)
this.top.right.element == orig(this.top.right.element)
this.top.right.element.getClass().getName() == orig(this.top.right.element.getClass().getName())
this.top.right.left == orig(this.top.right.left)
this.top.right.right == orig(this.top.right.right)
this.top.right.parent == orig(this.top.right.parent)
this.top.right.skew == orig(this.top.right.skew)
this.top.parent == orig(this.top.parent)
this.top.skew == orig(this.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getSmallest():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.getSmallest():::EXIT
this.top == orig(this.top)
this.top.element == orig(this.top.element)
this.top.element.getClass().getName() == orig(this.top.element.getClass().getName())
this.top.left == orig(this.top.left)
this.top.left.element == orig(this.top.left.element)
this.top.left.element.getClass().getName() == orig(this.top.left.element.getClass().getName())
this.top.left.left == orig(this.top.left.left)
this.top.left.right == orig(this.top.left.right)
this.top.left.parent == orig(this.top.left.parent)
this.top.left.skew == orig(this.top.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.top.right == orig(this.top.right)
this.top.right.element == orig(this.top.right.element)
this.top.right.element.getClass().getName() == orig(this.top.right.element.getClass().getName())
this.top.right.left == orig(this.top.right.left)
this.top.right.right == orig(this.top.right.right)
this.top.right.parent == orig(this.top.right.parent)
this.top.right.skew == orig(this.top.right.skew)
this.top.parent == orig(this.top.parent)
this.top.skew == orig(this.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
return.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.left == null
return.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
return.right.left == null
return.right.right == null
return.right.skew has only one value
return.parent.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.insert(java.lang.Comparable):::ENTER
element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.insert(java.lang.Comparable):::EXIT
this.top.element.getClass().getName() == orig(this.top.element.getClass().getName())
this.top.left.element.getClass().getName() == orig(this.top.left.element.getClass().getName())
this.top.left.parent == orig(this.top.left.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.top.right.element.getClass().getName() == orig(this.top.right.element.getClass().getName())
this.top.right.parent == orig(this.top.right.parent)
this.top.parent == orig(this.top.parent)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[]) (elementwise)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.isEmpty():::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.isEmpty():::EXIT
this.top == orig(this.top)
this.top.element == orig(this.top.element)
this.top.element.getClass().getName() == orig(this.top.element.getClass().getName())
this.top.left == orig(this.top.left)
this.top.left.element == orig(this.top.left.element)
this.top.left.element.getClass().getName() == orig(this.top.left.element.getClass().getName())
this.top.left.left == orig(this.top.left.left)
this.top.left.right == orig(this.top.left.right)
this.top.left.parent == orig(this.top.left.parent)
this.top.left.skew == orig(this.top.left.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this)
this.top.right == orig(this.top.right)
this.top.right.element == orig(this.top.right.element)
this.top.right.element.getClass().getName() == orig(this.top.right.element.getClass().getName())
this.top.right.left == orig(this.top.right.left)
this.top.right.right == orig(this.top.right.right)
this.top.right.parent == orig(this.top.right.parent)
this.top.right.skew == orig(this.top.right.skew)
this.top.parent == orig(this.top.parent)
this.top.skew == orig(this.top.skew)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.LEFT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.RIGHT_HIGH)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.BALANCED)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES)
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName() == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES.getClass().getName())
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[] == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew.$VALUES[])
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top == orig(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.this.top)
(return == false)  ==>  (this.top.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.top.left.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == false)  ==>  (this.top.parent == null)
(return == false)  ==>  (this.top.right.element.getClass().getName() == org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment.class)
(return == true)  ==>  (this.top == null)
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.isEmpty():::EXIT;condition="return == true"
this.top == null
return == true
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.isEmpty():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:::CLASS
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:::OBJECT
this.offset one of { 0, 32 }
this.encoding[] elements >= 0
this.posInf == false
this.negInf == false
this.nan == false
size(this.components[]) == 2
size(this.encoding[]) one of { 1, 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.OrderedTuple(double[]):::ENTER
size(components[]) == 2
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.OrderedTuple(double[]):::EXIT
components[] == orig(components[])
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::ENTER
ot.offset one of { 0, 32 }
ot.encoding[] elements >= 0
ot.posInf == false
ot.negInf == false
ot.nan == false
size(ot.components[]) == 2
size(ot.encoding[]) one of { 1, 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::EXIT268
ot.offset == orig(ot.offset)
return == -1
size(ot.encoding[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::EXIT270
this.offset == orig(this.offset)
return == 1
size(this.encoding[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::EXIT279
this.offset == orig(this.offset)
ot.offset == orig(ot.offset)
this.lsb one of { -52, -51 }
ot.lsb one of { -52, -51 }
return == 0
size(this.encoding[]) == 4
size(ot.encoding[]) == 4
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple):::EXIT
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.lsb == orig(this.lsb)
this.encoding == orig(this.encoding)
this.encoding[] == orig(this.encoding[])
this.posInf == orig(this.posInf)
this.negInf == orig(this.negInf)
this.nan == orig(this.nan)
ot.components == orig(ot.components)
ot.components[] == orig(ot.components[])
ot.lsb == orig(ot.lsb)
ot.encoding == orig(ot.encoding)
ot.encoding[] == orig(ot.encoding[])
ot.posInf == orig(ot.posInf)
ot.negInf == orig(ot.negInf)
ot.nan == orig(ot.nan)
this.offset == 32
ot.offset == 32
ot.encoding[] elements >= 0
ot.posInf == false
ot.negInf == false
ot.nan == false
return one of { -1, 0, 1 }
size(ot.components[]) == 2
size(ot.encoding[]) one of { 1, 4, 6 }
this.offset >= orig(this.offset)
ot.offset >= orig(ot.offset)
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeLSB(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeLSB(long):::EXIT
return >= 0
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeMSB(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeMSB(long):::EXIT
return == 52
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.encode(int):::ENTER
this.offset == 0
this.encoding[] == [0]
this.encoding[] elements == 0
size(this.encoding[]) == 1
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.encode(int):::EXIT189
this.encoding == orig(this.encoding)
this.encoding[] == orig(this.encoding[])
this.components[] == [0.0, -0.0]
this.components[] elements == 0.0
this.lsb == 2147483647
this.encoding[] == [0]
this.encoding[] elements == 0
orig(minOffset) == 32
size(this.encoding[]) == 1
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.encode(int):::EXIT215
orig(this.encoding) == null
size(this.encoding[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.encode(int):::EXIT
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.lsb == orig(this.lsb)
this.posInf == orig(this.posInf)
this.negInf == orig(this.negInf)
this.nan == orig(this.nan)
(size(this.encoding[]) one of { 4, 6 })  ==>  (orig(this.encoding) == null)
(this.lsb == 2147483647)  <==>  (orig(minOffset) == 32)
(this.lsb == 2147483647)  <==>  (size(this.encoding[]) == 1)
(this.lsb == 2147483647)  ==>  (orig(this.encoding[]) == [0])
(this.lsb == 2147483647)  ==>  (orig(this.encoding[]) elements == 0)
(this.lsb == 2147483647)  ==>  (this.components[] == [0.0, -0.0])
(this.lsb == 2147483647)  ==>  (this.components[] elements == 0.0)
(this.lsb == 2147483647)  ==>  (this.encoding == orig(this.encoding))
(this.lsb == 2147483647)  ==>  (this.encoding[] == [0])
(this.lsb == 2147483647)  ==>  (this.encoding[] elements == 0)
this.offset == 32
orig(this.encoding[]) == this.encoding[]**2 (elementwise)
this.encoding[] == orig(this.encoding[]) (elementwise)
this.encoding[] == orig(this.encoding[])**2 (elementwise)
this.encoding[] is the reverse of orig(this.encoding[])
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.exponent(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.exponent(long):::EXIT
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::ENTER
this.offset == 32
i one of { 0, 1 }
size(this.encoding[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT407
return == 0
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT409
this.encoding[] elements == 0
this.encoding[] one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0] }
orig(k) == 32
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT411
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT414
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.getBit(int, int):::EXIT
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.offset == orig(this.offset)
this.lsb == orig(this.lsb)
this.encoding == orig(this.encoding)
this.encoding[] == orig(this.encoding[])
this.posInf == orig(this.posInf)
this.negInf == orig(this.negInf)
this.nan == orig(this.nan)
this.offset == 32
return one of { 0, 1 }
size(this.encoding[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.mantissa(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.mantissa(long):::EXIT
return >= 0
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.sign(long):::ENTER
===========================================================================
org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.sign(long):::EXIT
return one of { -9223372036854775808L, 0 }
===========================================================================
org.apache.commons.math3.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math3.util.FastMath.cosQ(double, double):::ENTER
xa <= 1.5707963267948966
xa >= 0.0
xb == 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.cosQ(double, double):::EXIT
return <= 1.0
return >= 6.123233995736766E-17
===========================================================================
org.apache.commons.math3.util.FastMath.doubleHighPart(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.doubleHighPart(double):::EXIT366
===========================================================================
org.apache.commons.math3.util.FastMath.doubleHighPart(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.polyCosine(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.polyCosine(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.polySine(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.polySine(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.sinQ(double, double):::ENTER
xa <= 1.5707963267948966
xa >= 0.0
xb <= 1.2246467991473532E-16
xb >= -6.123233995736766E-17
===========================================================================
org.apache.commons.math3.util.FastMath.sinQ(double, double):::EXIT
return <= 1.0
return >= 6.123233995736766E-17
===========================================================================
org.apache.commons.math3.util.FastMath.sqrt(double):::ENTER
a >= 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.sqrt(double):::EXIT
===========================================================================
org.apache.commons.math3.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math3.util.MathUtils.normalizeAngle(double, double):::ENTER
a >= 0.0
center == 3.141592653589793
===========================================================================
org.apache.commons.math3.util.MathUtils.normalizeAngle(double, double):::EXIT
return >= 0.0
