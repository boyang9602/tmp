===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolver.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double):::ENTER
absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution:::CLASS
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.values():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.values():::EXIT
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
return[] contains no nulls and has only one value, of length 5
size(return[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolver.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount one of { 0, 3624 }
this.evaluations.count >= 0
this.searchMin one of { 0.0, 1.0 }
this.searchMax one of { 0.0, 10.0 }
this.searchStart one of { 0.0, 5.5 }
this.function.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double):::ENTER
absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-14
absoluteAccuracy == 1.0E-6
functionValueAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::ENTER
this.evaluations.maximalCount == 3624
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 3624
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::ENTER
this.evaluations.maximalCount == 3624
this.evaluations.count == 2
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 3624
this.evaluations.count == 2
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
return == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::ENTER
this.evaluations.maximalCount == 3624
this.evaluations.count == 2
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 3624
this.evaluations.count == 2
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
return == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::ENTER
this.evaluations.maximalCount == 3624
this.evaluations.count == 0
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 3624
this.evaluations.count == 0
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
return == 10.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::ENTER
this.evaluations.maximalCount == 3624
this.evaluations.count == 0
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 3624
this.evaluations.count == 0
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
return == 1.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::ENTER
this.evaluations.maximalCount == 3624
this.evaluations.count == 2
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 3624
this.evaluations.count == 2
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
return == 1.0E-14
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::ENTER
this.evaluations.maximalCount == 3624
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 3624
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
maxEval == 3624
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1.class
min == 1.0
max == 10.0
startValue == 5.5
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maximalCount == 3624
this.evaluations.count == 0
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifyBracketing(double, double):::ENTER
this.evaluations.maximalCount == 3624
this.evaluations.count == 2
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
lower == 1.0
upper == 10.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifyBracketing(double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 3624
this.evaluations.count == 2
this.searchMin == 1.0
this.searchMax == 10.0
this.searchStart == 5.5
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method:::CLASS
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.Method(java.lang.String, int):::ENTER
$hidden$1.toString one of { "ILLINOIS", "PEGASUS", "REGULA_FALSI" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.Method(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "ILLINOIS", "PEGASUS", "REGULA_FALSI" }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.values():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.values():::EXIT
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
return[] contains no nulls and has only one value, of length 3
size(return[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolver.class
this.allowed has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
this.method has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method):::ENTER
absoluteAccuracy == 1.0E-6
method has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method):::EXIT
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.BaseSecantSolverAbstractTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:::OBJECT
this has only one value
this.allowed has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
this.method has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolver.RegulaFalsiSolver():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1:::OBJECT
this has only one value
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1.(org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest):::ENTER
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1.(org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest):::EXIT
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.this == orig(org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.this)
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1.value(double):::EXIT
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.this == orig(org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.this)
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.RegulaFalsiSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
function has only one value
function.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1.class
lower == 1.0
upper == 10.0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
return == true
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
function has only one value
function.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest$1.class
lower == 1.0
upper == 10.0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::ENTER
lower == 1.0
upper == 10.0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException:::OBJECT
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns[].getClass().getName() one of { [org.apache.commons.math.exception.util.LocalizedFormats], [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats] }
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) one of { 1, 2 }
size(this.context.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException():::EXIT
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
args[] == []
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.getContext():::ENTER
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.getContext():::EXIT
this.context == orig(this.context)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
return.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
return.msgPatterns[].getClass().getName() one of { [org.apache.commons.math.exception.util.LocalizedFormats], [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats] }
return.msgPatterns.getClass().getName() == java.util.ArrayList.class
return.msgArguments[].getClass().getName() elements == java.lang.Object[].class
return.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
return.msgArguments.getClass().getName() == java.util.ArrayList.class
return.context.getClass().getName() == java.util.HashMap.class
size(return.msgPatterns[]) one of { 1, 2 }
size(return.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException:::CLASS
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException:::OBJECT
this.max has only one value
this.max.getClass().getName() == java.lang.Integer.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 2
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 2
size(this.context.msgArguments[]) == 2
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::ENTER
max has only one value
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
specific has only one value
specific.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
max has only one value
max.getClass().getName() == java.lang.Integer.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] == []
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.getMax():::ENTER
this has only one value
this.context has only one value
this.context.msgPatterns has only one value
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 2
this.context.context has only one value
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.getMax():::EXIT
this.max == orig(this.max)
this.max.getClass().getName() == orig(this.max.getClass().getName())
this.context == orig(this.context)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
this.context has only one value
this.context.msgPatterns has only one value
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 2
this.context.context has only one value
return has only one value
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException:::CLASS
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException:::OBJECT
this has only one value
this.max has only one value
this.max.getClass().getName() == java.lang.Integer.class
this.context has only one value
this.context.msgPatterns has only one value
this.context.msgPatterns[] contains no nulls and has only one value, of length 3
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 3
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context has only one value
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 3
size(this.context.msgArguments[]) == 3
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::ENTER
max has only one value
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
size(array[]) one of { 0, 2 }
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
return.getClass().getName() == java.lang.Object[].class
return[] elements has only one value
size(return[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::CLASS
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::OBJECT
this.msgPatterns != null
this.msgPatterns[] elements != null
this.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.msgArguments != null
this.msgArguments[] elements != null
this.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context != null
this.context.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.ExceptionContext():::EXIT
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
size(this.msgPatterns[]) one of { 0, 1, 2 }
size(this.msgArguments[]) one of { 0, 1, 2 }
size(arguments[]) one of { 0, 2 }
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
this.msgPatterns == orig(this.msgPatterns)
this.msgPatterns.getClass().getName() == orig(this.msgPatterns.getClass().getName())
this.msgArguments == orig(this.msgArguments)
this.msgArguments.getClass().getName() == orig(this.msgArguments.getClass().getName())
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
arguments[] == orig(arguments[])
size(this.msgPatterns[])-1 == orig(size(this.msgPatterns[]))
size(this.msgArguments[])-1 == orig(size(this.msgArguments[]))
size(this.msgPatterns[]) one of { 1, 2, 3 }
size(this.msgArguments[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats:::OBJECT
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a[] sorted by >
b[] sorted by >
size(a[]) == 2
size(b[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] sorted by >
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return[] sorted by >=
size(return[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] sorted by >=
result[] <= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
size(split[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
b[] elements <= 2.0
ans[] sorted by >=
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
result[] elements <= 1.0
size(in[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.Incrementor:::OBJECT
this has only one value
this.maximalCount one of { 0, 3624 }
this.count >= 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::ENTER
this.maximalCount == 3624
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maximalCount == 3624
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::ENTER
this.maximalCount == 3624
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maximalCount == 3624
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::ENTER
this.maximalCount == 0
this.count == 0
max == 3624
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maximalCount == 3624
this.count == 0
