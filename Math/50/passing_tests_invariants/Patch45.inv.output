===========================================================================
org.apache.commons.math.analysis.QuinticFunction:::OBJECT
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.QuinticFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.value(double):::EXIT
===========================================================================
org.apache.commons.math.analysis.SinFunction:::OBJECT
===========================================================================
org.apache.commons.math.analysis.SinFunction.SinFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::EXIT
===========================================================================
org.apache.commons.math.analysis.XMinus5Function:::OBJECT
===========================================================================
org.apache.commons.math.analysis.XMinus5Function.XMinus5Function():::EXIT
===========================================================================
org.apache.commons.math.analysis.XMinus5Function.value(double):::ENTER
x one of { 4.0, 5.0, 6.0 }
===========================================================================
org.apache.commons.math.analysis.XMinus5Function.value(double):::EXIT
return one of { -1.0, 0.0, 1.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy one of { 1.0E-15, 1.0E-6, 0.1 }
this.relativeAccuracy one of { 1.0E-15, 1.0E-14 }
this.evaluations != null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double):::ENTER
absoluteAccuracy one of { 1.0E-6, 0.1 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double):::EXIT
this.absoluteAccuracy one of { 1.0E-6, 0.1 }
this.relativeAccuracy == 1.0E-14
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double, double):::ENTER
relativeAccuracy one of { 1.0E-15, 1.0E-14 }
absoluteAccuracy one of { 1.0E-15, 0.1 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double, double):::EXIT
this.absoluteAccuracy one of { 1.0E-15, 0.1 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-14
absoluteAccuracy == 1.0E-6
functionValueAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double, double, double):::EXIT
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution:::CLASS
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.values():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.values():::EXIT
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
return[] contains no nulls and has only one value, of length 5
size(return[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy one of { 1.0E-15, 1.0E-6, 0.1 }
this.relativeAccuracy one of { 1.0E-15, 1.0E-14 }
this.evaluations != null
this.evaluations.maximalCount >= 0
this.evaluations.count >= 0
this.searchStart >= -0.725
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double):::ENTER
absoluteAccuracy one of { 1.0E-6, 0.1 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double):::EXIT
this.absoluteAccuracy one of { 1.0E-6, 0.1 }
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double):::ENTER
relativeAccuracy one of { 1.0E-15, 1.0E-14 }
absoluteAccuracy one of { 1.0E-15, 0.1 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double):::EXIT
this.absoluteAccuracy one of { 1.0E-15, 0.1 }
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy one of { 1.0E-15, 1.0E-14 }
absoluteAccuracy one of { 1.0E-15, 1.0E-6, 0.1 }
functionValueAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::ENTER
this.searchMin != 0
this.searchMax != 0
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count >= 1
this.searchMin != 0
this.searchMax != 0
this.function != null
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::ENTER
this.searchMax >= 0.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.searchMax >= 0.0
return one of { 1.0E-15, 1.0E-6, 0.1 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getEvaluations():::ENTER
this.absoluteAccuracy one of { 1.0E-6, 0.1 }
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 100, 500 }
this.searchMax >= 0.05
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getEvaluations():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.absoluteAccuracy one of { 1.0E-6, 0.1 }
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 100, 500 }
this.searchMax >= 0.05
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::ENTER
this.searchMin != 0
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.searchMin != 0
this.function != null
return == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::ENTER
this.evaluations.count == 0
this.searchMin != 0
this.searchMax != 0
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
this.searchMin != 0
this.searchMax != 0
this.function != null
return != 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::ENTER
this.evaluations.count == 0
this.searchMin != 0
this.searchMax != 0
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
this.searchMin != 0
this.searchMax != 0
this.function != null
return != 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::ENTER
this.searchMax >= 0.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.searchMax >= 0.0
return one of { 1.0E-15, 1.0E-14 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.absoluteAccuracy == 0.1
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin one of { 45.0, 90.0, 90.1 }
this.searchMax one of { 112.5, 153.0 }
this.searchStart one of { 78.75, 121.5, 121.55 }
this.function.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.absoluteAccuracy == 0.1
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin one of { 45.0, 90.0, 90.1 }
this.searchMax one of { 112.5, 153.0 }
this.searchStart one of { 78.75, 121.5, 121.55 }
this.function.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
return one of { 78.75, 121.5, 121.55 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::ENTER
this.searchMin != 0
this.searchMax != 0
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count >= 1
this.searchMin != 0
this.searchMax != 0
this.function != null
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
f != null
min != 0
max != 0
startValue >= -0.725
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
this.searchMin != 0
this.searchMax != 0
this.function != null
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
this.evaluations.count <= orig(this.evaluations.count)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
this.absoluteAccuracy one of { 1.0E-6, 0.1 }
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 0, 100, 500 }
this.searchMax >= 0.0
maxEval one of { 100, 500 }
f != null
max >= 0.05
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.absoluteAccuracy one of { 1.0E-6, 0.1 }
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 100, 500 }
this.evaluations.count >= 2
this.searchMax >= 0.05
this.function != null
return >= -1.4537340303644327E-13
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
this.searchMin != orig(this.searchMin)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
this.searchMax >= 0.0
f != null
min != 0
startValue >= -0.725
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count >= 2
this.searchMin != 0
this.function != null
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifyBracketing(double, double):::ENTER
this.evaluations.count == 2
this.searchMin != 0
this.function != null
lower != 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifyBracketing(double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 2
this.searchMin != 0
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.absoluteAccuracy == 0.1
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin one of { 45.0, 90.0, 90.1 }
this.searchMax one of { 112.5, 153.0 }
this.searchStart one of { 78.75, 121.5, 121.55 }
this.function.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
lower one of { 45.0, 90.0, 90.1 }
initial one of { 78.75, 121.5, 121.55 }
upper one of { 112.5, 153.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.absoluteAccuracy == 0.1
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin one of { 45.0, 90.0, 90.1 }
this.searchMax one of { 112.5, 153.0 }
this.searchStart one of { 78.75, 121.5, 121.55 }
this.function.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method:::CLASS
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.Method(java.lang.String, int):::ENTER
$hidden$1.toString one of { "ILLINOIS", "PEGASUS", "REGULA_FALSI" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.Method(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "ILLINOIS", "PEGASUS", "REGULA_FALSI" }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.values():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.values():::EXIT
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
return[] contains no nulls and has only one value, of length 3
size(return[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver:::OBJECT
this.allowed != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
this.method != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy one of { 1.0E-15, 1.0E-6, 0.1 }
this.relativeAccuracy one of { 1.0E-15, 1.0E-14 }
this.evaluations != null
this.evaluations.maximalCount >= 0
this.evaluations.count >= 0
this.searchMax >= 0.0
this.searchStart >= -0.725
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, double, double, org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method):::ENTER
relativeAccuracy == 1.0E-14
absoluteAccuracy == 1.0E-6
functionValueAccuracy == 1.0E-15
method has only one value
method != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, double, double, org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method):::EXIT
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.allowed has only one value
this.method has only one value
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, double, org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method):::ENTER
relativeAccuracy one of { 1.0E-15, 1.0E-14 }
absoluteAccuracy one of { 1.0E-15, 0.1 }
method has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, double, org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method):::EXIT
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.allowed has only one value
this.method has only one value
this.absoluteAccuracy one of { 1.0E-15, 0.1 }
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method):::ENTER
absoluteAccuracy == 1.0E-6
method != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method):::EXIT
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.allowed has only one value
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
this.allowed has only one value
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 0, 100, 500 }
maxEval one of { 100, 500 }
f != null
min != 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
this.allowed == orig(this.allowed)
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[])
this.method == orig(this.method)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.allowed has only one value
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 100, 500 }
this.evaluations.count >= 2
this.searchMin != 0
this.function != null
return != 0
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
this.searchMin != orig(this.searchMin)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::ENTER
f != null
min != 0
startValue >= -0.725
allowedSolution != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::EXIT
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[])
this.method == orig(this.method)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count >= 2
this.searchMin != 0
this.function != null
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::ENTER
this.absoluteAccuracy one of { 1.0E-15, 1.0E-6 }
this.evaluations.maximalCount one of { 0, 100, 999 }
maxEval one of { 100, 999 }
f != null
min != 0
allowedSolution != null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::EXIT
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[])
this.method == orig(this.method)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.absoluteAccuracy one of { 1.0E-15, 1.0E-6 }
this.evaluations.maximalCount one of { 100, 999 }
this.searchMin != 0
this.searchStart != 0
this.function != null
return != 0
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.BaseSecantSolverAbstractTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolution(org.apache.commons.math.analysis.solvers.UnivariateRealSolver, int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::ENTER
solver != null
maxEval == 100
f != null
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
allowedSolution != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolution(org.apache.commons.math.analysis.solvers.UnivariateRealSolver, int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::EXIT242
return != 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolution(org.apache.commons.math.analysis.solvers.UnivariateRealSolver, int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::EXIT247
return == Double.NaN
orig(this.getClass().getName()) == org.apache.commons.math.analysis.solvers.SecantSolverTest.class
orig(solver.getClass().getName()) == org.apache.commons.math.analysis.solvers.SecantSolver.class
orig(left) == -2.400000000000001
orig(right) == 2.7499999999999996
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolution(org.apache.commons.math.analysis.solvers.UnivariateRealSolver, int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::EXIT252
return == 0.0
orig(this.getClass().getName()) == org.apache.commons.math.analysis.solvers.SecantSolverTest.class
orig(solver.getClass().getName()) == org.apache.commons.math.analysis.solvers.SecantSolver.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolution(org.apache.commons.math.analysis.solvers.UnivariateRealSolver, int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::EXIT
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[])
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testBadEndpoints():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testBadEndpoints():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testQuinticZero():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testQuinticZero():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testRootEndpoints():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testRootEndpoints():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSinZero():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSinZero():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionAboveSide():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionAboveSide():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionBelowSide():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionBelowSide():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionLeftSide():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionLeftSide():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionRightSide():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionRightSide():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::OBJECT
this has only one value
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 0.1
this.relativeAccuracy == 1.0E-14
this.evaluations has only one value
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count >= 0
this.searchMax one of { 0.0, 112.5, 153.0 }
this.function.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.BrentSolver(double):::ENTER
absoluteAccuracy == 0.1
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.BrentSolver(double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.brent(double, double, double, double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 3
this.searchMin one of { 45.0, 90.1 }
this.searchMax one of { 112.5, 153.0 }
this.searchStart one of { 78.75, 121.55 }
lo one of { 78.75, 121.55 }
hi one of { 112.5, 153.0 }
fLo one of { -632.8125, 424.3475 }
fHi one of { -1134.0, 506.25 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.brent(double, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 8
this.searchMin one of { 45.0, 90.1 }
this.searchMax one of { 112.5, 153.0 }
this.searchStart one of { 78.75, 121.55 }
return one of { 89.99952213343957, 134.99513860725165 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.doSolve():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin one of { 45.0, 90.0, 90.1 }
this.searchMax one of { 112.5, 153.0 }
this.searchStart one of { 78.75, 121.5, 121.55 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.doSolve():::EXIT115
this.evaluations.count == 8
this.searchMin one of { 45.0, 90.1 }
this.searchStart one of { 78.75, 121.55 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.doSolve():::EXIT99
this.evaluations.count == 2
this.searchMin == 90.0
this.searchMax == 153.0
this.searchStart == 121.5
this.function has only one value
return == 90.0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.doSolve():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count one of { 2, 8 }
this.searchMin one of { 45.0, 90.0, 90.1 }
this.searchMax one of { 112.5, 153.0 }
this.searchStart one of { 78.75, 121.5, 121.55 }
return one of { 89.99952213343957, 134.99513860725165 }
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolver:::OBJECT
this.allowed has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
this.method has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolver.IllinoisSolver():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolverTest.IllinoisSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolverTest.getQuinticEvalCounts():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolverTest.getQuinticEvalCounts():::EXIT
return has only one value
return[] == [3, 7, 9, 10, 10, 10, 12, 12, 14, 15, 20]
size(return[]) == 11
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolverTest.getSolver():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.IllinoisSolverTest.getSolver():::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.solvers.IllinoisSolver.class
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolver:::OBJECT
this.allowed has only one value
this.allowed != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
this.method has only one value
this.method != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy one of { 1.0E-15, 1.0E-6, 0.1 }
this.relativeAccuracy one of { 1.0E-15, 1.0E-14 }
this.evaluations != null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolver.PegasusSolver():::EXIT
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolver.PegasusSolver(double, double):::ENTER
relativeAccuracy one of { 1.0E-15, 1.0E-14 }
absoluteAccuracy one of { 1.0E-15, 0.1 }
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolver.PegasusSolver(double, double):::EXIT
this.absoluteAccuracy one of { 1.0E-15, 0.1 }
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolver.PegasusSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-14
absoluteAccuracy == 1.0E-6
functionValueAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolver.PegasusSolver(double, double, double):::EXIT
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolverTest.PegasusSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolverTest.getQuinticEvalCounts():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolverTest.getQuinticEvalCounts():::EXIT
return has only one value
return[] == [3, 7, 9, 8, 9, 8, 10, 10, 12, 16, 18]
size(return[]) == 11
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolverTest.getSolver():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.PegasusSolverTest.getSolver():::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:::OBJECT
this.allowed has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
this.method has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.BaseSecantSolver.Method.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
size(org.apache.commons.math.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolver.RegulaFalsiSolver():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.RegulaFalsiSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.getQuinticEvalCounts():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.getQuinticEvalCounts():::EXIT
return has only one value
return[] == [3, 7, 8, 19, 18, 11, 67, 55, 288, 151, -1]
size(return[]) == 11
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.getSolver():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.getSolver():::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.solvers.RegulaFalsiSolver.class
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations != null
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count >= 0
this.function.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolver.SecantSolver():::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolver.doSolve():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchStart != 0
this.function != null
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolver.doSolve():::EXIT121
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolver.doSolve():::EXIT127
this.evaluations.count == 7
this.searchMin one of { -1.9000000000000004, -1.8000000000000003 }
this.searchMax one of { 0.95, 1.25 }
this.searchStart one of { -0.42500000000000027, -0.3250000000000002 }
return one of { -1.4537340303644327E-13, -2.7878366408572123E-15 }
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolver.doSolve():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchStart != 0
this.function != null
return != 0
this.evaluations.count > orig(this.evaluations.count)
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolverTest.SecantSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolverTest.getSolver():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.SecantSolverTest.getSolver():::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.solvers.SecantSolver.class
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.forceSide(int, org.apache.commons.math.analysis.UnivariateRealFunction, org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver, double, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::ENTER
f != null
bracketing != null
bracketing.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
baseRoot >= -1.4537340303644327E-13
max >= 0.05
allowedSolution != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.forceSide(int, org.apache.commons.math.analysis.UnivariateRealFunction, org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver, double, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::EXIT116
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.forceSide(int, org.apache.commons.math.analysis.UnivariateRealFunction, org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver, double, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution):::EXIT
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[])
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] elements != null
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
return one of { 0.0, 90.0, 135.09513860725164 }
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
function != null
lower != 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
(return == false)  ==>  (orig(function.getClass().getName()) == org.apache.commons.math.analysis.SinFunction.class)
(return == false)  ==>  (orig(lower) == 1.0)
(return == false)  ==>  (orig(upper) == 1.5)
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT;condition="not(return == true)"
return == false
orig(function.getClass().getName()) == org.apache.commons.math.analysis.SinFunction.class
orig(lower) == 1.0
orig(upper) == 1.5
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
function != null
lower != 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::ENTER
lower != 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::ENTER
lower one of { 45.0, 90.0, 90.1 }
initial one of { 78.75, 121.5, 121.55 }
upper one of { 112.5, 153.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException:::OBJECT
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
size(args[]) one of { 2, 5 }
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException:::OBJECT
this.argument.getClass().getName() == java.lang.Double.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
wrong.getClass().getName() == java.lang.Double.class
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
arguments[] == orig(arguments[])
===========================================================================
org.apache.commons.math.exception.NoBracketingException:::CLASS
===========================================================================
org.apache.commons.math.exception.NoBracketingException:::OBJECT
this.lo == 1.0
this.hi == 1.5
this.fLo == 0.8414709848078965
this.fHi == 0.9974949866040544
this.context != null
this.context.msgPatterns != null
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[] elements != null
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments != null
this.context.msgArguments[] elements != null
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context != null
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.NoBracketingException.NoBracketingException(double, double, double, double):::ENTER
lo == 1.0
hi == 1.5
fLo == 0.8414709848078965
fHi == 0.9974949866040544
===========================================================================
org.apache.commons.math.exception.NoBracketingException.NoBracketingException(double, double, double, double):::EXIT
===========================================================================
org.apache.commons.math.exception.NoBracketingException.NoBracketingException(org.apache.commons.math.exception.util.Localizable, double, double, double, double, java.lang.Object[]):::ENTER
specific has only one value
specific.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
lo == 1.0
hi == 1.5
fLo == 0.8414709848078965
fHi == 0.9974949866040544
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math.exception.NoBracketingException.NoBracketingException(org.apache.commons.math.exception.util.Localizable, double, double, double, double, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] == []
===========================================================================
org.apache.commons.math.exception.NumberIsTooLargeException:::CLASS
===========================================================================
org.apache.commons.math.exception.NumberIsTooLargeException:::OBJECT
this.max.getClass().getName() == java.lang.Double.class
this.boundIsAllowed == false
this.argument.getClass().getName() == java.lang.Double.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.NumberIsTooLargeException.NumberIsTooLargeException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, boolean):::ENTER
specific has only one value
specific.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
wrong.getClass().getName() == java.lang.Double.class
max.getClass().getName() == java.lang.Double.class
boundIsAllowed == false
===========================================================================
org.apache.commons.math.exception.NumberIsTooLargeException.NumberIsTooLargeException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, boolean):::EXIT
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
array[] elements != null
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
array[] elements != null
return.getClass().getName() == java.lang.Object[].class
return[] elements != null
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::CLASS
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::OBJECT
this.msgPatterns != null
this.msgPatterns[] elements != null
this.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.msgPatterns[].getClass().getName() one of { [], [org.apache.commons.math.exception.util.LocalizedFormats] }
this.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.msgArguments != null
this.msgArguments[] elements != null
this.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.msgArguments[].getClass().getName() one of { [], [java.lang.Object[]] }
this.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context != null
this.context.getClass().getName() == java.util.HashMap.class
size(this.msgPatterns[]) one of { 0, 1 }
size(this.msgArguments[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.ExceptionContext():::EXIT
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 2, 5 }
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
this.msgPatterns == orig(this.msgPatterns)
this.msgPatterns.getClass().getName() == orig(this.msgPatterns.getClass().getName())
this.msgArguments == orig(this.msgArguments)
this.msgArguments.getClass().getName() == orig(this.msgArguments.getClass().getName())
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
arguments[] == orig(arguments[])
size(this.msgPatterns[])-1 == orig(size(this.msgPatterns[]))
size(this.msgArguments[])-1 == orig(size(this.msgArguments[]))
this.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.msgArguments[].getClass().getName() == [java.lang.Object[]]
size(this.msgPatterns[]) == 1
size(this.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats:::OBJECT
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$1:::OBJECT
this.val$orderingSign == 1
org.apache.commons.math.ode.AbstractIntegrator.this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.AbstractIntegrator.this.isLastStep == false
org.apache.commons.math.ode.AbstractIntegrator.this.resetOccurred == false
org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.AbstractIntegrator.this.statesInitialized == true
org.apache.commons.math.ode.AbstractIntegrator.this.name has only one value
org.apache.commons.math.ode.AbstractIntegrator.this.name.toString == "Dormand-Prince 8 (5, 3)"
org.apache.commons.math.ode.AbstractIntegrator.this.maxEvaluations == 2147483647
org.apache.commons.math.ode.AbstractIntegrator.this.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$1.(org.apache.commons.math.ode.AbstractIntegrator, int):::ENTER
org.apache.commons.math.ode.AbstractIntegrator.this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.AbstractIntegrator.this.isLastStep == false
org.apache.commons.math.ode.AbstractIntegrator.this.resetOccurred == false
org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.AbstractIntegrator.this.statesInitialized == true
org.apache.commons.math.ode.AbstractIntegrator.this.name has only one value
org.apache.commons.math.ode.AbstractIntegrator.this.name.toString == "Dormand-Prince 8 (5, 3)"
org.apache.commons.math.ode.AbstractIntegrator.this.maxEvaluations == 2147483647
org.apache.commons.math.ode.AbstractIntegrator.this.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
$hidden$2 == 1
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$1.(org.apache.commons.math.ode.AbstractIntegrator, int):::EXIT
org.apache.commons.math.ode.AbstractIntegrator.this == orig(org.apache.commons.math.ode.AbstractIntegrator.this)
org.apache.commons.math.ode.AbstractIntegrator.this.getClass().getName() == orig(org.apache.commons.math.ode.AbstractIntegrator.this.getClass().getName())
org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers)
org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.AbstractIntegrator.this.stepStart == orig(org.apache.commons.math.ode.AbstractIntegrator.this.stepStart)
org.apache.commons.math.ode.AbstractIntegrator.this.stepSize == orig(org.apache.commons.math.ode.AbstractIntegrator.this.stepSize)
org.apache.commons.math.ode.AbstractIntegrator.this.isLastStep == orig(org.apache.commons.math.ode.AbstractIntegrator.this.isLastStep)
org.apache.commons.math.ode.AbstractIntegrator.this.resetOccurred == orig(org.apache.commons.math.ode.AbstractIntegrator.this.resetOccurred)
org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates == orig(org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates)
org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math.ode.AbstractIntegrator.this.statesInitialized == orig(org.apache.commons.math.ode.AbstractIntegrator.this.statesInitialized)
org.apache.commons.math.ode.AbstractIntegrator.this.name == orig(org.apache.commons.math.ode.AbstractIntegrator.this.name)
org.apache.commons.math.ode.AbstractIntegrator.this.name.toString == orig(org.apache.commons.math.ode.AbstractIntegrator.this.name.toString)
org.apache.commons.math.ode.AbstractIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.AbstractIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.AbstractIntegrator.this.evaluations == orig(org.apache.commons.math.ode.AbstractIntegrator.this.evaluations)
org.apache.commons.math.ode.AbstractIntegrator.this.equations == orig(org.apache.commons.math.ode.AbstractIntegrator.this.equations)
org.apache.commons.math.ode.AbstractIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.AbstractIntegrator.this.equations.getClass().getName())
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$1.compare(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState):::ENTER
org.apache.commons.math.ode.AbstractIntegrator.this.evaluations one of { 17, 32, 77 }
es0.handler.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest$Event.class
es0.maxCheckInterval == 0.1
es0.convergence == 1.0E-15
es0.maxIterationCount == 999
es0.g0Positive == false
es0.pendingEvent == true
es0.forward == true
es0.increasing == true
es0.nextAction == 3
es0.solver.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
es1.handler.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest$Event.class
es1.maxCheckInterval == 0.1
es1.convergence == 1.0E-15
es1.maxIterationCount == 999
es1.g0Positive == false
es1.pendingEvent == true
es1.forward == true
es1.increasing == true
es1.nextAction == 3
es1.solver.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$1.compare(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState):::EXIT
this.val$orderingSign == orig(this.val$orderingSign)
org.apache.commons.math.ode.AbstractIntegrator.this == orig(org.apache.commons.math.ode.AbstractIntegrator.this)
org.apache.commons.math.ode.AbstractIntegrator.this.getClass().getName() == orig(org.apache.commons.math.ode.AbstractIntegrator.this.getClass().getName())
org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers)
org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.AbstractIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.AbstractIntegrator.this.stepStart == orig(org.apache.commons.math.ode.AbstractIntegrator.this.stepStart)
org.apache.commons.math.ode.AbstractIntegrator.this.stepSize == orig(org.apache.commons.math.ode.AbstractIntegrator.this.stepSize)
org.apache.commons.math.ode.AbstractIntegrator.this.isLastStep == orig(org.apache.commons.math.ode.AbstractIntegrator.this.isLastStep)
org.apache.commons.math.ode.AbstractIntegrator.this.resetOccurred == orig(org.apache.commons.math.ode.AbstractIntegrator.this.resetOccurred)
org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates == orig(org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates)
org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math.ode.AbstractIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math.ode.AbstractIntegrator.this.statesInitialized == orig(org.apache.commons.math.ode.AbstractIntegrator.this.statesInitialized)
org.apache.commons.math.ode.AbstractIntegrator.this.name == orig(org.apache.commons.math.ode.AbstractIntegrator.this.name)
org.apache.commons.math.ode.AbstractIntegrator.this.name.toString == orig(org.apache.commons.math.ode.AbstractIntegrator.this.name.toString)
org.apache.commons.math.ode.AbstractIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.AbstractIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.AbstractIntegrator.this.evaluations == orig(org.apache.commons.math.ode.AbstractIntegrator.this.evaluations)
org.apache.commons.math.ode.AbstractIntegrator.this.equations == orig(org.apache.commons.math.ode.AbstractIntegrator.this.equations)
org.apache.commons.math.ode.AbstractIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.AbstractIntegrator.this.equations.getClass().getName())
es0.handler == orig(es0.handler)
es0.handler.getClass().getName() == orig(es0.handler.getClass().getName())
es0.maxCheckInterval == orig(es0.maxCheckInterval)
es0.convergence == orig(es0.convergence)
es0.maxIterationCount == orig(es0.maxIterationCount)
es0.t0 == orig(es0.t0)
es0.g0 == orig(es0.g0)
es0.g0Positive == orig(es0.g0Positive)
es0.pendingEvent == orig(es0.pendingEvent)
es0.pendingEventTime == orig(es0.pendingEventTime)
es0.forward == orig(es0.forward)
es0.increasing == orig(es0.increasing)
es0.nextAction == orig(es0.nextAction)
es0.solver == orig(es0.solver)
es0.solver.getClass().getName() == orig(es0.solver.getClass().getName())
es1.handler == orig(es1.handler)
es1.handler.getClass().getName() == orig(es1.handler.getClass().getName())
es1.maxCheckInterval == orig(es1.maxCheckInterval)
es1.convergence == orig(es1.convergence)
es1.maxIterationCount == orig(es1.maxIterationCount)
es1.t0 == orig(es1.t0)
es1.g0 == orig(es1.g0)
es1.g0Positive == orig(es1.g0Positive)
es1.pendingEvent == orig(es1.pendingEvent)
es1.pendingEventTime == orig(es1.pendingEventTime)
es1.forward == orig(es1.forward)
es1.increasing == orig(es1.increasing)
es1.nextAction == orig(es1.nextAction)
es1.solver == orig(es1.solver)
es1.solver.getClass().getName() == orig(es1.solver.getClass().getName())
org.apache.commons.math.ode.AbstractIntegrator.this.evaluations one of { 17, 32, 77 }
es0.handler.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest$Event.class
es0.maxCheckInterval == 0.1
es0.convergence == 1.0E-15
es0.maxIterationCount == 999
es0.g0Positive == false
es0.pendingEvent == true
es0.forward == true
es0.increasing == true
es0.nextAction == 3
es0.solver.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
es1.handler.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest$Event.class
es1.maxCheckInterval == 0.1
es1.convergence == 1.0E-15
es1.maxIterationCount == 999
es1.g0Positive == false
es1.pendingEvent == true
es1.forward == true
es1.increasing == true
es1.nextAction == 3
es1.solver.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator:::OBJECT
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepSize <= 1.0
this.stepSize >= 3.162277660168379E-7
this.resetOccurred == false
this.eventsStates != null
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name != null
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations >= 0
this.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::ENTER
name has only one value
name.toString == "Dormand-Prince 8 (5, 3)"
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.statesInitialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
name.toString == "Dormand-Prince 8 (5, 3)"
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator, double[], double[], double):::ENTER
this.isLastStep == false
this.maxEvaluations == 2147483647
this.equations != null
interpolator != null
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
interpolator.currentState != null
interpolator.interpolatedState != null
interpolator.interpolatedDerivatives != null
interpolator.interpolatedDerivatives[] elements one of { 0.0, 1.0, 2.0 }
interpolator.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
interpolator.interpolatedDerivatives[] sorted by <=
interpolator.finalized == false
interpolator.forward == true
interpolator.dirtyState == true
y != null
yDot != null
yDot[] == [1.0, 2.0]
yDot[] elements one of { 1.0, 2.0 }
yDot[] sorted by <
tEnd == 10.0
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator, double[], double[], double):::EXIT293
this.isLastStep == true
this.evaluations one of { 17, 32, 77 }
interpolator.currentState[] sorted by <
interpolator.interpolatedState[] sorted by <=
y[] sorted by <=
orig(this.evaluations) one of { 14, 29, 74 }
orig(y[]) sorted by <
interpolator.interpolatedTime < orig(interpolator.interpolatedTime)
interpolator.softCurrentTime < orig(interpolator.softCurrentTime)
y[] < orig(y[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator, double[], double[], double):::EXIT331
interpolator.interpolatedTime == orig(interpolator.interpolatedTime)
interpolator.softCurrentTime == orig(interpolator.softCurrentTime)
y[] == orig(y[])
interpolator.interpolatedDerivatives[] == [1.0, 2.0]
interpolator.interpolatedState[] > orig(interpolator.interpolatedState[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator, double[], double[], double):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
interpolator.h == orig(interpolator.h)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.globalPreviousTime == orig(interpolator.globalPreviousTime)
interpolator.globalCurrentTime == orig(interpolator.globalCurrentTime)
interpolator.softPreviousTime == orig(interpolator.softPreviousTime)
interpolator.forward == orig(interpolator.forward)
yDot[] == orig(yDot[])
size(interpolator.interpolatedState[]) == orig(size(interpolator.interpolatedState[]))
size(interpolator.interpolatedDerivatives[]) == orig(size(interpolator.interpolatedDerivatives[]))
this.statesInitialized == true
this.maxEvaluations == 2147483647
this.equations != null
interpolator.currentState != null
interpolator.interpolatedState != null
interpolator.interpolatedDerivatives != null
interpolator.interpolatedDerivatives[] elements one of { 0.9999999999999977, 1.9999999999999953 }
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == false
yDot[] == [1.0, 2.0]
yDot[] elements one of { 1.0, 2.0 }
yDot[] sorted by <
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
this.evaluations - orig(this.evaluations) - 3 == 0
interpolator.interpolatedTime <= orig(interpolator.interpolatedTime)
interpolator.interpolatedState[] > orig(interpolator.interpolatedState[]) (lexically)
interpolator.interpolatedState[] >= orig(interpolator.interpolatedState[]) (elementwise)
interpolator.interpolatedDerivatives[] >= orig(interpolator.interpolatedDerivatives[]) (elementwise)
interpolator.softCurrentTime <= orig(interpolator.softCurrentTime)
y[] <= orig(y[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int, org.apache.commons.math.analysis.solvers.UnivariateRealSolver):::ENTER
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
handler.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest$Event.class
maxCheckInterval == 0.1
convergence == 1.0E-15
maxIterationCount == 999
solver.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int, org.apache.commons.math.analysis.solvers.UnivariateRealSolver):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::ENTER
this.isLastStep == false
this.maxEvaluations == 2147483647
this.equations != null
y != null
yDot != null
yDot[] elements one of { 0.0, 1.0, 2.0 }
yDot[] one of { [0.0, 0.0], [1.0, 2.0] }
yDot[] sorted by <=
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y[] == orig(y[])
this.isLastStep == false
this.maxEvaluations == 2147483647
this.evaluations >= 1
this.equations != null
yDot[] == [1.0, 2.0]
yDot[] elements one of { 1.0, 2.0 }
yDot[] sorted by <
this.evaluations - orig(this.evaluations) - 1 == 0
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.resetEvaluations():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 3.162277660168379E-7, Double.NaN }
this.maxEvaluations == 2147483647
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.resetEvaluations():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 3.162277660168379E-7, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.evaluations <= orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.maxEvaluations == 2147483647
ode != null
ode.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
y0 != null
y0[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
t == 10.0
y != null
y[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
size(y0[]) == 2
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
y[] == orig(y[])
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.maxEvaluations == 2147483647
y0[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
y[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations):::ENTER
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.maxEvaluations == 2147483647
equations != null
equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.maxEvaluations == 2147483647
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setMaxEvaluations(int):::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.statesInitialized == false
this.maxEvaluations == 0
this.evaluations == 0
this.equations == null
maxEvaluations == -1
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setMaxEvaluations(int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.statesInitialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setStateInitialized(boolean):::ENTER
this.stepSize == 3.162277660168379E-7
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations != null
stateInitialized == false
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setStateInitialized(boolean):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepSize == 3.162277660168379E-7
this.statesInitialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations != null
===========================================================================
org.apache.commons.math.ode.events.EventState$1:::OBJECT
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval one of { 0.1, 67.5 }
org.apache.commons.math.ode.events.EventState.this.convergence one of { 1.0E-15, 0.1 }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount one of { 100, 999 }
org.apache.commons.math.ode.events.EventState.this.forward == true
org.apache.commons.math.ode.events.EventState.this.nextAction one of { 0, 3 }
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval one of { 0.1, 67.5 }
org.apache.commons.math.ode.events.EventState.this.convergence one of { 1.0E-15, 0.1 }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount one of { 100, 999 }
org.apache.commons.math.ode.events.EventState.this.forward == true
org.apache.commons.math.ode.events.EventState.this.increasing == true
org.apache.commons.math.ode.events.EventState.this.nextAction one of { 0, 3 }
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.forward == orig(org.apache.commons.math.ode.events.EventState.this.forward)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
org.apache.commons.math.ode.events.EventState.this.solver == orig(org.apache.commons.math.ode.events.EventState.this.solver)
org.apache.commons.math.ode.events.EventState.this.solver.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.solver.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.increasing == true
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::ENTER
org.apache.commons.math.ode.events.EventState.this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::EXIT
this.val$interpolator == orig(this.val$interpolator)
this.val$interpolator.getClass().getName() == orig(this.val$interpolator.getClass().getName())
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.forward == orig(org.apache.commons.math.ode.events.EventState.this.forward)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
org.apache.commons.math.ode.events.EventState.this.solver == orig(org.apache.commons.math.ode.events.EventState.this.solver)
org.apache.commons.math.ode.events.EventState.this.solver.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.solver.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState:::OBJECT
this.maxCheckInterval one of { 0.1, 67.5 }
this.convergence one of { 1.0E-15, 0.1 }
this.maxIterationCount one of { 100, 999 }
this.nextAction one of { 0, 3 }
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int, org.apache.commons.math.analysis.solvers.UnivariateRealSolver):::ENTER
maxCheckInterval one of { 0.1, 67.5 }
convergence one of { 1.0E-15, 0.1 }
maxIterationCount one of { 100, 999 }
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int, org.apache.commons.math.analysis.solvers.UnivariateRealSolver):::EXIT
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.increasing == true
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT275
this.forward == orig(this.forward)
this.pendingEvent == true
this.nextAction == 3
return == true
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT275;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT293
this.increasing == orig(this.increasing)
this.g0Positive == false
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.increasing == true
return == false
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT293;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.nextAction == orig(this.nextAction)
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
(this.pendingEvent == false)  <==>  (return == false)
(this.pendingEvent == false)  ==>  (this.g0Positive == false)
(this.pendingEvent == false)  ==>  (this.increasing == orig(this.increasing))
(this.pendingEvent == false)  ==>  (this.increasing == true)
(this.pendingEvent == false)  ==>  (this.nextAction one of { 0, 3 })
(this.pendingEvent == false)  ==>  (this.pendingEventTime != orig(this.pendingEventTime))
(this.pendingEvent == false)  ==>  (this.pendingEventTime == Double.NaN)
(this.pendingEvent == true)  <==>  (return == true)
(this.pendingEvent == true)  ==>  (orig(this.forward) == true)
(this.pendingEvent == true)  ==>  (this.forward == orig(this.forward))
(this.pendingEvent == true)  ==>  (this.nextAction == 3)
this.forward == true
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.forward == orig(this.forward)
this.pendingEvent == true
this.nextAction == 3
return == true
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.increasing == orig(this.increasing)
this.g0Positive == false
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.increasing == true
return == false
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::ENTER
this.pendingEvent == true
this.forward == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
this.pendingEvent == true
this.forward == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.increasing == true
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
this.g0 one of { -17718.75, -1.0, -0.5 }
this.g0Positive == false
this.increasing == true
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::ENTER
this.g0Positive == false
this.forward == true
this.increasing == true
size(y[]) one of { 0, 2 }
size(y[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
y[] == orig(y[])
this.forward == true
this.increasing == true
size(y[])-1 != 0
this.t0 >= orig(this.t0)
this.g0 >= orig(this.g0)
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::ENTER
this.handler.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest$Event.class
this.maxCheckInterval == 0.1
this.convergence == 1.0E-15
this.maxIterationCount == 999
this.forward == true
this.increasing == true
this.solver.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
(this.g0Positive == false)  <==>  (return == false)
(this.g0Positive == false)  <==>  (this.nextAction == 3)
(this.g0Positive == false)  <==>  (this.pendingEvent == false)
(this.g0Positive == false)  <==>  (this.pendingEventTime != orig(this.pendingEventTime))
(this.g0Positive == false)  ==>  (orig(this.pendingEventTime) == Double.NaN)
(this.g0Positive == false)  ==>  (this.pendingEventTime == Double.NaN)
(this.g0Positive == true)  <==>  (return == true)
(this.g0Positive == true)  <==>  (this.nextAction == 0)
(this.g0Positive == true)  <==>  (this.pendingEvent == true)
(this.g0Positive == true)  <==>  (this.pendingEventTime == orig(this.pendingEventTime))
(this.g0Positive == true)  ==>  (this.g0 one of { 0.0, 1.0 })
(this.g0Positive == true)  ==>  (this.previousEventTime == orig(this.previousEventTime))
this.handler.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest$Event.class
this.maxCheckInterval == 0.1
this.convergence == 1.0E-15
this.maxIterationCount == 999
this.forward == true
this.increasing == true
this.solver.getClass().getName() == org.apache.commons.math.analysis.solvers.PegasusSolver.class
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="return == true"
this.pendingEventTime == orig(this.pendingEventTime)
this.previousEventTime == orig(this.previousEventTime)
this.g0 one of { 0.0, 1.0 }
this.g0Positive == true
this.pendingEvent == true
this.nextAction == 0
return == true
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="not(return == true)"
this.g0Positive == false
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.nextAction == 3
return == false
orig(this.pendingEventTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.events.EventStateTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.events.EventStateTest.this has only one value
===========================================================================
org.apache.commons.math.ode.events.EventStateTest$1.(org.apache.commons.math.ode.events.EventStateTest):::ENTER
org.apache.commons.math.ode.events.EventStateTest.this has only one value
===========================================================================
org.apache.commons.math.ode.events.EventStateTest$1.(org.apache.commons.math.ode.events.EventStateTest):::EXIT
org.apache.commons.math.ode.events.EventStateTest.this == orig(org.apache.commons.math.ode.events.EventStateTest.this)
===========================================================================
org.apache.commons.math.ode.events.EventStateTest$1.eventOccurred(double, double[], boolean):::ENTER
t == 90.0
y has only one value
y[] == []
increasing == true
===========================================================================
org.apache.commons.math.ode.events.EventStateTest$1.eventOccurred(double, double[], boolean):::EXIT
org.apache.commons.math.ode.events.EventStateTest.this == orig(org.apache.commons.math.ode.events.EventStateTest.this)
y[] == orig(y[])
y[] == []
return == 3
===========================================================================
org.apache.commons.math.ode.events.EventStateTest$1.g(double, double[]):::ENTER
y[] == []
===========================================================================
org.apache.commons.math.ode.events.EventStateTest$1.g(double, double[]):::EXIT
org.apache.commons.math.ode.events.EventStateTest.this == orig(org.apache.commons.math.ode.events.EventStateTest.this)
y[] == orig(y[])
y[] == []
===========================================================================
org.apache.commons.math.ode.events.EventStateTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.ode.events.EventStateTest.EventStateTest():::EXIT
===========================================================================
org.apache.commons.math.ode.events.EventStateTest.closeEvents():::ENTER
===========================================================================
org.apache.commons.math.ode.events.EventStateTest.closeEvents():::EXIT
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest$Event:::OBJECT
this.idx one of { 0, 1 }
this.eventType one of { 0, 1 }
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 has only one value
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] elements >= 1.0
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] sorted by <
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 has only one value
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] elements >= 0.5
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] sorted by <
size(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[]) == 9
size(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[]) == 19
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest$Event.Event(org.apache.commons.math.ode.events.OverlappingEventsTest, int, int):::ENTER
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 has only one value
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] elements >= 1.0
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 has only one value
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] elements >= 0.5
idx one of { 0, 1 }
eventType one of { 0, 1 }
size(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[]) == 9
size(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[]) == 19
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest$Event.Event(org.apache.commons.math.ode.events.OverlappingEventsTest, int, int):::EXIT
org.apache.commons.math.ode.events.OverlappingEventsTest.this == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.this)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[]) (elementwise)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest$Event.eventOccurred(double, double[], boolean):::ENTER
y[] sorted by <=
increasing == true
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest$Event.eventOccurred(double, double[], boolean):::EXIT
this.idx == orig(this.idx)
this.eventType == orig(this.eventType)
org.apache.commons.math.ode.events.OverlappingEventsTest.this == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.this)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
y[] == orig(y[])
y[] sorted by <=
return == 0
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest$Event.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest$Event.g(double, double[]):::EXIT
this.idx == orig(this.idx)
this.eventType == orig(this.eventType)
org.apache.commons.math.ode.events.OverlappingEventsTest.this == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.this)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
y[] == orig(y[])
return <= 1.0
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest:::CLASS
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 has only one value
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 != null
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] elements >= 1.0
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] sorted by <
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 has only one value
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 != null
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] elements >= 0.5
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] sorted by <
size(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[]) == 9
size(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[]) == 19
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.OverlappingEventsTest():::EXIT
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.computeDerivatives(double, double[], double[]):::ENTER
y != null
yDot != null
yDot[] elements one of { 0.0, 1.0, 2.0 }
yDot[] one of { [0.0, 0.0], [1.0, 2.0] }
yDot[] sorted by <=
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
y[] == orig(y[])
yDot[] == [1.0, 2.0]
yDot[] elements one of { 1.0, 2.0 }
yDot[] sorted by <
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.getDimension():::EXIT
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
return == 2
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.test(int):::ENTER
eventType one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.test(int):::EXIT
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.testOverlappingEvents0():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.testOverlappingEvents0():::EXIT
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.testOverlappingEvents1():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.events.OverlappingEventsTest.testOverlappingEvents1():::EXIT
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:::OBJECT
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.scalAbsoluteTolerance one of { 0.0, 1.0E-7 }
this.scalRelativeTolerance one of { 0.0, 1.0E-7 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 0, 2 }
this.initialStep one of { -1.0, 0.0 }
this.minStep == 1.0E-15
this.maxStep one of { 0.0, 100.0 }
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.resetOccurred == false
this.eventsStates != null
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name != null
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations >= 0
this.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double, double):::ENTER
name has only one value
name.toString == "Dormand-Prince 8 (5, 3)"
minStep == 1.0E-15
maxStep == 100.0
scalAbsoluteTolerance == 1.0E-7
scalRelativeTolerance == 1.0E-7
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double, double):::EXIT
name.toString == orig(name.toString)
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 0
this.initialStep == -1.0
this.maxStep == 100.0
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
name.toString == "Dormand-Prince 8 (5, 3)"
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double, boolean, boolean):::ENTER
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.isLastStep == false
this.statesInitialized == true
this.equations != null
forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double, boolean, boolean):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.isLastStep == false
this.statesInitialized == true
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getMaxStep():::ENTER
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 2
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getMaxStep():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 2
this.equations != null
return == 100.0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getMinStep():::ENTER
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 2
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getMinStep():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 2
this.equations != null
return == 1.0E-15
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::ENTER
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 1
this.equations != null
equations != null
equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
forward == true
order == 8
scale != null
scale[] elements one of { 1.0E-7, 1.5000000000000002E-7, 1.9999999999999989E-7 }
y0 != null
y0[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
yDot0 != null
yDot0[] == [1.0, 2.0]
yDot0[] elements one of { 1.0, 2.0 }
yDot0[] sorted by <
y1 != null
y1[] == [0.0, 0.0]
y1[] elements == 0.0
yDot1 != null
yDot1[] == [0.0, 0.0]
yDot1[] elements == 0.0
size(scale[]) == 2
size(y0[]) == 2
size(yDot0[]) == 2
size(y1[]) == 2
size(yDot1[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT324
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
scale[] == orig(scale[])
y0[] == orig(y0[])
yDot0[] == orig(yDot0[])
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.stepSize == 3.162277660168379E-7
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 2
this.equations != null
scale[] elements one of { 1.0E-7, 1.5000000000000002E-7, 1.9999999999999989E-7 }
y0[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
yDot0[] == [1.0, 2.0]
yDot0[] elements one of { 1.0, 2.0 }
yDot0[] sorted by <
yDot1[] == [1.0, 2.0]
yDot1[] elements one of { 1.0, 2.0 }
yDot1[] sorted by <
return one of { 9.999999999999999E-5, 0.0683142661488255, 0.07181011550336226 }
y1[] > orig(y1[]) (elementwise)
yDot1[] > orig(yDot1[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.resetInternalState():::ENTER
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.initialStep == -1.0
this.maxStep == 100.0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.resetInternalState():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.initialStep == -1.0
this.maxStep == 100.0
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.stepStart != orig(this.stepStart)
this.stepSize != orig(this.stepSize)
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.initialStep == -1.0
this.maxStep == 100.0
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
equations != null
equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
y0 != null
y0[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
t == 10.0
y != null
y[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
size(y0[]) == 2
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
y[] == orig(y[])
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 2
this.initialStep == -1.0
this.maxStep == 100.0
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
y0[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
y[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
this.mainSetDimension >= orig(this.mainSetDimension)
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.setStepSizeControl(double, double, double, double):::ENTER
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.mainSetDimension == 0
this.initialStep == 0.0
this.maxStep == 0.0
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
minimalStep == 1.0E-15
maximalStep == 100.0
absoluteTolerance == 1.0E-7
relativeTolerance == 1.0E-7
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.setStepSizeControl(double, double, double, double):::EXIT
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.minStep == orig(this.minStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.mainSetDimension == 0
this.initialStep == -1.0
this.maxStep == 100.0
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == "Dormand-Prince 8 (5, 3)"
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] elements <= 1.0
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] contains no nulls and has only one value, of length 12
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[]) == 12
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[]) == 12
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:::OBJECT
this.fsal == true
this.c has only one value
this.c != null
this.c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
this.c[] elements <= 1.0
this.a has only one value
this.a != null
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 12
this.a[] elements != null
this.b has only one value
this.b != null
this.b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
this.prototype != null
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.forward == true
this.prototype.dirtyState == true
this.exp one of { -0.125, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 0, 2 }
this.initialStep == -1.0
this.minStep == 1.0E-15
this.maxStep == 100.0
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.isLastStep == false
this.resetOccurred == false
this.eventsStates != null
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name != null
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations >= 0
this.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
size(this.c[]) == 12
size(this.a[]) == 12
size(this.b[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::ENTER
minStep == 1.0E-15
maxStep == 100.0
scalAbsoluteTolerance == 1.0E-7
scalRelativeTolerance == 1.0E-7
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.statesInitialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::ENTER
this.prototype.finalized == true
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension == 2
this.equations != null
yDotK != null
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
y0 != null
y1 != null
size(yDotK[]) == 13
size(y0[]) == 2
size(y1[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.prototype.finalized == true
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension == 2
this.equations != null
yDotK[] elements != null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.getOrder():::ENTER
this.stepSize == 3.162277660168379E-7
this.statesInitialized == false
this.evaluations one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.getOrder():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepSize == 3.162277660168379E-7
this.statesInitialized == false
this.evaluations one of { 0, 1 }
return == 8
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D != null
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] contains no nulls and has only one value, of length 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] elements != null
size(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:::OBJECT
this.yDotKLast.getClass().getName() == double[][].class
this.yDotKLast[] elements != null
this.v.getClass().getName() == double[][].class
this.v[] elements != null
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.integrator.stepHandlers != null
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepSize <= 1.0
this.integrator.resetOccurred == false
this.integrator.eventsStates != null
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name != null
this.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations >= 0
this.integrator.equations != null
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
this.interpolatedDerivatives[] elements one of { 0.0, 1.0, 2.0 }
this.interpolatedDerivatives[] sorted by <=
this.forward == true
size(this.yDotKLast[]) == 3
size(this.v[]) == 7
size(this.yDotK[]) == 13
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator():::EXIT
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator):::ENTER
interpolator != null
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D != null
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] contains no nulls and has only one value, of length 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] elements != null
interpolator.yDotKLast == null
interpolator.v == null
interpolator.vectorsInitialized == false
interpolator.yDotK == null
interpolator.integrator == null
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.globalPreviousTime == Double.NaN
interpolator.globalCurrentTime == Double.NaN
interpolator.softPreviousTime == Double.NaN
interpolator.softCurrentTime == Double.NaN
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
interpolator.yDotKLast == orig(interpolator.yDotKLast)
interpolator.v == orig(interpolator.v)
interpolator.vectorsInitialized == orig(interpolator.vectorsInitialized)
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.integrator == orig(interpolator.integrator)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.dirtyState == true
interpolator.yDotKLast == null
interpolator.v == null
interpolator.vectorsInitialized == false
interpolator.yDotK == null
interpolator.integrator == null
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.globalPreviousTime == Double.NaN
interpolator.globalCurrentTime == Double.NaN
interpolator.softPreviousTime == Double.NaN
interpolator.softCurrentTime == Double.NaN
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.yDotKLast != null
this.v != null
this.yDotK != null
this.integrator != null
this.integrator.isLastStep == false
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.v[] == orig(this.v[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.yDotKLast != null
this.v != null
this.vectorsInitialized == true
this.yDotK != null
this.integrator != null
this.integrator.isLastStep == false
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 1.0, 2.0 }
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.dirtyState == true
this.integrator.evaluations >= orig(this.integrator.evaluations)
this.interpolatedDerivatives[] >= orig(this.interpolatedDerivatives[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::ENTER
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.v == orig(this.v)
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.integrator == orig(this.integrator)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.dirtyState == true
return != null
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::ENTER
this.vectorsInitialized == false
this.integrator.isLastStep == false
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT393
this.yDotKLast == null
this.v == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
orig(this.h) == Double.NaN
orig(this.interpolatedTime) == Double.NaN
orig(this.globalPreviousTime) == Double.NaN
orig(this.globalCurrentTime) == Double.NaN
orig(this.softPreviousTime) == Double.NaN
orig(this.softCurrentTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT429
this.h == orig(this.h)
this.interpolatedTime == orig(this.interpolatedTime)
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.yDotKLast != null
this.v != null
this.yDotK != null
this.integrator != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
(this.yDotKLast != null)  <==>  (this.currentState != null)
(this.yDotKLast != null)  <==>  (this.globalCurrentTime == orig(this.globalCurrentTime))
(this.yDotKLast != null)  <==>  (this.globalPreviousTime == orig(this.globalPreviousTime))
(this.yDotKLast != null)  <==>  (this.h == orig(this.h))
(this.yDotKLast != null)  <==>  (this.integrator != null)
(this.yDotKLast != null)  <==>  (this.interpolatedDerivatives != null)
(this.yDotKLast != null)  <==>  (this.interpolatedState != null)
(this.yDotKLast != null)  <==>  (this.interpolatedTime == orig(this.interpolatedTime))
(this.yDotKLast != null)  <==>  (this.softCurrentTime == orig(this.softCurrentTime))
(this.yDotKLast != null)  <==>  (this.softPreviousTime == orig(this.softPreviousTime))
(this.yDotKLast != null)  <==>  (this.v != null)
(this.yDotKLast != null)  <==>  (this.yDotK != null)
(this.yDotKLast != null)  ==>  (this.integrator.equations != null)
(this.yDotKLast != null)  ==>  (this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class)
(this.yDotKLast != null)  ==>  (this.integrator.evaluations - orig(this.integrator.evaluations) - 3 == 0)
(this.yDotKLast != null)  ==>  (this.integrator.eventsStates != null)
(this.yDotKLast != null)  ==>  (this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class)
(this.yDotKLast != null)  ==>  (this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class)
(this.yDotKLast != null)  ==>  (this.integrator.name != null)
(this.yDotKLast != null)  ==>  (this.integrator.name has only one value)
(this.yDotKLast != null)  ==>  (this.integrator.name.toString == "Dormand-Prince 8 (5, 3)")
(this.yDotKLast != null)  ==>  (this.integrator.stepHandlers != null)
(this.yDotKLast != null)  ==>  (this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class)
(this.yDotKLast != null)  ==>  (this.interpolatedDerivatives[] elements one of { 0.0, 1.0, 2.0 })
(this.yDotKLast != null)  ==>  (this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] })
(this.yDotKLast != null)  ==>  (this.interpolatedDerivatives[] sorted by <=)
(this.yDotKLast != null)  ==>  (this.v.getClass().getName() == double[][].class)
(this.yDotKLast != null)  ==>  (this.v[] elements != null)
(this.yDotKLast != null)  ==>  (this.yDotK.getClass().getName() == double[][].class)
(this.yDotKLast != null)  ==>  (this.yDotKLast.getClass().getName() == double[][].class)
(this.yDotKLast != null)  ==>  (this.yDotKLast[] elements != null)
(this.yDotKLast != null)  ==>  (this.yDotK[] elements != null)
(this.yDotKLast == null)  <==>  (this.currentState == null)
(this.yDotKLast == null)  <==>  (this.integrator == null)
(this.yDotKLast == null)  <==>  (this.interpolatedDerivatives == null)
(this.yDotKLast == null)  <==>  (this.interpolatedState == null)
(this.yDotKLast == null)  <==>  (this.v == null)
(this.yDotKLast == null)  <==>  (this.yDotK == null)
(this.yDotKLast == null)  ==>  (orig(this.globalCurrentTime) == Double.NaN)
(this.yDotKLast == null)  ==>  (orig(this.globalPreviousTime) == Double.NaN)
(this.yDotKLast == null)  ==>  (orig(this.h) == Double.NaN)
(this.yDotKLast == null)  ==>  (orig(this.interpolatedTime) == Double.NaN)
(this.yDotKLast == null)  ==>  (orig(this.softCurrentTime) == Double.NaN)
(this.yDotKLast == null)  ==>  (orig(this.softPreviousTime) == Double.NaN)
(this.yDotKLast == null)  ==>  (this.globalCurrentTime == Double.NaN)
(this.yDotKLast == null)  ==>  (this.globalPreviousTime == Double.NaN)
(this.yDotKLast == null)  ==>  (this.h == Double.NaN)
(this.yDotKLast == null)  ==>  (this.interpolatedTime == Double.NaN)
(this.yDotKLast == null)  ==>  (this.softCurrentTime == Double.NaN)
(this.yDotKLast == null)  ==>  (this.softPreviousTime == Double.NaN)
this.vectorsInitialized == false
this.integrator.isLastStep == false
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
this.dirtyState == true
this.integrator.evaluations - orig(this.integrator.evaluations) - 3 == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::ENTER
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.dirtyState == true
integrator != null
integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
integrator.stepHandlers != null
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.stepSize == 3.162277660168379E-7
integrator.resetOccurred == false
integrator.eventsStates != null
integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
integrator.name has only one value
integrator.name != null
integrator.name.toString == "Dormand-Prince 8 (5, 3)"
integrator.maxEvaluations == 2147483647
integrator.evaluations == 0
integrator.equations != null
integrator.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
y != null
y[] == [0.0, 0.0]
y[] elements == 0.0
yDotK != null
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
forward == true
size(y[]) == 2
size(yDotK[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
integrator.stepHandlers == orig(integrator.stepHandlers)
integrator.stepHandlers.getClass().getName() == orig(integrator.stepHandlers.getClass().getName())
integrator.stepSize == orig(integrator.stepSize)
integrator.isLastStep == orig(integrator.isLastStep)
integrator.resetOccurred == orig(integrator.resetOccurred)
integrator.eventsStates == orig(integrator.eventsStates)
integrator.eventsStates.getClass().getName() == orig(integrator.eventsStates.getClass().getName())
integrator.statesInitialized == orig(integrator.statesInitialized)
integrator.name == orig(integrator.name)
integrator.name.toString == orig(integrator.name.toString)
integrator.maxEvaluations == orig(integrator.maxEvaluations)
integrator.evaluations == orig(integrator.evaluations)
integrator.equations == orig(integrator.equations)
integrator.equations.getClass().getName() == orig(integrator.equations.getClass().getName())
y[] == orig(y[])
yDotK[] == orig(yDotK[])
this.yDotKLast != null
this.v != null
this.vectorsInitialized == false
this.yDotK != null
this.integrator != null
this.integrator.stepStart == Double.NaN
this.integrator.stepSize == 3.162277660168379E-7
this.integrator.evaluations == 0
this.h == Double.NaN
this.currentState != null
this.currentState[] == [0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] == [0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] == [0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
integrator.stepHandlers != null
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.stepSize == 3.162277660168379E-7
integrator.resetOccurred == false
integrator.eventsStates != null
integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
integrator.name has only one value
integrator.name != null
integrator.name.toString == "Dormand-Prince 8 (5, 3)"
integrator.maxEvaluations == 2147483647
integrator.evaluations == 0
integrator.equations != null
integrator.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
y[] == [0.0, 0.0]
y[] elements == 0.0
yDotK[] elements != null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::ENTER
this.yDotKLast != null
this.v != null
this.yDotK != null
this.integrator != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.v[] == orig(this.v[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.yDotKLast != null
this.v != null
this.vectorsInitialized == false
this.yDotK != null
this.integrator != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:::OBJECT
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.fsal == true
this.c has only one value
this.c != null
this.c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
this.a has only one value
this.a != null
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 12
this.a[] elements != null
this.b has only one value
this.b != null
this.b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
this.prototype != null
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.forward == true
this.prototype.dirtyState == true
this.exp == -0.125
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.scalAbsoluteTolerance == 1.0E-7
this.scalRelativeTolerance == 1.0E-7
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 0, 2 }
this.initialStep == -1.0
this.minStep == 1.0E-15
this.maxStep == 100.0
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == 3.162277660168379E-7
this.resetOccurred == false
this.eventsStates != null
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name != null
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations >= 0
this.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
size(this.c[]) == 12
size(this.a[]) == 12
size(this.b[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::ENTER
name has only one value
name.toString == "Dormand-Prince 8 (5, 3)"
fsal == true
c has only one value
c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
a has only one value
a.getClass().getName() == double[][].class
a[] contains no nulls and has only one value, of length 12
b has only one value
b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
prototype.yDotK == null
prototype.integrator == null
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.globalPreviousTime == Double.NaN
prototype.globalCurrentTime == Double.NaN
prototype.softPreviousTime == Double.NaN
prototype.softCurrentTime == Double.NaN
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
minStep == 1.0E-15
maxStep == 100.0
scalAbsoluteTolerance == 1.0E-7
scalRelativeTolerance == 1.0E-7
size(c[]) == 12
size(a[]) == 12
size(b[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
name.toString == "Dormand-Prince 8 (5, 3)"
c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
a[] contains no nulls and has only one value, of length 12
b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
prototype.yDotK == null
prototype.integrator == null
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.globalPreviousTime == Double.NaN
prototype.globalCurrentTime == Double.NaN
prototype.softPreviousTime == Double.NaN
prototype.softCurrentTime == Double.NaN
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
equations != null
equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
y0 != null
y0[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
t == 10.0
y != null
y[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999991 }
size(y0[]) == 2
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.prototype.finalized == true
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension == 2
this.isLastStep == true
this.statesInitialized == true
this.evaluations one of { 17, 32, 77 }
this.equations != null
y0[] sorted by <=
y[] sorted by <=
this.mainSetDimension >= orig(this.mainSetDimension)
this.evaluations != orig(this.evaluations)
y0[] >= orig(y0[]) (elementwise)
y[] >= orig(y[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::ENTER
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
maxGrowth == 10.0
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::ENTER
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
minReduction == 0.2
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::ENTER
this.prototype.finalized == false
this.safety == 0.0
this.minReduction == 0.0
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
safety == 0.9
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator:::OBJECT
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.integrator.stepHandlers != null
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepStart == Double.NaN
this.integrator.stepSize == 3.162277660168379E-7
this.integrator.resetOccurred == false
this.integrator.eventsStates != null
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name != null
this.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations == 0
this.integrator.equations != null
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
this.h == Double.NaN
this.currentState[] == [0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState[] == [0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.forward == true
this.dirtyState == true
size(this.yDotK[]) == 13
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.currentState == null
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::ENTER
interpolator != null
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
interpolator.yDotK == null
interpolator.integrator == null
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.globalPreviousTime == Double.NaN
interpolator.globalCurrentTime == Double.NaN
interpolator.softPreviousTime == Double.NaN
interpolator.softCurrentTime == Double.NaN
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.integrator == orig(interpolator.integrator)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.yDotK == null
this.integrator == null
this.currentState == null
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
interpolator.yDotK == null
interpolator.integrator == null
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.globalPreviousTime == Double.NaN
interpolator.globalCurrentTime == Double.NaN
interpolator.softPreviousTime == Double.NaN
interpolator.softCurrentTime == Double.NaN
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::ENTER
this.yDotK == null
this.integrator == null
this.currentState == null
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
rkIntegrator != null
rkIntegrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
rkIntegrator.stepHandlers != null
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.stepSize == 3.162277660168379E-7
rkIntegrator.resetOccurred == false
rkIntegrator.eventsStates != null
rkIntegrator.eventsStates.getClass().getName() == java.util.ArrayList.class
rkIntegrator.name has only one value
rkIntegrator.name != null
rkIntegrator.name.toString == "Dormand-Prince 8 (5, 3)"
rkIntegrator.maxEvaluations == 2147483647
rkIntegrator.evaluations == 0
rkIntegrator.equations != null
rkIntegrator.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
y != null
y[] == [0.0, 0.0]
y[] elements == 0.0
yDotArray != null
yDotArray.getClass().getName() == double[][].class
yDotArray[] elements != null
forward == true
size(y[]) == 2
size(yDotArray[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::EXIT
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
rkIntegrator.stepHandlers == orig(rkIntegrator.stepHandlers)
rkIntegrator.stepHandlers.getClass().getName() == orig(rkIntegrator.stepHandlers.getClass().getName())
rkIntegrator.stepSize == orig(rkIntegrator.stepSize)
rkIntegrator.isLastStep == orig(rkIntegrator.isLastStep)
rkIntegrator.resetOccurred == orig(rkIntegrator.resetOccurred)
rkIntegrator.eventsStates == orig(rkIntegrator.eventsStates)
rkIntegrator.eventsStates.getClass().getName() == orig(rkIntegrator.eventsStates.getClass().getName())
rkIntegrator.statesInitialized == orig(rkIntegrator.statesInitialized)
rkIntegrator.name == orig(rkIntegrator.name)
rkIntegrator.name.toString == orig(rkIntegrator.name.toString)
rkIntegrator.maxEvaluations == orig(rkIntegrator.maxEvaluations)
rkIntegrator.evaluations == orig(rkIntegrator.evaluations)
rkIntegrator.equations == orig(rkIntegrator.equations)
rkIntegrator.equations.getClass().getName() == orig(rkIntegrator.equations.getClass().getName())
y[] == orig(y[])
yDotArray[] == orig(yDotArray[])
this.yDotK != null
this.integrator != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
rkIntegrator.stepHandlers != null
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.stepSize == 3.162277660168379E-7
rkIntegrator.resetOccurred == false
rkIntegrator.eventsStates != null
rkIntegrator.eventsStates.getClass().getName() == java.util.ArrayList.class
rkIntegrator.name has only one value
rkIntegrator.name != null
rkIntegrator.name.toString == "Dormand-Prince 8 (5, 3)"
rkIntegrator.maxEvaluations == 2147483647
rkIntegrator.evaluations == 0
rkIntegrator.equations != null
rkIntegrator.equations.getClass().getName() == org.apache.commons.math.ode.events.OverlappingEventsTest.class
y[] == [0.0, 0.0]
y[] elements == 0.0
yDotArray[] elements != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator:::OBJECT
this.h >= 9.999999999976694E-5
this.currentState[] elements >= 0.0
this.interpolatedDerivatives[] elements one of { 0.0, 1.0, 2.0 }
this.interpolatedDerivatives[] sorted by <=
this.forward == true
size(this.currentState[]) one of { 0, 2 }
size(this.currentState[])-1 != 0
size(this.interpolatedState[]) one of { 0, 2 }
size(this.interpolatedState[])-1 != 0
size(this.interpolatedDerivatives[]) one of { 0, 2 }
size(this.interpolatedDerivatives[])-1 != 0
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator():::EXIT
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::ENTER
y has only one value
y[] == []
forward == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::EXIT
y[] == orig(y[])
this.h == Double.NaN
this.currentState has only one value
this.currentState[] == []
this.interpolatedTime == Double.NaN
this.interpolatedState has only one value
this.interpolatedState[] == []
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] == []
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
y[] == []
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::ENTER
interpolator != null
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.globalPreviousTime == Double.NaN
interpolator.globalCurrentTime == Double.NaN
interpolator.softPreviousTime == Double.NaN
interpolator.softCurrentTime == Double.NaN
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::EXIT
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.dirtyState == true
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.globalPreviousTime == Double.NaN
interpolator.globalCurrentTime == Double.NaN
interpolator.softPreviousTime == Double.NaN
interpolator.softCurrentTime == Double.NaN
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::EXIT
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.dirtyState == true
return != null
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.finalized == true
this.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 1.0, 2.0 }
this.interpolatedDerivatives[] sorted by <
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 1.0, 2.0 }
this.interpolatedDerivatives[] sorted by <
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getGlobalCurrentTime():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
this.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getGlobalCurrentTime():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
this.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getGlobalPreviousTime():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
this.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getGlobalPreviousTime():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
this.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 1.0, 2.0 }
this.interpolatedDerivatives[] sorted by <
this.dirtyState == false
return != null
size(return[]) one of { 0, 2 }
size(return[])-1 != 0
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedState[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999993 }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [], [0.0, 0.0], [1.0, 2.0] }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedState != null
this.interpolatedState[] elements one of { 0.0, 0.5000000000000003, 0.9999999999999993 }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [], [0.0, 0.0], [1.0, 2.0] }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 1.0, 2.0 }
this.interpolatedDerivatives[] sorted by <
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 1.0, 2.0 }
this.interpolatedDerivatives[] sorted by <
return == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.dirtyState == true
y != null
y[] == [0.0, 0.0]
y[] elements == 0.0
isForward == true
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::EXIT
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
y[] == orig(y[])
this.h == Double.NaN
this.currentState != null
this.currentState[] == [0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] == [0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] == [0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
y[] == [0.0, 0.0]
y[] elements == 0.0
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setSoftCurrentTime(double):::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.currentState != null
this.currentState[] sorted by <
this.interpolatedState != null
this.interpolatedState[] sorted by <=
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 0.9999999999999977, 1.9999999999999953 }
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.dirtyState == false
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setSoftCurrentTime(double):::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.currentState[] sorted by <
this.interpolatedState != null
this.interpolatedState[] sorted by <=
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 0.9999999999999977, 1.9999999999999953 }
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.dirtyState == false
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
this.softCurrentTime < orig(this.softCurrentTime)
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setSoftPreviousTime(double):::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.currentState != null
this.currentState[] sorted by <
this.interpolatedState != null
this.interpolatedState[] sorted by <=
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 0.9999999999999977, 1.9999999999999953 }
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.dirtyState == false
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setSoftPreviousTime(double):::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.currentState[] sorted by <
this.interpolatedState != null
this.interpolatedState[] sorted by <=
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements one of { 0.9999999999999977, 1.9999999999999953 }
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.dirtyState == false
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [], [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [], [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [], [0.0, 0.0], [1.0, 2.0] }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] one of { [], [0.0, 0.0], [1.0, 2.0] }
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator:::OBJECT
this has only one value
this.currentDerivative has only one value
this.currentDerivative[] == []
this.h one of { 40.5, 45.0, Double.NaN }
this.currentState has only one value
this.currentState[] == []
this.interpolatedState has only one value
this.interpolatedState[] == []
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] == []
this.finalized == false
this.forward == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.DummyStepInterpolator(double[], double[], boolean):::ENTER
y has only one value
y[] == []
yDot has only one value
yDot[] == []
forward == true
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.DummyStepInterpolator(double[], double[], boolean):::EXIT
y[] == orig(y[])
yDot[] == orig(yDot[])
this.h == Double.NaN
this.interpolatedTime == Double.NaN
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
y[] == []
yDot[] == []
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.h one of { 40.5, 45.0 }
oneMinusThetaH >= 0.0
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.currentDerivative == orig(this.currentDerivative)
this.currentDerivative[] == orig(this.currentDerivative[])
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h one of { 40.5, 45.0 }
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.cosQ(double, double):::ENTER
xb != 0
===========================================================================
org.apache.commons.math.util.FastMath.cosQ(double, double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::ENTER
x != 0
extra != 0
hiPrec == null
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::EXIT846
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::ENTER
hiPrec != null
hiPrec[] == [0.0, 0.0]
hiPrec[] elements == 0.0
size(hiPrec[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT1484
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT
hiPrec[] sorted by <
hiPrec[] < orig(hiPrec[]) (lexically)
hiPrec[] <= orig(hiPrec[]) (elementwise)
===========================================================================
org.apache.commons.math.util.FastMath.polyCosine(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.polyCosine(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.polySine(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.polySine(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.pow(double, double):::ENTER
y one of { -0.125, 0.125 }
y != 0
===========================================================================
org.apache.commons.math.util.FastMath.pow(double, double):::EXIT1720
===========================================================================
org.apache.commons.math.util.FastMath.pow(double, double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a != null
a[] sorted by >
b != null
b[] sorted by >
result != null
size(a[]) == 2
size(b[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
a != null
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.sinQ(double, double):::ENTER
xb == 0.0
===========================================================================
org.apache.commons.math.util.FastMath.sinQ(double, double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] sorted by >
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return != null
return[] sorted by >=
size(return[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] sorted by >=
result[] <= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
split != null
size(split[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
a != null
b != null
b[] elements <= 2.0
ans != null
ans[] sorted by >=
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
a != null
b != null
ans != null
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
in != null
result != null
result[] elements <= 1.0
size(in[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::ENTER
a >= 0.0
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::EXIT
return >= 0.0
===========================================================================
org.apache.commons.math.util.Incrementor:::OBJECT
this.maximalCount >= 0
this.count >= 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.getCount():::ENTER
this.maximalCount one of { 100, 500 }
===========================================================================
org.apache.commons.math.util.Incrementor.getCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maximalCount one of { 100, 500 }
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::ENTER
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count >= 1
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::ENTER
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == 0
this.count <= orig(this.count)
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::ENTER
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
orig(this.maximalCount) % this.maximalCount == 0
this.maximalCount >= orig(this.maximalCount)
===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::ENTER
y == 0.0
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::EXIT
return == false
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, int):::ENTER
y one of { 0.0, 10.0 }
maxUlps == 1
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, int):::EXIT
(return == false)  ==>  (orig(y) one of { 0.0, 10.0 })
(return == true)  ==>  (orig(x) == 10.0)
(return == true)  ==>  (orig(y) == 10.0)
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, int):::EXIT;condition="return == true"
return == true
orig(x) == 10.0
orig(y) == 10.0
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, int):::EXIT;condition="not(return == true)"
return == false
