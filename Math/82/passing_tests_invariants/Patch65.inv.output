===========================================================================
org.apache.commons.math.ConvergenceException:::CLASS
===========================================================================
org.apache.commons.math.ConvergenceException:::OBJECT
this.pattern.toString one of { "no feasible solution", "unbounded solution" }
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "no feasible solution", "unbounded solution" }
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "no feasible solution", "unbounded solution" }
arguments[] == []
===========================================================================
org.apache.commons.math.MathException:::CLASS
===========================================================================
org.apache.commons.math.MathException:::OBJECT
this.pattern.toString one of { "no feasible solution", "unbounded solution" }
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "no feasible solution", "unbounded solution" }
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "no feasible solution", "unbounded solution" }
arguments[] == []
===========================================================================
org.apache.commons.math.MathException.buildMessage(java.util.Locale, java.lang.String, java.lang.Object[]):::ENTER
locale has only one value
pattern.toString one of { "no feasible solution", "unbounded solution" }
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.MathException.buildMessage(java.util.Locale, java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "no feasible solution", "unbounded solution" }
arguments[] == []
return.toString one of { "no feasible solution", "unbounded solution" }
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::ENTER
s.toString one of { "no feasible solution", "unbounded solution" }
locale has only one value
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::EXIT73
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::EXIT
s.toString == orig(s.toString)
s.toString one of { "no feasible solution", "unbounded solution" }
return.toString one of { "no feasible solution", "unbounded solution" }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.lu == null
size(this.data[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::ENTER
d != null
d.getClass().getName() == double[][].class
d[] elements != null
size(d[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::EXIT
d[] == orig(d[])
this.data != null
d[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this.data == null
in != null
in.getClass().getName() == double[][].class
in[] elements != null
size(in[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
this.lu == orig(this.lu)
in[] == orig(in[])
this.data != null
in[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::ENTER
this.data != null
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::ENTER
this.data != null
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
this.data == null
subMatrix != null
subMatrix.getClass().getName() == double[][].class
subMatrix[] elements != null
row == 0
column == 0
size(subMatrix[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
this.lu == orig(this.lu)
subMatrix[] == orig(subMatrix[])
this.data != null
subMatrix[] elements != null
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::CLASS
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::OBJECT
this.data != null
size(this.data[]) >= 1
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::ENTER
d != null
size(d[]) >= 1
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(int):::ENTER
size == 216
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(int):::EXIT
this.data[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.data[] elements == 0.0
size(this.data[]) == 216
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getData():::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getData():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return != null
size(return[]) >= 1
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapMultiply(double):::ENTER
d == -1.0
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapMultiply(double):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.setEntry(int, double):::ENTER
this.data[] elements one of { 0.0, 1.0 }
value one of { -1.0, 1.0 }
value != 0
size(this.data[]) == 216
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.setEntry(int, double):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
size(this.data[]) == orig(size(this.data[]))
this.data[] elements one of { -1.0, 0.0, 1.0 }
size(this.data[]) == 216
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::OBJECT
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.separator has only one value
this.separator.toString == "; "
this.trimmedPrefix has only one value
this.trimmedPrefix.toString == "{"
this.trimmedSuffix has only one value
this.trimmedSuffix.toString == "}"
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
separator.toString == orig(separator.toString)
prefix.toString == "{"
suffix.toString == "}"
separator.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.optimization.GoalType:::OBJECT
===========================================================================
org.apache.commons.math.optimization.GoalType.GoalType(java.lang.String, int):::ENTER
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
$hidden$2 one of { 0, 1 }
===========================================================================
org.apache.commons.math.optimization.GoalType.GoalType(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
===========================================================================
org.apache.commons.math.optimization.OptimizationException:::CLASS
===========================================================================
org.apache.commons.math.optimization.OptimizationException:::OBJECT
this.pattern.toString one of { "no feasible solution", "unbounded solution" }
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.optimization.OptimizationException.OptimizationException(java.lang.String, java.lang.Object[]):::ENTER
specifier.toString one of { "no feasible solution", "unbounded solution" }
parts.getClass().getName() == java.lang.Object[].class
parts[] == []
===========================================================================
org.apache.commons.math.optimization.OptimizationException.OptimizationException(java.lang.String, java.lang.Object[]):::EXIT
specifier.toString == orig(specifier.toString)
parts[] == orig(parts[])
specifier.toString one of { "no feasible solution", "unbounded solution" }
parts[] == []
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair:::CLASS
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair:::OBJECT
this.point != null
size(this.point[]) >= 1
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double):::ENTER
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double):::EXIT
point[] == orig(point[])
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getPoint():::ENTER
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getPoint():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
return != null
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getValue():::ENTER
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getValue():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:::OBJECT
this.getClass().getName() == org.apache.commons.math.optimization.linear.SimplexSolver.class
this.maxIterations one of { 0, 100 }
this.iterations >= 0
this.f.coefficients != null
this.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.f.constantTerm one of { -5.0, 0.0, 7.0 }
this.constraints.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MAXIMIZE != null
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE != null
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES != null
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.AbstractLinearOptimizer():::EXIT
this.maxIterations == 100
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
this.restrictToNonNegative == false
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.incrementIterationsCounter():::ENTER
this.maxIterations == 100
this.f != null
this.constraints != null
this.goalType != null
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.incrementIterationsCounter():::EXIT
this.maxIterations == orig(this.maxIterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.maxIterations == 100
this.iterations >= 1
this.f != null
this.constraints != null
this.goalType != null
this.iterations - orig(this.iterations) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.optimize(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math.optimization.GoalType, boolean):::ENTER
this.maxIterations == 100
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
this.restrictToNonNegative == false
f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
f.constantTerm one of { -5.0, 0.0, 7.0 }
constraints.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.optimize(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math.optimization.GoalType, boolean):::EXIT
this.maxIterations == orig(this.maxIterations)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
f.coefficients == orig(f.coefficients)
f.coefficients.getClass().getName() == orig(f.coefficients.getClass().getName())
f.constantTerm == orig(f.constantTerm)
this.maxIterations == 100
this.iterations >= 1
f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
f.constantTerm one of { -5.0, 0.0, 7.0 }
this.iterations > orig(this.iterations)
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.setMaxIterations(int):::ENTER
this.maxIterations == 0
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
this.restrictToNonNegative == false
maxIterations == 100
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.setMaxIterations(int):::EXIT
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.constraints == orig(this.constraints)
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.maxIterations == 100
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
this.restrictToNonNegative == false
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint:::OBJECT
this.coefficients != null
this.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.relationship != null
this.relationship.stringValue != null
this.relationship.stringValue.toString one of { "<=", "=", ">=" }
this.value >= 0.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(double[], org.apache.commons.math.optimization.linear.Relationship, double):::ENTER
coefficients != null
coefficients[] elements >= 0.0
relationship != null
relationship.stringValue != null
relationship.stringValue.toString one of { "<=", "=", ">=" }
size(coefficients[]) >= 1
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(double[], org.apache.commons.math.optimization.linear.Relationship, double):::EXIT
coefficients[] == orig(coefficients[])
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
coefficients[] elements >= 0.0
relationship.stringValue != null
relationship.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(org.apache.commons.math.linear.RealVector, org.apache.commons.math.optimization.linear.Relationship, double):::ENTER
coefficients != null
coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
relationship != null
relationship.stringValue != null
relationship.stringValue.toString one of { "<=", "=", ">=" }
value >= 0.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(org.apache.commons.math.linear.RealVector, org.apache.commons.math.optimization.linear.Relationship, double):::EXIT
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
relationship.stringValue != null
relationship.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getCoefficients():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getCoefficients():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return != null
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getRelationship():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getRelationship():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return != null
return.stringValue != null
return.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getValue():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getValue():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return >= 0.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction:::OBJECT
this.coefficients != null
this.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.constantTerm one of { -5.0, 0.0, 7.0 }
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(double[], double):::ENTER
coefficients != null
constantTerm one of { -5.0, 0.0, 7.0 }
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(double[], double):::EXIT
coefficients[] == orig(coefficients[])
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(org.apache.commons.math.linear.RealVector, double):::ENTER
coefficients != null
coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
constantTerm one of { -5.0, 0.0, 7.0 }
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(org.apache.commons.math.linear.RealVector, double):::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getCoefficients():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getCoefficients():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
return != null
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getConstantTerm():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getConstantTerm():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
return one of { -5.0, 0.0, 7.0 }
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getValue(double[]):::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getValue(double[]):::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
point[] == orig(point[])
===========================================================================
org.apache.commons.math.optimization.linear.NoFeasibleSolutionException:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.NoFeasibleSolutionException:::OBJECT
this has only one value
this.pattern has only one value
this.pattern.toString == "no feasible solution"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.optimization.linear.NoFeasibleSolutionException.NoFeasibleSolutionException():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.Relationship:::OBJECT
this.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.Relationship.Relationship(java.lang.String, int, java.lang.String):::ENTER
$hidden$1.toString one of { "EQ", "GEQ", "LEQ" }
$hidden$2 one of { 0, 1, 2 }
stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.Relationship.Relationship(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
stringValue.toString == orig(stringValue.toString)
$hidden$1.toString one of { "EQ", "GEQ", "LEQ" }
stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver:::OBJECT
this.epsilon == 1.0E-6
this.maxIterations == 100
this.iterations >= 0
this.f.coefficients != null
this.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.f.constantTerm one of { -5.0, 0.0, 7.0 }
this.constraints.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MAXIMIZE != null
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE != null
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES != null
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.SimplexSolver():::EXIT
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
this.restrictToNonNegative == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.SimplexSolver(double):::ENTER
epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.SimplexSolver(double):::EXIT
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
this.restrictToNonNegative == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.doIteration(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.f != null
this.constraints != null
this.goalType != null
tableau != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.numArtificialVariables >= 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.doIteration(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
this.iterations >= 1
this.f != null
this.constraints != null
this.goalType != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.numArtificialVariables >= 0
tableau.epsilon == 1.0E-6
this.iterations - orig(this.iterations) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize():::ENTER
this.iterations == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize():::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.iterations >= 1
this.iterations > orig(this.iterations)
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.iterations >= 1
this.f != null
this.constraints != null
this.goalType != null
tableau != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.numArtificialVariables >= 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
this.iterations >= 1
this.f != null
this.constraints != null
this.goalType != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.numArtificialVariables >= 0
tableau.epsilon == 1.0E-6
return != null
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.getPivotRow(int, org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.iterations >= 1
this.f != null
this.constraints != null
this.goalType != null
col >= 1
tableau != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.numArtificialVariables >= 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.getPivotRow(int, org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
this.iterations >= 1
this.f != null
this.constraints != null
this.goalType != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.numArtificialVariables >= 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.f != null
this.constraints != null
this.goalType != null
tableau != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT151
return == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT151;condition="not(return == true)"
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT154
this.iterations >= 1
return == true
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT154;condition="return == true"
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
(return == true)  ==>  (this.iterations >= 1)
this.f != null
this.constraints != null
this.goalType != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT;condition="return == true"
this.iterations >= 1
return == true
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.f != null
this.constraints != null
this.goalType != null
tableau != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numArtificialVariables >= 1
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT134
return == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT134;condition="not(return == true)"
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT137
this.iterations >= 1
return == true
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT137;condition="return == true"
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
(return == true)  ==>  (this.iterations >= 1)
this.f != null
this.constraints != null
this.goalType != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numArtificialVariables >= 1
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT;condition="return == true"
this.iterations >= 1
return == true
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isPhase1Solved(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.iterations == 0
this.f != null
this.constraints != null
this.goalType != null
tableau != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT168
this.iterations == orig(this.iterations)
this.iterations == 0
this.f.constantTerm == 0.0
this.goalType has only one value
this.restrictToNonNegative == false
tableau.f.constantTerm == 0.0
tableau.restrictToNonNegative == false
tableau.numDecisionVariables one of { 2, 3 }
tableau.numSlackVariables one of { 1, 3 }
tableau.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT179
this.iterations >= 1
tableau.numArtificialVariables >= 1
this.iterations > orig(this.iterations)
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
(this.iterations == 0)  <==>  (tableau.numArtificialVariables == 0)
(this.iterations == 0)  <==>  (this.iterations == orig(this.iterations))
(this.iterations == 0)  ==>  (tableau.f.constantTerm == 0.0)
(this.iterations == 0)  ==>  (tableau.numDecisionVariables one of { 2, 3 })
(this.iterations == 0)  ==>  (tableau.numSlackVariables one of { 1, 3 })
(this.iterations == 0)  ==>  (tableau.restrictToNonNegative == false)
(this.iterations == 0)  ==>  (this.f.constantTerm == 0.0)
(this.iterations == 0)  ==>  (this.goalType has only one value)
(this.iterations == 0)  ==>  (this.restrictToNonNegative == false)
this.f != null
this.constraints != null
this.goalType != null
tableau.f != null
tableau.f.coefficients != null
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
tableau.f.constantTerm one of { -5.0, 0.0, 7.0 }
tableau.constraints != null
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.tableau != null
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables >= 2
tableau.numSlackVariables >= 0
tableau.epsilon == 1.0E-6
this.iterations >= orig(this.iterations)
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.SimplexSolverTest():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.equationFromString(int, java.lang.String):::ENTER
this has only one value
numCoefficients == 216
s != null
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.equationFromString(int, java.lang.String):::EXIT
s.toString == orig(s.toString)
return != null
return.coefficients != null
return.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
return.relationship != null
return.relationship.stringValue != null
return.relationship.stringValue.toString one of { "=", ">=" }
return.value >= 0.0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testEpsilon():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testEpsilon():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testLargeModel():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testLargeModel():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testMinimization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testMinimization():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testModelWithNoArtificialVars():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testModelWithNoArtificialVars():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testRestrictVariablesToNonNegative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testRestrictVariablesToNonNegative():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testSimplexSolver():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testSimplexSolver():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testSolutionWithNegativeDecisionVariable():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testSolutionWithNegativeDecisionVariable():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testTrivialModel():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testTrivialModel():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau:::OBJECT
this.f != null
this.f.coefficients != null
this.f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.f.constantTerm one of { -5.0, 0.0, 7.0 }
this.constraints != null
this.constraints.getClass().getName() == java.util.ArrayList.class
this.tableau.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.numSlackVariables >= 0
this.numArtificialVariables >= 0
this.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.SimplexTableau(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math.optimization.GoalType, boolean, double):::ENTER
f != null
f.coefficients != null
f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
f.constantTerm one of { -5.0, 0.0, 7.0 }
constraints != null
constraints.getClass().getName() == java.util.ArrayList.class
goalType != null
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MAXIMIZE != null
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE != null
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES != null
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
epsilon == 1.0E-6
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.SimplexTableau(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math.optimization.GoalType, boolean, double):::EXIT
f.coefficients == orig(f.coefficients)
f.coefficients.getClass().getName() == orig(f.coefficients.getClass().getName())
f.constantTerm == orig(f.constantTerm)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.tableau != null
this.numDecisionVariables >= 2
f.coefficients != null
f.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
f.constantTerm one of { -5.0, 0.0, 7.0 }
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MAXIMIZE != null
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE != null
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES != null
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.copyArray(double[], double[], int):::ENTER
this.tableau == null
this.numDecisionVariables >= 2
src != null
dest != null
dest[] elements one of { -1.0, 0.0, 1.0 }
destPos one of { 1, 2 }
size(src[]) >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.copyArray(double[], double[], int):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
src[] == orig(src[])
this.tableau == null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.createTableau(boolean):::ENTER
this.tableau == null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.createTableau(boolean):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau == null
this.numDecisionVariables >= 2
return != null
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.discardArtificialVariables():::ENTER
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.discardArtificialVariables():::EXIT308
this.tableau == orig(this.tableau)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.f.constantTerm == 0.0
this.restrictToNonNegative == false
this.numDecisionVariables one of { 2, 3 }
this.numSlackVariables one of { 1, 3 }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.discardArtificialVariables():::EXIT321
orig(this.numArtificialVariables) >= 1
this.numArtificialVariables < orig(this.numArtificialVariables)
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.discardArtificialVariables():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.epsilon == orig(this.epsilon)
(orig(this.numArtificialVariables) == 0)  <==>  (this.numArtificialVariables == orig(this.numArtificialVariables))
(orig(this.numArtificialVariables) == 0)  ==>  (this.f.constantTerm == 0.0)
(orig(this.numArtificialVariables) == 0)  ==>  (this.numDecisionVariables one of { 2, 3 })
(orig(this.numArtificialVariables) == 0)  ==>  (this.numSlackVariables one of { 1, 3 })
(orig(this.numArtificialVariables) == 0)  ==>  (this.restrictToNonNegative == false)
(orig(this.numArtificialVariables) == 0)  ==>  (this.tableau == orig(this.tableau))
this.tableau != null
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
this.numArtificialVariables <= orig(this.numArtificialVariables)
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.divideRow(int, double):::ENTER
this.tableau != null
this.numDecisionVariables >= 2
dividendRow >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.divideRow(int, double):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getArtificialVariableOffset():::ENTER
this.numDecisionVariables >= 2
this.numArtificialVariables >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getArtificialVariableOffset():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.numDecisionVariables >= 2
this.numArtificialVariables >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int):::ENTER
this.tableau != null
this.numDecisionVariables >= 2
this.numArtificialVariables >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
this.numArtificialVariables >= 1
return != null
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int, boolean):::ENTER
this.tableau != null
this.numDecisionVariables >= 2
col >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int, boolean):::EXIT297
this.numArtificialVariables == 0
return == null
orig(ignoreObjectiveRows) == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int, boolean):::EXIT300
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int, boolean):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRowForSolution(int):::ENTER
this.tableau != null
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
col >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRowForSolution(int):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship):::ENTER
this.tableau == null
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
relationship != null
relationship.stringValue != null
relationship.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
this.tableau == null
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
relationship.stringValue != null
relationship.stringValue.toString one of { "<=", "=", ">=" }
return >= 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getEntry(int, int):::ENTER
this.tableau != null
this.numDecisionVariables >= 2
row >= 0
column >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getEntry(int, int):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getHeight():::ENTER
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getHeight():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(org.apache.commons.math.linear.RealVector):::ENTER
coefficients != null
coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(org.apache.commons.math.linear.RealVector):::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNegativeDecisionVariableOffset():::ENTER
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNegativeDecisionVariableOffset():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNormalizedConstraints():::ENTER
this.tableau == null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNormalizedConstraints():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau == null
this.numDecisionVariables >= 2
return != null
return[] elements != null
return[].getClass().getName() elements == org.apache.commons.math.optimization.linear.LinearConstraint.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumArtificialVariables():::ENTER
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumArtificialVariables():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
return >= 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumObjectiveFunctions():::ENTER
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumObjectiveFunctions():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.numDecisionVariables >= 2
return one of { 1, 2 }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumVariables():::ENTER
this.tableau == null
this.numDecisionVariables == 0
this.numSlackVariables == 0
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumVariables():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau == null
this.numDecisionVariables == 0
this.numSlackVariables == 0
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getOriginalNumDecisionVariables():::ENTER
this.tableau != null
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getOriginalNumDecisionVariables():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getRhsOffset():::ENTER
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getRhsOffset():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getSlackVariableOffset():::ENTER
this.tableau == null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getSlackVariableOffset():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau == null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getSolution():::ENTER
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getSolution():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.numDecisionVariables >= 2
this.numArtificialVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getWidth():::ENTER
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getWidth():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.initialize():::ENTER
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.initialize():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
this.numDecisionVariables >= 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.normalize(org.apache.commons.math.optimization.linear.LinearConstraint):::ENTER
this.tableau == null
this.numDecisionVariables >= 2
constraint != null
constraint.coefficients != null
constraint.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
constraint.relationship != null
constraint.relationship.stringValue != null
constraint.relationship.stringValue.toString one of { "<=", "=", ">=" }
constraint.value >= 0.0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.normalize(org.apache.commons.math.optimization.linear.LinearConstraint):::EXIT216
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.normalize(org.apache.commons.math.optimization.linear.LinearConstraint):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
constraint.coefficients == orig(constraint.coefficients)
constraint.coefficients.getClass().getName() == orig(constraint.coefficients.getClass().getName())
constraint.relationship == orig(constraint.relationship)
constraint.relationship.stringValue == orig(constraint.relationship.stringValue)
constraint.relationship.stringValue.toString == orig(constraint.relationship.stringValue.toString)
constraint.value == orig(constraint.value)
this.tableau == null
this.numDecisionVariables >= 2
constraint.coefficients != null
constraint.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
constraint.relationship != null
constraint.relationship.stringValue != null
constraint.relationship.stringValue.toString one of { "<=", "=", ">=" }
constraint.value >= 0.0
return != null
return.coefficients != null
return.coefficients.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
return.relationship != null
return.relationship.stringValue != null
return.relationship.stringValue.toString one of { "<=", "=", ">=" }
return.value >= 0.0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.subtractRow(int, int, double):::ENTER
this.tableau != null
minuendRow >= 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.subtractRow(int, int, double):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau != null
===========================================================================
org.apache.commons.math.optimization.linear.UnboundedSolutionException:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.UnboundedSolutionException:::OBJECT
this has only one value
this.pattern has only one value
this.pattern.toString == "unbounded solution"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.optimization.linear.UnboundedSolutionException.UnboundedSolutionException():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat:::CLASS
===========================================================================
org.apache.commons.math.util.CompositeFormat:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealVectorFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat.CompositeFormat():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::ENTER
y == 0.0
eps == 1.0E-6
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::EXIT368
return == 0
orig(x) == 0.0
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::EXIT370
return == -1
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::EXIT372
return == 1
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::EXIT
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::ENTER
y one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::EXIT
(return == true)  ==>  (orig(x) one of { 0.0, 1.0 })
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::EXIT;condition="return == true"
return == true
orig(x) one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, double):::ENTER
y one of { 0.0, 1.0 }
eps == 1.0E-6
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, double):::EXIT
(return == true)  ==>  (orig(x) one of { 0.0, 1.0 })
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, double):::EXIT;condition="return == true"
return == true
orig(x) one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, double):::EXIT;condition="not(return == true)"
return == false
