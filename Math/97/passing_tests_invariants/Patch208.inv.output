===========================================================================
org.apache.commons.math.ConvergenceException:::CLASS
org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED == true
org.apache.commons.math.MathException.cachedResources == null
===========================================================================
org.apache.commons.math.ConvergenceException:::OBJECT
this has only one value
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations ({0}) exceeded"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 1
this.arguments[] elements has only one value
this.arguments[].getClass().getName() == [java.lang.Integer]
this.arguments[].getClass().getName() elements == java.lang.Integer.class
this.rootCause == null
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[]):::ENTER
pattern has only one value
pattern.toString == "Maximal number of iterations ({0}) exceeded"
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] contains no nulls and has only one value, of length 1
arguments[] elements has only one value
size(arguments[]) == 1
===========================================================================
org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString == "Maximal number of iterations ({0}) exceeded"
arguments[] contains no nulls and has only one value, of length 1
arguments[] elements has only one value
===========================================================================
org.apache.commons.math.MathException:::CLASS
org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED == true
org.apache.commons.math.MathException.cachedResources == null
===========================================================================
org.apache.commons.math.MathException:::OBJECT
this.pattern.toString one of { "Maximal number of iterations (3) exceeded", "Maximal number of iterations ({0}) exceeded" }
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] elements has only one value
this.arguments[].getClass().getName() elements == java.lang.Integer.class
this.arguments[].getClass().getName() one of { [], [java.lang.Integer] }
size(this.arguments[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::ENTER
pattern has only one value
pattern.toString == "Maximal number of iterations ({0}) exceeded"
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] contains no nulls and has only one value, of length 1
arguments[] elements has only one value
size(arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations ({0}) exceeded"
this.arguments has only one value
this.arguments[] contains no nulls and has only one value, of length 1
this.arguments[].getClass().getName() == [java.lang.Integer]
this.rootCause == null
pattern.toString == "Maximal number of iterations ({0}) exceeded"
arguments[] contains no nulls and has only one value, of length 1
arguments[] elements has only one value
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.Throwable):::ENTER
rootCause has only one value
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.Throwable):::EXIT
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations (3) exceeded"
this.arguments has only one value
this.arguments[] == []
this.arguments[].getClass().getName() == []
this.rootCause has only one value
===========================================================================
org.apache.commons.math.MathException.buildMessage(java.lang.String, java.lang.Object[], java.util.Locale):::ENTER
pattern has only one value
pattern.toString == "Maximal number of iterations ({0}) exceeded"
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] contains no nulls and has only one value, of length 1
arguments[] elements has only one value
locale has only one value
size(arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.buildMessage(java.lang.String, java.lang.Object[], java.util.Locale):::EXIT
org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED == orig(org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED)
org.apache.commons.math.MathException.cachedResources == orig(org.apache.commons.math.MathException.cachedResources)
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString == "Maximal number of iterations ({0}) exceeded"
arguments[] contains no nulls and has only one value, of length 1
arguments[] elements has only one value
return has only one value
return.toString == "Maximal number of iterations (3) exceeded"
===========================================================================
org.apache.commons.math.MathException.getCause():::ENTER
this has only one value
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations (3) exceeded"
this.arguments has only one value
this.arguments[] == []
this.arguments[].getClass().getName() == []
this.rootCause has only one value
===========================================================================
org.apache.commons.math.MathException.getCause():::EXIT
org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED == orig(org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED)
org.apache.commons.math.MathException.cachedResources == orig(org.apache.commons.math.MathException.cachedResources)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.arguments == orig(this.arguments)
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.arguments[] == orig(this.arguments[])
this.rootCause == orig(this.rootCause)
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations (3) exceeded"
this.arguments has only one value
this.arguments[] == []
this.arguments[].getClass().getName() == []
this.rootCause has only one value
return has only one value
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::ENTER
s has only one value
s.toString == "Maximal number of iterations ({0}) exceeded"
locale has only one value
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::EXIT101
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::EXIT
org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED == orig(org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED)
org.apache.commons.math.MathException.cachedResources == orig(org.apache.commons.math.MathException.cachedResources)
s.toString == orig(s.toString)
s.toString == "Maximal number of iterations ({0}) exceeded"
return has only one value
return.toString == "Maximal number of iterations ({0}) exceeded"
===========================================================================
org.apache.commons.math.MaxIterationsExceededException:::CLASS
org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED == true
org.apache.commons.math.MathException.cachedResources == null
===========================================================================
org.apache.commons.math.MaxIterationsExceededException:::OBJECT
this has only one value
this.maxIterations == 3
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations ({0}) exceeded"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 1
this.arguments[] elements has only one value
this.arguments[].getClass().getName() == [java.lang.Integer]
this.arguments[].getClass().getName() elements == java.lang.Integer.class
this.rootCause == null
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int):::ENTER
maxIterations == 3
===========================================================================
org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int):::EXIT
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::ENTER
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::EXIT
msg.toString == orig(msg.toString)
===========================================================================
org.apache.commons.math.analysis.BrentSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.BrentSolver:::OBJECT
this.relativeAccuracy == 1.0E-14
this.functionValueAccuracy == 1.0E-15
this.maximalIterationCount one of { 100, 1000 }
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultFunctionValueAccuracy == 1.0E-15
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.BrentSolver.BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
===========================================================================
org.apache.commons.math.analysis.BrentSolver.BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double):::ENTER
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == true
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double):::ENTER
this has only one value
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == true
this.result == 1.0000001028217766
this.iterationCount one of { 2, 13, 14 }
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.analysis.MonitoredFunction.class
min == 0.6
max == 7.0
initial one of { 0.61, 0.999999 }
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double):::EXIT101
this.iterationCount one of { 2, 14 }
orig(this.iterationCount) one of { 13, 14 }
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double):::EXIT77
this.iterationCount == 0
orig(this.iterationCount) == 2
orig(initial) == 1.0
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == true
this.result == 0.9999999736360261
this.iterationCount one of { 0, 2, 14 }
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.analysis.MonitoredFunction.class
return == 0.9999999736360261
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double, double, double, double):::ENTER
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double, double, double, double):::EXIT195
orig(this.result) one of { 0.0, 0.9999999736360261 }
orig(this.iterationCount) one of { 0, 14 }
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double, double, double, double):::EXIT202
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double, double, double, double):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == true
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.BrentSolverTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.BrentSolverTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints():::EXIT
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess():::EXIT
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero():::EXIT
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.testSinZero():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.BrentSolverTest.testSinZero():::EXIT
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction:::OBJECT
this has only one value
this.callsCount >= 0
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.analysis.QuinticFunction.class
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.MonitoredFunction(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.QuinticFunction.class
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.MonitoredFunction(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
this.callsCount == 0
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.getCallsCount():::ENTER
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.getCallsCount():::EXIT
this.callsCount == orig(this.callsCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.setCallsCount(int):::ENTER
this.callsCount one of { 5, 15, 17 }
callsCount == 0
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.setCallsCount(int):::EXIT
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.callsCount == 0
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.value(double):::EXIT
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.callsCount >= 1
this.callsCount - orig(this.callsCount) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.QuinticFunction:::CLASS
===========================================================================
org.apache.commons.math.analysis.QuinticFunction:::OBJECT
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.QuinticFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.value(double):::EXIT
return >= -0.11232
===========================================================================
org.apache.commons.math.analysis.SecantSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.SecantSolver:::OBJECT
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.functionValueAccuracy == 1.0E-15
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultFunctionValueAccuracy == 1.0E-15
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.SecantSolver.SecantSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
===========================================================================
org.apache.commons.math.analysis.SecantSolver.SecantSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.SecantSolver.solve(double, double):::ENTER
===========================================================================
org.apache.commons.math.analysis.SecantSolver.solve(double, double):::EXIT123
this.result one of { 0.0, 1.0, 3.141592653589793 }
return one of { 0.0, 1.0, 3.141592653589793 }
orig(this.result) one of { 0.0, 1.000000000000087 }
===========================================================================
org.apache.commons.math.analysis.SecantSolver.solve(double, double):::EXIT128
this.resultComputed == orig(this.resultComputed)
this.result one of { 0.5000000000003787, 0.9999999999976639, 3.1415926535897576 }
return one of { 0.5000000000003787, 0.9999999999976639, 3.1415926535897576 }
this.result >= orig(this.result)
===========================================================================
org.apache.commons.math.analysis.SecantSolver.solve(double, double):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == true
this.iterationCount != orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.SinFunction:::OBJECT
===========================================================================
org.apache.commons.math.analysis.SinFunction.SinFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::EXIT
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactory:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactory.UnivariateRealSolverFactory():::EXIT
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance():::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.UnivariateRealSolverFactoryImpl():::EXIT
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.BrentSolver.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newDefaultSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newDefaultSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.BrentSolver.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl:::CLASS
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl:::OBJECT
this.relativeAccuracy == 1.0E-14
this.functionValueAccuracy == 1.0E-15
this.maximalIterationCount one of { 3, 100, 1000 }
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultFunctionValueAccuracy == 1.0E-15
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(org.apache.commons.math.analysis.UnivariateRealFunction, int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(org.apache.commons.math.analysis.UnivariateRealFunction, int, double):::EXIT
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.clearResult():::ENTER
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.clearResult():::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == false
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.getAbsoluteAccuracy():::ENTER
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == true
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.getAbsoluteAccuracy():::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == true
return == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.getIterationCount():::ENTER
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == true
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.getIterationCount():::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == true
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.getResult():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.SecantSolver.class
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == true
this.result == 3.1415926535897576
this.iterationCount == 5
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.getResult():::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == true
this.result == 3.1415926535897576
this.iterationCount == 5
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
return == 3.1415926535897576
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.setAbsoluteAccuracy(double):::ENTER
this.getClass().getName() == org.apache.commons.math.analysis.BrentSolver.class
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.setAbsoluteAccuracy(double):::EXIT
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.maximalIterationCount == 100
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.setMaximalIterationCount(int):::ENTER
this.getClass().getName() == org.apache.commons.math.analysis.BrentSolver.class
this.maximalIterationCount == 100
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
this.f.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
count one of { 3, 1000 }
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.setMaximalIterationCount(int):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.maximalIterationCount one of { 3, 1000 }
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
this.f.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
this.maximalIterationCount != orig(this.maximalIterationCount)
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double, int):::ENTER
this.maximalIterationCount one of { 100, 1000 }
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double, int):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.maximalIterationCount one of { 100, 1000 }
this.resultComputed == true
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(double, double):::ENTER
this.resultComputed == false
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(double, double):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == false
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils:::CLASS
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
function.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
lowerBound one of { -1.7976931348623157E308, 0.0, 2.1 }
upperBound >= 0.1
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != function.getClass().getName()
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory)
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
return[] sorted by <
size(return[]) == 2
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != orig(function.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, int):::ENTER
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
function.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
lowerBound one of { -1.7976931348623157E308, 0.0, 2.1 }
upperBound >= 0.1
maximumIterations == 2147483647
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != function.getClass().getName()
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, int):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory)
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
return[] sorted by <
size(return[]) == 2
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != orig(function.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != f.getClass().getName()
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != orig(f.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
x1 >= 0.1
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != f.getClass().getName()
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory)
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != orig(f.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
x0 one of { 0.0, 1.0 }
x1 == 4.0
absoluteAccuracy one of { 0.0, 1.0E-6, 4.0 }
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory)
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
return one of { 0.0, 3.141592780561861 }
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest:::OBJECT
this.sin.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.UnivariateRealSolverUtilsTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracySin():::ENTER
this has only one value
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveAccuracySin():::EXIT
this.sin == orig(this.sin)
this.sin.getClass().getName() == orig(this.sin.getClass().getName())
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveBadParameters():::ENTER
this has only one value
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveBadParameters():::EXIT
this.sin == orig(this.sin)
this.sin.getClass().getName() == orig(this.sin.getClass().getName())
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNoRoot():::ENTER
this has only one value
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveNoRoot():::EXIT
this.sin == orig(this.sin)
this.sin.getClass().getName() == orig(this.sin.getClass().getName())
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveSin():::ENTER
this has only one value
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testSolveSin():::EXIT
this.sin == orig(this.sin)
this.sin.getClass().getName() == orig(this.sin.getClass().getName())
this.sin has only one value
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1:::OBJECT
this.val$p <= 0.999
this.val$p >= 0.001
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::EXIT
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.value(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.value(double):::EXIT
this.val$p == orig(this.val$p)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::EXIT109
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance one of { 5.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] one of { [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestValues[] elements >= 0.0
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) one of { 10, 12 }
size(this.inverseCumulativeTestValues[]) one of { 10, 12 }
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.ChiSquareDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.ChiSquareDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
size(return[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues == null
size(this.inverseCumulativeTestPoints[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.inverseCumulativeTestPoints[]) == 12
size(return[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.setUp():::EXIT
this.tolerance == 5.0E-6
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 5.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf():::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
size(this.cumulativeTestPoints[]) == orig(size(this.cumulativeTestPoints[]))
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:::OBJECT
this.gamma.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double):::ENTER
df one of { 0.1, 5.0 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double):::EXIT
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double, org.apache.commons.math.distribution.GammaDistribution):::ENTER
df one of { 0.1, 5.0 }
g.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double, org.apache.commons.math.distribution.GammaDistribution):::EXIT
this.gamma == orig(g)
this.gamma.getClass().getName() == orig(g.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom():::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom():::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
return one of { 0.1, 5.0 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
return == 1.0E-323
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainUpperBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainUpperBound(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
return one of { 0.1, 5.0, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma():::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma():::EXIT
this.gamma == return
this.gamma.getClass().getName() == return.getClass().getName()
return == orig(this.gamma)
return.getClass().getName() == orig(this.gamma.getClass().getName())
return.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getInitialDomain(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getInitialDomain(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT101
this.gamma has only one value
return == 0.0
orig(this) has only one value
orig(p) == 0.0
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT104
this.gamma has only one value
return == Infinity
orig(this) has only one value
orig(p) == 1.0
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT106
return >= 1.0E-323
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double):::ENTER
degreesOfFreedom one of { 0.1, 5.0 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(org.apache.commons.math.distribution.GammaDistribution):::ENTER
this.gamma == null
g.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(org.apache.commons.math.distribution.GammaDistribution):::EXIT
this.gamma == orig(g)
this.gamma.getClass().getName() == orig(g.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:::OBJECT
this.cumulativeTestValues[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
size(this.cumulativeTestPoints[]) one of { 10, 11 }
size(this.cumulativeTestValues[]) one of { 10, 11 }
size(this.inverseCumulativeTestPoints[]) one of { 10, 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 10, 11, 12 }
this.getClass().getName() != this.distribution.getClass().getName()
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::EXIT
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
return[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
size(return[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues():::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
return has only one value
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance():::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
size(return[]) one of { 10, 11 }
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues == null
size(this.inverseCumulativeTestPoints[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues == null
size(this.inverseCumulativeTestPoints[]) one of { 10, 11 }
size(return[]) one of { 10, 11 }
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[]):::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
size(cumulativeTestPoints[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
cumulativeTestPoints[] == orig(cumulativeTestPoints[])
size(this.cumulativeTestPoints[]) == orig(size(this.cumulativeTestPoints[]))
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.ContinuousDistribution):::ENTER
this.distribution.getClass().getName() == distribution.getClass().getName()
this.tolerance one of { 1.0E-6, 5.0E-6 }
this.cumulativeTestPoints[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.ContinuousDistribution):::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.distribution.getClass().getName() == orig(distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.tolerance one of { 1.0E-6, 5.0E-6 }
this.cumulativeTestPoints[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[]):::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
inverseCumulativeTestPoints has only one value
inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
size(inverseCumulativeTestPoints[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
inverseCumulativeTestPoints[] == orig(inverseCumulativeTestPoints[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[]):::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
size(inverseCumulativeTestValues[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
inverseCumulativeTestValues[] == orig(inverseCumulativeTestValues[])
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::ENTER
this.tolerance one of { 1.0E-6, 5.0E-6, 1.0E-4 }
this.tolerance != tolerance
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution.getClass().getName() != orig(this.getClass().getName())
this.tolerance != orig(this.tolerance)
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::EXIT
this.tolerance == orig(this.tolerance)
this.tolerance == 1.0E-4
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::EXIT
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities():::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities():::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 10, 11 }
size(this.inverseCumulativeTestValues[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 10, 11 }
size(this.inverseCumulativeTestValues[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities():::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl:::OBJECT
this.numeratorDegreesOfFreedom one of { 0.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 0.0, 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double, double):::ENTER
numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double, double):::EXIT
this.numeratorDegreesOfFreedom == orig(numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double):::ENTER
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
x >= 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom():::ENTER
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom():::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
return one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainLowerBound(double):::ENTER
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainLowerBound(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
return == 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainUpperBound(double):::ENTER
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainUpperBound(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
return == 1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double):::ENTER
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
return one of { 1.000020000400008, 1.5 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom():::ENTER
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom():::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
return one of { 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double):::ENTER
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double):::EXIT106
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double):::ENTER
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom == 0.0
degreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(degreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double):::ENTER
this.numeratorDegreesOfFreedom == 0.0
this.denominatorDegreesOfFreedom == 0.0
degreesOfFreedom one of { 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double):::EXIT
this.numeratorDegreesOfFreedom == orig(degreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 5.0, 100000.0 }
this.denominatorDegreesOfFreedom == 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
this.tolerance one of { 4.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
this.cumulativeTestPoints[] elements >= 0.03468084
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
this.inverseCumulativeTestValues[] elements >= 0.03468084
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
return[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
return[] elements >= 0.03468084
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.setUp():::EXIT
this.tolerance == 4.0E-6
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl:::OBJECT
this.beta one of { 0.0, 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double, double):::ENTER
beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double, double):::EXIT
this.alpha == orig(alpha)
this.beta == orig(beta)
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double):::ENTER
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha():::ENTER
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha():::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getBeta():::ENTER
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getBeta():::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
return one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainLowerBound(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainLowerBound(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return == 4.9E-324
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return one of { 4.0, 8.0, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return one of { 2.0, 4.0, 8.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::EXIT102
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double):::ENTER
this.alpha one of { 0.0, 0.05, 2.5 }
this.beta one of { 0.0, 2.0 }
this.alpha % alpha == 0
this.alpha <= alpha
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double):::EXIT
this.alpha == orig(alpha)
this.beta == orig(this.beta)
this.beta one of { 0.0, 2.0 }
orig(this.alpha) % this.alpha == 0
this.alpha >= orig(this.alpha)
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double):::ENTER
this.beta == 0.0
beta one of { 1.0, 2.0 }
this.beta < beta
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(beta)
this.beta one of { 1.0, 2.0 }
this.beta > orig(this.beta)
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
this.tolerance one of { 6.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
this.cumulativeTestPoints[] elements >= 0.8571048
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
this.inverseCumulativeTestValues[] elements >= 0.8571048
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.GammaDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.GammaDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
return[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
return[] elements >= 0.8571048
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.setUp():::EXIT
this.tolerance == 6.0E-6
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValue(double, double, double, double):::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 6.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
a one of { 1.0, 2.0, 4.0 }
b one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValue(double, double, double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 6.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValues():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 6.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 6.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::OBJECT
this has only one value
this.mean one of { 0.0, 2.1 }
this.standardDeviation one of { 1.0, 1.4 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::ENTER
mean == 2.1
sd == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(sd)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::EXIT110
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { -1.7976931348623157E308, 2.1 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { 2.1, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { 0.7000000000000002, 3.5 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getMean():::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getMean():::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return == 2.1
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation():::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation():::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::EXIT145
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::ENTER
this.mean == 0.0
this.standardDeviation == 1.0
mean == 2.1
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.0
sd == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(sd)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.tolerance one of { 1.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
return[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.setUp():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.setUp():::EXIT
this.distribution has only one value
this.tolerance == 1.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::OBJECT
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::ENTER
degreesOfFreedom one of { 1.0, 5.0 }
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::EXIT
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom one of { 1.0, 5.0 }
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double):::ENTER
this.degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
this.degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom():::ENTER
this.degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom():::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
this.degreesOfFreedom >= 1.0
return >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDomainLowerBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDomainLowerBound(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
return == -1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDomainUpperBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDomainUpperBound(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
return == 1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getInitialDomain(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getInitialDomain(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
return == 0.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability(double):::EXIT117
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::ENTER
degreesOfFreedom >= 1.0
this.degreesOfFreedom <= degreesOfFreedom
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::EXIT
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom >= 1.0
this.degreesOfFreedom >= orig(this.degreesOfFreedom)
===========================================================================
org.apache.commons.math.distribution.TDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
this.tolerance one of { 1.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884] }
size(this.cumulativeTestPoints[]) == 11
size(this.cumulativeTestValues[]) == 11
size(this.inverseCumulativeTestPoints[]) == 11
size(this.inverseCumulativeTestValues[]) == 11
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.TDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.TDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestValues == null
return[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
size(return[]) == 11
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 11
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.setUp():::EXIT
this.tolerance == 1.0E-6
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestValues[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.testSmallDf():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.testSmallDf():::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
size(this.cumulativeTestPoints[]) == orig(size(this.cumulativeTestPoints[]))
size(this.inverseCumulativeTestValues[]) == orig(size(this.inverseCumulativeTestValues[]))
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684]
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator:::OBJECT
this.minStep one of { 0.0, 0.1 }
this.maxStep one of { 4.0, 10.0, 15.0 }
this.initialStep == -1.0
this.scalAbsoluteTolerance <= 1.0E-8
this.scalRelativeTolerance one of { 1.0E-12, 1.0000000000000001E-11, 1.0E-10 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.handler != null
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first.handler != null
this.eventsHandlersManager.first.maxCheckInterval one of { 1.0, Infinity }
this.eventsHandlersManager.first.convergence one of { 1.0E-12, 1.5E-7 }
this.eventsHandlersManager.first.maxIterationCount == 1000
this.eventsHandlersManager.first.g0 != 0
this.eventsHandlersManager.first.pendingEvent == true
this.eventsHandlersManager.first.nextAction == 3
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double, double, double, double):::ENTER
minStep one of { 0.0, 0.1 }
maxStep one of { 4.0, 10.0, 15.0 }
scalRelativeTolerance one of { 1.0E-12, 1.0000000000000001E-11, 1.0E-10 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(double, double, double, double):::EXIT
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
maxCheckInterval one of { 1.0, Infinity }
convergence one of { 1.0E-12, 4.0E-8, 1.5E-7 }
maxIterationCount one of { 3, 1000 }
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
size(this.eventsHandlersManager.states[])-1 == orig(size(this.eventsHandlersManager.states[]))
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.clearEventsHandlers():::ENTER
this.minStep == 0.0
this.maxStep == 15.0
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
this.stepStart one of { 12.0, Double.NaN }
this.stepSize one of { 0.0, 0.39431720573626805 }
size(this.eventsHandlersManager.states[]) == 2
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.clearEventsHandlers():::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.minStep == 0.0
this.maxStep == 15.0
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
this.stepStart one of { 12.0, Double.NaN }
this.stepSize one of { 0.0, 0.39431720573626805 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.filterStep(double, boolean):::ENTER
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.filterStep(double, boolean):::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getCurrentSignedStepsize():::ENTER
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0 }
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getCurrentSignedStepsize():::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0 }
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getCurrentStepStart():::ENTER
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0 }
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getCurrentStepStart():::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0 }
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getEventsHandlers():::ENTER
this.minStep == 0.0
this.maxStep == 15.0
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.stepStart one of { 12.0, Double.NaN }
this.stepSize one of { 0.0, 0.39431720573626805 }
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getEventsHandlers():::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.minStep == 0.0
this.maxStep == 15.0
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.stepStart one of { 12.0, Double.NaN }
this.stepSize one of { 0.0, 0.39431720573626805 }
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMaxStep():::ENTER
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMaxStep():::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
return one of { 4.0, 10.0, 15.0 }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMinStep():::ENTER
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == 0.0
this.stepSize one of { 0.0, 1.0 }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.getMinStep():::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == 0.0
this.stepSize one of { 0.0, 1.0 }
return one of { 0.0, 0.1 }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::ENTER
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == 0.0
this.stepSize one of { 0.0, 1.0 }
forward == true
order one of { 5, 8, 13 }
scale[] sorted by >=
t0 == 0.0
y0[] one of { [0.0], [0.9320390859672263, 0.3623577544766736], [1.0, 0.1] }
y0[] sorted by >
yDot0[] one of { [-1.0, -0.1], [0.0], [0.3623577544766736, -0.9320390859672263] }
y1[] elements == 0.0
y1[] one of { [0.0], [0.0, 0.0] }
yDot1[] elements == 0.0
yDot1[] one of { [0.0], [0.0, 0.0] }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(scale[]) one of { 1, 2 }
size(y0[]) one of { 1, 2 }
size(yDot0[]) one of { 1, 2 }
size(y1[]) one of { 1, 2 }
size(yDot1[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT293
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
scale[] == orig(scale[])
y0[] == orig(y0[])
yDot0[] == orig(yDot0[])
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == 0.0
this.stepSize one of { 0.0, 1.0 }
scale[] sorted by >=
y0[] one of { [0.0], [0.9320390859672263, 0.3623577544766736], [1.0, 0.1] }
y0[] sorted by >
yDot0[] one of { [-1.0, -0.1], [0.0], [0.3623577544766736, -0.9320390859672263] }
y1[] sorted by >
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
y1[] >= orig(y1[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState():::ENTER
this.eventsHandlersManager.first == null
this.stepStart one of { 0.0, 10.0, 12.0 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.resetInternalState():::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.eventsHandlersManager.first == null
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.stepStart != orig(this.stepStart)
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
t0 == 0.0
y0[] one of { [0.0], [0.9320390859672263, 0.3623577544766736], [1.0, 0.1] }
y0[] sorted by >
t one of { 4.0, 10.0, 15.0 }
y[] elements one of { 0.0, Double.NaN }
y[] one of { [0.0, 0.0], [NaN] }
y[] sorted by ==
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(y0[]) one of { 1, 2 }
size(y[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
y0[] == orig(y0[])
y[] == orig(y[])
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
y0[] one of { [0.0], [0.9320390859672263, 0.3623577544766736], [1.0, 0.1] }
y0[] sorted by >
y[] elements one of { 0.0, Double.NaN }
y[] one of { [0.0, 0.0], [NaN] }
y[] sorted by ==
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::ENTER
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0 }
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == 0.0
handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
===========================================================================
org.apache.commons.math.ode.AdaptiveStepsizeIntegrator.setStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::EXIT
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0 }
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-9, 1.0E-8 }
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == 0.0
===========================================================================
org.apache.commons.math.ode.IntegratorException:::CLASS
org.apache.commons.math.MathException.JDK_SUPPORTS_NESTED == true
org.apache.commons.math.MathException.cachedResources == null
===========================================================================
org.apache.commons.math.ode.IntegratorException:::OBJECT
this has only one value
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations (3) exceeded"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
this.rootCause has only one value
===========================================================================
org.apache.commons.math.ode.IntegratorException.IntegratorException(java.lang.Throwable):::ENTER
cause has only one value
===========================================================================
org.apache.commons.math.ode.IntegratorException.IntegratorException(java.lang.Throwable):::EXIT
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager:::CLASS
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager:::OBJECT
this.states != null
this.states[] elements != null
this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.states.getClass().getName() == java.util.ArrayList.class
this.first.handler != null
this.first.maxCheckInterval one of { 1.0, Infinity }
this.first.maxIterationCount == 1000
this.first.g0 != 0
this.first.pendingEvent == true
this.first.nextAction == 3
size(this.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.CombinedEventsManager():::EXIT
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
this.initialized == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
handler != null
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount one of { 3, 1000 }
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
size(this.states[])-1 == orig(size(this.states[]))
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.clearEventsHandlers():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
size(this.states[]) one of { 0, 2 }
size(this.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.clearEventsHandlers():::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
size(this.states[]) <= orig(size(this.states[]))
size(this.states[]) != orig(size(this.states[]))-1
size(this.states[])-1 <= orig(size(this.states[]))-1
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
interpolator != null
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT127
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
this.initialized == false
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT127;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT165
(this.first != null)  <==>  (return == true)
(this.first != null)  ==>  (orig(this.first.convergence) == 1.1718749999999999E-7)
(this.first != null)  ==>  (orig(this.first.g0) == 0.10800984696091481)
(this.first != null)  ==>  (orig(this.first.g0Positive) == true)
(this.first != null)  ==>  (orig(this.first.handler.getClass().getName()) == org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.class)
(this.first != null)  ==>  (orig(this.first.increasing) == false)
(this.first != null)  ==>  (orig(this.first.maxCheckInterval) == Infinity)
(this.first != null)  ==>  (orig(this.first.pendingEventTime) == 8.224790472858423)
(this.first != null)  ==>  (orig(this.first.previousEventTime) == 5.083193142417485)
(this.first != null)  ==>  (orig(this.first.t0) == 8.116569357678017)
(this.first != null)  ==>  (orig(this.initialized) == true)
(this.first != null)  ==>  (this.first.convergence == orig(this.first.convergence))
(this.first != null)  ==>  (this.first.g0 != 0)
(this.first != null)  ==>  (this.first.g0 == orig(this.first.g0))
(this.first != null)  ==>  (this.first.g0Positive == orig(this.first.g0Positive))
(this.first != null)  ==>  (this.first.handler != null)
(this.first != null)  ==>  (this.first.handler == orig(this.first.handler))
(this.first != null)  ==>  (this.first.handler.getClass().getName() == orig(this.first.handler.getClass().getName()))
(this.first != null)  ==>  (this.first.increasing == orig(this.first.increasing))
(this.first != null)  ==>  (this.first.maxCheckInterval == orig(this.first.maxCheckInterval))
(this.first != null)  ==>  (this.first.maxCheckInterval one of { 1.0, Infinity })
(this.first != null)  ==>  (this.first.pendingEventTime == orig(this.first.pendingEventTime))
(this.first != null)  ==>  (this.first.previousEventTime == orig(this.first.previousEventTime))
(this.first != null)  ==>  (this.first.t0 == orig(this.first.t0))
(this.first != null)  ==>  (this.initialized == orig(this.initialized))
(this.first == null)  <==>  (return == false)
(this.first == null)  ==>  (orig(this.first.maxCheckInterval) one of { 1.0, Infinity })
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.initialized == true
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT165;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT165;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first.handler == orig(this.first.handler)
this.first.handler.getClass().getName() == orig(this.first.handler.getClass().getName())
this.first.maxCheckInterval == orig(this.first.maxCheckInterval)
this.first.convergence == orig(this.first.convergence)
this.first.maxIterationCount == orig(this.first.maxIterationCount)
this.first.t0 == orig(this.first.t0)
this.first.g0 == orig(this.first.g0)
this.first.g0Positive == orig(this.first.g0Positive)
this.first.pendingEvent == orig(this.first.pendingEvent)
this.first.pendingEventTime == orig(this.first.pendingEventTime)
this.first.previousEventTime == orig(this.first.previousEventTime)
this.first.increasing == orig(this.first.increasing)
this.first.nextAction == orig(this.first.nextAction)
(this.first != null)  <==>  (return == true)
(this.first != null)  ==>  (orig(this.first.convergence) == 1.1718749999999999E-7)
(this.first != null)  ==>  (orig(this.first.g0) == 0.10800984696091481)
(this.first != null)  ==>  (orig(this.first.g0Positive) == true)
(this.first != null)  ==>  (orig(this.first.handler.getClass().getName()) == org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.class)
(this.first != null)  ==>  (orig(this.first.increasing) == false)
(this.first != null)  ==>  (orig(this.first.maxCheckInterval) == Infinity)
(this.first != null)  ==>  (orig(this.first.pendingEventTime) == 8.224790472858423)
(this.first != null)  ==>  (orig(this.first.previousEventTime) == 5.083193142417485)
(this.first != null)  ==>  (orig(this.first.t0) == 8.116569357678017)
(this.first != null)  ==>  (orig(this.initialized) == true)
(this.first != null)  ==>  (size(this.states[]) one of { 1, 2 })
(this.first != null)  ==>  (this.first.convergence == orig(this.first.convergence))
(this.first != null)  ==>  (this.first.g0 != 0)
(this.first != null)  ==>  (this.first.g0 == orig(this.first.g0))
(this.first != null)  ==>  (this.first.g0Positive == orig(this.first.g0Positive))
(this.first != null)  ==>  (this.first.handler != null)
(this.first != null)  ==>  (this.first.handler == orig(this.first.handler))
(this.first != null)  ==>  (this.first.handler.getClass().getName() == orig(this.first.handler.getClass().getName()))
(this.first != null)  ==>  (this.first.increasing == orig(this.first.increasing))
(this.first != null)  ==>  (this.first.maxCheckInterval == orig(this.first.maxCheckInterval))
(this.first != null)  ==>  (this.first.maxCheckInterval one of { 1.0, Infinity })
(this.first != null)  ==>  (this.first.pendingEventTime == orig(this.first.pendingEventTime))
(this.first != null)  ==>  (this.first.previousEventTime == orig(this.first.previousEventTime))
(this.first != null)  ==>  (this.first.t0 == orig(this.first.t0))
(this.first != null)  ==>  (this.initialized == orig(this.initialized))
(this.first != null)  ==>  (this.initialized == true)
(this.first != null)  ==>  (this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })
(this.first == null)  <==>  (return == false)
(this.first == null)  ==>  (orig(this.first.maxCheckInterval) one of { 1.0, Infinity })
(this.first == null)  ==>  (size(this.states[]) one of { 0, 1, 2 })
(this.states[].getClass().getName() == [])  <==>  (this.initialized == false)
(this.states[].getClass().getName() == [])  ==>  (orig(this.first) == null)
(this.states[].getClass().getName() == [])  ==>  (orig(this.initialized) == false)
(this.states[].getClass().getName() == [])  ==>  (return == false)
(this.states[].getClass().getName() == [])  ==>  (this.first == null)
(this.states[].getClass().getName() == [])  ==>  (this.first == orig(this.first))
(this.states[].getClass().getName() == [])  ==>  (this.initialized == orig(this.initialized))
(this.states[].getClass().getName() == [])  ==>  (this.states[] == [])
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  <==>  (size(this.states[]) one of { 1, 2 })
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  <==>  (this.initialized == true)
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (orig(this.first.g0) != 0)
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (orig(this.first.handler) != null)
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (orig(this.first.maxCheckInterval) one of { 1.0, Infinity })
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.convergence == orig(this.first.convergence))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.g0 != 0)
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.g0 == orig(this.first.g0))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.g0Positive == orig(this.first.g0Positive))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.handler != null)
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.handler == orig(this.first.handler))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.handler.getClass().getName() == orig(this.first.handler.getClass().getName()))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.increasing == orig(this.first.increasing))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.maxCheckInterval == orig(this.first.maxCheckInterval))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.maxCheckInterval one of { 1.0, Infinity })
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.pendingEventTime == orig(this.first.pendingEventTime))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.previousEventTime == orig(this.first.previousEventTime))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.first.t0 == orig(this.first.t0))
(this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })  ==>  (this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class)
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.initialized == orig(this.initialized)
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first != null
this.initialized == true
return == true
orig(this.first.handler.getClass().getName()) == org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.class
orig(this.first.maxCheckInterval) == Infinity
orig(this.first.convergence) == 1.1718749999999999E-7
orig(this.first.t0) == 8.116569357678017
orig(this.first.g0) == 0.10800984696091481
orig(this.first.g0Positive) == true
orig(this.first.pendingEventTime) == 8.224790472858423
orig(this.first.previousEventTime) == 5.083193142417485
orig(this.first.increasing) == false
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.first == null
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventTime():::ENTER
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first != null
this.initialized == true
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventTime():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.first.handler == orig(this.first.handler)
this.first.handler.getClass().getName() == orig(this.first.handler.getClass().getName())
this.first.maxCheckInterval == orig(this.first.maxCheckInterval)
this.first.convergence == orig(this.first.convergence)
this.first.maxIterationCount == orig(this.first.maxIterationCount)
this.first.t0 == orig(this.first.t0)
this.first.g0 == orig(this.first.g0)
this.first.g0Positive == orig(this.first.g0Positive)
this.first.pendingEvent == orig(this.first.pendingEvent)
this.first.pendingEventTime == orig(this.first.pendingEventTime)
this.first.increasing == orig(this.first.increasing)
this.first.nextAction == orig(this.first.nextAction)
this.initialized == orig(this.initialized)
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first != null
this.initialized == true
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsHandlers():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
size(this.states[]) one of { 0, 2 }
size(this.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsHandlers():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
return != null
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.states[]) one of { 0, 2 }
size(this.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(this.states[].getClass().getName() == [])  <==>  (return == true)
(this.states[].getClass().getName() == [])  ==>  (this.states[] == [])
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  <==>  (return == false)
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  <==>  (size(this.states[]) == 1)
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  ==>  (this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class)
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT;condition="return == true"
this.states[] == []
this.states[].getClass().getName() == []
return == true
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT;condition="not(return == true)"
this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
return == false
size(this.states[]) == 1
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::ENTER
this.first == null
t != 0
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(return == false)  ==>  (orig(size(y[])) one of { 1, 2, 4 })
(return == false)  ==>  (size(this.states[]) one of { 0, 1, 2 })
(return == false)  ==>  (y[] == orig(y[]))
(return == true)  ==>  (orig(size(y[])) one of { 1, 2 })
(return == true)  ==>  (orig(y[]) sorted by >)
(return == true)  ==>  (size(this.states[]) one of { 1, 2 })
(return == true)  ==>  (this.initialized == true)
(return == true)  ==>  (this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })
(return == true)  ==>  (y[] sorted by <)
this.first == null
y[] >= orig(y[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT;condition="return == true"
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.initialized == true
y[] sorted by <
return == true
orig(y[]) sorted by >
size(this.states[]) one of { 1, 2 }
orig(size(y[])) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT;condition="not(return == true)"
y[] == orig(y[])
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stepAccepted(double, double[]):::ENTER
this.first == null
t != 0
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stepAccepted(double, double[]):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
y[] == orig(y[])
this.first == null
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::ENTER
this.first == null
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT212
this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
this.initialized == true
return == true
size(this.states[]) == 2
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT212;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT215
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT215;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(return == false)  ==>  (size(this.states[]) one of { 0, 1, 2 })
(return == true)  ==>  (size(this.states[]) == 2)
(return == true)  ==>  (this.initialized == true)
(return == true)  ==>  (this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState])
this.first == null
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT;condition="return == true"
this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
this.initialized == true
return == true
size(this.states[]) == 2
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState$1:::OBJECT
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval one of { 1.0, Infinity }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount one of { 3, 1000 }
org.apache.commons.math.ode.events.EventState.this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval one of { 1.0, Infinity }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount one of { 3, 1000 }
org.apache.commons.math.ode.events.EventState.this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::ENTER
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::EXIT
this.val$interpolator == orig(this.val$interpolator)
this.val$interpolator.getClass().getName() == orig(this.val$interpolator.getClass().getName())
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
===========================================================================
org.apache.commons.math.ode.events.EventState:::CLASS
===========================================================================
org.apache.commons.math.ode.events.EventState:::OBJECT
this.handler != null
this.maxCheckInterval one of { 1.0, Infinity }
this.convergence <= 9.374999999999999E-7
this.maxIterationCount one of { 3, 1000 }
this.nextAction >= 0
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
handler != null
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount one of { 3, 1000 }
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.nextAction one of { 1, 2, 3 }
interpolator != null
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT197
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.increasing == orig(this.increasing)
this.maxIterationCount == 1000
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == false
7.074237736878787E15 * this.pendingEventTime - 7.074237736878785E15 * orig(this.pendingEventTime) - 4 == 0
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT197;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT202
this.maxIterationCount == 1000
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == true
orig(this.pendingEventTime) one of { 8.224790472858423, Double.NaN }
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT202;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT216
this.increasing == orig(this.increasing)
this.pendingEvent == false
this.pendingEventTime == Double.NaN
return == false
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT216;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.nextAction == orig(this.nextAction)
(return == false)  ==>  (this.increasing == orig(this.increasing))
(return == false)  ==>  (this.maxIterationCount one of { 3, 1000 })
(return == false)  ==>  (this.nextAction one of { 1, 2, 3 })
(return == true)  ==>  (orig(this.pendingEventTime) one of { 8.224790472858423, Double.NaN })
(return == true)  ==>  (this.g0 != 0)
(return == true)  ==>  (this.maxIterationCount == 1000)
(return == true)  ==>  (this.nextAction == 3)
(return == true)  ==>  (this.pendingEvent == true)
this.nextAction one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.maxIterationCount == 1000
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == true
orig(this.pendingEventTime) one of { 8.224790472858423, Double.NaN }
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.increasing == orig(this.increasing)
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventHandler():::ENTER
this.maxCheckInterval == Infinity
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventHandler():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxCheckInterval == Infinity
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.increasing == true
this.nextAction == 3
return != null
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::ENTER
this.maxIterationCount == 1000
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount == 1000
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(double, double[]):::ENTER
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.increasing == true
this.nextAction == 3
t0 == 0.0
y0 != null
y0[] sorted by >
size(y0[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
y0[] == orig(y0[])
this.t0 == 0.0
this.g0 != 0
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.increasing == true
this.nextAction == 3
y0[] sorted by >
this.g0 != orig(this.g0)
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::ENTER
y != null
size(y[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT285
this.pendingEvent == orig(this.pendingEvent)
y[] == orig(y[])
this.g0 != 0
this.nextAction == 3
return == false
orig(this.pendingEventTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT285;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT294
this.previousEventTime == orig(this.previousEventTime)
(this.t0 == 12.0)  <==>  (orig(t) == 12.0)
(this.t0 == 12.0)  <==>  (orig(this.pendingEventTime) == 11.999999999999998)
(this.t0 == 12.0)  <==>  (return == false)
(this.t0 == 12.0)  <==>  (this.nextAction == 0)
(this.t0 == 12.0)  <==>  (this.previousEventTime == 12.0)
(this.t0 == 12.0)  ==>  (orig(size(y[])) == 2)
(this.t0 == 12.0)  ==>  (this.g0 == 0.0)
(this.t0 == 12.0)  ==>  (this.g0Positive == true)
(this.t0 == 12.0)  ==>  (this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.class)
(this.t0 == 12.0)  ==>  (this.increasing == true)
(this.t0 == 12.0)  ==>  (this.maxCheckInterval == Infinity)
(this.t0 == 12.0)  ==>  (y[] == orig(y[]))
this.maxIterationCount == 1000
this.nextAction one of { 0, 1, 2 }
orig(this.pendingEvent) == true
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT294;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT294;condition="not(return == true)"
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.class
this.maxCheckInterval == Infinity
this.t0 == 12.0
this.g0 == 0.0
this.g0Positive == true
this.previousEventTime == 12.0
this.increasing == true
this.nextAction == 0
orig(this.pendingEventTime) == 11.999999999999998
orig(t) == 12.0
orig(size(y[])) == 2
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.pendingEventTime != orig(this.pendingEventTime)
y[] >= orig(y[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT;condition="return == true"
this.previousEventTime == orig(this.previousEventTime)
this.maxIterationCount == 1000
this.nextAction one of { 1, 2 }
y[] sorted by <
return == true
orig(this.pendingEvent) == true
orig(y[]) sorted by >
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT;condition="not(return == true)"
y[] == orig(y[])
this.nextAction one of { 0, 3 }
return == false
orig(this.pendingEventTime) one of { 11.999999999999998, Double.NaN }
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::ENTER
this.nextAction one of { 1, 2, 3 }
y != null
size(y[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.increasing == orig(this.increasing)
y[] == orig(y[])
this.t0 >= orig(this.t0)
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::ENTER
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
(this.nextAction one of { 1, 2, 3 })  <==>  (return == false)
(this.nextAction one of { 1, 2, 3 })  ==>  (this.maxCheckInterval one of { 1.0, Infinity })
(this.nextAction one of { 1, 2, 3 })  ==>  (this.maxIterationCount one of { 3, 1000 })
(this.pendingEventTime == 11.999999999999998)  <==>  (orig(this.pendingEventTime) == 11.999999999999998)
(this.pendingEventTime == 11.999999999999998)  <==>  (orig(this.previousEventTime) == 12.0)
(this.pendingEventTime == 11.999999999999998)  <==>  (return == true)
(this.pendingEventTime == 11.999999999999998)  <==>  (this.nextAction == 0)
(this.pendingEventTime == 11.999999999999998)  <==>  (this.previousEventTime == 12.0)
(this.pendingEventTime == 11.999999999999998)  ==>  (this.g0 == 0.0)
(this.pendingEventTime == 11.999999999999998)  ==>  (this.g0Positive == true)
(this.pendingEventTime == 11.999999999999998)  ==>  (this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.class)
(this.pendingEventTime == 11.999999999999998)  ==>  (this.increasing == true)
(this.pendingEventTime == 11.999999999999998)  ==>  (this.maxCheckInterval == Infinity)
(this.pendingEventTime == 11.999999999999998)  ==>  (this.maxIterationCount == 1000)
(this.pendingEventTime == 11.999999999999998)  ==>  (this.pendingEvent == true)
(this.pendingEventTime == 11.999999999999998)  ==>  (this.pendingEventTime == orig(this.pendingEventTime))
(this.pendingEventTime == 11.999999999999998)  ==>  (this.previousEventTime == orig(this.previousEventTime))
(this.pendingEventTime == 11.999999999999998)  ==>  (this.t0 == 12.0)
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="return == true"
this.pendingEventTime == orig(this.pendingEventTime)
this.previousEventTime == orig(this.previousEventTime)
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.class
this.maxCheckInterval == Infinity
this.maxIterationCount == 1000
this.t0 == 12.0
this.g0 == 0.0
this.g0Positive == true
this.pendingEvent == true
this.pendingEventTime == 11.999999999999998
this.previousEventTime == 12.0
this.increasing == true
this.nextAction == 0
return == true
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="not(return == true)"
this.nextAction one of { 1, 2, 3 }
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.methodName.toString == "classical Runge-Kutta"
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.c has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.c[] == [0.5, 0.5, 1.0]
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.c[] elements one of { 0.5, 1.0 }
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.c[] sorted by <=
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a[] elements != null
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.b has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.c[]) == 3
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a[]) == 3
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.b[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a.getClass().getName() == this.a.getClass().getName()
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.finalized == false
this.prototype.forward == true
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a.getClass().getName() != this.handler.getClass().getName()
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.a.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.prototype.getClass().getName() != this.handler.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.h <= 1.25
this.h >= -0.25
size(this.yDotK[]) == 4
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::ENTER
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedState(double, double):::ENTER
this.finalized == false
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedState(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::ENTER
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.equations == orig(this.equations)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName.toString == "Dormand-Prince 5(4)"
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC[] elements <= 1.0
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC[] sorted by <=
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA[] contains no nulls and has only one value, of length 6
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA[] elements != null
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
size(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC[]) == 6
size(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA[]) == 6
size(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator:::OBJECT
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() == this.a.getClass().getName()
this has only one value
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] elements <= 1.0
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.a[] elements != null
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype has only one value
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.forward == true
this.exp one of { -0.2, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.minStep == 0.0
this.maxStep == 15.0
this.initialStep == -1.0
this.scalAbsoluteTolerance == 1.0E-8
this.scalRelativeTolerance == 1.0E-10
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first.maxCheckInterval == Infinity
this.eventsHandlersManager.first.convergence == 1.5E-7
this.eventsHandlersManager.first.maxIterationCount == 1000
this.eventsHandlersManager.first.pendingEvent == true
this.eventsHandlersManager.first.nextAction == 3
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() != this.handler.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.prototype.getClass().getName() != this.handler.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.eventsHandlersManager.states.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.DormandPrince54Integrator(double, double, double, double):::ENTER
minStep == 0.0
maxStep == 15.0
scalAbsoluteTolerance == 1.0E-8
scalRelativeTolerance == 1.0E-10
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.DormandPrince54Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.estimateError(double[][], double[], double[], double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() == yDotK.getClass().getName()
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 2
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
yDotK has only one value
yDotK[] contains no nulls and has only one value, of length 7
yDotK[] elements != null
y0 has only one value
y1 has only one value
size(this.eventsHandlersManager.states[]) == 2
size(yDotK[]) == 7
size(y0[]) == 2
size(y1[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC[])
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA[])
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 2
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
yDotK[] contains no nulls and has only one value, of length 7
yDotK[] elements != null
size(this.eventsHandlersManager.states[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.getOrder():::ENTER
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart one of { 0.0, Double.NaN }
this.stepSize == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.getOrder():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.methodName.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticC[])
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticA[])
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.staticB[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart one of { 0.0, Double.NaN }
this.stepSize == 0.0
return == 5
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.DormandPrince54IntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.DormandPrince54IntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testEvents():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testEvents():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator:::OBJECT
this.v1[] elements != 0
this.v2[] elements != 0
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] contains no nulls and has only one value, of length 7
this.yDotK[] elements != null
this.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4.class
this.forward == true
size(this.v1[]) == 2
size(this.v2[]) == 2
size(this.v3[]) == 2
size(this.v4[]) == 2
size(this.yDotK[]) == 7
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator():::EXIT
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator):::ENTER
interpolator has only one value
interpolator.v1 == null
interpolator.v2 == null
interpolator.v3 == null
interpolator.v4 == null
interpolator.vectorsInitialized == false
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator):::EXIT
interpolator.v1 == orig(interpolator.v1)
interpolator.v2 == orig(interpolator.v2)
interpolator.v3 == orig(interpolator.v3)
interpolator.v4 == orig(interpolator.v4)
interpolator.vectorsInitialized == orig(interpolator.vectorsInitialized)
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
interpolator.v1 == null
interpolator.v2 == null
interpolator.v3 == null
interpolator.v4 == null
interpolator.vectorsInitialized == false
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.computeInterpolatedState(double, double):::ENTER
this has only one value
this.yDotK has only one value
this.equations has only one value
this.currentState has only one value
this.interpolatedState has only one value
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.computeInterpolatedState(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.v1[]) == orig(size(this.v1[]))
size(this.v2[]) == orig(size(this.v2[]))
size(this.v3[]) == orig(size(this.v3[]))
size(this.v4[]) == orig(size(this.v4[]))
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.v1 has only one value
this.v2 has only one value
this.v3 has only one value
this.v4 has only one value
this.vectorsInitialized == true
this.yDotK has only one value
this.equations has only one value
this.currentState has only one value
this.interpolatedState has only one value
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.doCopy():::ENTER
this has only one value
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.doCopy():::EXIT
this.v1 == orig(this.v1)
this.v2 == orig(this.v2)
this.v3 == orig(this.v3)
this.v4 == orig(this.v4)
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.equations == orig(this.equations)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
return has only one value
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double[], double[][], boolean):::ENTER
this has only one value
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
equations has only one value
equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4.class
y has only one value
y[] == [0.0, 0.0]
y[] elements == 0.0
yDotK has only one value
yDotK.getClass().getName() == double[][].class
yDotK[] contains no nulls and has only one value, of length 7
forward == true
size(y[]) == 2
size(yDotK[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double[], double[][], boolean):::EXIT
this.v1 == orig(this.v1)
this.v2 == orig(this.v2)
this.v3 == orig(this.v3)
this.v4 == orig(this.v4)
this.vectorsInitialized == orig(this.vectorsInitialized)
this.forward == orig(this.forward)
y[] == orig(y[])
yDotK[] == orig(yDotK[])
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.yDotK has only one value
this.equations has only one value
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState has only one value
this.currentState[] == [0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState has only one value
this.interpolatedState[] == [0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.finalized == false
y[] == [0.0, 0.0]
y[] elements == 0.0
yDotK[] contains no nulls and has only one value, of length 7
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.storeTime(double):::ENTER
this has only one value
this.yDotK has only one value
this.equations has only one value
this.currentState has only one value
this.interpolatedState has only one value
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.storeTime(double):::EXIT
this.v1 == orig(this.v1)
this.v1[] == orig(this.v1[])
this.v2 == orig(this.v2)
this.v2[] == orig(this.v2[])
this.v3 == orig(this.v3)
this.v3[] == orig(this.v3[])
this.v4 == orig(this.v4)
this.v4[] == orig(this.v4[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.vectorsInitialized == false
this.yDotK has only one value
this.equations has only one value
this.currentState has only one value
this.interpolatedState has only one value
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName.toString == "Dormand-Prince 8 (5, 3)"
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA[] contains no nulls and has only one value, of length 12
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA[] elements != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC[]) == 12
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA[]) == 12
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:::OBJECT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() == this.a.getClass().getName()
this.fsal == true
this.c has only one value
this.c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
this.a has only one value
this.a[] contains no nulls and has only one value, of length 12
this.a[] elements != null
this.b has only one value
this.b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.forward == true
this.exp one of { -0.125, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.minStep one of { 0.0, 0.1 }
this.maxStep one of { 10.0, 15.0 }
this.initialStep == -1.0
this.scalAbsoluteTolerance one of { 1.0E-12, 1.0E-9 }
this.scalRelativeTolerance == 0.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first.maxCheckInterval one of { 1.0, Infinity }
this.eventsHandlersManager.first.convergence one of { 1.0E-12, 1.5E-7 }
this.eventsHandlersManager.first.maxIterationCount == 1000
this.eventsHandlersManager.first.pendingEvent == true
this.eventsHandlersManager.first.nextAction == 3
size(this.c[]) == 12
size(this.a[]) == 12
size(this.b[]) == 13
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() != this.handler.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.prototype.getClass().getName() != this.handler.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.eventsHandlersManager.states.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::ENTER
minStep one of { 0.0, 0.1 }
maxStep one of { 10.0, 15.0 }
scalAbsoluteTolerance one of { 1.0E-12, 1.0E-9 }
scalRelativeTolerance == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() == yDotK.getClass().getName()
this.prototype.finalized == true
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
yDotK[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(yDotK[]) == 13
size(y0[]) one of { 1, 2 }
size(y1[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.prototype.finalized == true
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
yDotK[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.getOrder():::ENTER
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart one of { 0.0, Double.NaN }
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.getOrder():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.methodName.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticC[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticA[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.staticB[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart one of { 0.0, Double.NaN }
this.stepSize one of { 0.0, 1.0 }
return == 8
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testEvents():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testEvents():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] contains no nulls and has only one value, of length 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] elements != null
size(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:::OBJECT
this.yDotKLast.getClass().getName() == this.v.getClass().getName()
this.yDotKLast.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName()
this.yDotKLast.getClass().getName() == this.yDotK.getClass().getName()
this.yDotKLast.getClass().getName() == double[][].class
this.yDotKLast[] elements != null
this.v[] elements != null
this.yDotK[] elements != null
this.forward == true
size(this.yDotKLast[]) == 3
size(this.v[]) == 7
size(this.yDotK[]) == 13
size(this.currentState[]) one of { 1, 2 }
size(this.interpolatedState[]) one of { 1, 2 }
this.yDotKLast.getClass().getName() != this.equations.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() != this.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator():::EXIT
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator):::ENTER
interpolator.yDotKLast == null
interpolator.v == null
interpolator.vectorsInitialized == false
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] contains no nulls and has only one value, of length 4
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
size(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[])
interpolator.yDotKLast == orig(interpolator.yDotKLast)
interpolator.v == orig(interpolator.v)
interpolator.vectorsInitialized == orig(interpolator.vectorsInitialized)
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
interpolator.yDotKLast == null
interpolator.v == null
interpolator.vectorsInitialized == false
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedState(double, double):::ENTER
this.v.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == this.yDotK.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedState(double, double):::EXIT
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName()
this.v[] == orig(this.v[])
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[])
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.vectorsInitialized == true
this.finalized == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::ENTER
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::EXIT
this.yDotKLast == orig(this.yDotKLast)
this.v == orig(this.v)
this.vectorsInitialized == orig(this.vectorsInitialized)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[])
this.yDotK == orig(this.yDotK)
this.equations == orig(this.equations)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::ENTER
this.vectorsInitialized == false
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT183
this.yDotKLast == null
this.v == null
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
orig(this.previousTime) == Double.NaN
orig(this.currentTime) == Double.NaN
orig(this.h) == Double.NaN
orig(this.interpolatedTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT218
this.v.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.yDotK.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.interpolatedTime == orig(this.interpolatedTime)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast.getClass().getName() == orig(this.v.getClass().getName())
this.yDotKLast.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[])
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.vectorsInitialized == false
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double[], double[][], boolean):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == yDotK.getClass().getName()
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0] }
forward == true
size(y[]) one of { 1, 2 }
size(yDotK[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double[], double[][], boolean):::EXIT
this.v.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName()
this.vectorsInitialized == orig(this.vectorsInitialized)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[])
this.equations.getClass().getName() == orig(equations.getClass().getName())
this.forward == orig(this.forward)
y[] == orig(y[])
yDotK[] == orig(yDotK[])
this.vectorsInitialized == false
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0] }
this.finalized == false
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::ENTER
this.v.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == this.yDotK.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::EXIT
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName()
this.v[] == orig(this.v[])
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d.getClass().getName() == orig(this.yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.d[])
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.vectorsInitialized == false
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:::OBJECT
this.c != null
this.c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
this.a != null
this.a.getClass().getName() == double[][].class
this.a[] elements != null
this.b != null
this.b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
this.prototype != null
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.forward == true
this.exp one of { -0.2, -0.125 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.minStep one of { 0.0, 0.1 }
this.maxStep one of { 4.0, 10.0, 15.0 }
this.initialStep == -1.0
this.scalAbsoluteTolerance one of { 1.0E-12, 1.0E-9, 1.0E-8 }
this.scalRelativeTolerance one of { 1.0000000000000001E-11, 1.0E-10 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.handler != null
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
size(this.c[]) one of { 6, 12 }
size(this.a[]) one of { 6, 12 }
size(this.b[]) one of { 7, 13 }
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::ENTER
c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
a.getClass().getName() == double[][].class
b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
prototype.yDotK == null
prototype.equations == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.finalized == false
prototype.forward == true
minStep one of { 0.0, 0.1 }
maxStep one of { 4.0, 10.0, 15.0 }
scalAbsoluteTolerance one of { 1.0E-12, 1.0E-9, 1.0E-8 }
scalRelativeTolerance one of { 1.0000000000000001E-11, 1.0E-10 }
size(c[]) one of { 6, 12 }
size(a[]) one of { 6, 12 }
size(b[]) one of { 7, 13 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::EXIT
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.equations == orig(prototype.equations)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
prototype.yDotK == null
prototype.equations == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.finalized == false
prototype.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.maxStep one of { 10.0, 15.0 }
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.initialized == false
t0 == 0.0
y0[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y0[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
t one of { 10.0, 15.0 }
y[] elements one of { 0.0, Double.NaN }
y[] one of { [0.0, 0.0], [NaN] }
y[] sorted by ==
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(y0[]) one of { 1, 2 }
size(y[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.stepSize == orig(this.stepSize)
y0[] == orig(y0[])
this.prototype.finalized == true
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.maxStep one of { 10.0, 15.0 }
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.initialized == true
y0[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y0[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
y[] elements one of { 0.5920735161049996, 0.8058839146033716, 8.000000000000004 }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::ENTER
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
maxGrowth == 10.0
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::ENTER
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
minReduction == 0.2
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::ENTER
this.prototype.finalized == false
this.safety == 0.0
this.minReduction == 0.0
this.maxGrowth == 0.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
safety == 0.9
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.EulerIntegrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.methodName.toString == "Euler"
org.apache.commons.math.ode.nonstiff.EulerIntegrator.c has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.c[] == []
org.apache.commons.math.ode.nonstiff.EulerIntegrator.a has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.a.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.EulerIntegrator.a[] == []
org.apache.commons.math.ode.nonstiff.EulerIntegrator.b has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.b[] == [1.0]
org.apache.commons.math.ode.nonstiff.EulerIntegrator.b[] elements == 1.0
size(org.apache.commons.math.ode.nonstiff.EulerIntegrator.b[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.EulerIntegrator.a.getClass().getName() == this.a.getClass().getName()
this.c has only one value
this.c[] == []
this.a has only one value
this.a[] == []
this.b has only one value
this.b[] == [1.0]
this.b[] elements == 1.0
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.class
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.finalized == false
this.prototype.forward == true
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.b[]) == 1
org.apache.commons.math.ode.nonstiff.EulerIntegrator.a.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.EulerIntegrator.a.getClass().getName() != this.handler.getClass().getName()
org.apache.commons.math.ode.nonstiff.EulerIntegrator.a.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.prototype.getClass().getName() != this.handler.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator.EulerIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator.EulerIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.EulerIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.EulerIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.h <= 1.25
this.h >= -0.25
size(this.yDotK[]) == 1
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator():::EXIT
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator(org.apache.commons.math.ode.nonstiff.EulerStepInterpolator):::ENTER
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator(org.apache.commons.math.ode.nonstiff.EulerStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.computeInterpolatedState(double, double):::ENTER
this.finalized == false
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.computeInterpolatedState(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.doCopy():::ENTER
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.equations == orig(this.equations)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.GillIntegrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.methodName.toString == "Gill"
org.apache.commons.math.ode.nonstiff.GillIntegrator.c has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.c[] == [0.5, 0.5, 1.0]
org.apache.commons.math.ode.nonstiff.GillIntegrator.c[] elements one of { 0.5, 1.0 }
org.apache.commons.math.ode.nonstiff.GillIntegrator.c[] sorted by <=
org.apache.commons.math.ode.nonstiff.GillIntegrator.a has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.a.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.GillIntegrator.a[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.GillIntegrator.a[] elements != null
org.apache.commons.math.ode.nonstiff.GillIntegrator.b has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.b[] == [0.16666666666666666, 0.09763107293781748, 0.5690355937288492, 0.16666666666666666]
org.apache.commons.math.ode.nonstiff.GillIntegrator.b[] elements one of { 0.09763107293781748, 0.16666666666666666, 0.5690355937288492 }
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.c[]) == 3
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.a[]) == 3
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.b[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.GillIntegrator.a.getClass().getName() == this.a.getClass().getName()
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.16666666666666666, 0.09763107293781748, 0.5690355937288492, 0.16666666666666666]
this.b[] elements one of { 0.09763107293781748, 0.16666666666666666, 0.5690355937288492 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillStepInterpolator.class
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.finalized == false
this.prototype.forward == true
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.GillIntegrator.a.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.GillIntegrator.a.getClass().getName() != this.handler.getClass().getName()
org.apache.commons.math.ode.nonstiff.GillIntegrator.a.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.prototype.getClass().getName() != this.handler.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator.GillIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator.GillIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.GillIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.GillIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testUnstableDerivative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testUnstableDerivative():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator:::CLASS
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tMq == 0.5857864376269049
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tPq == 3.414213562373095
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.h <= 0.625
this.h >= -0.125
size(this.yDotK[]) == 4
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
this.yDotK.getClass().getName() != this.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator():::EXIT
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator(org.apache.commons.math.ode.nonstiff.GillStepInterpolator):::ENTER
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tMq == 0.5857864376269049
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tPq == 3.414213562373095
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator(org.apache.commons.math.ode.nonstiff.GillStepInterpolator):::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tMq == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tMq)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tPq == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tPq)
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.computeInterpolatedState(double, double):::ENTER
this.finalized == false
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.computeInterpolatedState(double, double):::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tMq == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tMq)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tPq == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tPq)
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.doCopy():::ENTER
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.doCopy():::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tMq == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tMq)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tPq == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.tPq)
this.yDotK == orig(this.yDotK)
this.equations == orig(this.equations)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == "Gragg-Bulirsch-Stoer"
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator:::OBJECT
this.maxOrder one of { 0, 18 }
this.sequence[] one of { [2, 4, 6, 8, 10, 12, 14, 16, 18], [2, 6, 10, 14, 18, 22, 26, 30, 34] }
this.sequence[] elements >= 2
this.sequence[] sorted by <
this.costPerStep[] one of { [3, 7, 13, 21, 31, 43, 57, 73, 91], [3, 9, 19, 33, 51, 73, 99, 129, 163] }
this.costPerStep[] sorted by <
this.costPerTimeUnit[] elements >= 0.0
this.optimalStep[] elements >= 0.0
this.coeff.getClass().getName() == double[][].class
this.maxChecks one of { 0, 1 }
this.maxIter one of { 0, 2 }
this.stabilityReduction one of { 0.0, 0.5 }
this.stepControl1 one of { 0.0, 0.65 }
this.stepControl2 one of { 0.0, 0.94 }
this.stepControl3 one of { 0.0, 0.02 }
this.stepControl4 one of { 0.0, 4.0 }
this.orderControl1 one of { 0.0, 0.8 }
this.orderControl2 one of { 0.0, 0.9 }
this.mudif one of { 0, 4 }
this.minStep one of { 0.0, 0.1 }
this.maxStep one of { 10.0, 15.0 }
this.initialStep == -1.0
this.scalAbsoluteTolerance one of { 1.0E-12, 1.0E-10 }
this.scalRelativeTolerance == 0.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first.maxCheckInterval one of { 1.0, Infinity }
this.eventsHandlersManager.first.convergence one of { 1.0E-12, 1.5E-7 }
this.eventsHandlersManager.first.maxIterationCount == 1000
this.eventsHandlersManager.first.pendingEvent == true
this.eventsHandlersManager.first.nextAction == 3
size(this.sequence[]) == 9
size(this.costPerStep[]) == 9
size(this.costPerTimeUnit[]) == 9
size(this.optimalStep[]) == 9
size(this.coeff[]) == 9
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double, double, double, double):::ENTER
minStep one of { 0.0, 0.1 }
maxStep one of { 10.0, 15.0 }
scalAbsoluteTolerance one of { 1.0E-12, 1.0E-10 }
scalRelativeTolerance == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double, double, double, double):::EXIT
this.maxOrder == 18
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == true
this.mudif == 4
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[] elements has only one value
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
maxCheckInterval one of { 1.0, Infinity }
convergence one of { 1.0E-12, 1.5E-7 }
maxIterationCount == 1000
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.costPerStep == orig(this.costPerStep)
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
size(this.sequence[]) == orig(size(this.sequence[]))
size(this.costPerStep[]) == orig(size(this.costPerStep[]))
size(this.coeff[]) == orig(size(this.coeff[]))
size(this.eventsHandlersManager.states[])-1 == orig(size(this.eventsHandlersManager.states[]))
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.extrapolate(int, int, double[][], double[]):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
offset >= 0
k >= 1
diag.getClass().getName() == double[][].class
diag[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(diag[]) == 8
size(last[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.extrapolate(int, int, double[][], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
diag[] == orig(diag[])
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
diag[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.initializeArrays():::ENTER
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.initializeArrays():::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
size(this.sequence[]) == orig(size(this.sequence[]))
size(this.costPerStep[]) == orig(size(this.costPerStep[]))
size(this.coeff[]) == orig(size(this.coeff[]))
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[]) (elementwise)
this.costPerTimeUnit[] is the reverse of orig(this.costPerTimeUnit[])
this.optimalStep[] == orig(this.optimalStep[]) (elementwise)
this.optimalStep[] is the reverse of orig(this.optimalStep[])
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
t0 == 0.0
y0[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y0[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
t one of { 10.0, 15.0 }
y[] elements one of { 0.0, Double.NaN }
y[] one of { [0.0, 0.0], [NaN] }
y[] sorted by ==
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(y0[]) one of { 1, 2 }
size(y[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.optimalStep == orig(this.optimalStep)
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
y0[] == orig(y0[])
size(this.costPerTimeUnit[]) == orig(size(this.costPerTimeUnit[]))
size(this.optimalStep[]) == orig(size(this.optimalStep[]))
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.costPerTimeUnit[] one of { [0.0, 0.9, 7.742230726711969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 336.341229907573, 289.3840715008271, 109.6688903468465, 83.74328704396322, 213.75006473742428, 78.22684495533949, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.026758539244425106, 0.06565668905500106, 0.3009057527219606, 0.6090040384159535, 0.34152036440164335, 1.2655502092219124, 0.0, 0.0], [0.0, 10.0, 2.454073079280223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
this.stepStart one of { 10.0, 12.0 }
this.stepSize one of { 0.39431720573626805, 6.877739983046304 }
y0[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y0[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
y[] elements one of { 0.5920735047384612, 0.8058839649666191, 8.0 }
y[] one of { [0.5920735047384612, 0.8058839649666191], [8.0] }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.rescale(double[], double[], double[]):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
scale[] elements == 0.0
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(y1[]) one of { 1, 2 }
size(y2[]) one of { 1, 2 }
size(scale[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.rescale(double[], double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
y1[] == orig(y1[])
y2[] == orig(y2[])
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setInterpolationControl(boolean, int):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
useInterpolationError == true
mudif == -1
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setInterpolationControl(boolean, int):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.maxOrder == 18
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == true
this.mudif == 4
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setOrderControl(int, double, double):::ENTER
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
maxOrder == -1
orderControl1 == -1.0
orderControl2 == -1.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setOrderControl(int, double, double):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.maxOrder == 18
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStabilityCheck(boolean, int, int, double):::ENTER
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == false
this.maxChecks == 0
this.maxIter == 0
this.stabilityReduction == 0.0
this.stepControl1 == 0.0
this.stepControl2 == 0.0
this.stepControl3 == 0.0
this.stepControl4 == 0.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
performTest == true
maxIter == -1
maxChecks == -1
stabilityReduction == -1.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStabilityCheck(boolean, int, int, double):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.costPerStep == orig(this.costPerStep)
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.optimalStep == orig(this.optimalStep)
this.coeff == orig(this.coeff)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.0
this.stepControl2 == 0.0
this.stepControl3 == 0.0
this.stepControl4 == 0.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::ENTER
this has only one value
this.maxOrder == 18
this.sequence has only one value
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep has only one value
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit has only one value
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep has only one value
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.coeff has only one value
this.coeff[] has only one value, of length 9
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == true
this.mudif == 4
this.minStep == 0.0
this.maxStep == 15.0
this.scalAbsoluteTolerance == 1.0E-10
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == 0.0
handler has only one value
handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.costPerStep == orig(this.costPerStep)
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
size(this.sequence[]) == orig(size(this.sequence[]))
size(this.costPerStep[]) == orig(size(this.costPerStep[]))
size(this.coeff[]) == orig(size(this.coeff[]))
this.maxOrder == 18
this.sequence has only one value
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep has only one value
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.costPerTimeUnit has only one value
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep has only one value
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.coeff has only one value
this.coeff[] has only one value, of length 9
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.minStep == 0.0
this.maxStep == 15.0
this.scalAbsoluteTolerance == 1.0E-10
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == 0.0
this.sequence[] - 2 * orig(this.sequence[]) + 2 == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStepsizeControl(double, double, double, double):::ENTER
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.0
this.stepControl2 == 0.0
this.stepControl3 == 0.0
this.stepControl4 == 0.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
stepControl1 == -1.0
stepControl2 == -1.0
stepControl3 == -1.0
stepControl4 == -1.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStepsizeControl(double, double, double, double):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.costPerStep == orig(this.costPerStep)
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.optimalStep == orig(this.optimalStep)
this.coeff == orig(this.coeff)
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, int, double[], double[][], double[], double[], double[]):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
k >= 0
f.getClass().getName() == double[][].class
f[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(y0[]) one of { 1, 2 }
size(scale[]) one of { 1, 2 }
size(yMiddle[]) one of { 1, 2 }
size(yEnd[]) one of { 1, 2 }
size(yTmp[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT469
this.sequence has only one value
this.costPerStep has only one value
this.costPerTimeUnit has only one value
this.optimalStep has only one value
this.coeff has only one value
this.coeff[] has only one value, of length 9
this.minStep == 0.0
this.maxStep == 15.0
this.scalAbsoluteTolerance == 1.0E-10
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 2
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
this.stepSize one of { 1.6517010643917949, 1.865527469355493, 1.8733519438114765 }
f[] contains no nulls and has only one value, of length 3
return == false
orig(this) has only one value
orig(equations) has only one value
orig(equations.getClass().getName()) == org.apache.commons.math.ode.nonstiff.TestProblem4.class
orig(y0) has only one value
orig(step) one of { 1.6517010643917949, 1.865527469355493, 1.8733519438114765 }
orig(k) == 0
orig(scale) has only one value
orig(f) has only one value
orig(yMiddle) has only one value
orig(yEnd) has only one value
orig(yTmp) has only one value
size(this.eventsHandlersManager.states[]) == 2
orig(size(y0[])) == 2
orig(size(scale[])) == 2
orig(size(f[])) == 3
orig(size(yMiddle[])) == 2
orig(size(yEnd[])) == 2
orig(size(yTmp[])) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT469;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT480
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT480;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.methodName.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
y0[] == orig(y0[])
scale[] == orig(scale[])
f[] == orig(f[])
(return == false)  ==>  (f[] contains no nulls and has only one value, of length 3)
(return == false)  ==>  (orig(equations) has only one value)
(return == false)  ==>  (orig(equations.getClass().getName()) == org.apache.commons.math.ode.nonstiff.TestProblem4.class)
(return == false)  ==>  (orig(f) has only one value)
(return == false)  ==>  (orig(k) == 0)
(return == false)  ==>  (orig(scale) has only one value)
(return == false)  ==>  (orig(size(f[])) == 3)
(return == false)  ==>  (orig(size(scale[])) == 2)
(return == false)  ==>  (orig(size(y0[])) == 2)
(return == false)  ==>  (orig(size(yEnd[])) == 2)
(return == false)  ==>  (orig(size(yMiddle[])) == 2)
(return == false)  ==>  (orig(size(yTmp[])) == 2)
(return == false)  ==>  (orig(step) one of { 1.6517010643917949, 1.865527469355493, 1.8733519438114765 })
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (orig(y0) has only one value)
(return == false)  ==>  (orig(yEnd) has only one value)
(return == false)  ==>  (orig(yMiddle) has only one value)
(return == false)  ==>  (orig(yTmp) has only one value)
(return == false)  ==>  (size(this.eventsHandlersManager.states[]) == 2)
(return == false)  ==>  (this.coeff has only one value)
(return == false)  ==>  (this.coeff[] has only one value, of length 9)
(return == false)  ==>  (this.costPerStep has only one value)
(return == false)  ==>  (this.costPerTimeUnit has only one value)
(return == false)  ==>  (this.eventsHandlersManager has only one value)
(return == false)  ==>  (this.eventsHandlersManager.first == null)
(return == false)  ==>  (this.eventsHandlersManager.initialized == true)
(return == false)  ==>  (this.eventsHandlersManager.states has only one value)
(return == false)  ==>  (this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 2)
(return == false)  ==>  (this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState])
(return == false)  ==>  (this.handler has only one value)
(return == false)  ==>  (this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class)
(return == false)  ==>  (this.maxStep == 15.0)
(return == false)  ==>  (this.minStep == 0.0)
(return == false)  ==>  (this.optimalStep has only one value)
(return == false)  ==>  (this.scalAbsoluteTolerance == 1.0E-10)
(return == false)  ==>  (this.sequence has only one value)
(return == false)  ==>  (this.stepSize one of { 1.6517010643917949, 1.865527469355493, 1.8733519438114765 })
(this.scalRelativeTolerance == 0.0)  <==>  (return == true)
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(scale[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(y0[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(yEnd[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(yMiddle[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(yTmp[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (size(this.eventsHandlersManager.states[]) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.eventsHandlersManager.first.convergence one of { 1.0E-12, 1.5E-7 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.eventsHandlersManager.first.maxCheckInterval one of { 1.0, Infinity })
(this.scalRelativeTolerance == 0.0)  ==>  (this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })
(this.scalRelativeTolerance == 0.0)  ==>  (this.maxStep one of { 10.0, 15.0 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.minStep one of { 0.0, 0.1 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.scalAbsoluteTolerance one of { 1.0E-12, 1.0E-10 })
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
f[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT;condition="not(return == true)"
this.sequence has only one value
this.costPerStep has only one value
this.costPerTimeUnit has only one value
this.optimalStep has only one value
this.coeff has only one value
this.coeff[] has only one value, of length 9
this.minStep == 0.0
this.maxStep == 15.0
this.scalAbsoluteTolerance == 1.0E-10
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 2
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
this.stepSize one of { 1.6517010643917949, 1.865527469355493, 1.8733519438114765 }
f[] contains no nulls and has only one value, of length 3
return == false
orig(this) has only one value
orig(equations) has only one value
orig(equations.getClass().getName()) == org.apache.commons.math.ode.nonstiff.TestProblem4.class
orig(y0) has only one value
orig(step) one of { 1.6517010643917949, 1.865527469355493, 1.8733519438114765 }
orig(k) == 0
orig(scale) has only one value
orig(f) has only one value
orig(yMiddle) has only one value
orig(yEnd) has only one value
orig(yTmp) has only one value
size(this.eventsHandlersManager.states[]) == 2
orig(size(y0[])) == 2
orig(size(scale[])) == 2
orig(size(f[])) == 3
orig(size(yMiddle[])) == 2
orig(size(yEnd[])) == 2
orig(size(yTmp[])) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.GraggBulirschStoerIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.GraggBulirschStoerIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testEvents():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testEvents():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testUnstableDerivative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.testUnstableDerivative():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator:::OBJECT
this.yMidDots.getClass().getName() == double[][].class
this.yMidDots[] elements != null
this.polynoms.getClass().getName() == double[][].class
this.polynoms[] elements != null
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.errfac[] elements <= 0.00894427190999916
this.errfac[] elements >= 4.8264138216340184E-27
this.errfac[] sorted by >
this.finalized == false
this.forward == true
size(this.y0Dot[]) one of { 1, 2 }
size(this.y1[]) one of { 1, 2 }
size(this.y1Dot[]) one of { 1, 2 }
size(this.yMidDots[]) == 19
size(this.polynoms[]) == 24
size(this.errfac[]) == 19
size(this.currentState[]) one of { 1, 2 }
size(this.interpolatedState[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[], double[], double[], double[], double[][], boolean):::ENTER
y[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
y0Dot[] elements == 0.0
y0Dot[] one of { [0.0], [0.0, 0.0] }
y1[] elements == 0.0
y1[] one of { [0.0], [0.0, 0.0] }
y1Dot[] elements == 0.0
y1Dot[] one of { [0.0], [0.0, 0.0] }
yMidDots.getClass().getName() == double[][].class
forward == true
size(y[]) one of { 1, 2 }
size(y0Dot[]) one of { 1, 2 }
size(y1[]) one of { 1, 2 }
size(y1Dot[]) one of { 1, 2 }
size(yMidDots[]) == 19
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[], double[], double[], double[], double[][], boolean):::EXIT
y[] == orig(y[])
y0Dot[] == orig(y0Dot[])
y1[] == orig(y1[])
y1Dot[] == orig(y1Dot[])
yMidDots[] == orig(yMidDots[])
this.y0Dot[] elements == 0.0
this.y0Dot[] one of { [0.0], [0.0, 0.0] }
this.y1[] elements == 0.0
this.y1[] one of { [0.0], [0.0, 0.0] }
this.y1Dot[] elements == 0.0
this.y1Dot[] one of { [0.0], [0.0, 0.0] }
this.currentDegree == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
this.currentState[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0] }
y[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
y0Dot[] elements == 0.0
y0Dot[] one of { [0.0], [0.0, 0.0] }
y1[] elements == 0.0
y1[] one of { [0.0], [0.0, 0.0] }
y1Dot[] elements == 0.0
y1Dot[] one of { [0.0], [0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::EXIT288
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynoms == orig(this.polynoms)
this.polynoms.getClass().getName() == orig(this.polynoms.getClass().getName())
this.polynoms[] == orig(this.polynoms[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeInterpolatedState(double, double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeInterpolatedState(double, double):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynoms == orig(this.polynoms)
this.polynoms.getClass().getName() == orig(this.polynoms.getClass().getName())
this.polynoms[] == orig(this.polynoms[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentDegree == orig(this.currentDegree)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.estimateError(double[]):::ENTER
size(scale[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.estimateError(double[]):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynoms == orig(this.polynoms)
this.polynoms.getClass().getName() == orig(this.polynoms.getClass().getName())
this.polynoms[] == orig(this.polynoms[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentDegree == orig(this.currentDegree)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
scale[] == orig(scale[])
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.resetTables(int):::ENTER
this.y0Dot[] elements == 0.0
this.y0Dot[] one of { [0.0], [0.0, 0.0] }
this.y1[] elements == 0.0
this.y1[] one of { [0.0], [0.0, 0.0] }
this.y1Dot[] elements == 0.0
this.y1Dot[] one of { [0.0], [0.0, 0.0] }
this.polynoms == null
this.errfac == null
this.currentDegree == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
this.currentState[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0] }
maxDegree == 23
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.resetTables(int):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.currentDegree == orig(this.currentDegree)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.y0Dot[] elements == 0.0
this.y0Dot[] one of { [0.0], [0.0, 0.0] }
this.y1[] elements == 0.0
this.y1[] one of { [0.0], [0.0, 0.0] }
this.y1Dot[] elements == 0.0
this.y1Dot[] one of { [0.0], [0.0, 0.0] }
this.currentDegree == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
this.currentState[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator:::CLASS
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName != null
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName.toString == "Higham-Hall 5(4)"
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC != null
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC[] elements <= 1.0
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC[] sorted by <=
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA != null
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA[] contains no nulls and has only one value, of length 6
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA[] elements != null
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB != null
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE != null
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE[] == [-0.05, 0.0, 0.50625, -1.2, 0.78125, 0.0625, -0.1]
size(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC[]) == 6
size(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA[]) == 6
size(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB[]) == 7
size(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator:::OBJECT
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() == this.a.getClass().getName()
this.fsal == false
this.c has only one value
this.c != null
this.c[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
this.c[] elements <= 1.0
this.c[] sorted by <=
this.a has only one value
this.a != null
this.a[] contains no nulls and has only one value, of length 6
this.a[] elements != null
this.b has only one value
this.b != null
this.b[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
this.prototype != null
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.class
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.forward == true
this.exp one of { -0.2, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0 }
this.initialStep == -1.0
this.scalAbsoluteTolerance == 1.0E-8
this.scalRelativeTolerance == 1.0E-10
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.handler != null
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first.maxCheckInterval == Infinity
this.eventsHandlersManager.first.convergence == 1.5E-7
this.eventsHandlersManager.first.maxIterationCount == 1000
this.eventsHandlersManager.first.g0 != 0
this.eventsHandlersManager.first.pendingEvent == true
this.eventsHandlersManager.first.nextAction == 3
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() != this.handler.getClass().getName()
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.prototype.getClass().getName() != this.handler.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
this.eventsHandlersManager.states.getClass().getName() != this.eventsHandlersManager.first.handler.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double, double):::ENTER
minStep == 0.0
maxStep one of { 4.0, 15.0 }
scalAbsoluteTolerance == 1.0E-8
scalRelativeTolerance == 1.0E-10
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.estimateError(double[][], double[], double[], double):::ENTER
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() == yDotK.getClass().getName()
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
yDotK != null
yDotK[] elements != null
y0 != null
y1 != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(yDotK[]) == 7
size(y0[]) == 2
size(y1[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName.toString)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
yDotK[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.getOrder():::ENTER
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart one of { 0.0, Double.NaN }
this.stepSize == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.getOrder():::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName.toString == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.methodName.toString)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticC[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticA[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticB[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.staticE[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.initialStep == orig(this.initialStep)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart one of { 0.0, Double.NaN }
this.stepSize == 0.0
return == 5
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3:::OBJECT
this has only one value
this.val$pb has only one value
this.val$pb.y has only one value
this.val$pb.y[] sorted by >=
this.val$pb.n == 2
this.val$pb.t0 == 0.0
this.val$pb.y0 has only one value
this.val$pb.y0[] == [1.0, 0.1]
this.val$pb.y0[] elements one of { 0.1, 1.0 }
this.val$pb.y0[] sorted by >
this.val$pb.t1 == 4.0
this.val$pb.errorScale has only one value
this.val$pb.errorScale[] == [1.0, 1.0]
this.val$pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
size(this.val$pb.y[]) == 2
size(this.val$pb.y0[]) == 2
size(this.val$pb.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3.(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.TestProblem1):::ENTER
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3.(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.TestProblem1):::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this)
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3.g(double, double[]):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3.g(double, double[]):::EXIT
this.val$pb == orig(this.val$pb)
this.val$pb.y == orig(this.val$pb.y)
this.val$pb.y[] == orig(this.val$pb.y[])
this.val$pb.n == orig(this.val$pb.n)
this.val$pb.calls == orig(this.val$pb.calls)
this.val$pb.t0 == orig(this.val$pb.t0)
this.val$pb.y0 == orig(this.val$pb.y0)
this.val$pb.y0[] == orig(this.val$pb.y0[])
this.val$pb.t1 == orig(this.val$pb.t1)
this.val$pb.errorScale == orig(this.val$pb.errorScale)
this.val$pb.errorScale[] == orig(this.val$pb.errorScale[])
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this)
y[] == orig(y[])
y[] sorted by >
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.HighamHall54IntegratorTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.HighamHall54IntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEvents():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEvents():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEventsNoConvergence():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEventsNoConvergence():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.forward == true
size(this.yDotK[]) == 7
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator():::EXIT
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator):::ENTER
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.computeInterpolatedState(double, double):::ENTER
this.yDotK != null
this.equations != null
this.currentState != null
this.interpolatedState != null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.computeInterpolatedState(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.yDotK != null
this.equations != null
this.currentState != null
this.interpolatedState != null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.doCopy():::ENTER
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.equations == orig(this.equations)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.methodName.toString == "midpoint"
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.c has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.c[] == [0.5]
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.c[] elements == 0.5
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a[] contains no nulls and has only one value, of length 1
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a[] elements has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a[] elements != null
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.b has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.b[] == [0.0, 1.0]
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.b[] elements one of { 0.0, 1.0 }
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.b[] sorted by <
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.c[]) == 1
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a[]) == 1
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.b[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a.getClass().getName() == this.a.getClass().getName()
this.c has only one value
this.c[] == [0.5]
this.c[] elements == 0.5
this.a has only one value
this.a[] contains no nulls and has only one value, of length 1
this.a[] elements has only one value
this.a[] elements != null
this.b has only one value
this.b[] == [0.0, 1.0]
this.b[] elements one of { 0.0, 1.0 }
this.b[] sorted by <
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.class
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.finalized == false
this.prototype.forward == true
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.c[]) == 1
size(this.a[]) == 1
size(this.b[]) == 2
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a.getClass().getName() != this.handler.getClass().getName()
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.a.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.prototype.getClass().getName() != this.handler.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.MidpointIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.MidpointIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.MidpointIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.MidpointIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.h <= 1.25
this.h >= -0.25
size(this.yDotK[]) == 2
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator():::EXIT
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator(org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator):::ENTER
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator(org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.computeInterpolatedState(double, double):::ENTER
this.finalized == false
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.computeInterpolatedState(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.doCopy():::ENTER
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.equations == orig(this.equations)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:::OBJECT
this.c[] elements <= 1.0
this.c[] elements >= 0.3333333333333333
this.c[] sorted by <=
this.a.getClass().getName() == double[][].class
this.a[] elements != null
this.b[] elements <= 1.0
this.b[] elements >= 0.0
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.forward == true
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
size(this.c[]) one of { 0, 1, 3 }
size(this.a[]) one of { 0, 1, 3 }
size(this.b[]) one of { 1, 2, 4 }
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double):::ENTER
c[] sorted by <=
a.getClass().getName() == double[][].class
a[] elements != null
prototype.yDotK == null
prototype.equations == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.finalized == false
prototype.forward == true
size(c[]) one of { 0, 1, 3 }
size(a[]) one of { 0, 1, 3 }
size(b[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double):::EXIT
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.equations == orig(prototype.equations)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
this.prototype.finalized == false
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
c[] sorted by <=
a[] elements != null
prototype.yDotK == null
prototype.equations == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.finalized == false
prototype.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.prototype.finalized == false
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount == 1000
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
size(this.eventsHandlersManager.states[])-1 == orig(size(this.eventsHandlersManager.states[]))
this.prototype.finalized == false
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.clearEventsHandlers():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.prototype.finalized == true
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.clearEventsHandlers():::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.prototype.finalized == true
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
size(this.eventsHandlersManager.states[]) <= orig(size(this.eventsHandlersManager.states[]))
size(this.eventsHandlersManager.states[]) != orig(size(this.eventsHandlersManager.states[]))-1
size(this.eventsHandlersManager.states[])-1 <= orig(size(this.eventsHandlersManager.states[]))-1
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.getCurrentSignedStepsize():::ENTER
this.prototype.finalized == true
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.getCurrentSignedStepsize():::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.prototype.finalized == true
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.getCurrentStepStart():::ENTER
this.prototype.finalized == true
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.getCurrentStepStart():::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.prototype.finalized == true
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.getEventsHandlers():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.getEventsHandlers():::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.stepStart == Double.NaN
this.stepSize == Double.NaN
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.prototype.finalized == false
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
t0 == 0.0
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
size(y0[]) one of { 1, 2, 4 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
y0[] == orig(y0[])
this.prototype.finalized == true
this.stepStart == Double.NaN
this.stepSize == Double.NaN
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.resetInternalState():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.resetInternalState():::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.stepStart != orig(this.stepStart)
this.stepSize != orig(this.stepSize)
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.prototype.finalized == false
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
t0 == 0.0
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
size(y0[]) one of { 1, 2, 4 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
y0[] == orig(y0[])
y[] == orig(y[])
this.prototype.finalized == false
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.setStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::ENTER
this.prototype.finalized == false
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.setStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.equations == orig(this.prototype.equations)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.step == orig(this.step)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.prototype.finalized == false
this.handler.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.handler.getClass().getName() != orig(this.handler.getClass().getName())
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.equations == null
this.currentState == null
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::ENTER
interpolator != null
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.yDotK == null
this.equations == null
this.currentState == null
this.interpolatedState == null
this.finalized == true
this.forward == true
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double[], double[][], boolean):::ENTER
this.yDotK == null
this.equations == null
this.currentState == null
this.interpolatedState == null
this.finalized == true
this.forward == true
equations != null
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotK != null
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double[], double[][], boolean):::EXIT
y[] == orig(y[])
yDotK[] == orig(yDotK[])
this.yDotK != null
this.equations != null
this.currentState != null
this.interpolatedState != null
this.finalized == false
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotK[] elements != null
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem:::OBJECT
this.rate one of { 0.0, 1.0 }
this.rateAfter == 1.0
this.switchTime == 2.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.StepProblem(double, double, double):::ENTER
rateBefore == 0.0
rateAfter == 1.0
switchTime == 2.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.StepProblem(double, double, double):::EXIT
this.rate == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.computeDerivatives(double, double[], double[]):::ENTER
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.computeDerivatives(double, double[], double[]):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.eventOccurred(double, double[]):::ENTER
this.rate == 0.0
t == 2.0
y[] == [0.0]
y[] elements == 0.0
size(y[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.eventOccurred(double, double[]):::EXIT
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
this.rate == 1.0
y[] == [0.0]
y[] elements == 0.0
return == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.g(double, double[]):::ENTER
size(y[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.g(double, double[]):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.getDimension():::ENTER
this.rate == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.getDimension():::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
this.rate == 0.0
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.setRate(double):::ENTER
this.rate == 0.0
rate one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.setRate(double):::EXIT
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1:::OBJECT
this.y != null
this.y[] elements >= 0.0
this.y[] sorted by >=
this.n == 2
this.calls >= 0
this.t0 == 0.0
this.y0 != null
this.y0[] == [1.0, 0.1]
this.y0[] elements one of { 0.1, 1.0 }
this.y0[] sorted by >
this.t1 one of { -4.0, 4.0 }
this.t1 != 0
this.errorScale != null
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.TestProblem1():::EXIT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.TestProblem1(org.apache.commons.math.ode.nonstiff.TestProblem1):::ENTER
problem != null
problem.y != null
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] == [1.0, 0.1]
problem.y0[] elements one of { 0.1, 1.0 }
problem.y0[] sorted by >
problem.t1 one of { -4.0, 4.0 }
problem.t1 != 0
problem.errorScale != null
problem.errorScale[] == [1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.TestProblem1(org.apache.commons.math.ode.nonstiff.TestProblem1):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
problem.y != null
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] == [1.0, 0.1]
problem.y0[] elements one of { 0.1, 1.0 }
problem.y0[] sorted by >
problem.t1 one of { -4.0, 4.0 }
problem.t1 != 0
problem.errorScale != null
problem.errorScale[] == [1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.clone():::ENTER
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.clone():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
return != null
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem1.class
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.y[] sorted by >
this.calls >= 1
return != null
return[] sorted by >
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
y != null
y[] sorted by >
yDot != null
yDot[] sorted by <=
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem1.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
y[] sorted by >
yDot[] sorted by <
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2:::OBJECT
this.n == size(this.y[])
size(this.y[]) == size(this.y0[])
this.n == 1
this.calls >= 0
this.t0 == 0.0
this.y0[] == [0.0]
this.y0[] elements == 0.0
this.t1 == 1.0
this.errorScale[] == [1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 1
size(this.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.TestProblem2():::EXIT
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.TestProblem2(org.apache.commons.math.ode.nonstiff.TestProblem2):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.0]
problem.y0[] elements == 0.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.TestProblem2(org.apache.commons.math.ode.nonstiff.TestProblem2):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.0]
problem.y0[] elements == 0.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.clone():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.clone():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y0[]))
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem2.class
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
size(return[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem2.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3:::OBJECT
this.n == size(this.y[])
size(this.y[]) == size(this.y0[])
this.e == 0.1
this.n == 4
this.calls >= 0
this.t0 == 0.0
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
this.t1 == 20.0
this.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 4
size(this.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.TestProblem3():::EXIT
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.TestProblem3(double):::ENTER
e == 0.1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.TestProblem3(double):::EXIT
this.e == orig(e)
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.TestProblem3(org.apache.commons.math.ode.nonstiff.TestProblem3):::ENTER
problem has only one value
problem.e == 0.1
problem.y has only one value
problem.y[] == [0.0, 0.0, 0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 4
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.TestProblem3(org.apache.commons.math.ode.nonstiff.TestProblem3):::EXIT
problem.e == orig(problem.e)
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
problem.e == 0.1
problem.y has only one value
problem.y[] == [0.0, 0.0, 0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 4
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.clone():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.clone():::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y0[]))
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem3.class
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.computeTheoreticalState(double):::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
size(return[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 4
size(yDot[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem3.doComputeDerivatives(double, double[], double[]):::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce:::OBJECT
this.sign one of { -1, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.Bounce():::EXIT
this.sign == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.eventOccurred(double, double[]):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.eventOccurred(double, double[]):::EXIT
y[] == orig(y[])
y[] sorted by >
return == 1
this.sign != orig(this.sign)
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.g(double, double[]):::EXIT
this.sign == orig(this.sign)
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.resetState(double, double[]):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Bounce.resetState(double, double[]):::EXIT
this.sign == orig(this.sign)
y[] sorted by <
y[] > orig(y[]) (lexically)
y[] >= orig(y[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Stop:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Stop:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.Stop():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.eventOccurred(double, double[]):::ENTER
t == 12.0
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.eventOccurred(double, double[]):::EXIT
y[] == orig(y[])
return == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4$Stop.g(double, double[]):::EXIT
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4:::OBJECT
this.a == 1.2
this.y != null
this.y[] elements <= 1.0
this.n == 2
this.calls >= 0
this.t0 == 0.0
this.y0 != null
this.y0[] == [0.9320390859672263, 0.3623577544766736]
this.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
this.y0[] sorted by >
this.t1 == 15.0
this.errorScale != null
this.errorScale[] == [1.0, 0.0]
this.errorScale[] elements one of { 0.0, 1.0 }
this.errorScale[] sorted by >
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.TestProblem4():::EXIT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.TestProblem4(org.apache.commons.math.ode.nonstiff.TestProblem4):::ENTER
problem has only one value
problem != null
problem.a == 1.2
problem.y has only one value
problem.y != null
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0 != null
problem.y0[] == [0.9320390859672263, 0.3623577544766736]
problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
problem.y0[] sorted by >
problem.t1 == 15.0
problem.errorScale has only one value
problem.errorScale != null
problem.errorScale[] == [1.0, 0.0]
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.TestProblem4(org.apache.commons.math.ode.nonstiff.TestProblem4):::EXIT
problem.a == orig(problem.a)
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
problem.a == 1.2
problem.y has only one value
problem.y != null
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0 != null
problem.y0[] == [0.9320390859672263, 0.3623577544766736]
problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
problem.y0[] sorted by >
problem.t1 == 15.0
problem.errorScale has only one value
problem.errorScale != null
problem.errorScale[] == [1.0, 0.0]
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.clone():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.clone():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return != null
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4.class
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.computeTheoreticalState(double):::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.calls >= 1
return != null
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
y != null
yDot != null
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.doComputeDerivatives(double, double[], double[]):::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.getEventsHandlers():::ENTER
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem4.getEventsHandlers():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
return != null
return.getClass().getName() == org.apache.commons.math.ode.events.EventHandler[].class
return[] elements != null
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem5:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem5:::OBJECT
this.n == size(this.y[])
size(this.y[]) == size(this.y0[])
this has only one value
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.n == 2
this.calls == 0
this.t0 == 0.0
this.y0 has only one value
this.y0[] == [1.0, 0.1]
this.y0[] elements one of { 0.1, 1.0 }
this.t1 == -4.0
this.errorScale has only one value
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblem5.TestProblem5():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract:::OBJECT
this.n >= 0
this.calls >= 0
this.t0 == 0.0
this.y0[] elements <= 1.1055415967851334
this.y0[] elements >= 0.0
this.errorScale[] elements one of { 0.0, 1.0 }
this.errorScale[] sorted by >=
size(this.y0[]) one of { 1, 2, 4 }
size(this.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.TestProblemAbstract():::EXIT
this.n == 0
this.calls == 0
this.y0 == null
this.t1 == 0.0
this.errorScale == null
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.TestProblemAbstract(org.apache.commons.math.ode.nonstiff.TestProblemAbstract):::ENTER
problem != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.t1 != 0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.TestProblemAbstract(org.apache.commons.math.ode.nonstiff.TestProblemAbstract):::EXIT
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.t1 != 0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.computeDerivatives(double, double[], double[]):::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
y != null
yDot != null
size(y[]) one of { 1, 2, 4 }
size(yDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.computeDerivatives(double, double[], double[]):::EXIT
this.n == orig(this.n)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.t1 != 0
this.errorScale != null
this.calls - orig(this.calls) - 1 == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getDimension():::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getDimension():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
return one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getErrorScale():::ENTER
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getErrorScale():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.t1 != 0
this.errorScale != null
return != null
return[] elements one of { 0.0, 1.0 }
return[] sorted by >=
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getEventsHandlers():::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] one of { [0.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
this.t1 != 0
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getEventsHandlers():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] one of { [0.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
this.t1 != 0
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
return != null
return.getClass().getName() == org.apache.commons.math.ode.events.EventHandler[].class
return[] == []
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getFinalTime():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getFinalTime():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getInitialState():::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getInitialState():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
return != null
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getInitialTime():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.getInitialTime():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.setErrorScale(double[]):::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.errorScale == null
errorScale[] elements one of { 0.0, 1.0 }
errorScale[] sorted by >=
size(errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.setErrorScale(double[]):::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
errorScale[] == orig(errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
errorScale[] elements one of { 0.0, 1.0 }
errorScale[] sorted by >=
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.setFinalConditions(double):::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.t1 one of { 0.0, 4.0 }
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.setFinalConditions(double):::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.errorScale[]) == 2
orig(this.t1) % this.t1 == 0
this.t1 != orig(this.t1)
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.setInitialConditions(double, double[]):::ENTER
this.n == 0
this.calls == 0
this.y0 == null
this.t1 == 0.0
this.errorScale == null
t0 == 0.0
size(y0[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemAbstract.setInitialConditions(double, double[]):::EXIT
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
y0[] == orig(y0[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.t1 == 0.0
this.errorScale == null
this.n > orig(this.n)
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemFactory:::CLASS
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool has only one value
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblemAbstract[].class
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[] contains no nulls and has only one value, of length 5
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.TestProblem1, org.apache.commons.math.ode.nonstiff.TestProblem2, org.apache.commons.math.ode.nonstiff.TestProblem3, org.apache.commons.math.ode.nonstiff.TestProblem4, org.apache.commons.math.ode.nonstiff.TestProblem5]
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].n == [2, 1, 4, 2, 2]
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].n elements one of { 1, 2, 4 }
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].calls == [0, 0, 0, 0, 0]
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].calls elements == 0
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].t0 == [0.0, 0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].t0 elements == 0.0
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].y0 contains no nulls and has only one value, of length 5
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].t1 == [4.0, 1.0, 20.0, 15.0, -4.0]
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].errorScale contains no nulls and has only one value, of length 5
size(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[]) == 5
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemFactory.getProblems():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemFactory.getProblems():::EXIT
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool)
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool.getClass().getName() == return.getClass().getName()
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool.getClass().getName())
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[] == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[])
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].n == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].n)
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].calls == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].calls)
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].t0 == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].t0)
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].y0 == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].y0)
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].t1 == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].t1)
org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].errorScale == orig(org.apache.commons.math.ode.nonstiff.TestProblemFactory.pool[].errorScale)
return has only one value
return[] contains no nulls and has only one value, of length 5
return[].n == [2, 1, 4, 2, 2]
return[].n elements one of { 1, 2, 4 }
return[].calls == [0, 0, 0, 0, 0]
return[].calls elements == 0
return[].t0 == [0.0, 0.0, 0.0, 0.0, 0.0]
return[].t0 elements == 0.0
return[].y0 contains no nulls and has only one value, of length 5
return[].t1 == [4.0, 1.0, 20.0, 15.0, -4.0]
return[].errorScale contains no nulls and has only one value, of length 5
size(return[]) == 5
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler:::OBJECT
this.problem != null
this.problem.n one of { 1, 2, 4 }
this.problem.calls >= 0
this.problem.t0 == 0.0
this.problem.y0 != null
this.problem.y0[] elements <= 1.1055415967851334
this.problem.y0[] elements >= 0.0
this.problem.t1 != 0
this.problem.errorScale != null
this.problem.errorScale[] elements one of { 0.0, 1.0 }
this.problem.errorScale[] sorted by >=
this.maxValueError >= 0.0
this.maxTimeError == 0.0
this.lastError >= 0.0
this.integrator != null
size(this.problem.y0[]) one of { 1, 2, 4 }
size(this.problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.TestProblemHandler(org.apache.commons.math.ode.nonstiff.TestProblemAbstract, org.apache.commons.math.ode.FirstOrderIntegrator):::ENTER
problem != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.t1 != 0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
integrator != null
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.TestProblemHandler(org.apache.commons.math.ode.nonstiff.TestProblemAbstract, org.apache.commons.math.ode.FirstOrderIntegrator):::EXIT
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == 0.0
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.t1 != 0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.getLastTime():::ENTER
this.problem.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4.class
this.problem.n == 2
this.problem.y0[] == [0.9320390859672263, 0.3623577544766736]
this.problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
this.problem.t1 == 15.0
this.problem.errorScale[] == [1.0, 0.0]
this.lastTime == 12.0
this.expectedStepStart == 12.0
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.getLastTime():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.problem.getClass().getName() == org.apache.commons.math.ode.nonstiff.TestProblem4.class
this.problem.n == 2
this.problem.y0[] == [0.9320390859672263, 0.3623577544766736]
this.problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
this.problem.t1 == 15.0
this.problem.errorScale[] == [1.0, 0.0]
this.lastTime == 12.0
this.expectedStepStart == 12.0
return == 12.0
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.getMaximalTimeError():::ENTER
this.lastTime != 0
this.expectedStepStart != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.getMaximalTimeError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.lastTime != 0
this.expectedStepStart != 0
return == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.getMaximalValueError():::ENTER
this.lastTime != 0
this.expectedStepStart != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.getMaximalValueError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.lastTime != 0
this.expectedStepStart != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.problem.calls >= 1
this.lastError == 0.0
this.lastTime == 0.0
interpolator != null
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxTimeError == orig(this.maxTimeError)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.problem.calls >= 1
this.expectedStepStart != 0
this.problem.calls >= orig(this.problem.calls)
this.maxValueError >= orig(this.maxValueError)
this.lastError >= orig(this.lastError)
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.requiresDenseOutput():::ENTER
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.requiresDenseOutput():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == 0.0
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.reset():::ENTER
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.TestProblemHandler.reset():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.methodName has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.methodName.toString == "3/8"
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.c has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.c[] == [0.3333333333333333, 0.6666666666666666, 1.0]
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.c[] elements one of { 0.3333333333333333, 0.6666666666666666, 1.0 }
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.c[] sorted by <
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a[] elements != null
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.b has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.b[] == [0.125, 0.375, 0.375, 0.125]
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.b[] elements one of { 0.125, 0.375 }
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.c[]) == 3
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a[]) == 3
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.b[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a.getClass().getName() == this.a.getClass().getName()
this.c has only one value
this.c[] == [0.3333333333333333, 0.6666666666666666, 1.0]
this.c[] elements one of { 0.3333333333333333, 0.6666666666666666, 1.0 }
this.c[] sorted by <
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.125, 0.375, 0.375, 0.125]
this.b[] elements one of { 0.125, 0.375 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.class
this.prototype.yDotK == null
this.prototype.equations == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.finalized == false
this.prototype.forward == true
this.handler has only one value
this.handler.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepHandler.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.stepStart == Double.NaN
this.stepSize == Double.NaN
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a.getClass().getName() != this.handler.getClass().getName()
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.a.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.prototype.getClass().getName() != this.handler.getClass().getName()
this.prototype.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
this.handler.getClass().getName() != this.eventsHandlersManager.states.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.h <= 1.25
this.h >= -0.25
size(this.yDotK[]) == 4
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator():::EXIT
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator):::ENTER
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.equations == orig(interpolator.equations)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
interpolator.yDotK == null
interpolator.equations == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.computeInterpolatedState(double, double):::ENTER
this.finalized == false
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.computeInterpolatedState(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.doCopy():::ENTER
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.equations == orig(this.equations)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.yDotK == null
this.equations == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator:::OBJECT
this.h != 0
this.h >= -0.25
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator():::EXIT
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::ENTER
y[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
forward == true
size(y[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::EXIT
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
this.currentState[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0] }
this.finalized == false
this.forward == true
y[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
size(this.currentState[]) one of { 1, 2 }
size(this.interpolatedState[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::ENTER
interpolator != null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::EXIT
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.finalized == true
interpolator.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::EXIT
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.forward == orig(this.forward)
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
return != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.doFinalize():::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.doFinalize():::EXIT
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::ENTER
this.finalized == false
this.forward == true
size(this.currentState[]) one of { 1, 2 }
size(this.interpolatedState[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.forward == orig(this.forward)
this.finalized == true
this.forward == true
size(this.currentState[]) one of { 1, 2 }
size(this.interpolatedState[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
return != 0
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
return != null
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedTime():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedTime != 0
this.interpolatedState != null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentTime != 0
this.currentState != null
this.interpolatedTime != 0
this.interpolatedState != null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::ENTER
this.previousTime one of { 11.127058452290271, 11.146688537943595, 11.411241952121657 }
this.currentTime one of { 12.06373442419601, 12.110016403457697, 12.308431464091242 }
this.h one of { 0.8971895119695859, 0.9366759719057391, 0.9633278655141027 }
this.interpolatedTime == 12.0
this.finalized == false
this.forward == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.previousTime one of { 11.127058452290271, 11.146688537943595, 11.411241952121657 }
this.currentTime one of { 12.06373442419601, 12.110016403457697, 12.308431464091242 }
this.h one of { 0.8971895119695859, 0.9366759719057391, 0.9633278655141027 }
this.interpolatedTime == 12.0
this.finalized == false
this.forward == true
return == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.finalized == true
this.forward == true
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::EXIT
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState != null
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::ENTER
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::EXIT
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.currentState != null
this.interpolatedState != null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler:::CLASS
org.apache.commons.math.ode.sampling.DummyStepHandler.instance has only one value
org.apache.commons.math.ode.sampling.DummyStepHandler.instance != null
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.DummyStepHandler():::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.getInstance():::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.getInstance():::EXIT
org.apache.commons.math.ode.sampling.DummyStepHandler.instance == orig(org.apache.commons.math.ode.sampling.DummyStepHandler.instance)
return has only one value
return != null
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator != null
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.sampling.DummyStepHandler.instance == orig(org.apache.commons.math.ode.sampling.DummyStepHandler.instance)
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.sampling.DummyStepHandler.instance == orig(org.apache.commons.math.ode.sampling.DummyStepHandler.instance)
return == false
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.reset():::EXIT
org.apache.commons.math.ode.sampling.DummyStepHandler.instance == orig(org.apache.commons.math.ode.sampling.DummyStepHandler.instance)
===========================================================================
org.apache.commons.math.special.Beta$1:::CLASS
===========================================================================
org.apache.commons.math.special.Beta$1:::OBJECT
this.val$b >= 0.5
this.val$a >= 0.5
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::ENTER
$hidden$1 >= 0.5
$hidden$3 >= 0.5
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::EXIT
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::ENTER
n >= 0
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
return == 1.0
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::ENTER
n >= 1
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
===========================================================================
org.apache.commons.math.special.Beta:::CLASS
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::ENTER
a >= 0.5
b >= 0.5
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::EXIT
return <= 1.1447298858494004
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::ENTER
a >= 0.5
b one of { 0.5, 3.0, 50000.0 }
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::ENTER
a >= 0.5
b >= 0.5
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::EXIT
===========================================================================
org.apache.commons.math.special.Erf:::CLASS
===========================================================================
org.apache.commons.math.special.Erf.erf(double):::ENTER
===========================================================================
org.apache.commons.math.special.Erf.erf(double):::EXIT
===========================================================================
org.apache.commons.math.special.Gamma$1:::CLASS
===========================================================================
org.apache.commons.math.special.Gamma$1:::OBJECT
===========================================================================
org.apache.commons.math.special.Gamma$1.(double):::ENTER
===========================================================================
org.apache.commons.math.special.Gamma$1.(double):::EXIT
===========================================================================
org.apache.commons.math.special.Gamma$1.getA(int, double):::ENTER
n >= 0
===========================================================================
org.apache.commons.math.special.Gamma$1.getA(int, double):::EXIT
this.val$a == orig(this.val$a)
===========================================================================
org.apache.commons.math.special.Gamma$1.getB(int, double):::ENTER
n >= 1
===========================================================================
org.apache.commons.math.special.Gamma$1.getB(int, double):::EXIT
this.val$a == orig(this.val$a)
===========================================================================
org.apache.commons.math.special.Gamma:::CLASS
org.apache.commons.math.special.Gamma.lanczos has only one value
org.apache.commons.math.special.Gamma.lanczos[] == [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6]
org.apache.commons.math.special.Gamma.lanczos[] elements != 0
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == 0.9189385332046727
size(org.apache.commons.math.special.Gamma.lanczos[]) == 15
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::ENTER
x >= 0.05
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return >= -4.440892098500626E-16
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double):::ENTER
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::ENTER
epsilon one of { 1.0E-15, 1.0E-14 }
maxIterations one of { 10000, 2147483647 }
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int):::ENTER
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression:::CLASS
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
this.sumX >= 0.0
this.sumXX >= 0.0
this.sumY >= 0.0
this.sumYY >= 0.0
this.n >= 0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression():::EXIT
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(org.apache.commons.math.distribution.TDistribution):::ENTER
t.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(org.apache.commons.math.distribution.TDistribution):::EXIT
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double, double):::ENTER
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX >= orig(this.sumX)
this.sumXX >= orig(this.sumXX)
this.sumYY >= orig(this.sumYY)
this.n - orig(this.n) - 1 == 0
this.xbar != orig(this.xbar)
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][]):::ENTER
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
data.getClass().getName() == double[][].class
size(data[]) one of { 6, 9 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
data[] == orig(data[])
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.2860369318124798, 4.177186719418811 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError():::EXIT337
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.18882201676809476, 20.133333333333333 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSignificance():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSignificance():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 4.5960357919483386E-7, 0.2618291339819949 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT250
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.20221151369219595, 1.4 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.027071379408051315, 2.978022046466025 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double):::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
alpha one of { 0.01, 0.05 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.027071379408051315, 2.978022046466025, 4.938363690564566 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.011448490985613515, 1.0726025314515113 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 1.3217541173766634, 80.53333333333333 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(org.apache.commons.math.distribution.TDistribution):::ENTER
this.distribution == null
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
value.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(org.apache.commons.math.distribution.TDistribution):::EXIT
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest:::OBJECT
this.data.getClass().getName() == this.corrData.getClass().getName()
this.data.getClass().getName() == this.infData.getClass().getName()
this.data.getClass().getName() == this.infData2.getClass().getName()
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.corrData[] elements != null
this.infData[] elements != null
this.infData2[] elements != null
size(this.data[]) == 36
size(this.corrData[]) == 17
size(this.infData[]) == 9
size(this.infData2[]) == 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.setUp():::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.setUp():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(this.corrData.getClass().getName())
this.data.getClass().getName() == orig(this.infData.getClass().getName())
this.data.getClass().getName() == orig(this.infData2.getClass().getName())
this.data[] == orig(this.data[])
this.corrData == orig(this.corrData)
this.corrData[] == orig(this.corrData[])
this.infData == orig(this.infData)
this.infData[] == orig(this.infData[])
this.infData2 == orig(this.infData2)
this.infData2[] == orig(this.infData2[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference():::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(this.corrData.getClass().getName())
this.data.getClass().getName() == orig(this.infData.getClass().getName())
this.data.getClass().getName() == orig(this.infData2.getClass().getName())
this.data[] == orig(this.data[])
this.corrData == orig(this.corrData)
this.corrData[] == orig(this.corrData[])
this.infData == orig(this.infData)
this.infData[] == orig(this.infData[])
this.infData2 == orig(this.infData2)
this.infData2[] == orig(this.infData2[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::CLASS
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::OBJECT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.ContinuedFraction():::EXIT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::ENTER
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::EXIT
