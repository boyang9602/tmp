===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount == 0
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::EXIT
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::OBJECT
this.val$arguments.getClass().getName() == java.lang.Object[].class
size(this.val$arguments[]) one of { 0, 1, 3 }
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.String, java.lang.Object[]):::ENTER
$hidden$3.getClass().getName() == java.lang.Object[].class
size($hidden$3[]) one of { 0, 1, 3 }
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.String, java.lang.Object[]):::EXIT
x0.toString == orig(x0.toString)
$hidden$2.toString == orig($hidden$2.toString)
$hidden$3[] == orig($hidden$3[])
===========================================================================
org.apache.commons.math.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException.buildMessage(java.util.Locale, java.lang.String, java.lang.Object[]):::ENTER
locale has only one value
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 0, 1, 3 }
===========================================================================
org.apache.commons.math.MathRuntimeException.buildMessage(java.util.Locale, java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::ENTER
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 0, 1, 3 }
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
===========================================================================
org.apache.commons.math.MathRuntimeException.translate(java.lang.String, java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.MathRuntimeException.translate(java.lang.String, java.util.Locale):::EXIT74
===========================================================================
org.apache.commons.math.MathRuntimeException.translate(java.lang.String, java.util.Locale):::EXIT
s.toString == orig(s.toString)
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::ENTER
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::EXIT
msg.toString == orig(msg.toString)
===========================================================================
org.apache.commons.math.analysis.SinFunction:::OBJECT
===========================================================================
org.apache.commons.math.analysis.SinFunction.SinFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::ENTER
this has only one value
x one of { -1.0, 1.0 }
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::EXIT
return one of { -0.8414709848078965, 0.8414709848078965 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.functionValue == 0.0
this.f == null
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.BrentSolver():::EXIT
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
max >= 0.1
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
orig(this.iterationCount) % this.iterationCount == 0
this.iterationCount > orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
x1 >= 0.1
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT240
orig(x0) one of { -319.0, -1.0, 0.0 }
orig(x1) one of { 1.0, 319.0 }
orig(x2) one of { -319.0, -1.0, 0.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT247
orig(this.result) % this.result == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
orig(this.iterationCount) % this.iterationCount == 0
this.iterationCount > orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl.class
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory.UnivariateRealSolverFactory():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory.newInstance():::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl.class
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl.UnivariateRealSolverFactoryImpl():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl.newBrentSolver():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl.newBrentSolver():::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl.newDefaultSolver():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl.newDefaultSolver():::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.functionValue == 0.0
this.f == null
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::EXIT
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
orig(this.iterationCount) % this.iterationCount == 0
this.iterationCount > orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
upper >= 0.1
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
upperBound >= 0.1
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
return[] sorted by <
size(return[]) == 2
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, int):::ENTER
upperBound >= 0.1
maximumIterations == 2147483647
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, int):::EXIT
return[] sorted by <
size(return[]) == 2
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
x1 >= 0.1
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest:::OBJECT
this.sin.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest.UnivariateRealSolverUtilsTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest.testBadParameters():::ENTER
this has only one value
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest.testBadParameters():::EXIT
this.sin == orig(this.sin)
this.sin.getClass().getName() == orig(this.sin.getClass().getName())
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest.testBracketSin():::ENTER
this has only one value
this.sin has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest.testBracketSin():::EXIT
this.sin == orig(this.sin)
this.sin.getClass().getName() == orig(this.sin.getClass().getName())
this.sin has only one value
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::ENTER
org.apache.commons.math.distribution.AbstractContinuousDistribution.this != null
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::EXIT
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.value(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.value(double):::EXIT
this.val$p == orig(this.val$p)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::EXIT110
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl:::OBJECT
this.alpha >= 0.1
this.beta >= 0.1
this.z == Double.NaN
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.BetaDistributionImpl(double, double):::ENTER
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.BetaDistributionImpl(double, double):::EXIT
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.cumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.cumulativeProbability(double):::EXIT149
return == 0.0
orig(x) one of { -0.1, 0.0 }
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.cumulativeProbability(double):::EXIT151
return == 1.0
orig(x) one of { 1.0, 1.1 }
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.cumulativeProbability(double):::EXIT153
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.cumulativeProbability(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
return <= 1.0
return >= 0.0
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.getDomainLowerBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.getDomainLowerBound(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
return == 0.0
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.getDomainUpperBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.getDomainUpperBound(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
return == 1.0
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.getInitialDomain(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.getInitialDomain(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.inverseCumulativeProbability(double):::EXIT120
return == 0.0
orig(p) == 0.0
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.inverseCumulativeProbability(double):::EXIT122
return == 1.0
orig(p) == 1.0
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.inverseCumulativeProbability(double):::EXIT124
===========================================================================
org.apache.commons.math.distribution.BetaDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
===========================================================================
org.apache.commons.math.distribution.BetaDistributionTest:::OBJECT
===========================================================================
org.apache.commons.math.distribution.BetaDistributionTest.BetaDistributionTest():::EXIT
===========================================================================
org.apache.commons.math.distribution.BetaDistributionTest.checkCumulative(double, double, double[], double[]):::ENTER
this has only one value
x has only one value
x[] == [-0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1]
x[] sorted by <
cumes[] sorted by <=
size(x[]) == 13
size(cumes[]) == 13
===========================================================================
org.apache.commons.math.distribution.BetaDistributionTest.checkCumulative(double, double, double[], double[]):::EXIT
x[] == orig(x[])
cumes[] == orig(cumes[])
x[] == [-0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1]
x[] sorted by <
cumes[] sorted by <=
===========================================================================
org.apache.commons.math.distribution.BetaDistributionTest.testCumulative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.distribution.BetaDistributionTest.testCumulative():::EXIT
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance one of { 5.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] one of { [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestValues[] elements >= 0.0
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) one of { 10, 12 }
size(this.inverseCumulativeTestValues[]) one of { 10, 12 }
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.ChiSquareDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.ChiSquareDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
size(return[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues == null
size(this.inverseCumulativeTestPoints[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.inverseCumulativeTestPoints[]) == 12
size(return[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.setUp():::EXIT
this.tolerance == 5.0E-6
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 5.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf():::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
size(this.cumulativeTestPoints[]) == orig(size(this.cumulativeTestPoints[]))
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:::OBJECT
this.gamma.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double):::ENTER
df one of { 0.1, 5.0 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double):::EXIT
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double, org.apache.commons.math.distribution.GammaDistribution):::ENTER
df one of { 0.1, 5.0 }
g.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double, org.apache.commons.math.distribution.GammaDistribution):::EXIT
this.gamma == orig(g)
this.gamma.getClass().getName() == orig(g.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom():::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom():::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
return one of { 0.1, 5.0 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
return == 1.0E-323
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainUpperBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainUpperBound(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
return one of { 0.1, 5.0, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma():::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma():::EXIT
this.gamma == return
this.gamma.getClass().getName() == return.getClass().getName()
return == orig(this.gamma)
return.getClass().getName() == orig(this.gamma.getClass().getName())
return.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getInitialDomain(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getInitialDomain(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT112
this.gamma has only one value
return == 0.0
orig(this) has only one value
orig(p) == 0.0
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT115
this.gamma has only one value
return == Infinity
orig(this) has only one value
orig(p) == 1.0
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT117
return >= 1.0E-323
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double):::ENTER
degreesOfFreedom one of { 0.1, 5.0 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(org.apache.commons.math.distribution.GammaDistribution):::ENTER
this.gamma == null
g.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(org.apache.commons.math.distribution.GammaDistribution):::EXIT
this.gamma == orig(g)
this.gamma.getClass().getName() == orig(g.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:::OBJECT
this.cumulativeTestValues[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
size(this.cumulativeTestPoints[]) one of { 10, 11 }
size(this.cumulativeTestValues[]) one of { 10, 11 }
size(this.inverseCumulativeTestPoints[]) one of { 10, 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 10, 11, 12 }
this.getClass().getName() != this.distribution.getClass().getName()
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::EXIT
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
return[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
size(return[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues():::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
return has only one value
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance():::ENTER
this.distribution != null
this.cumulativeTestPoints != null
this.cumulativeTestValues != null
this.inverseCumulativeTestPoints != null
this.inverseCumulativeTestValues != null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution != null
this.cumulativeTestPoints != null
this.cumulativeTestValues != null
this.inverseCumulativeTestPoints != null
this.inverseCumulativeTestValues != null
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
size(return[]) one of { 10, 11 }
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues == null
size(this.inverseCumulativeTestPoints[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues == null
size(this.inverseCumulativeTestPoints[]) one of { 10, 11 }
size(return[]) one of { 10, 11 }
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[]):::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
size(cumulativeTestPoints[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
cumulativeTestPoints[] == orig(cumulativeTestPoints[])
size(this.cumulativeTestPoints[]) == orig(size(this.cumulativeTestPoints[]))
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.ContinuousDistribution):::ENTER
this.distribution.getClass().getName() == distribution.getClass().getName()
this.tolerance one of { 1.0E-6, 5.0E-6 }
this.cumulativeTestPoints[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.ContinuousDistribution):::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.distribution.getClass().getName() == orig(distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.tolerance one of { 1.0E-6, 5.0E-6 }
this.cumulativeTestPoints[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[]):::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
inverseCumulativeTestPoints has only one value
inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
size(inverseCumulativeTestPoints[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
inverseCumulativeTestPoints[] == orig(inverseCumulativeTestPoints[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[]):::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 11, 12 }
size(inverseCumulativeTestValues[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
inverseCumulativeTestValues[] == orig(inverseCumulativeTestValues[])
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 11, 12 }
size(this.inverseCumulativeTestValues[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::ENTER
this.distribution != null
this.tolerance one of { 1.0E-6, 5.0E-6, 1.0E-4 }
this.cumulativeTestPoints != null
this.cumulativeTestValues != null
this.inverseCumulativeTestPoints != null
this.inverseCumulativeTestValues != null
this.tolerance != tolerance
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution != null
this.cumulativeTestPoints != null
this.cumulativeTestValues != null
this.inverseCumulativeTestPoints != null
this.inverseCumulativeTestValues != null
this.distribution.getClass().getName() != orig(this.getClass().getName())
this.tolerance != orig(this.tolerance)
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::EXIT
this.tolerance == orig(this.tolerance)
this.tolerance == 1.0E-4
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::EXIT
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities():::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities():::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 10, 11 }
size(this.inverseCumulativeTestValues[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
this.inverseCumulativeTestPoints[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.inverseCumulativeTestPoints[]) one of { 10, 11 }
size(this.inverseCumulativeTestValues[]) one of { 10, 11 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities():::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl:::OBJECT
this.numeratorDegreesOfFreedom >= 0.0
this.denominatorDegreesOfFreedom >= 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double, double):::ENTER
numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
denominatorDegreesOfFreedom one of { 1.0, 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double, double):::EXIT
this.numeratorDegreesOfFreedom == orig(numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 1.0, 6.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double):::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom >= 1.0
x >= 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom():::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom():::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom >= 1.0
return >= 1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainLowerBound(double):::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainLowerBound(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
return == 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainUpperBound(double):::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainUpperBound(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
return == 1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double):::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
return one of { 1.000020000400008, 1.5 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom():::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom():::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom >= 1.0
return one of { 1.0, 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double):::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double):::EXIT108
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double):::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(degreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double):::ENTER
this.numeratorDegreesOfFreedom == 0.0
this.denominatorDegreesOfFreedom == 0.0
degreesOfFreedom one of { 1.0, 5.0, 100000.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double):::EXIT
this.numeratorDegreesOfFreedom == orig(degreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0, 100000.0 }
this.denominatorDegreesOfFreedom == 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
this.tolerance one of { 4.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
this.cumulativeTestPoints[] elements >= 0.03468084
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
this.inverseCumulativeTestValues[] elements >= 0.03468084
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
return[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
return[] elements >= 0.03468084
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.setUp():::EXIT
this.tolerance == 4.0E-6
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl:::OBJECT
this.beta one of { 0.0, 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double, double):::ENTER
beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double, double):::EXIT
this.alpha == orig(alpha)
this.beta == orig(beta)
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double):::ENTER
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha():::ENTER
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha():::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getBeta():::ENTER
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getBeta():::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
return one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainLowerBound(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainLowerBound(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return == 4.9E-324
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return one of { 4.0, 8.0, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return one of { 2.0, 4.0, 8.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::EXIT104
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double):::ENTER
this.alpha one of { 0.0, 0.05, 2.5 }
this.beta one of { 0.0, 2.0 }
this.alpha % alpha == 0
this.alpha <= alpha
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double):::EXIT
this.alpha == orig(alpha)
this.beta == orig(this.beta)
this.beta one of { 0.0, 2.0 }
orig(this.alpha) % this.alpha == 0
this.alpha >= orig(this.alpha)
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double):::ENTER
this.beta == 0.0
beta one of { 1.0, 2.0 }
this.beta < beta
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(beta)
this.beta one of { 1.0, 2.0 }
this.beta > orig(this.beta)
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
this.tolerance one of { 6.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
this.cumulativeTestPoints[] elements >= 0.8571048
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
this.inverseCumulativeTestValues[] elements >= 0.8571048
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.GammaDistributionTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.GammaDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
return[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
return[] elements >= 0.8571048
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.setUp():::EXIT
this.tolerance == 6.0E-6
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValue(double, double, double, double):::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 6.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
a one of { 1.0, 2.0, 4.0 }
b one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValue(double, double, double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 6.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValues():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 6.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 6.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::CLASS
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == 2.5066282746310002
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::OBJECT
this has only one value
this.mean one of { 0.0, 2.1 }
this.standardDeviation one of { 1.0, 1.4 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::ENTER
mean == 2.1
sd == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(sd)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::EXIT126
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { -1.7976931348623157E308, 2.1 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { 2.1, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { 0.7000000000000002, 3.5 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getMean():::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getMean():::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return == 2.1
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation():::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation():::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::EXIT162
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::ENTER
this.mean == 0.0
this.standardDeviation == 1.0
mean == 2.1
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::ENTER
this.mean == 2.1
this.standardDeviation == 1.0
sd == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(sd)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.tolerance one of { 1.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
return[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.setUp():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.setUp():::EXIT
this.distribution has only one value
this.tolerance == 1.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::OBJECT
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::ENTER
degreesOfFreedom one of { 1.0, 5.0 }
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::EXIT
this.degreesOfFreedom one of { 1.0, 5.0 }
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double):::ENTER
this.degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
this.degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom():::ENTER
this.degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom():::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
this.degreesOfFreedom >= 1.0
return >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDomainLowerBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDomainLowerBound(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
return == -1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDomainUpperBound(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getDomainUpperBound(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
return == 1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getInitialDomain(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.getInitialDomain(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
return == 0.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability(double):::EXIT121
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.degreesOfFreedom == orig(this.degreesOfFreedom)
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::ENTER
degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::EXIT
this.degreesOfFreedom >= 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
this.tolerance one of { 1.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] one of { [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684], [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884] }
size(this.cumulativeTestPoints[]) == 11
size(this.cumulativeTestValues[]) == 11
size(this.inverseCumulativeTestPoints[]) == 11
size(this.inverseCumulativeTestValues[]) == 11
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.TDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.TDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestPoints():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestValues == null
return[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
size(return[]) == 11
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestValues():::ENTER
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.5, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 11
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.setUp():::EXIT
this.tolerance == 1.0E-6
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.inverseCumulativeTestValues[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.testSmallDf():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [-5.89343, -3.36493, -2.570582, -2.015048, -1.475884, 0.0, 5.89343, 3.36493, 2.570582, 2.015048, 1.475884]
===========================================================================
org.apache.commons.math.distribution.TDistributionTest.testSmallDf():::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
size(this.cumulativeTestPoints[]) == orig(size(this.cumulativeTestPoints[]))
size(this.inverseCumulativeTestValues[]) == orig(size(this.inverseCumulativeTestValues[]))
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [-318.3088, -31.82052, -12.7062, -6.313752, -3.077684, 0.0, 318.3088, 31.82052, 12.7062, 6.313752, 3.077684]
===========================================================================
org.apache.commons.math.special.Beta$1:::CLASS
===========================================================================
org.apache.commons.math.special.Beta$1:::OBJECT
this.val$b >= 0.1
this.val$a >= 0.1
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::ENTER
$hidden$1 >= 0.1
$hidden$3 >= 0.1
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::EXIT
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::ENTER
n >= 0
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
return == 1.0
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::ENTER
n >= 1
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
===========================================================================
org.apache.commons.math.special.Beta:::CLASS
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::ENTER
a >= 0.1
b >= 0.1
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::EXIT
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::ENTER
a >= 0.1
b >= 0.1
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::ENTER
a >= 0.1
b >= 0.1
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::EXIT
===========================================================================
org.apache.commons.math.special.Erf.erf(double):::ENTER
===========================================================================
org.apache.commons.math.special.Erf.erf(double):::EXIT
===========================================================================
org.apache.commons.math.special.Gamma$1:::CLASS
===========================================================================
org.apache.commons.math.special.Gamma$1:::OBJECT
===========================================================================
org.apache.commons.math.special.Gamma$1.(double):::ENTER
===========================================================================
org.apache.commons.math.special.Gamma$1.(double):::EXIT
===========================================================================
org.apache.commons.math.special.Gamma$1.getA(int, double):::ENTER
n >= 0
===========================================================================
org.apache.commons.math.special.Gamma$1.getA(int, double):::EXIT
this.val$a == orig(this.val$a)
===========================================================================
org.apache.commons.math.special.Gamma$1.getB(int, double):::ENTER
n >= 1
===========================================================================
org.apache.commons.math.special.Gamma$1.getB(int, double):::EXIT
this.val$a == orig(this.val$a)
===========================================================================
org.apache.commons.math.special.Gamma:::CLASS
org.apache.commons.math.special.Gamma.lanczos has only one value
org.apache.commons.math.special.Gamma.lanczos[] == [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6]
org.apache.commons.math.special.Gamma.lanczos[] elements != 0
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == 0.9189385332046727
size(org.apache.commons.math.special.Gamma.lanczos[]) == 15
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::ENTER
x >= 0.05
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return >= -0.1207822376352452
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double):::ENTER
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::ENTER
epsilon one of { 1.0E-15, 1.0E-14 }
maxIterations one of { 10000, 2147483647 }
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int):::ENTER
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression:::CLASS
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
this.sumX >= 0.0
this.sumXX >= 0.0
this.sumYY >= 0.0
this.n >= 0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression():::EXIT
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(org.apache.commons.math.distribution.TDistribution):::ENTER
t.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.SimpleRegression(org.apache.commons.math.distribution.TDistribution):::EXIT
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double, double):::ENTER
x >= 0.0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.n >= 1
this.sumX >= orig(this.sumX)
this.sumXX >= orig(this.sumXX)
this.sumYY >= orig(this.sumYY)
this.n - orig(this.n) - 1 == 0
this.xbar != orig(this.xbar)
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][]):::ENTER
this.sumX one of { 0.0, 129.3, 167.1 }
this.sumXX one of { 0.0, 1082.6742857142851, 1409.5687499999995 }
this.sumY one of { 0.0, 35.5, 44.199999999999996 }
this.sumYY one of { 0.0, 48.414285714285725, 59.935 }
this.sumXY one of { 0.0, 226.9242857142857, 288.29249999999996 }
this.n one of { 0, 7, 8 }
this.xbar one of { 0.0, 18.471428571428568, 20.887499999999996 }
this.ybar one of { 0.0, 5.071428571428572, 5.525 }
data.getClass().getName() == double[][].class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.addData(double[][]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
data[] == orig(data[])
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
this.sumX > orig(this.sumX)
this.sumXX > orig(this.sumXX)
this.sumY > orig(this.sumY)
this.sumYY > orig(this.sumYY)
this.sumXY > orig(this.sumXY)
this.n > orig(this.n)
this.xbar > orig(this.xbar)
this.ybar > orig(this.ybar)
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getInterceptStdErr():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.2860369318124798, 4.177186719418811 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError():::EXIT414
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getMeanSquareError():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.18882201676809476, 20.133333333333333 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSignificance():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSignificance():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 4.5960357919483386E-7, 0.2618291339819949 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT304
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlope():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.20221151369219595, 1.4 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.027071379408051315, 2.978022046466025 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double):::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
alpha one of { 0.01, 0.05 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeConfidenceInterval(double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.027071379408051315, 2.978022046466025, 4.938363690564566 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSlopeStdErr():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 0.011448490985613515, 1.0726025314515113 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors():::ENTER
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX one of { 21.0, 193.9 }
this.sumXX one of { 17.5, 1440.6422222222218 }
this.sumY one of { 19.0, 50.3 }
this.sumYY one of { 60.22888888888889, 114.83333333333333 }
this.sumXY one of { 24.5, 291.3144444444444 }
this.n one of { 6, 9 }
this.xbar one of { 3.5, 21.54444444444444 }
this.ybar one of { 3.1666666666666665, 5.5888888888888895 }
return one of { 1.3217541173766634, 80.53333333333333 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.removeData(double, double):::ENTER
this.sumX one of { 167.1, 193.9 }
this.sumXX one of { 1409.5687499999995, 1440.6422222222218 }
this.sumY one of { 44.199999999999996, 50.3 }
this.sumYY one of { 59.935, 60.22888888888889 }
this.sumXY one of { 288.29249999999996, 291.3144444444444 }
this.n one of { 8, 9 }
this.xbar one of { 20.887499999999996, 21.54444444444444 }
this.ybar one of { 5.525, 5.5888888888888895 }
x one of { 15.6, 26.8, 37.8 }
y one of { 5.2, 6.1, 8.7 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.removeData(double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.sumX one of { 129.3, 167.1, 178.3 }
this.sumXX one of { 1082.6742857142851, 1400.8887499999996, 1409.5687499999995 }
this.sumY one of { 35.5, 44.199999999999996, 45.099999999999994 }
this.sumYY one of { 48.414285714285725, 59.935, 60.05875 }
this.sumXY one of { 226.9242857142857, 288.29249999999996, 288.71374999999995 }
this.n one of { 7, 8 }
this.xbar one of { 18.471428571428568, 20.887499999999996, 22.287499999999994 }
this.ybar one of { 5.071428571428572, 5.525, 5.637500000000001 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.removeData(double[][]):::ENTER
this.sumX == 193.9
this.sumXX == 1440.6422222222218
this.sumY == 50.3
this.sumYY == 60.22888888888889
this.sumXY == 291.3144444444444
this.n == 9
this.xbar == 21.54444444444444
this.ybar == 5.5888888888888895
data.getClass().getName() == double[][].class
size(data[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.removeData(double[][]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
data[] == orig(data[])
this.sumX one of { 129.3, 167.1 }
this.sumXX one of { 1082.6742857142851, 1409.5687499999995 }
this.sumY one of { 35.5, 44.199999999999996 }
this.sumYY one of { 48.414285714285725, 59.935 }
this.sumXY one of { 226.9242857142857, 288.29249999999996 }
this.n one of { 7, 8 }
this.xbar one of { 18.471428571428568, 20.887499999999996 }
this.ybar one of { 5.071428571428572, 5.525 }
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(org.apache.commons.math.distribution.TDistribution):::ENTER
this.distribution == null
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
value.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegression.setDistribution(org.apache.commons.math.distribution.TDistribution):::EXIT
this.sumX == orig(this.sumX)
this.sumXX == orig(this.sumXX)
this.sumY == orig(this.sumY)
this.sumYY == orig(this.sumYY)
this.sumXY == orig(this.sumXY)
this.n == orig(this.n)
this.xbar == orig(this.xbar)
this.ybar == orig(this.ybar)
this.sumX == 0.0
this.sumXX == 0.0
this.sumY == 0.0
this.sumYY == 0.0
this.sumXY == 0.0
this.n == 0
this.xbar == 0.0
this.ybar == 0.0
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.corrData.getClass().getName() == double[][].class
this.corrData[] elements != null
this.infData.getClass().getName() == double[][].class
this.infData[] elements != null
this.removeSingle.getClass().getName() == double[][].class
this.removeSingle[] elements != null
this.removeMultiple.getClass().getName() == double[][].class
this.removeMultiple[] elements != null
this.removeX == 15.6
this.removeY == 5.2
this.infData2.getClass().getName() == double[][].class
this.infData2[] elements != null
size(this.data[]) == 36
size(this.corrData[]) == 17
size(this.infData[]) == 9
size(this.removeSingle[]) == 1
size(this.removeMultiple[]) == 2
size(this.infData2[]) == 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.SimpleRegressionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference():::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.removeSingle has only one value
this.removeSingle[] contains no nulls and has only one value, of length 1
this.removeSingle[] elements has only one value
this.removeMultiple has only one value
this.removeMultiple[] contains no nulls and has only one value, of length 2
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testInference():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.corrData == orig(this.corrData)
this.corrData.getClass().getName() == orig(this.corrData.getClass().getName())
this.corrData[] == orig(this.corrData[])
this.infData == orig(this.infData)
this.infData.getClass().getName() == orig(this.infData.getClass().getName())
this.infData[] == orig(this.infData[])
this.removeSingle == orig(this.removeSingle)
this.removeSingle.getClass().getName() == orig(this.removeSingle.getClass().getName())
this.removeSingle[] == orig(this.removeSingle[])
this.removeMultiple == orig(this.removeMultiple)
this.removeMultiple.getClass().getName() == orig(this.removeMultiple.getClass().getName())
this.removeMultiple[] == orig(this.removeMultiple[])
this.removeX == orig(this.removeX)
this.removeY == orig(this.removeY)
this.infData2 == orig(this.infData2)
this.infData2.getClass().getName() == orig(this.infData2.getClass().getName())
this.infData2[] == orig(this.infData2[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.removeSingle has only one value
this.removeSingle[] contains no nulls and has only one value, of length 1
this.removeSingle[] elements has only one value
this.removeMultiple has only one value
this.removeMultiple[] contains no nulls and has only one value, of length 2
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveMultiple():::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.removeSingle has only one value
this.removeSingle[] contains no nulls and has only one value, of length 1
this.removeSingle[] elements has only one value
this.removeMultiple has only one value
this.removeMultiple[] contains no nulls and has only one value, of length 2
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveMultiple():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.corrData == orig(this.corrData)
this.corrData.getClass().getName() == orig(this.corrData.getClass().getName())
this.corrData[] == orig(this.corrData[])
this.infData == orig(this.infData)
this.infData.getClass().getName() == orig(this.infData.getClass().getName())
this.infData[] == orig(this.infData[])
this.removeSingle == orig(this.removeSingle)
this.removeSingle.getClass().getName() == orig(this.removeSingle.getClass().getName())
this.removeSingle[] == orig(this.removeSingle[])
this.removeMultiple == orig(this.removeMultiple)
this.removeMultiple.getClass().getName() == orig(this.removeMultiple.getClass().getName())
this.removeMultiple[] == orig(this.removeMultiple[])
this.removeX == orig(this.removeX)
this.removeY == orig(this.removeY)
this.infData2 == orig(this.infData2)
this.infData2.getClass().getName() == orig(this.infData2.getClass().getName())
this.infData2[] == orig(this.infData2[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.removeSingle has only one value
this.removeSingle[] contains no nulls and has only one value, of length 1
this.removeSingle[] elements has only one value
this.removeMultiple has only one value
this.removeMultiple[] contains no nulls and has only one value, of length 2
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveSingle():::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.removeSingle has only one value
this.removeSingle[] contains no nulls and has only one value, of length 1
this.removeSingle[] elements has only one value
this.removeMultiple has only one value
this.removeMultiple[] contains no nulls and has only one value, of length 2
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveSingle():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.corrData == orig(this.corrData)
this.corrData.getClass().getName() == orig(this.corrData.getClass().getName())
this.corrData[] == orig(this.corrData[])
this.infData == orig(this.infData)
this.infData.getClass().getName() == orig(this.infData.getClass().getName())
this.infData[] == orig(this.infData[])
this.removeSingle == orig(this.removeSingle)
this.removeSingle.getClass().getName() == orig(this.removeSingle.getClass().getName())
this.removeSingle[] == orig(this.removeSingle[])
this.removeMultiple == orig(this.removeMultiple)
this.removeMultiple.getClass().getName() == orig(this.removeMultiple.getClass().getName())
this.removeMultiple[] == orig(this.removeMultiple[])
this.removeX == orig(this.removeX)
this.removeY == orig(this.removeY)
this.infData2 == orig(this.infData2)
this.infData2.getClass().getName() == orig(this.infData2.getClass().getName())
this.infData2[] == orig(this.infData2[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.removeSingle has only one value
this.removeSingle[] contains no nulls and has only one value, of length 1
this.removeSingle[] elements has only one value
this.removeMultiple has only one value
this.removeMultiple[] contains no nulls and has only one value, of length 2
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveXY():::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.removeSingle has only one value
this.removeSingle[] contains no nulls and has only one value, of length 1
this.removeSingle[] elements has only one value
this.removeMultiple has only one value
this.removeMultiple[] contains no nulls and has only one value, of length 2
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.stat.regression.SimpleRegressionTest.testRemoveXY():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.corrData == orig(this.corrData)
this.corrData.getClass().getName() == orig(this.corrData.getClass().getName())
this.corrData[] == orig(this.corrData[])
this.infData == orig(this.infData)
this.infData.getClass().getName() == orig(this.infData.getClass().getName())
this.infData[] == orig(this.infData[])
this.removeSingle == orig(this.removeSingle)
this.removeSingle.getClass().getName() == orig(this.removeSingle.getClass().getName())
this.removeSingle[] == orig(this.removeSingle[])
this.removeMultiple == orig(this.removeMultiple)
this.removeMultiple.getClass().getName() == orig(this.removeMultiple.getClass().getName())
this.removeMultiple[] == orig(this.removeMultiple[])
this.removeX == orig(this.removeX)
this.removeY == orig(this.removeY)
this.infData2 == orig(this.infData2)
this.infData2.getClass().getName() == orig(this.infData2.getClass().getName())
this.infData2[] == orig(this.infData2[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 36
this.corrData has only one value
this.corrData[] contains no nulls and has only one value, of length 17
this.infData has only one value
this.infData[] contains no nulls and has only one value, of length 9
this.removeSingle has only one value
this.removeSingle[] contains no nulls and has only one value, of length 1
this.removeSingle[] elements has only one value
this.removeMultiple has only one value
this.removeMultiple[] contains no nulls and has only one value, of length 2
this.infData2 has only one value
this.infData2[] contains no nulls and has only one value, of length 6
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::CLASS
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::OBJECT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.ContinuedFraction():::EXIT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::ENTER
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::EXIT
