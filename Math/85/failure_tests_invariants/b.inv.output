===========================================================================
org.apache.commons.math.ConvergenceException:::CLASS
===========================================================================
org.apache.commons.math.ConvergenceException:::OBJECT
this.pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.arguments[]) one of { 1, 9 }
===========================================================================
org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 1, 9 }
===========================================================================
org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
===========================================================================
org.apache.commons.math.MathException:::CLASS
===========================================================================
org.apache.commons.math.MathException:::OBJECT
this.pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}", "org.apache.commons.math.ConvergenceException: number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0" }
this.arguments.getClass().getName() == java.lang.Object[].class
size(this.arguments[]) one of { 0, 1, 9 }
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 1, 9 }
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
this.pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
this.arguments[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
size(this.arguments[]) one of { 1, 9 }
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.Throwable):::ENTER
rootCause has only one value
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.Throwable):::EXIT
this.pattern has only one value
this.pattern.toString == "org.apache.commons.math.ConvergenceException: number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0"
this.arguments has only one value
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.MathException.buildMessage(java.util.Locale, java.lang.String, java.lang.Object[]):::ENTER
locale has only one value
pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 1, 9 }
===========================================================================
org.apache.commons.math.MathException.buildMessage(java.util.Locale, java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
return.toString one of { "Maximal number of iterations (10,000) exceeded", "number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0" }
===========================================================================
org.apache.commons.math.MathException.getLocalizedMessage():::ENTER
this has only one value
this.pattern has only one value
this.pattern.toString == "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}"
this.arguments has only one value
this.arguments[] contains no nulls and has only one value, of length 9
this.arguments[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.arguments[]) == 9
===========================================================================
org.apache.commons.math.MathException.getLocalizedMessage():::EXIT
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.arguments == orig(this.arguments)
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.arguments[] == orig(this.arguments[])
this.pattern has only one value
this.pattern.toString == "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}"
this.arguments has only one value
this.arguments[] contains no nulls and has only one value, of length 9
this.arguments[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
return has only one value
return.toString == "number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0"
size(this.arguments[]) == 9
===========================================================================
org.apache.commons.math.MathException.getMessage(java.util.Locale):::ENTER
this has only one value
this.pattern has only one value
this.pattern.toString == "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}"
this.arguments has only one value
this.arguments[] contains no nulls and has only one value, of length 9
this.arguments[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
locale has only one value
size(this.arguments[]) == 9
===========================================================================
org.apache.commons.math.MathException.getMessage(java.util.Locale):::EXIT
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.arguments == orig(this.arguments)
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.arguments[] == orig(this.arguments[])
this.pattern has only one value
this.pattern.toString == "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}"
this.arguments has only one value
this.arguments[] contains no nulls and has only one value, of length 9
this.arguments[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
return has only one value
return.toString == "number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0"
size(this.arguments[]) == 9
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::ENTER
s.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
locale has only one value
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::EXIT73
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::EXIT
s.toString == orig(s.toString)
s.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
return.toString one of { "Maximal number of iterations ({0}) exceeded", "number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}" }
===========================================================================
org.apache.commons.math.MaxIterationsExceededException:::CLASS
===========================================================================
org.apache.commons.math.MaxIterationsExceededException:::OBJECT
this has only one value
this.maxIterations == 10000
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations ({0}) exceeded"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 1
this.arguments[] elements has only one value
this.arguments[].getClass().getName() == [java.lang.Integer]
this.arguments[].getClass().getName() elements == java.lang.Integer.class
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int):::ENTER
maxIterations == 10000
===========================================================================
org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int):::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1:::OBJECT
this has only one value
this.val$p == 0.9772498680518209
org.apache.commons.math.distribution.AbstractContinuousDistribution.this has only one value
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::ENTER
org.apache.commons.math.distribution.AbstractContinuousDistribution.this has only one value
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
$hidden$2 == 0.9772498680518209
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::EXIT
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.value(double):::ENTER
x one of { 0.0, 2.0, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.value(double):::EXIT
this.val$p == orig(this.val$p)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
return one of { -0.4772498680518209, 0.0, 0.022750131948179098 }
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionTest.class
this.distribution.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.tolerance one of { 1.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
this.getClass().getName() != this.distribution.getClass().getName()
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues == null
return has only one value
return[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
tolerance == 1.0E-6
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 1.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution == null
this.tolerance == 1.0E-6
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::CLASS
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == 2.5066282746310002
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::OBJECT
this.mean one of { 0.0, 2.1 }
this.standardDeviation one of { 1.0, 1.4 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::ENTER
mean one of { 0.0, 2.1 }
sd one of { 1.0, 1.4 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(sd)
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::ENTER
this has only one value
this.mean == 0.0
this.standardDeviation == 1.0
x one of { 0.0, 2.0, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::EXIT126
return one of { 0.5, 0.9772498680518209 }
orig(x) one of { 0.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::EXIT132
return == 1.0
orig(x) == 1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 0.0
this.standardDeviation == 1.0
return one of { 0.5, 0.9772498680518209, 1.0 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double):::ENTER
this has only one value
this.mean == 0.0
this.standardDeviation == 1.0
p == 0.9772498680518209
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 0.0
this.standardDeviation == 1.0
return == 0.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double):::ENTER
this has only one value
this.mean == 0.0
this.standardDeviation == 1.0
p == 0.9772498680518209
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 0.0
this.standardDeviation == 1.0
return == 1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double):::ENTER
this has only one value
this.mean == 0.0
this.standardDeviation == 1.0
p == 0.9772498680518209
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 0.0
this.standardDeviation == 1.0
return == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getMean():::ENTER
this has only one value
this.mean == 0.0
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getMean():::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 0.0
this.standardDeviation == 1.0
return == 0.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation():::ENTER
this has only one value
this.mean == 0.0
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation():::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 0.0
this.standardDeviation == 1.0
return == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::ENTER
this.mean == 0.0
this.standardDeviation == 1.0
mean one of { 0.0, 2.1 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(mean)
this.standardDeviation == orig(this.standardDeviation)
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::ENTER
this.standardDeviation == 1.0
sd one of { 1.0, 1.4 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(sd)
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.tolerance one of { 1.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
return[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.setUp():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.setUp():::EXIT
this.distribution has only one value
this.tolerance == 1.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.special.Erf.erf(double):::ENTER
x one of { 0.0, 1.414213562373095 }
===========================================================================
org.apache.commons.math.special.Erf.erf(double):::EXIT
return one of { 0.0, 0.9544997361036417 }
===========================================================================
org.apache.commons.math.special.Gamma:::CLASS
org.apache.commons.math.special.Gamma.lanczos has only one value
org.apache.commons.math.special.Gamma.lanczos[] == [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6]
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == 0.9189385332046727
size(org.apache.commons.math.special.Gamma.lanczos[]) == 15
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::ENTER
x == 0.5
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return == 0.5723649429247
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::ENTER
a == 0.5
x one of { 0.0, 1.9999999999999996 }
epsilon == 1.0E-15
maxIterations == 10000
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return one of { 0.0, 0.9544997361036417 }
