===========================================================================
org.apache.commons.math.TestUtils.assertSame(double, double):::ENTER
expected == Double.NaN
actual == Double.NaN
===========================================================================
org.apache.commons.math.TestUtils.assertSame(double, double):::EXIT
===========================================================================
org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex, org.apache.commons.math.complex.Complex):::ENTER
expected has only one value
expected != null
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.I != null
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.NaN != null
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.INF != null
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ONE != null
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.ZERO != null
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
expected.imaginary == Double.NaN
expected.real == Double.NaN
expected.isNaN == true
expected.isInfinite == false
actual has only one value
actual != null
actual.imaginary == Double.NaN
actual.real == Double.NaN
actual.isNaN == true
actual.isInfinite == false
===========================================================================
org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex, org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
expected.isNaN == orig(expected.isNaN)
expected.isInfinite == orig(expected.isInfinite)
actual.isNaN == orig(actual.isNaN)
actual.isInfinite == orig(actual.isInfinite)
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.I != null
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.NaN != null
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.INF != null
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ONE != null
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.ZERO != null
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
expected.imaginary == Double.NaN
expected.real == Double.NaN
expected.isNaN == true
expected.isInfinite == false
actual.imaginary == Double.NaN
actual.real == Double.NaN
actual.isNaN == true
actual.isInfinite == false
===========================================================================
org.apache.commons.math.analysis.SinFunction:::OBJECT
===========================================================================
org.apache.commons.math.analysis.SinFunction.SinFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::EXIT
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction:::CLASS
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction:::OBJECT
this.coefficients != null
this.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(this.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.PolynomialFunction(double[]):::ENTER
c[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(c[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.PolynomialFunction(double[]):::EXIT
c[] == orig(c[])
c[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.evaluate(double[], double):::ENTER
coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.evaluate(double[], double):::EXIT
coefficients[] == orig(coefficients[])
coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.getCoefficients():::ENTER
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.getCoefficients():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients[] == orig(this.coefficients[])
return[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(return[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.value(double):::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients[] == orig(this.coefficients[])
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.LaguerreSolver.class
this.polynomialFunction.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count one of { 0, 2 }
this.searchMin one of { -2.0, 0.0 }
this.searchMax one of { 0.0, 1.0, 2.0 }
this.searchStart one of { 0.0, 0.5, 1.0 }
this.function.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
size(this.polynomialFunction.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.AbstractPolynomialSolver(double):::ENTER
absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.AbstractPolynomialSolver(double):::EXIT
this.polynomialFunction == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.getCoefficients():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 2
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.getCoefficients():::EXIT
this.polynomialFunction == orig(this.polynomialFunction)
this.polynomialFunction.coefficients == orig(this.polynomialFunction.coefficients)
this.polynomialFunction.coefficients[] == orig(this.polynomialFunction.coefficients[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 2
this.searchMax one of { 1.0, 2.0 }
return[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(return[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.setup(int, org.apache.commons.math.analysis.polynomials.PolynomialFunction, double, double, double):::ENTER
this.polynomialFunction == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
maxEval == 100
f.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
min one of { -2.0, 0.0 }
max one of { 1.0, 2.0 }
startValue one of { 0.0, 0.5, 1.0 }
size(f.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.setup(int, org.apache.commons.math.analysis.polynomials.PolynomialFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.count == orig(this.evaluations.count)
f.coefficients == orig(f.coefficients)
f.coefficients[] == orig(f.coefficients[])
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
f.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(f.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.LaguerreSolver.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count >= 0
this.searchMin one of { -2.0, 0.0 }
this.searchMax one of { 0.0, 1.0, 2.0 }
this.searchStart one of { 0.0, 0.5, 1.0 }
this.function.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double):::ENTER
absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-14
absoluteAccuracy == 1.0E-6
functionValueAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count one of { 0, 1 }
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count one of { 1, 2 }
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::ENTER
this.evaluations.count one of { 0, 2 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count one of { 0, 2 }
return == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count one of { 0, 2 }
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count one of { 0, 2 }
this.searchMax one of { 1.0, 2.0 }
return == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
return one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
return one of { -2.0, 0.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::ENTER
this.evaluations.count one of { 0, 2 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count one of { 0, 2 }
return == 1.0E-14
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
return one of { 0.0, 0.5, 1.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::ENTER
this.evaluations.maximalCount == 100
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count >= 1
this.searchMax one of { 1.0, 2.0 }
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
maxEval == 100
f.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
min one of { -2.0, 0.0 }
max one of { 1.0, 2.0 }
startValue one of { 0.0, 0.5, 1.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
lower one of { -2.0, 0.0 }
initial one of { 0.0, 0.5, 1.0 }
upper one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMax one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver:::OBJECT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == 1.0E-15
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == 1.0E-6
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == 1.0E-14
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == 0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.ComplexSolver(org.apache.commons.math.analysis.solvers.LaguerreSolver):::ENTER
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == 1.0E-15
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == 1.0E-6
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == 1.0E-14
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == 0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.ComplexSolver(org.apache.commons.math.analysis.solvers.LaguerreSolver):::EXIT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function)
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver:::OBJECT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == 1.0E-15
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == 1.0E-6
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == 1.0E-14
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == null
this.polynomialFunction == null
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.LaguerreSolver():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.LaguerreSolver(double):::ENTER
absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.LaguerreSolver(double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest.LaguerreSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::ENTER
lower one of { -2.0, 0.0 }
initial one of { 0.0, 0.5, 1.0 }
upper one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.complex.Complex:::CLASS
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.I != null
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.NaN != null
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.INF != null
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ONE != null
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.ZERO != null
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex:::OBJECT
===========================================================================
org.apache.commons.math.complex.Complex.Complex(double, double):::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.Complex(double, double):::EXIT
===========================================================================
org.apache.commons.math.complex.Complex.abs():::ENTER
this.real != 0
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT115
this.imaginary == -Infinity
this.real == -Infinity
this.isInfinite == true
return == Infinity
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT123
this.imaginary one of { -24.0, 8.080332172835138 }
this.real one of { 3.9462734405957693, 8.0 }
this.isInfinite == false
return one of { 8.992488092363882, 25.298221281347036 }
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT129
this.imaginary one of { -0.07153394553418391, 0.0, 0.05906296553742685 }
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.real != 0
this.isNaN == false
return >= 0.11288710948760347
===========================================================================
org.apache.commons.math.complex.Complex.acos():::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.acos():::EXIT479
===========================================================================
org.apache.commons.math.complex.Complex.acos():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
return.imaginary one of { -2.196389572412607, Double.NaN }
return.real one of { 1.1164877745012818, Double.NaN }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.add(org.apache.commons.math.complex.Complex):::ENTER
rhs != null
===========================================================================
org.apache.commons.math.complex.Complex.add(org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
rhs.isNaN == orig(rhs.isNaN)
rhs.isInfinite == orig(rhs.isInfinite)
return != null
===========================================================================
org.apache.commons.math.complex.Complex.asin():::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.asin():::EXIT502
===========================================================================
org.apache.commons.math.complex.Complex.asin():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
return.imaginary one of { -1.883835463227888, Double.NaN }
return.real one of { 0.008978044153906593, Double.NaN }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.atan():::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.atan():::EXIT522
this.imaginary == Double.NaN
this.real == Double.NaN
this.isNaN == true
this.isInfinite == false
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
orig(this) has only one value
orig(this.imaginary) == Double.NaN
orig(this.real) == Double.NaN
===========================================================================
org.apache.commons.math.complex.Complex.atan():::EXIT525
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.atan():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
return.imaginary one of { 0.23398073845629772, Double.NaN }
return.real one of { 1.5483887713855315, Double.NaN }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.conjugate():::ENTER
this.imaginary != 0
this.real != 0
this.isNaN == false
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.conjugate():::EXIT175
===========================================================================
org.apache.commons.math.complex.Complex.conjugate():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary != 0
this.real != 0
this.isNaN == false
this.isInfinite == false
return != null
return.imaginary != 0
return.real != 0
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.createComplex(double, double):::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.createComplex(double, double):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
return != null
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::ENTER
this.isNaN == false
rhs != null
rhs.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::EXIT223
this.imaginary == 2.0
this.real == 1.5707963267948966
this.isInfinite == false
rhs.imaginary == 0.0
rhs.real == 0.0
rhs.isInfinite == false
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
orig(this) has only one value
orig(rhs) has only one value
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::EXIT233
this.imaginary one of { -Infinity, Infinity }
this.real == 2.5707963267948966
this.isInfinite == true
rhs.imaginary one of { -Infinity, Infinity }
rhs.real == -1.0
rhs.isInfinite == true
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::EXIT238
rhs.real != 0
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
rhs.imaginary == orig(rhs.imaginary)
rhs.real == orig(rhs.real)
rhs.isNaN == orig(rhs.isNaN)
rhs.isInfinite == orig(rhs.isInfinite)
this.isNaN == false
rhs.isNaN == false
return != null
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::ENTER
this.imaginary == 0.0
this.real one of { -6.762926881122425, -4.0, -3.791186591309127 }
this.isNaN == false
this.isInfinite == false
other != null
other.getClass().getName() == org.apache.commons.math.complex.Complex.class
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::EXIT271
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::EXIT271;condition="not(return == true)"
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary == 0.0
this.real one of { -6.762926881122425, -4.0, -3.791186591309127 }
this.isNaN == false
this.isInfinite == false
return == false
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.complex.Complex.getArgument():::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.getArgument():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
===========================================================================
org.apache.commons.math.complex.Complex.getImaginary():::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.getImaginary():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
===========================================================================
org.apache.commons.math.complex.Complex.getReal():::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.getReal():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
===========================================================================
org.apache.commons.math.complex.Complex.isInfinite():::ENTER
this.real != 0
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.isInfinite():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.real != 0
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.isInfinite():::EXIT;condition="return == true"
this.isInfinite == true
return == true
===========================================================================
org.apache.commons.math.complex.Complex.isInfinite():::EXIT;condition="not(return == true)"
this.isInfinite == false
return == false
===========================================================================
org.apache.commons.math.complex.Complex.isNaN():::ENTER
this has only one value
this.imaginary == Double.NaN
this.real == Double.NaN
this.isNaN == true
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.isNaN():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary == Double.NaN
this.real == Double.NaN
this.isNaN == true
this.isInfinite == false
return == true
===========================================================================
org.apache.commons.math.complex.Complex.isNaN():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.complex.Complex.log():::ENTER
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.log():::EXIT664
this.imaginary == Double.NaN
this.real == Double.NaN
this.isNaN == true
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
orig(this.imaginary) == Double.NaN
orig(this.real) == Double.NaN
===========================================================================
org.apache.commons.math.complex.Complex.log():::EXIT667
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.imaginary one of { -0.07153394553418391, 0.05906296553742685, 8.080332172835138 }
this.real one of { -1.5951327211324828, 3.9462734405957693, 6.578423717631647 }
this.isNaN == false
return.imaginary one of { -3.096777542771063, 0.008978044153906593, 1.1164877745012818 }
return.real one of { 0.46796147691259543, 1.883835463227888, 2.196389572412607 }
return.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.log():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isInfinite == false
return != null
return.imaginary != 0
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::ENTER
rhs != null
rhs.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::EXIT366
this.imaginary one of { -Infinity, Double.NaN }
this.real == Double.NaN
this.isNaN == true
this.isInfinite == false
rhs.imaginary one of { -1.0, 0.5, 1.0 }
rhs.imaginary != 0
rhs.real == 0.0
rhs.isInfinite == false
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
return.isInfinite == false
orig(this.imaginary) one of { -Infinity, Double.NaN }
orig(this.real) == Double.NaN
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::EXIT371
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.imaginary one of { -Infinity, 1.0, Infinity }
this.real one of { -Infinity, 1.0, Infinity }
this.isNaN == false
this.isInfinite == true
rhs.imaginary one of { -Infinity, 1.0, Infinity }
return has only one value
return.imaginary == Infinity
return.real == Infinity
return.isNaN == false
return.isInfinite == true
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::EXIT373
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == false
this.isInfinite == false
rhs.isInfinite == false
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
rhs.imaginary == orig(rhs.imaginary)
rhs.real == orig(rhs.real)
rhs.isNaN == orig(rhs.isNaN)
rhs.isInfinite == orig(rhs.isInfinite)
rhs.isNaN == false
return != null
===========================================================================
org.apache.commons.math.complex.Complex.negate():::ENTER
this has only one value
this.imaginary == 1.0
this.real == 0.0
this.isNaN == false
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.negate():::EXIT428
===========================================================================
org.apache.commons.math.complex.Complex.negate():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary == 1.0
this.real == 0.0
this.isNaN == false
this.isInfinite == false
return != null
return.imaginary == -1.0
return.real == 0.0
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::ENTER
this.imaginary one of { -Infinity, -24.0, 0.0 }
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::EXIT802
this.imaginary == 0.0
this.real == 0.0
this.isInfinite == false
return.imaginary == 0.0
return.real == 0.0
return.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::EXIT807
this.imaginary one of { -24.0, 0.0 }
this.isInfinite == false
return.imaginary one of { -2.940937034462573, 0.0 }
return.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::EXIT809
this.imaginary == -Infinity
this.real == -Infinity
this.isInfinite == true
return.imaginary == -Infinity
return.real == Double.NaN
return.isNaN == true
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary one of { -Infinity, -24.0, 0.0 }
this.isNaN == false
return != null
return.imaginary one of { -Infinity, -2.940937034462573, 0.0 }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt1z():::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt1z():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
return != null
return.imaginary one of { -Infinity, -2.940937034462573 }
return.real one of { 4.0803321728351385, Double.NaN }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.subtract(org.apache.commons.math.complex.Complex):::ENTER
this.isNaN == false
this.isInfinite == false
rhs != null
rhs.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.subtract(org.apache.commons.math.complex.Complex):::EXIT456
===========================================================================
org.apache.commons.math.complex.Complex.subtract(org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
rhs.imaginary == orig(rhs.imaginary)
rhs.real == orig(rhs.real)
rhs.isNaN == orig(rhs.isNaN)
rhs.isInfinite == orig(rhs.isInfinite)
this.isNaN == false
this.isInfinite == false
rhs.isNaN == false
return != null
return.isNaN == false
===========================================================================
org.apache.commons.math.complex.ComplexTest:::OBJECT
this.inf == Infinity
this.neginf == -Infinity
this.nan == Double.NaN
this.pi == 3.141592653589793
this.oneInf != null
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.I != null
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.NaN != null
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.INF != null
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ONE != null
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.ZERO != null
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
this.oneInf.imaginary == Infinity
this.oneInf.real == 1.0
this.oneInf.isNaN == false
this.oneInf.isInfinite == true
this.oneNegInf != null
this.oneNegInf.imaginary == -Infinity
this.oneNegInf.real == 1.0
this.oneNegInf.isNaN == false
this.oneNegInf.isInfinite == true
this.infOne != null
this.infOne.imaginary == 1.0
this.infOne.real == Infinity
this.infOne.isNaN == false
this.infOne.isInfinite == true
this.infZero != null
this.infZero.imaginary == 0.0
this.infZero.real == Infinity
this.infZero.isNaN == false
this.infZero.isInfinite == true
this.infNaN != null
this.infNaN.imaginary == Double.NaN
this.infNaN.real == Infinity
this.infNaN.isNaN == true
this.infNaN.isInfinite == false
this.infNegInf != null
this.infNegInf.imaginary == -Infinity
this.infNegInf.real == Infinity
this.infNegInf.isNaN == false
this.infNegInf.isInfinite == true
this.infInf != null
this.infInf.imaginary == Infinity
this.infInf.real == Infinity
this.infInf.isNaN == false
this.infInf.isInfinite == true
this.negInfInf != null
this.negInfInf.imaginary == Infinity
this.negInfInf.real == -Infinity
this.negInfInf.isNaN == false
this.negInfInf.isInfinite == true
this.negInfZero != null
this.negInfZero.imaginary == 0.0
this.negInfZero.real == -Infinity
this.negInfZero.isNaN == false
this.negInfZero.isInfinite == true
this.negInfOne != null
this.negInfOne.imaginary == 1.0
this.negInfOne.real == -Infinity
this.negInfOne.isNaN == false
this.negInfOne.isInfinite == true
this.negInfNaN != null
this.negInfNaN.imaginary == Double.NaN
this.negInfNaN.real == -Infinity
this.negInfNaN.isNaN == true
this.negInfNaN.isInfinite == false
this.negInfNegInf != null
this.negInfNegInf.imaginary == -Infinity
this.negInfNegInf.real == -Infinity
this.negInfNegInf.isNaN == false
this.negInfNegInf.isInfinite == true
this.oneNaN != null
this.oneNaN.imaginary == Double.NaN
this.oneNaN.real == 1.0
this.oneNaN.isNaN == true
this.oneNaN.isInfinite == false
this.zeroInf != null
this.zeroInf.imaginary == Infinity
this.zeroInf.real == 0.0
this.zeroInf.isNaN == false
this.zeroInf.isInfinite == true
this.zeroNaN != null
this.zeroNaN.imaginary == Double.NaN
this.zeroNaN.real == 0.0
this.zeroNaN.isNaN == true
this.zeroNaN.isInfinite == false
this.nanInf != null
this.nanInf.imaginary == Infinity
this.nanInf.real == Double.NaN
this.nanInf.isNaN == true
this.nanInf.isInfinite == false
this.nanNegInf != null
this.nanNegInf.imaginary == -Infinity
this.nanNegInf.real == Double.NaN
this.nanNegInf.isNaN == true
this.nanNegInf.isInfinite == false
this.nanZero != null
this.nanZero.imaginary == 0.0
this.nanZero.real == Double.NaN
this.nanZero.isNaN == true
this.nanZero.isInfinite == false
===========================================================================
org.apache.commons.math.complex.ComplexTest.ComplexTest():::EXIT
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAcosInf():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAcosInf():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAsinInf():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAsinInf():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtanInf():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtanInf():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtanNaN():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtanNaN():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException:::OBJECT
this.context.msgPatterns[] elements != null
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns[].getClass().getName() one of { [org.apache.commons.math.exception.util.LocalizedFormats], [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats] }
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[] elements != null
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) one of { 1, 2 }
size(this.context.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException():::EXIT
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
args[] == []
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.getContext():::ENTER
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.getContext():::EXIT
this.context == orig(this.context)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
return.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
return.msgPatterns[].getClass().getName() one of { [org.apache.commons.math.exception.util.LocalizedFormats], [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats] }
return.msgPatterns.getClass().getName() == java.util.ArrayList.class
return.msgArguments[].getClass().getName() elements == java.lang.Object[].class
return.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
return.msgArguments.getClass().getName() == java.util.ArrayList.class
return.context.getClass().getName() == java.util.HashMap.class
size(return.msgPatterns[]) one of { 1, 2 }
size(return.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException:::CLASS
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException:::OBJECT
this.max has only one value
this.max.getClass().getName() == java.lang.Integer.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 2
this.context.msgPatterns[] elements != null
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[] elements != null
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 2
size(this.context.msgArguments[]) == 2
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::ENTER
max has only one value
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
specific has only one value
specific.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
max has only one value
max.getClass().getName() == java.lang.Integer.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] == []
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.getMax():::ENTER
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.getMax():::EXIT
this.max == orig(this.max)
this.max.getClass().getName() == orig(this.max.getClass().getName())
this.context == orig(this.context)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
return has only one value
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException:::CLASS
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException:::OBJECT
this.max has only one value
this.max.getClass().getName() == java.lang.Integer.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 3
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 3
size(this.context.msgArguments[]) == 3
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::ENTER
max has only one value
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
array[] elements != null
size(array[]) one of { 0, 2 }
size(array[])-1 != 0
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
array[] elements != null
return.getClass().getName() == java.lang.Object[].class
return[] elements has only one value
return[] elements != null
size(array[])-1 != 0
size(return[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::CLASS
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::OBJECT
this.msgPatterns != null
this.msgPatterns[] elements != null
this.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.msgArguments != null
this.msgArguments[] elements != null
this.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context != null
this.context.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.ExceptionContext():::EXIT
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern != null
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments != null
arguments.getClass().getName() == java.lang.Object[].class
arguments[] elements != null
size(this.msgPatterns[]) one of { 0, 1, 2 }
size(this.msgArguments[]) one of { 0, 1, 2 }
size(arguments[]) one of { 0, 2 }
size(arguments[])-1 != 0
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
this.msgPatterns == orig(this.msgPatterns)
this.msgPatterns.getClass().getName() == orig(this.msgPatterns.getClass().getName())
this.msgArguments == orig(this.msgArguments)
this.msgArguments.getClass().getName() == orig(this.msgArguments.getClass().getName())
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
arguments[] == orig(arguments[])
size(this.msgPatterns[])-1 == orig(size(this.msgPatterns[]))
size(this.msgArguments[])-1 == orig(size(this.msgArguments[]))
arguments[] elements != null
size(this.msgPatterns[]) one of { 1, 2, 3 }
size(this.msgArguments[]) one of { 1, 2, 3 }
size(arguments[])-1 != 0
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats:::OBJECT
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.FastCosineTransformer():::EXIT
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.fct(double[]):::ENTER
f[] one of { [0.0, 0.7071067811865475, 1.0, 0.7071067811865476, 1.2246467991473532E-16, -0.7071067811865475, -1.0, -0.7071067811865477, -2.4492935982947064E-16], [0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0] }
size(f[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.fct(double[]):::EXIT260
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.fct(double[]):::EXIT
f[] == orig(f[])
f[] one of { [0.0, 0.7071067811865475, 1.0, 0.7071067811865476, 1.2246467991473532E-16, -0.7071067811865475, -1.0, -0.7071067811865477, -2.4492935982947064E-16], [0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0] }
return[] one of { [-0.9403439327297836, 3.261972627395669, -1.037997558095853, -1.1755323600776935, 1.0453412968380758, 0.3552013693826652, -0.8188415064387264, 1.574550631401682, -0.9403439327297831], [116.8490235169046, -105.09656947635271, 40.833753095733, -22.586195467149622, -7.528079120206828, -15.412731000462173, -11.851862365027761, -23.41202498313715, -51.15097648309541] }
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform(double[]):::ENTER
this has only one value
f has only one value
f[] == [0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0]
size(f[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform(double[]):::EXIT
f[] == orig(f[])
f[] == [0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0]
return has only one value
return[] == [116.8490235169046, -105.09656947635271, 40.833753095733, -22.586195467149622, -7.528079120206828, -15.412731000462173, -11.851862365027761, -23.41202498313715, -51.15097648309541]
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
this has only one value
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min == 0.0
max == 7.0685834705770345
n == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
return has only one value
return[] == [-0.9403439327297836, 3.261972627395669, -1.037997558095853, -1.1755323600776935, 1.0453412968380758, 0.3552013693826652, -0.8188415064387264, 1.574550631401682, -0.9403439327297831]
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformerTest:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastCosineTransformerTest.FastCosineTransformerTest():::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix:::OBJECT
this.dimensionSize[] == [2, 2]
this.dimensionSize[] elements == 2
this.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(this.dimensionSize[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.MultiDimensionalComplexMatrix(java.lang.Object):::ENTER
multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.MultiDimensionalComplexMatrix(java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.clone():::ENTER
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.clone():::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
return.getClass().getName() == org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.class
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.clone(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix):::ENTER
mdcm.dimensionSize[] == [2, 2]
mdcm.dimensionSize[] elements == 2
mdcm.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(mdcm.dimensionSize[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.clone(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix):::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
mdcm.dimensionSize == orig(mdcm.dimensionSize)
mdcm.dimensionSize[] == orig(mdcm.dimensionSize[])
mdcm.multiDimensionalComplexArray == orig(mdcm.multiDimensionalComplexArray)
mdcm.multiDimensionalComplexArray.getClass().getName() == orig(mdcm.multiDimensionalComplexArray.getClass().getName())
mdcm.dimensionSize[] == [2, 2]
mdcm.dimensionSize[] elements == 2
mdcm.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(mdcm.dimensionSize[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.get(int[]):::ENTER
vector[] elements one of { 0, 1 }
size(vector[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.get(int[]):::EXIT679
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.get(int[]):::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
vector[] == orig(vector[])
vector[] elements one of { 0, 1 }
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.getArray():::ENTER
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.getArray():::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
return.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.getDimensionSizes():::ENTER
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.getDimensionSizes():::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
return[] == [2, 2]
return[] elements == 2
size(return[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.set(org.apache.commons.math.complex.Complex, int[]):::ENTER
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
magnitude.isNaN == false
magnitude.isInfinite == false
vector[] elements one of { 0, 1 }
size(vector[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.set(org.apache.commons.math.complex.Complex, int[]):::EXIT711
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.set(org.apache.commons.math.complex.Complex, int[]):::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
magnitude.imaginary == orig(magnitude.imaginary)
magnitude.real == orig(magnitude.real)
magnitude.isNaN == orig(magnitude.isNaN)
magnitude.isInfinite == orig(magnitude.isInfinite)
vector[] == orig(vector[])
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
magnitude.isNaN == false
magnitude.isInfinite == false
vector[] elements one of { 0, 1 }
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity:::CLASS
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity:::OBJECT
this.omegaReal[] elements <= 1.0
this.omegaImaginaryForward[] elements <= 1.0000000000000049
this.omegaImaginaryInverse[] elements <= 1.0000000000000016
size(this.omegaReal[]) is a power of 2
size(this.omegaImaginaryForward[]) is a power of 2
size(this.omegaImaginaryInverse[]) is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.RootsOfUnity():::EXIT
this.omegaCount == 0
this.omegaReal == null
this.omegaImaginaryForward == null
this.omegaImaginaryInverse == null
this.isForward == true
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.computeOmega(int):::ENTER
this.omegaReal[] one of { [1.0, -1.0], [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -1.2246467991473532E-16] }
this.omegaImaginaryInverse[] one of { [0.0, 1.2246467991473532E-16], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
size(this.omegaReal[]) one of { 2, 4, 128 }
size(this.omegaImaginaryForward[]) one of { 2, 4, 128 }
size(this.omegaImaginaryInverse[]) one of { 2, 4, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.computeOmega(int):::EXIT843
this.omegaCount == orig(this.omegaCount)
this.omegaReal == orig(this.omegaReal)
this.omegaReal[] == orig(this.omegaReal[])
this.omegaImaginaryForward == orig(this.omegaImaginaryForward)
this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[])
this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse)
this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[])
this.omegaCount == 2
this.omegaReal has only one value
this.omegaReal[] == [1.0, -1.0]
this.omegaReal[] elements one of { -1.0, 1.0 }
this.omegaReal[] sorted by >
this.omegaImaginaryForward has only one value
this.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.omegaImaginaryForward[] elements == 0.0
this.omegaImaginaryInverse has only one value
this.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.omegaImaginaryInverse[] elements == 0.0
orig(this) has only one value
orig(n) one of { -2, 2 }
size(this.omegaReal[]) == 2
size(this.omegaImaginaryForward[]) == 2
size(this.omegaImaginaryInverse[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.computeOmega(int):::EXIT865
this.isForward == orig(this.isForward)
this.isForward == true
orig(this.omegaCount) one of { 0, 4, 128 }
orig(this.omegaReal[]) one of { [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
orig(this.omegaImaginaryForward[]) one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195] }
orig(this.omegaImaginaryInverse[]) one of { [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
orig(n) is a power of 2
orig(size(this.omegaReal[])) one of { 4, 128 }
orig(size(this.omegaImaginaryForward[])) one of { 4, 128 }
orig(size(this.omegaImaginaryInverse[])) one of { 4, 128 }
this.omegaCount > orig(this.omegaCount)
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.computeOmega(int):::EXIT
(orig(this.omegaCount) == 2)  <==>  (orig(size(this.omegaImaginaryForward[])) == 2)
(orig(this.omegaCount) == 2)  <==>  (orig(size(this.omegaImaginaryInverse[])) == 2)
(orig(this.omegaCount) == 2)  <==>  (orig(size(this.omegaReal[])) == 2)
(orig(this.omegaCount) == 2)  <==>  (orig(this.omegaImaginaryForward[]) == [0.0, -1.2246467991473532E-16])
(orig(this.omegaCount) == 2)  <==>  (orig(this.omegaImaginaryInverse[]) == [0.0, 1.2246467991473532E-16])
(orig(this.omegaCount) == 2)  <==>  (orig(this.omegaReal[]) == [1.0, -1.0])
(orig(this.omegaCount) == 2)  <==>  (this.omegaCount == orig(this.omegaCount))
(orig(this.omegaCount) == 2)  ==>  (orig(n) one of { -2, 2 })
(orig(this.omegaCount) == 2)  ==>  (orig(this) has only one value)
(orig(this.omegaCount) == 2)  ==>  (orig(this.omegaImaginaryForward) has only one value)
(orig(this.omegaCount) == 2)  ==>  (orig(this.omegaImaginaryForward[]) elements == 0.0)
(orig(this.omegaCount) == 2)  ==>  (orig(this.omegaImaginaryInverse) has only one value)
(orig(this.omegaCount) == 2)  ==>  (orig(this.omegaImaginaryInverse[]) elements == 0.0)
(orig(this.omegaCount) == 2)  ==>  (orig(this.omegaReal) has only one value)
(orig(this.omegaCount) == 2)  ==>  (orig(this.omegaReal[]) elements one of { -1.0, 1.0 })
(orig(this.omegaCount) == 2)  ==>  (orig(this.omegaReal[]) sorted by >)
(orig(this.omegaCount) == 2)  ==>  (size(this.omegaImaginaryForward[]) == 2)
(orig(this.omegaCount) == 2)  ==>  (size(this.omegaImaginaryInverse[]) == 2)
(orig(this.omegaCount) == 2)  ==>  (size(this.omegaReal[]) == 2)
(orig(this.omegaCount) == 2)  ==>  (this.omegaCount == 2)
(orig(this.omegaCount) == 2)  ==>  (this.omegaImaginaryForward == orig(this.omegaImaginaryForward))
(orig(this.omegaCount) == 2)  ==>  (this.omegaImaginaryForward has only one value)
(orig(this.omegaCount) == 2)  ==>  (this.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16])
(orig(this.omegaCount) == 2)  ==>  (this.omegaImaginaryForward[] elements == 0.0)
(orig(this.omegaCount) == 2)  ==>  (this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse))
(orig(this.omegaCount) == 2)  ==>  (this.omegaImaginaryInverse has only one value)
(orig(this.omegaCount) == 2)  ==>  (this.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16])
(orig(this.omegaCount) == 2)  ==>  (this.omegaImaginaryInverse[] elements == 0.0)
(orig(this.omegaCount) == 2)  ==>  (this.omegaReal == orig(this.omegaReal))
(orig(this.omegaCount) == 2)  ==>  (this.omegaReal has only one value)
(orig(this.omegaCount) == 2)  ==>  (this.omegaReal[] == [1.0, -1.0])
(orig(this.omegaCount) == 2)  ==>  (this.omegaReal[] elements one of { -1.0, 1.0 })
(orig(this.omegaCount) == 2)  ==>  (this.omegaReal[] sorted by >)
(orig(this.omegaCount) one of { 0, 4, 128 })  <==>  (orig(size(this.omegaImaginaryForward[])) one of { 4, 128 })
(orig(this.omegaCount) one of { 0, 4, 128 })  <==>  (orig(size(this.omegaImaginaryInverse[])) one of { 4, 128 })
(orig(this.omegaCount) one of { 0, 4, 128 })  <==>  (orig(size(this.omegaReal[])) one of { 4, 128 })
(orig(this.omegaCount) one of { 0, 4, 128 })  <==>  (orig(this.omegaImaginaryForward[]) one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195] })
(orig(this.omegaCount) one of { 0, 4, 128 })  <==>  (orig(this.omegaImaginaryInverse[]) one of { [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 1.0, 1.2246467991473532E-16, -1.0] })
(orig(this.omegaCount) one of { 0, 4, 128 })  <==>  (orig(this.omegaReal[]) one of { [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] })
(orig(this.omegaCount) one of { 0, 4, 128 })  <==>  (this.omegaCount > orig(this.omegaCount))
(orig(this.omegaCount) one of { 0, 4, 128 })  ==>  (orig(n) is a power of 2)
(orig(this.omegaCount) one of { 0, 4, 128 })  ==>  (orig(this.isForward) == true)
(orig(this.omegaCount) one of { 0, 4, 128 })  ==>  (this.isForward == orig(this.isForward))
(orig(this.omegaCount) one of { 0, 4, 128 })  ==>  (this.isForward == true)
this.omegaCount >= 2
this.omegaCount is a power of 2
this.omegaCount >= orig(this.omegaCount)
this.omegaReal[] >= orig(this.omegaReal[]) (lexically)
this.omegaImaginaryForward[] >= orig(this.omegaImaginaryForward[]) (lexically)
this.omegaImaginaryInverse[] <= orig(this.omegaImaginaryInverse[]) (lexically)
size(this.omegaReal[]) % orig(size(this.omegaReal[])) == 0
size(this.omegaReal[]) >= orig(size(this.omegaReal[]))
size(this.omegaReal[])-1 != orig(size(this.omegaReal[]))
size(this.omegaReal[])-1 >= orig(size(this.omegaReal[]))-1
size(this.omegaImaginaryForward[]) % orig(size(this.omegaImaginaryForward[])) == 0
size(this.omegaImaginaryForward[]) >= orig(size(this.omegaImaginaryForward[]))
size(this.omegaImaginaryForward[])-1 != orig(size(this.omegaImaginaryForward[]))
size(this.omegaImaginaryForward[])-1 >= orig(size(this.omegaImaginaryForward[]))-1
size(this.omegaImaginaryInverse[]) % orig(size(this.omegaImaginaryInverse[])) == 0
size(this.omegaImaginaryInverse[]) >= orig(size(this.omegaImaginaryInverse[]))
size(this.omegaImaginaryInverse[])-1 != orig(size(this.omegaImaginaryInverse[]))
size(this.omegaImaginaryInverse[])-1 >= orig(size(this.omegaImaginaryInverse[]))-1
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.getOmegaImaginary(int):::ENTER
this.omegaCount one of { 8, 128, 256 }
this.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.isForward == true
k >= 0
size(this.omegaReal[]) one of { 8, 128, 256 }
size(this.omegaImaginaryForward[]) one of { 8, 128, 256 }
size(this.omegaImaginaryInverse[]) one of { 8, 128, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.getOmegaImaginary(int):::EXIT
this.omegaCount == orig(this.omegaCount)
this.omegaReal == orig(this.omegaReal)
this.omegaReal[] == orig(this.omegaReal[])
this.omegaImaginaryForward == orig(this.omegaImaginaryForward)
this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[])
this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse)
this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[])
this.isForward == orig(this.isForward)
this.omegaCount one of { 8, 128, 256 }
this.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.isForward == true
size(this.omegaReal[]) one of { 8, 128, 256 }
size(this.omegaImaginaryForward[]) one of { 8, 128, 256 }
size(this.omegaImaginaryInverse[]) one of { 8, 128, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.getOmegaReal(int):::ENTER
this.omegaCount one of { 8, 128, 256 }
this.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.isForward == true
k >= 0
size(this.omegaReal[]) one of { 8, 128, 256 }
size(this.omegaImaginaryForward[]) one of { 8, 128, 256 }
size(this.omegaImaginaryInverse[]) one of { 8, 128, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.getOmegaReal(int):::EXIT
this.omegaCount == orig(this.omegaCount)
this.omegaReal == orig(this.omegaReal)
this.omegaReal[] == orig(this.omegaReal[])
this.omegaImaginaryForward == orig(this.omegaImaginaryForward)
this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[])
this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse)
this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[])
this.isForward == orig(this.isForward)
this.omegaCount one of { 8, 128, 256 }
this.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.isForward == true
size(this.omegaReal[]) one of { 8, 128, 256 }
size(this.omegaImaginaryForward[]) one of { 8, 128, 256 }
size(this.omegaImaginaryInverse[]) one of { 8, 128, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.isForward():::ENTER
this.omegaCount one of { 4, 128 }
this.omegaReal[] one of { [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195] }
this.omegaImaginaryInverse[] one of { [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
this.isForward == true
size(this.omegaReal[]) one of { 4, 128 }
size(this.omegaImaginaryForward[]) one of { 4, 128 }
size(this.omegaImaginaryInverse[]) one of { 4, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.isForward():::EXIT
this.omegaCount == orig(this.omegaCount)
this.omegaReal == orig(this.omegaReal)
this.omegaReal[] == orig(this.omegaReal[])
this.omegaImaginaryForward == orig(this.omegaImaginaryForward)
this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[])
this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse)
this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[])
this.isForward == orig(this.isForward)
this.omegaCount one of { 4, 128 }
this.omegaReal[] one of { [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195] }
this.omegaImaginaryInverse[] one of { [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
this.isForward == true
return == true
size(this.omegaReal[]) one of { 4, 128 }
size(this.omegaImaginaryForward[]) one of { 4, 128 }
size(this.omegaImaginaryInverse[]) one of { 4, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.isForward():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer:::CLASS
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer:::OBJECT
this.roots.omegaCount >= 0
size(this.roots.omegaReal[]) >= 2
size(this.roots.omegaReal[]) is a power of 2
size(this.roots.omegaImaginaryForward[]) >= 2
size(this.roots.omegaImaginaryForward[]) is a power of 2
size(this.roots.omegaImaginaryInverse[]) >= 2
size(this.roots.omegaImaginaryInverse[]) is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer():::EXIT
this.roots.omegaCount == 0
this.roots.omegaReal == null
this.roots.omegaImaginaryForward == null
this.roots.omegaImaginaryInverse == null
this.roots.isForward == true
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(double[], boolean):::ENTER
this.roots.omegaCount == 0
this.roots.omegaReal == null
this.roots.omegaImaginaryForward == null
this.roots.omegaImaginaryInverse == null
this.roots.isForward == true
isInverse == false
size(f[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(double[], boolean):::EXIT336
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(double[], boolean):::EXIT
this.roots == orig(this.roots)
this.roots.isForward == orig(this.roots.isForward)
f[] == orig(f[])
this.roots.omegaCount one of { 8, 256 }
this.roots.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.roots.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.roots.isForward == true
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[].isNaN elements == false
return[].isNaN one of { [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite elements == false
return[].isInfinite one of { [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 8, 256 }
size(this.roots.omegaImaginaryForward[]) one of { 8, 256 }
size(this.roots.omegaImaginaryInverse[]) one of { 8, 256 }
size(return[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(org.apache.commons.math.complex.Complex[]):::ENTER
this.roots.omegaCount one of { 2, 4, 128 }
this.roots.omegaReal[] one of { [1.0, -1.0], [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.roots.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -1.2246467991473532E-16] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 1.2246467991473532E-16], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
data.getClass().getName() == org.apache.commons.math.complex.Complex[].class
data[] elements != null
data[].isNaN elements == false
data[].isNaN one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
data[].isInfinite elements == false
data[].isInfinite one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 2, 4, 128 }
size(this.roots.omegaImaginaryForward[]) one of { 2, 4, 128 }
size(this.roots.omegaImaginaryInverse[]) one of { 2, 4, 128 }
size(data[]) one of { 2, 4, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(org.apache.commons.math.complex.Complex[]):::EXIT361
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaReal[] sorted by >
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
data[].isNaN == [0, 0]
data[].isInfinite == [0, 0]
return[].isNaN == [0, 0]
return[].isInfinite == [0, 0]
orig(this) has only one value
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(return[]) == 2
orig(size(data[])) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(org.apache.commons.math.complex.Complex[]):::EXIT411
this.roots.omegaCount one of { 4, 128 }
this.roots.omegaReal[] one of { [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.roots.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
this.roots.isForward == true
data[].isNaN one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
data[].isInfinite one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isNaN one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 4, 128 }
size(this.roots.omegaImaginaryForward[]) one of { 4, 128 }
size(this.roots.omegaImaginaryInverse[]) one of { 4, 128 }
size(return[]) one of { 4, 128 }
orig(size(data[])) one of { 4, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(org.apache.commons.math.complex.Complex[]):::EXIT
this.roots == orig(this.roots)
this.roots.omegaCount == orig(this.roots.omegaCount)
this.roots.omegaReal == orig(this.roots.omegaReal)
this.roots.omegaReal[] == orig(this.roots.omegaReal[])
this.roots.omegaImaginaryForward == orig(this.roots.omegaImaginaryForward)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse == orig(this.roots.omegaImaginaryInverse)
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[])
this.roots.isForward == orig(this.roots.isForward)
data[] == orig(data[])
data[].imaginary == orig(data[].imaginary)
data[].real == orig(data[].real)
data[].isNaN == orig(data[].isNaN)
data[].isInfinite == orig(data[].isInfinite)
this.roots.omegaCount one of { 2, 4, 128 }
this.roots.omegaReal[] one of { [1.0, -1.0], [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.roots.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -1.2246467991473532E-16] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 1.2246467991473532E-16], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
data[] elements != null
data[].isNaN elements == false
data[].isNaN one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
data[].isInfinite elements == false
data[].isInfinite one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] elements != null
return[].isNaN elements == false
return[].isNaN one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite elements == false
return[].isInfinite one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 2, 4, 128 }
size(this.roots.omegaImaginaryForward[]) one of { 2, 4, 128 }
size(this.roots.omegaImaginaryInverse[]) one of { 2, 4, 128 }
size(return[]) one of { 2, 4, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(org.apache.commons.math.complex.Complex[]):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
f.getClass().getName() == org.apache.commons.math.complex.Complex[].class
f[].isNaN == [0, 0]
f[].isNaN elements == false
f[].isInfinite == [0, 0]
f[].isInfinite elements == false
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(f[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(org.apache.commons.math.complex.Complex[]):::EXIT
this.roots == orig(this.roots)
this.roots.omegaCount == orig(this.roots.omegaCount)
this.roots.omegaReal == orig(this.roots.omegaReal)
this.roots.omegaReal[] == orig(this.roots.omegaReal[])
this.roots.omegaImaginaryForward == orig(this.roots.omegaImaginaryForward)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse == orig(this.roots.omegaImaginaryInverse)
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[])
f[] == orig(f[])
f[].imaginary == orig(f[].imaginary)
f[].real == orig(f[].real)
f[].isNaN == orig(f[].isNaN)
f[].isInfinite == orig(f[].isInfinite)
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
this.roots.isForward == false
f[].isNaN == [0, 0]
f[].isNaN elements == false
f[].isInfinite == [0, 0]
f[].isInfinite elements == false
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[].isNaN == [0, 0]
return[].isNaN elements == false
return[].isInfinite == [0, 0]
return[].isInfinite elements == false
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(return[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long):::ENTER
n >= 2
n is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long):::EXIT
return == true
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.mdfft(java.lang.Object, boolean):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount one of { 0, 2 }
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
this.roots.isForward == true
mdca.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.mdfft(java.lang.Object, boolean):::EXIT
this.roots == orig(this.roots)
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
return.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
this.roots.omegaReal[] == orig(this.roots.omegaReal[]) (elementwise)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[]) (elementwise)
this.roots.omegaImaginaryForward[] is the reverse of orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[]) (elementwise)
this.roots.omegaImaginaryInverse[] is the reverse of orig(this.roots.omegaImaginaryInverse[])
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.mdfft(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix, boolean, int, int[]):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount one of { 0, 2 }
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaReal[] elements != 0
this.roots.omegaReal[] sorted by >
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
mdcm.dimensionSize[] == [2, 2]
mdcm.dimensionSize[] elements == 2
mdcm.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
d one of { 0, 1 }
subVector[] elements one of { 0, 1 }
subVector[] sorted by >=
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(mdcm.dimensionSize[]) == 2
size(subVector[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.mdfft(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix, boolean, int, int[]):::EXIT
this.roots == orig(this.roots)
mdcm.dimensionSize == orig(mdcm.dimensionSize)
mdcm.dimensionSize[] == orig(mdcm.dimensionSize[])
mdcm.multiDimensionalComplexArray == orig(mdcm.multiDimensionalComplexArray)
mdcm.multiDimensionalComplexArray.getClass().getName() == orig(mdcm.multiDimensionalComplexArray.getClass().getName())
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaReal[] elements != 0
this.roots.omegaReal[] sorted by >
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
mdcm.dimensionSize[] == [2, 2]
mdcm.dimensionSize[] elements == 2
mdcm.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
subVector[] elements one of { 0, 1 }
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(mdcm.dimensionSize[]) == 2
this.roots.omegaCount >= orig(this.roots.omegaCount)
this.roots.omegaReal[] == orig(this.roots.omegaReal[]) (elementwise)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[]) (elementwise)
this.roots.omegaImaginaryForward[] is the reverse of orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[]) (elementwise)
this.roots.omegaImaginaryInverse[] is the reverse of orig(this.roots.omegaImaginaryInverse[])
subVector[] >= orig(subVector[]) (lexically)
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.sample(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min == 0.0
max one of { 6.283185307179586, 7.0685834705770345 }
n one of { 9, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.sample(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
return[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030122, 0.19509032201612825, 0.2191012401568698, 0.24298017990326387, 0.26671275747489837, 0.29028467725446233, 0.3136817403988915, 0.33688985339222005, 0.3598950365349881, 0.3826834323650898, 0.40524131400498986, 0.4275550934302821, 0.44961132965460654, 0.47139673682599764, 0.49289819222978404, 0.5141027441932217, 0.5349976198870972, 0.5555702330196022, 0.5758081914178453, 0.5956993044924334, 0.6152315905806268, 0.6343932841636455, 0.6531728429537768, 0.6715589548470183, 0.6895405447370668, 0.7071067811865475, 0.7242470829514669, 0.7409511253549591, 0.7572088465064845, 0.773010453362737, 0.7883464276266062, 0.8032075314806448, 0.8175848131515837, 0.8314696123025452, 0.844853565249707, 0.8577286100002721, 0.8700869911087113, 0.8819212643483549, 0.8932243011955153, 0.9039892931234433, 0.9142097557035307, 0.9238795325112867, 0.9329927988347388, 0.9415440651830208, 0.9495281805930367, 0.9569403357322089, 0.9637760657954398, 0.970031253194544, 0.9757021300385286, 0.9807852804032304, 0.9852776423889412, 0.989176509964781, 0.99247953459871, 0.9951847266721968, 0.9972904566786902, 0.9987954562051724, 0.9996988186962042, 1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786902, 0.9951847266721969, 0.99247953459871, 0.989176509964781, 0.9852776423889412, 0.9807852804032304, 0.9757021300385286, 0.970031253194544, 0.9637760657954398, 0.9569403357322089, 0.9495281805930367, 0.9415440651830208, 0.9329927988347388, 0.9238795325112867, 0.9142097557035307, 0.9039892931234434, 0.8932243011955152, 0.881921264348355, 0.8700869911087115, 0.8577286100002721, 0.8448535652497072, 0.8314696123025455, 0.8175848131515837, 0.8032075314806449, 0.7883464276266063, 0.7730104533627371, 0.7572088465064847, 0.740951125354959, 0.7242470829514669, 0.7071067811865476, 0.689540544737067, 0.6715589548470186, 0.6531728429537766, 0.6343932841636455, 0.6152315905806269, 0.5956993044924335, 0.5758081914178454, 0.5555702330196022, 0.5349976198870972, 0.5141027441932218, 0.49289819222978415, 0.47139673682599786, 0.4496113296546069, 0.42755509343028203, 0.4052413140049899, 0.3826834323650899, 0.35989503653498833, 0.33688985339222033, 0.3136817403988914, 0.2902846772544624, 0.2667127574748985, 0.24298017990326407, 0.21910124015687005, 0.1950903220161286, 0.17096188876030122, 0.1467304744553618, 0.12241067519921635, 0.09801714032956083, 0.07356456359966773, 0.049067674327417966, 0.024541228522912326, 1.2246467991473532E-16, -0.02454122852291208, -0.049067674327417724, -0.0735645635996675, -0.09801714032956059, -0.1224106751992161, -0.14673047445536158, -0.17096188876030097, -0.19509032201612836, -0.2191012401568698, -0.24298017990326382, -0.26671275747489825, -0.2902846772544621, -0.3136817403988912, -0.3368898533922201, -0.3598950365349881, -0.38268343236508967, -0.4052413140049897, -0.4275550934302818, -0.44961132965460665, -0.47139673682599764, -0.4928981922297839, -0.5141027441932216, -0.5349976198870969, -0.555570233019602, -0.5758081914178453, -0.5956993044924332, -0.6152315905806267, -0.6343932841636453, -0.6531728429537765, -0.6715589548470184, -0.6895405447370668, -0.7071067811865475, -0.7242470829514668, -0.7409511253549589, -0.7572088465064842, -0.7730104533627367, -0.7883464276266059, -0.803207531480645, -0.8175848131515838, -0.8314696123025452, -0.844853565249707, -0.857728610000272, -0.8700869911087113, -0.8819212643483549, -0.8932243011955152, -0.9039892931234431, -0.9142097557035305, -0.9238795325112865, -0.932992798834739, -0.9415440651830208, -0.9495281805930367, -0.9569403357322088, -0.9637760657954398, -0.970031253194544, -0.9757021300385285, -0.9807852804032303, -0.9852776423889411, -0.9891765099647809, -0.9924795345987101, -0.9951847266721969, -0.9972904566786902, -0.9987954562051724, -0.9996988186962042, -1.0, -0.9996988186962042, -0.9987954562051724, -0.9972904566786902, -0.9951847266721969, -0.9924795345987101, -0.9891765099647809, -0.9852776423889412, -0.9807852804032304, -0.9757021300385286, -0.970031253194544, -0.96377606579544, -0.9569403357322089, -0.9495281805930368, -0.9415440651830209, -0.9329927988347391, -0.9238795325112866, -0.9142097557035306, -0.9039892931234433, -0.8932243011955153, -0.881921264348355, -0.8700869911087115, -0.8577286100002722, -0.8448535652497072, -0.8314696123025455, -0.817584813151584, -0.8032075314806453, -0.7883464276266061, -0.7730104533627369, -0.7572088465064846, -0.7409511253549591, -0.724247082951467, -0.7071067811865477, -0.6895405447370672, -0.6715589548470187, -0.6531728429537771, -0.6343932841636459, -0.6152315905806274, -0.5956993044924332, -0.5758081914178452, -0.5555702330196022, -0.5349976198870973, -0.5141027441932219, -0.49289819222978426, -0.4713967368259979, -0.449611329654607, -0.42755509343028253, -0.4052413140049904, -0.3826834323650904, -0.359895036534988, -0.33688985339222, -0.3136817403988915, -0.2902846772544625, -0.2667127574748986, -0.24298017990326418, -0.21910124015687016, -0.19509032201612872, -0.17096188876030177, -0.1467304744553624, -0.12241067519921603, -0.0980171403295605, -0.07356456359966741, -0.04906767432741809, -0.024541228522912448], [0.0, 0.7071067811865475, 1.0, 0.7071067811865476, 1.2246467991473532E-16, -0.7071067811865475, -1.0, -0.7071067811865477, -2.4492935982947064E-16] }
size(return[]) one of { 9, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.scaleArray(org.apache.commons.math.complex.Complex[], double):::ENTER
f.getClass().getName() == org.apache.commons.math.complex.Complex[].class
f[] elements != null
f[].isNaN elements == false
f[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
f[].isInfinite elements == false
f[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
d one of { 0.5, 0.7071067811865475 }
size(f[]) one of { 2, 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.scaleArray(org.apache.commons.math.complex.Complex[], double):::EXIT
f[].isNaN == orig(f[].isNaN)
f[].isInfinite == orig(f[].isInfinite)
f[] elements != null
f[].isNaN elements == false
f[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
f[].isInfinite elements == false
f[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] elements != null
return[].isNaN elements == false
return[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite elements == false
return[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(return[]) one of { 2, 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform(double[]):::ENTER
this.roots.omegaCount == 0
this.roots.omegaReal == null
this.roots.omegaImaginaryForward == null
this.roots.omegaImaginaryInverse == null
this.roots.isForward == true
size(f[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform(double[]):::EXIT
this.roots == orig(this.roots)
this.roots.isForward == orig(this.roots.isForward)
f[] == orig(f[])
this.roots.omegaCount one of { 8, 256 }
this.roots.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.roots.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.roots.isForward == true
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[].isNaN elements == false
return[].isNaN one of { [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite elements == false
return[].isInfinite one of { [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 8, 256 }
size(this.roots.omegaImaginaryForward[]) one of { 8, 256 }
size(this.roots.omegaImaginaryInverse[]) one of { 8, 256 }
size(return[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount == 0
this.roots.omegaReal == null
this.roots.omegaImaginaryForward == null
this.roots.omegaImaginaryInverse == null
this.roots.isForward == true
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min == 0.0
max == 6.283185307179586
n == 256
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
this.roots == orig(this.roots)
this.roots.isForward == orig(this.roots.isForward)
this.roots has only one value
this.roots.omegaCount == 256
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107]
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704]
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704]
this.roots.isForward == true
return has only one value
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] contains no nulls and has only one value, of length 256
return[].imaginary == [0.0, -76.20384167277894, -7.191822623443189, -8.862875822656758, -9.836712870914047, 0.46321101438004764, 4.759734408561767, 2.6664327313992464, 12.023876574918695, -4.048518942604363, 1.9604407188107007, -2.2254075462146385, 2.6794298852525578, 1.8241331701093952, -1.1969720143119604, 1.5238835186280935, -10.105787064293839, -3.949555511129037, 2.752560625984664, -4.443022655465164, 4.094708712243705, 2.313274526035114, -3.415316703782941, -2.472612501466954, -0.23251807771311972, -0.9565625556415367, -2.143256575894846, -3.974172568369856, -11.07989017667893, 0.4666557359513427, -0.1289369653391612, 0.26852919524630936, 0.5319851887021073, -0.7551918925068501, 2.0632604415583073, -0.7503028474596383, -4.043212440033106, 1.5875581532056815, -0.989499604854345, -1.8377348560268307, -20.369456275715738, 1.041415595247575, -1.3212226627069525, 2.2347364963254917, -15.02495784118565, 2.5486813534009864, -0.5006812689464143, -1.601980963112713, -11.195281167148377, 0.089551561674443, -0.3974158314653531, -1.7304521541828495, -0.9541953167598051, 2.555511052610516, -0.5195094343839018, -0.2456226061079254, 5.38014654242403, 0.8073449696164813, -0.7830988891015092, -1.9772983603860983, 3.322295170880758, 0.9485435427014911, -0.9964232142732261, 1.7042559385726552, -9.12464548363802E-16, 0.9070116256410647, 0.1546580612369895, -0.008042650010910701, -4.055927072661563, 1.1513869655212177, 0.4595216052210549, 0.6000681783691332, -10.13675356316941, 1.3372987549427955, 0.2940801525639034, 1.474991057455102, 0.8854562604484914, 1.71321520167044, -0.9695563110129082, 1.0960637476525652, 16.163993798609408, 2.254610960970902, -0.6065276333731887, 2.201036017336238, 5.03653645313774, 0.8666545891517679, 0.8080774300872801, 0.7257853058926704, 24.989188802830583, 3.7455071503818624, 0.30497892840118646, 0.019092337773666035, 12.359708498529319, 3.636830625606521, -1.4321338858801118, 4.844737852242637, 0.578735545837489, 4.739245568255477, -2.076841191312361, 2.174638774013394, 8.850701172649488, 4.876669526600134, 1.9354463334694543, 4.29486231828508, -4.873046479691792, 4.593472374280295, 2.1057791744159338, 3.215660385125692, -8.447124470614671, 4.631845001827539, -2.9349344850081227, 5.7276999004723015, 4.204032686367512, 7.6586750570511075, -3.747518155841834, 8.999087976581912, 10.4069271028917, 2.8460712134732087, 3.064813554079871, 9.086111364285482, -5.790395555761409, 11.436030872464155, -2.807066873818695, 13.202291103582288, 16.52419241719422, 19.237247048920768, -8.597007090763544, 96.43354396925197, 0.0, -96.43354396925197, 8.597007090763544, -19.237247048920768, -16.52419241719422, -13.202291103582288, 2.807066873818695, -11.436030872464155, 5.790395555761409, -9.086111364285482, -3.064813554079871, -2.8460712134732087, -10.4069271028917, -8.999087976581912, 3.747518155841834, -7.6586750570511075, -4.204032686367512, -5.7276999004723015, 2.9349344850081227, -4.631845001827539, 8.447124470614671, -3.215660385125692, -2.1057791744159338, -4.593472374280295, 4.873046479691792, -4.29486231828508, -1.9354463334694543, -4.876669526600134, -8.850701172649488, -2.174638774013394, 2.076841191312361, -4.739245568255477, -0.578735545837489, -4.844737852242637, 1.4321338858801118, -3.636830625606521, -12.359708498529319, -0.019092337773666035, -0.30497892840118646, -3.7455071503818624, -24.989188802830583, -0.7257853058926704, -0.8080774300872801, -0.8666545891517679, -5.03653645313774, -2.201036017336238, 0.6065276333731887, -2.254610960970902, -16.163993798609408, -1.0960637476525652, 0.9695563110129082, -1.71321520167044, -0.8854562604484914, -1.474991057455102, -0.2940801525639034, -1.3372987549427955, 10.13675356316941, -0.6000681783691332, -0.4595216052210549, -1.1513869655212177, 4.055927072661563, 0.008042650010910701, -0.1546580612369895, -0.9070116256410647, 9.12464548363802E-16, -1.7042559385726552, 0.9964232142732261, -0.9485435427014911, -3.322295170880758, 1.9772983603860983, 0.7830988891015092, -0.8073449696164813, -5.38014654242403, 0.2456226061079254, 0.5195094343839018, -2.555511052610516, 0.9541953167598051, 1.7304521541828495, 0.3974158314653531, -0.089551561674443, 11.195281167148377, 1.601980963112713, 0.5006812689464143, -2.5486813534009864, 15.02495784118565, -2.2347364963254917, 1.3212226627069525, -1.041415595247575, 20.369456275715738, 1.8377348560268307, 0.989499604854345, -1.5875581532056815, 4.043212440033106, 0.7503028474596383, -2.0632604415583073, 0.7551918925068501, -0.5319851887021073, -0.26852919524630936, 0.1289369653391612, -0.4666557359513427, 11.07989017667893, 3.974172568369856, 2.143256575894846, 0.9565625556415367, 0.23251807771311972, 2.472612501466954, 3.415316703782941, -2.313274526035114, -4.094708712243705, 4.443022655465164, -2.752560625984664, 3.949555511129037, 10.105787064293839, -1.5238835186280935, 1.1969720143119604, -1.8241331701093952, -2.6794298852525578, 2.2254075462146385, -1.9604407188107007, 4.048518942604363, -12.023876574918695, -2.6664327313992464, -4.759734408561767, -0.46321101438004764, 9.836712870914047, 8.862875822656758, 7.191822623443189, 76.20384167277894]
return[].real == [1.570796326794902, 41.757443101883815, 0.875976061924862, -17.867953999045632, 0.2528942548575057, 0.8531775835470823, 0.250525841879353, -9.343457796870016, 0.8709639680202228, 0.33976922905075746, -3.5373780217730304, -6.095929114771747, 2.6796629561459953, -1.8108938310831775, 0.28281177585170536, -4.457615245865964, 3.4463305446496655, 1.3161806503820952, 0.20676343959980503, -2.0212241131233317, 1.9522922224600643, -0.3024128161376094, 0.5055926366520579, -0.7640781089629167, 2.924409452401096, -0.16263078323197222, -1.9731730537809469, 0.9291674286866649, 6.242690142617763, 0.815904659312028, 0.9805708558835278, -1.3037549765002985, 1.6261981894568676, 1.7219940020733109, -0.8268011205673487, -0.07182647204015846, 4.157693927030968, 1.1400631952658484, 1.8313888174969322, 1.0361257929753465, 2.886088073988259, 0.7189799747907903, 0.7828377333922909, -2.011454777121565, -1.1228738414754398, 0.41266134338715776, -1.2101773124963344, 0.561517129301966, 8.710745961534766, 1.2488058994659719, -1.1944124267532588, -2.130586680684994, -0.10451885316339293, 0.6172347078096654, 0.8338327299740208, 0.5403129921609534, -3.245826769902428, 1.0842023922561035, -0.29868799576405247, -0.23330055547369843, 1.2813275556033066, 1.1517890020585744, -1.553793726334073, 0.9062195866995704, 4.981972331210342, 4.146356492126054, -1.5154488991656796, 1.0811040686891364, 2.6522195004044096, 1.8809862233610715, 2.2104034942390474, 2.998822842818225, 0.8557502911109465, 1.2498333854274537, 1.7550452173697662, 0.09993515357197857, 2.045727355257311, 1.1997628567933663, -1.6087591228131732, 2.7726171145063434, 5.573616664176971, 1.3534707494474327, 0.33651027689199775, 0.9323708872316243, -1.2033779393377626, 1.6160376823173788, 0.34272618911250086, 1.0159549870708606, 2.50546645373758, 0.977104996275312, -0.9846179215731434, -2.0707224756447564, 8.603988316756856, 1.4562985302834575, 0.7584896334524647, 0.40917567986293824, 1.3094594844149208, 4.570749301191986, -2.979840353650948, 1.8034088770355918, 2.0867744513530777, -0.007788337071027218, 1.9658686714898428, 3.6149889115319915, -1.287537780250058, 0.5592449207077108, 0.3517964999960215, 2.6307824872890455, 0.30666528201840426, -0.8051637821603519, 0.7576481277514099, 1.8056219689332622, 2.6130159719042116, 6.793047926275355, -2.7447695064383395, 4.133845016919796, 8.063341963274093, 0.008094246850986808, 5.843938086148175, 2.692830044969222, 5.94474749012797, 10.94086116121, 3.0704477778708377, 3.0475777593811024, 7.016935102429519, 14.635092451218888, -7.916259627820324, -35.426710377664975, 1.5707963267949017, -35.426710377664975, -7.916259627820324, 14.635092451218888, 7.016935102429519, 3.0475777593811024, 3.0704477778708377, 10.94086116121, 5.94474749012797, 2.692830044969222, 5.843938086148175, 0.008094246850986808, 8.063341963274093, 4.133845016919796, -2.7447695064383395, 6.793047926275355, 2.6130159719042116, 1.8056219689332622, 0.7576481277514099, -0.8051637821603519, 0.30666528201840426, 2.6307824872890455, 0.3517964999960215, 0.5592449207077108, -1.287537780250058, 3.6149889115319915, 1.9658686714898428, -0.007788337071027218, 2.0867744513530777, 1.8034088770355918, -2.979840353650948, 4.570749301191986, 1.3094594844149208, 0.40917567986293824, 0.7584896334524647, 1.4562985302834575, 8.603988316756856, -2.0707224756447564, -0.9846179215731434, 0.977104996275312, 2.50546645373758, 1.0159549870708606, 0.34272618911250086, 1.6160376823173788, -1.2033779393377626, 0.9323708872316243, 0.33651027689199775, 1.3534707494474327, 5.573616664176971, 2.7726171145063434, -1.6087591228131732, 1.1997628567933663, 2.045727355257311, 0.09993515357197857, 1.7550452173697662, 1.2498333854274537, 0.8557502911109465, 2.998822842818225, 2.2104034942390474, 1.8809862233610715, 2.6522195004044096, 1.0811040686891364, -1.5154488991656796, 4.146356492126054, 4.981972331210342, 0.9062195866995704, -1.553793726334073, 1.1517890020585744, 1.2813275556033066, -0.23330055547369843, -0.29868799576405247, 1.0842023922561035, -3.245826769902428, 0.5403129921609534, 0.8338327299740208, 0.6172347078096654, -0.10451885316339293, -2.130586680684994, -1.1944124267532588, 1.2488058994659719, 8.710745961534766, 0.561517129301966, -1.2101773124963344, 0.41266134338715776, -1.1228738414754398, -2.011454777121565, 0.7828377333922909, 0.7189799747907903, 2.886088073988259, 1.0361257929753465, 1.8313888174969322, 1.1400631952658484, 4.157693927030968, -0.07182647204015846, -0.8268011205673487, 1.7219940020733109, 1.6261981894568676, -1.3037549765002985, 0.9805708558835278, 0.815904659312028, 6.242690142617763, 0.9291674286866649, -1.9731730537809469, -0.16263078323197222, 2.924409452401096, -0.7640781089629167, 0.5055926366520579, -0.3024128161376094, 1.9522922224600643, -2.0212241131233317, 0.20676343959980503, 1.3161806503820952, 3.4463305446496655, -4.457615245865964, 0.28281177585170536, -1.8108938310831775, 2.6796629561459953, -6.095929114771747, -3.5373780217730304, 0.33976922905075746, 0.8709639680202228, -9.343457796870016, 0.250525841879353, 0.8531775835470823, 0.2528942548575057, -17.867953999045632, 0.875976061924862, 41.757443101883815]
return[].isNaN == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return[].isNaN elements == false
return[].isInfinite == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return[].isInfinite elements == false
size(this.roots.omegaReal[]) == 256
size(this.roots.omegaImaginaryForward[]) == 256
size(this.roots.omegaImaginaryInverse[]) == 256
size(return[]) == 256
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform2(org.apache.commons.math.complex.Complex[]):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount one of { 0, 2 }
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
this.roots.isForward == true
f.getClass().getName() == org.apache.commons.math.complex.Complex[].class
f[].isNaN == [0, 0]
f[].isNaN elements == false
f[].isInfinite == [0, 0]
f[].isInfinite elements == false
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(f[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform2(org.apache.commons.math.complex.Complex[]):::EXIT
this.roots == orig(this.roots)
this.roots.isForward == orig(this.roots.isForward)
f[] == orig(f[])
f[].imaginary == orig(f[].imaginary)
f[].real == orig(f[].real)
f[].isNaN == orig(f[].isNaN)
f[].isInfinite == orig(f[].isInfinite)
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
this.roots.isForward == true
f[].isNaN == [0, 0]
f[].isNaN elements == false
f[].isInfinite == [0, 0]
f[].isInfinite elements == false
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[].isNaN == [0, 0]
return[].isNaN elements == false
return[].isInfinite == [0, 0]
return[].isInfinite elements == false
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(return[]) == 2
this.roots.omegaReal[] == orig(this.roots.omegaReal[]) (elementwise)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[]) (elementwise)
this.roots.omegaImaginaryForward[] is the reverse of orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[]) (elementwise)
this.roots.omegaImaginaryInverse[] is the reverse of orig(this.roots.omegaImaginaryInverse[])
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(double[]):::ENTER
size(d[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(double[]):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(java.lang.Object[]):::ENTER
o.getClass().getName() == org.apache.commons.math.complex.Complex[].class
o[] elements != null
size(o[]) one of { 2, 4, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(java.lang.Object[]):::EXIT
o[] == orig(o[])
o[] elements != null
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(double, double):::ENTER
lower == 0.0
upper one of { 6.283185307179586, 7.0685834705770345 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest.FastFourierTransformerTest():::EXIT
===========================================================================
org.apache.commons.math.transform.FastSineTransformer:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.FastSineTransformer():::EXIT
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.fst(double[]):::ENTER
f[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030122, 0.19509032201612825, 0.2191012401568698, 0.24298017990326387, 0.26671275747489837, 0.29028467725446233, 0.3136817403988915, 0.33688985339222005, 0.3598950365349881, 0.3826834323650898, 0.40524131400498986, 0.4275550934302821, 0.44961132965460654, 0.47139673682599764, 0.49289819222978404, 0.5141027441932217, 0.5349976198870972, 0.5555702330196022, 0.5758081914178453, 0.5956993044924334, 0.6152315905806268, 0.6343932841636455, 0.6531728429537768, 0.6715589548470183, 0.6895405447370668, 0.7071067811865475, 0.7242470829514669, 0.7409511253549591, 0.7572088465064845, 0.773010453362737, 0.7883464276266062, 0.8032075314806448, 0.8175848131515837, 0.8314696123025452, 0.844853565249707, 0.8577286100002721, 0.8700869911087113, 0.8819212643483549, 0.8932243011955153, 0.9039892931234433, 0.9142097557035307, 0.9238795325112867, 0.9329927988347388, 0.9415440651830208, 0.9495281805930367, 0.9569403357322089, 0.9637760657954398, 0.970031253194544, 0.9757021300385286, 0.9807852804032304, 0.9852776423889412, 0.989176509964781, 0.99247953459871, 0.9951847266721968, 0.9972904566786902, 0.9987954562051724, 0.9996988186962042, 1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786902, 0.9951847266721969, 0.99247953459871, 0.989176509964781, 0.9852776423889412, 0.9807852804032304, 0.9757021300385286, 0.970031253194544, 0.9637760657954398, 0.9569403357322089, 0.9495281805930367, 0.9415440651830208, 0.9329927988347388, 0.9238795325112867, 0.9142097557035307, 0.9039892931234434, 0.8932243011955152, 0.881921264348355, 0.8700869911087115, 0.8577286100002721, 0.8448535652497072, 0.8314696123025455, 0.8175848131515837, 0.8032075314806449, 0.7883464276266063, 0.7730104533627371, 0.7572088465064847, 0.740951125354959, 0.7242470829514669, 0.7071067811865476, 0.689540544737067, 0.6715589548470186, 0.6531728429537766, 0.6343932841636455, 0.6152315905806269, 0.5956993044924335, 0.5758081914178454, 0.5555702330196022, 0.5349976198870972, 0.5141027441932218, 0.49289819222978415, 0.47139673682599786, 0.4496113296546069, 0.42755509343028203, 0.4052413140049899, 0.3826834323650899, 0.35989503653498833, 0.33688985339222033, 0.3136817403988914, 0.2902846772544624, 0.2667127574748985, 0.24298017990326407, 0.21910124015687005, 0.1950903220161286, 0.17096188876030122, 0.1467304744553618, 0.12241067519921635, 0.09801714032956083, 0.07356456359966773, 0.049067674327417966, 0.024541228522912326, 1.2246467991473532E-16, -0.02454122852291208, -0.049067674327417724, -0.0735645635996675, -0.09801714032956059, -0.1224106751992161, -0.14673047445536158, -0.17096188876030097, -0.19509032201612836, -0.2191012401568698, -0.24298017990326382, -0.26671275747489825, -0.2902846772544621, -0.3136817403988912, -0.3368898533922201, -0.3598950365349881, -0.38268343236508967, -0.4052413140049897, -0.4275550934302818, -0.44961132965460665, -0.47139673682599764, -0.4928981922297839, -0.5141027441932216, -0.5349976198870969, -0.555570233019602, -0.5758081914178453, -0.5956993044924332, -0.6152315905806267, -0.6343932841636453, -0.6531728429537765, -0.6715589548470184, -0.6895405447370668, -0.7071067811865475, -0.7242470829514668, -0.7409511253549589, -0.7572088465064842, -0.7730104533627367, -0.7883464276266059, -0.803207531480645, -0.8175848131515838, -0.8314696123025452, -0.844853565249707, -0.857728610000272, -0.8700869911087113, -0.8819212643483549, -0.8932243011955152, -0.9039892931234431, -0.9142097557035305, -0.9238795325112865, -0.932992798834739, -0.9415440651830208, -0.9495281805930367, -0.9569403357322088, -0.9637760657954398, -0.970031253194544, -0.9757021300385285, -0.9807852804032303, -0.9852776423889411, -0.9891765099647809, -0.9924795345987101, -0.9951847266721969, -0.9972904566786902, -0.9987954562051724, -0.9996988186962042, -1.0, -0.9996988186962042, -0.9987954562051724, -0.9972904566786902, -0.9951847266721969, -0.9924795345987101, -0.9891765099647809, -0.9852776423889412, -0.9807852804032304, -0.9757021300385286, -0.970031253194544, -0.96377606579544, -0.9569403357322089, -0.9495281805930368, -0.9415440651830209, -0.9329927988347391, -0.9238795325112866, -0.9142097557035306, -0.9039892931234433, -0.8932243011955153, -0.881921264348355, -0.8700869911087115, -0.8577286100002722, -0.8448535652497072, -0.8314696123025455, -0.817584813151584, -0.8032075314806453, -0.7883464276266061, -0.7730104533627369, -0.7572088465064846, -0.7409511253549591, -0.724247082951467, -0.7071067811865477, -0.6895405447370672, -0.6715589548470187, -0.6531728429537771, -0.6343932841636459, -0.6152315905806274, -0.5956993044924332, -0.5758081914178452, -0.5555702330196022, -0.5349976198870973, -0.5141027441932219, -0.49289819222978426, -0.4713967368259979, -0.449611329654607, -0.42755509343028253, -0.4052413140049904, -0.3826834323650904, -0.359895036534988, -0.33688985339222, -0.3136817403988915, -0.2902846772544625, -0.2667127574748986, -0.24298017990326418, -0.21910124015687016, -0.19509032201612872, -0.17096188876030177, -0.1467304744553624, -0.12241067519921603, -0.0980171403295605, -0.07356456359966741, -0.04906767432741809, -0.024541228522912448], [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0] }
size(f[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.fst(double[]):::EXIT250
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.fst(double[]):::EXIT
f[] == orig(f[])
f[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030122, 0.19509032201612825, 0.2191012401568698, 0.24298017990326387, 0.26671275747489837, 0.29028467725446233, 0.3136817403988915, 0.33688985339222005, 0.3598950365349881, 0.3826834323650898, 0.40524131400498986, 0.4275550934302821, 0.44961132965460654, 0.47139673682599764, 0.49289819222978404, 0.5141027441932217, 0.5349976198870972, 0.5555702330196022, 0.5758081914178453, 0.5956993044924334, 0.6152315905806268, 0.6343932841636455, 0.6531728429537768, 0.6715589548470183, 0.6895405447370668, 0.7071067811865475, 0.7242470829514669, 0.7409511253549591, 0.7572088465064845, 0.773010453362737, 0.7883464276266062, 0.8032075314806448, 0.8175848131515837, 0.8314696123025452, 0.844853565249707, 0.8577286100002721, 0.8700869911087113, 0.8819212643483549, 0.8932243011955153, 0.9039892931234433, 0.9142097557035307, 0.9238795325112867, 0.9329927988347388, 0.9415440651830208, 0.9495281805930367, 0.9569403357322089, 0.9637760657954398, 0.970031253194544, 0.9757021300385286, 0.9807852804032304, 0.9852776423889412, 0.989176509964781, 0.99247953459871, 0.9951847266721968, 0.9972904566786902, 0.9987954562051724, 0.9996988186962042, 1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786902, 0.9951847266721969, 0.99247953459871, 0.989176509964781, 0.9852776423889412, 0.9807852804032304, 0.9757021300385286, 0.970031253194544, 0.9637760657954398, 0.9569403357322089, 0.9495281805930367, 0.9415440651830208, 0.9329927988347388, 0.9238795325112867, 0.9142097557035307, 0.9039892931234434, 0.8932243011955152, 0.881921264348355, 0.8700869911087115, 0.8577286100002721, 0.8448535652497072, 0.8314696123025455, 0.8175848131515837, 0.8032075314806449, 0.7883464276266063, 0.7730104533627371, 0.7572088465064847, 0.740951125354959, 0.7242470829514669, 0.7071067811865476, 0.689540544737067, 0.6715589548470186, 0.6531728429537766, 0.6343932841636455, 0.6152315905806269, 0.5956993044924335, 0.5758081914178454, 0.5555702330196022, 0.5349976198870972, 0.5141027441932218, 0.49289819222978415, 0.47139673682599786, 0.4496113296546069, 0.42755509343028203, 0.4052413140049899, 0.3826834323650899, 0.35989503653498833, 0.33688985339222033, 0.3136817403988914, 0.2902846772544624, 0.2667127574748985, 0.24298017990326407, 0.21910124015687005, 0.1950903220161286, 0.17096188876030122, 0.1467304744553618, 0.12241067519921635, 0.09801714032956083, 0.07356456359966773, 0.049067674327417966, 0.024541228522912326, 1.2246467991473532E-16, -0.02454122852291208, -0.049067674327417724, -0.0735645635996675, -0.09801714032956059, -0.1224106751992161, -0.14673047445536158, -0.17096188876030097, -0.19509032201612836, -0.2191012401568698, -0.24298017990326382, -0.26671275747489825, -0.2902846772544621, -0.3136817403988912, -0.3368898533922201, -0.3598950365349881, -0.38268343236508967, -0.4052413140049897, -0.4275550934302818, -0.44961132965460665, -0.47139673682599764, -0.4928981922297839, -0.5141027441932216, -0.5349976198870969, -0.555570233019602, -0.5758081914178453, -0.5956993044924332, -0.6152315905806267, -0.6343932841636453, -0.6531728429537765, -0.6715589548470184, -0.6895405447370668, -0.7071067811865475, -0.7242470829514668, -0.7409511253549589, -0.7572088465064842, -0.7730104533627367, -0.7883464276266059, -0.803207531480645, -0.8175848131515838, -0.8314696123025452, -0.844853565249707, -0.857728610000272, -0.8700869911087113, -0.8819212643483549, -0.8932243011955152, -0.9039892931234431, -0.9142097557035305, -0.9238795325112865, -0.932992798834739, -0.9415440651830208, -0.9495281805930367, -0.9569403357322088, -0.9637760657954398, -0.970031253194544, -0.9757021300385285, -0.9807852804032303, -0.9852776423889411, -0.9891765099647809, -0.9924795345987101, -0.9951847266721969, -0.9972904566786902, -0.9987954562051724, -0.9996988186962042, -1.0, -0.9996988186962042, -0.9987954562051724, -0.9972904566786902, -0.9951847266721969, -0.9924795345987101, -0.9891765099647809, -0.9852776423889412, -0.9807852804032304, -0.9757021300385286, -0.970031253194544, -0.96377606579544, -0.9569403357322089, -0.9495281805930368, -0.9415440651830209, -0.9329927988347391, -0.9238795325112866, -0.9142097557035306, -0.9039892931234433, -0.8932243011955153, -0.881921264348355, -0.8700869911087115, -0.8577286100002722, -0.8448535652497072, -0.8314696123025455, -0.817584813151584, -0.8032075314806453, -0.7883464276266061, -0.7730104533627369, -0.7572088465064846, -0.7409511253549591, -0.724247082951467, -0.7071067811865477, -0.6895405447370672, -0.6715589548470187, -0.6531728429537771, -0.6343932841636459, -0.6152315905806274, -0.5956993044924332, -0.5758081914178452, -0.5555702330196022, -0.5349976198870973, -0.5141027441932219, -0.49289819222978426, -0.4713967368259979, -0.449611329654607, -0.42755509343028253, -0.4052413140049904, -0.3826834323650904, -0.359895036534988, -0.33688985339222, -0.3136817403988915, -0.2902846772544625, -0.2667127574748986, -0.24298017990326418, -0.21910124015687016, -0.19509032201612872, -0.17096188876030177, -0.1467304744553624, -0.12241067519921603, -0.0980171403295605, -0.07356456359966741, -0.04906767432741809, -0.024541228522912448], [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0] }
return[] one of { [0.0, -0.7853981633974381, 76.20384167277894, 40.97204493848638, 7.191822623443187, 41.848021000411244, 8.862875822656754, 24.26729643410427, -15.893866512322402, 21.432009732032498, -0.5584458459677943, 20.236120063830743, -4.7597344085617665, 20.4866459057101, -2.6664327313992464, 11.143188108840082, -15.790149453029102, 12.042401733185635, 4.048518942604362, 12.382170962236392, -1.9604407188107036, 8.844792940463362, 3.3088599066016204, 2.7488829825019696, 3.433144617358617, 8.511758927346222, -0.6484768299827139, 11.438956000971636, 1.1969720143119615, 11.721767776823343, -1.5238835186280912, 7.264152530957379, 6.795823112173946, 8.64394060965832, 3.949555511129034, 9.960121260040413, -2.752560625984667, 10.166884699640217, -1.5557232664957215, 8.11406586591574, 2.97356430740547, 4.511990939241664, -4.138002794594483, 5.085967446568713, 3.415316703782944, 5.591560083220771, 2.4726125014669527, 4.827481974257854, 3.459887170589519, 0.744588071864035, 0.956562555641534, 0.5819572886320625, 2.143256575894845, -1.391215765148882, 3.4546799549666956, -1.511608380350583, 10.897668625268395, -3.265474085440429, -2.3856226661926683, -3.595868810478218, 0.12893696533916765, -2.6152979545946895, -0.26852919524630714, -3.91905293109499, -0.5319851887021183, -6.997543432974983, 0.7551918925068493, -5.275549430901673, -2.063260441558308, -6.102350551469021, 3.0340328761660706, -9.043873381609746, 5.9313369485889815, -6.72760625393916, -2.271859541018521, -7.234012036108501, 0.9894996048543474, -5.402623218611566, 1.8377348560268316, -4.36649742563622, 19.599922418036147, -3.7693367721685314, -1.041415595247574, -3.0503567973777415, 1.3212226627069517, -2.267519063985448, 0.9553076070772428, -5.310698538279393, 6.535888180676164, -11.331694304176578, -1.3585032533545065, -11.680929159331184, 0.5006812689464175, -12.891106471827516, 1.6019809631127147, -12.32958934252555, 2.6023838546709004, -12.652765635077506, -0.08955156167444212, -11.403959735611533, 0.39741583146535187, -12.59837216236479, 4.750620086676557, -10.610055720304413, 7.419682527904577, -11.900856717917234, -2.842057923086795, -10.724405726789017, 0.5195094343839045, -9.890572996814997, 0.2456226061079243, -9.350260004654043, 1.7834348024894882, -14.43034503655525, -0.8073449696164807, -13.346142644299148, 0.7830988891015094, -13.644830640063196, -0.22296115991313836, -16.670873120062197, -5.187685457560085, -20.01099852158511, -0.943905222193397, -18.859038680066067, 0.9964232142732261, -20.412832406400142, -1.704255938572652, -19.50661281970057, -6.245004513516515E-17, -20.807825795669814, -0.907011625641065, -16.66146930354376, -0.15465806123698933, -18.176918202709437, 0.012680970519004298, -17.03293395705205, 4.7985103091778765, -18.313636029476175, -0.5556159576502362, -16.297473886454984, -0.4595216052210551, -14.087070392215937, -0.6000681783691337, -11.088247549397714, 1.7789688219838078, -8.510878942597556, -1.3372987549427953, -7.261045557170102, -0.2940801525639028, -5.506000339800335, 2.642455603818329, -9.464337717869913, -3.7609749160785095, -7.765302732649303, -2.708247202532705, -7.051489011032516, 0.9695563110129083, -8.660248133845688, -1.096063747652566, -5.887631019339344, -3.3047546204109643, -4.272339547639844, -2.254610960970904, -2.9188687981924115, 0.6065276333731886, -2.58235852130041, -5.409230079473935, 0.5468080206086738, -4.81261124250036, -1.0808363602255007, 0.04185430031693582, -0.30559751730771634, -0.8080774300872827, 0.037128671804786184, -0.7257853058926718, 1.0530836588756478, -20.055542955967237, -1.5596817376700507, -3.7455071503818633, -0.5825767413947391, -0.3049789284011858, -1.5671946629678792, -4.8050249184062945, -1.2273219290083175, -18.430479977018013, 0.3760490539532959, -1.936786694082842, 0.9834613301328788, 1.4321338858801056, 1.7419509635853494, -4.844737852242634, 2.1511266434482876, -0.5787355458375009, 1.88152244863238, -4.739245568255482, 6.452271749824368, 2.0768411913123614, 3.4724313961734206, -4.677291801437483, 4.612328363074653, 3.769977427728373, -3.1630978902990776, -4.067356026377114, -2.9173373565189724, -1.9354463334694587, -0.9514686850291283, -4.294862318285079, 2.6635202265028632, 1.2372246627519377, 2.9872713626638343, -4.593472374280296, 3.5465162833715467, -2.1057791744159307, 3.898312783367567, -1.7119486297956983, 1.9948798645319685, -9.441421881610223, 5.285862934472899, -5.6342233089099185, 8.177017968660126, 2.934934485008117, 8.934666096411538, -5.727699900472301, 10.740288065344803, -11.194601376529853, 12.953784271555227, -7.65867505705111, 19.74683219783058, 3.7475181558418353, 17.002062691392243, -2.443891792748504, 18.396843101145635, -11.762109204809311, 19.38809075689896, -2.1972053862844403, 18.57184227315955, -3.064813554079872, 24.415780359307725, -9.086111364285482, 27.10861040427695, -0.9308727940889483, 34.08420290570531, -11.436030872464153, 45.025064066915306, 2.8070668738186972, 48.095511844786145, -15.519613403325163, 52.1079617223981, 16.658061366864874, 56.62563460742562, -19.23724704892077, 71.2607270586445, 8.597007090763544, 63.34446743082418, -96.43354396925197, 27.917757053159207], [0.0, 11.475331638795044, -9.188949656534396, 2.1667927006842724, -4.0, 1.5542097710396383, -1.1889496565343975, 4.63240972199224] }
size(return[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform(double[]):::ENTER
this has only one value
f has only one value
f[] == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
size(f[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform(double[]):::EXIT
f[] == orig(f[])
f[] == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
return has only one value
return[] == [0.0, 11.475331638795044, -9.188949656534396, 2.1667927006842724, -4.0, 1.5542097710396383, -1.1889496565343975, 4.63240972199224]
size(return[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
this has only one value
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min == 0.0
max == 6.283185307179586
n == 256
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
return has only one value
return[] == [0.0, -0.7853981633974381, 76.20384167277894, 40.97204493848638, 7.191822623443187, 41.848021000411244, 8.862875822656754, 24.26729643410427, -15.893866512322402, 21.432009732032498, -0.5584458459677943, 20.236120063830743, -4.7597344085617665, 20.4866459057101, -2.6664327313992464, 11.143188108840082, -15.790149453029102, 12.042401733185635, 4.048518942604362, 12.382170962236392, -1.9604407188107036, 8.844792940463362, 3.3088599066016204, 2.7488829825019696, 3.433144617358617, 8.511758927346222, -0.6484768299827139, 11.438956000971636, 1.1969720143119615, 11.721767776823343, -1.5238835186280912, 7.264152530957379, 6.795823112173946, 8.64394060965832, 3.949555511129034, 9.960121260040413, -2.752560625984667, 10.166884699640217, -1.5557232664957215, 8.11406586591574, 2.97356430740547, 4.511990939241664, -4.138002794594483, 5.085967446568713, 3.415316703782944, 5.591560083220771, 2.4726125014669527, 4.827481974257854, 3.459887170589519, 0.744588071864035, 0.956562555641534, 0.5819572886320625, 2.143256575894845, -1.391215765148882, 3.4546799549666956, -1.511608380350583, 10.897668625268395, -3.265474085440429, -2.3856226661926683, -3.595868810478218, 0.12893696533916765, -2.6152979545946895, -0.26852919524630714, -3.91905293109499, -0.5319851887021183, -6.997543432974983, 0.7551918925068493, -5.275549430901673, -2.063260441558308, -6.102350551469021, 3.0340328761660706, -9.043873381609746, 5.9313369485889815, -6.72760625393916, -2.271859541018521, -7.234012036108501, 0.9894996048543474, -5.402623218611566, 1.8377348560268316, -4.36649742563622, 19.599922418036147, -3.7693367721685314, -1.041415595247574, -3.0503567973777415, 1.3212226627069517, -2.267519063985448, 0.9553076070772428, -5.310698538279393, 6.535888180676164, -11.331694304176578, -1.3585032533545065, -11.680929159331184, 0.5006812689464175, -12.891106471827516, 1.6019809631127147, -12.32958934252555, 2.6023838546709004, -12.652765635077506, -0.08955156167444212, -11.403959735611533, 0.39741583146535187, -12.59837216236479, 4.750620086676557, -10.610055720304413, 7.419682527904577, -11.900856717917234, -2.842057923086795, -10.724405726789017, 0.5195094343839045, -9.890572996814997, 0.2456226061079243, -9.350260004654043, 1.7834348024894882, -14.43034503655525, -0.8073449696164807, -13.346142644299148, 0.7830988891015094, -13.644830640063196, -0.22296115991313836, -16.670873120062197, -5.187685457560085, -20.01099852158511, -0.943905222193397, -18.859038680066067, 0.9964232142732261, -20.412832406400142, -1.704255938572652, -19.50661281970057, -6.245004513516515E-17, -20.807825795669814, -0.907011625641065, -16.66146930354376, -0.15465806123698933, -18.176918202709437, 0.012680970519004298, -17.03293395705205, 4.7985103091778765, -18.313636029476175, -0.5556159576502362, -16.297473886454984, -0.4595216052210551, -14.087070392215937, -0.6000681783691337, -11.088247549397714, 1.7789688219838078, -8.510878942597556, -1.3372987549427953, -7.261045557170102, -0.2940801525639028, -5.506000339800335, 2.642455603818329, -9.464337717869913, -3.7609749160785095, -7.765302732649303, -2.708247202532705, -7.051489011032516, 0.9695563110129083, -8.660248133845688, -1.096063747652566, -5.887631019339344, -3.3047546204109643, -4.272339547639844, -2.254610960970904, -2.9188687981924115, 0.6065276333731886, -2.58235852130041, -5.409230079473935, 0.5468080206086738, -4.81261124250036, -1.0808363602255007, 0.04185430031693582, -0.30559751730771634, -0.8080774300872827, 0.037128671804786184, -0.7257853058926718, 1.0530836588756478, -20.055542955967237, -1.5596817376700507, -3.7455071503818633, -0.5825767413947391, -0.3049789284011858, -1.5671946629678792, -4.8050249184062945, -1.2273219290083175, -18.430479977018013, 0.3760490539532959, -1.936786694082842, 0.9834613301328788, 1.4321338858801056, 1.7419509635853494, -4.844737852242634, 2.1511266434482876, -0.5787355458375009, 1.88152244863238, -4.739245568255482, 6.452271749824368, 2.0768411913123614, 3.4724313961734206, -4.677291801437483, 4.612328363074653, 3.769977427728373, -3.1630978902990776, -4.067356026377114, -2.9173373565189724, -1.9354463334694587, -0.9514686850291283, -4.294862318285079, 2.6635202265028632, 1.2372246627519377, 2.9872713626638343, -4.593472374280296, 3.5465162833715467, -2.1057791744159307, 3.898312783367567, -1.7119486297956983, 1.9948798645319685, -9.441421881610223, 5.285862934472899, -5.6342233089099185, 8.177017968660126, 2.934934485008117, 8.934666096411538, -5.727699900472301, 10.740288065344803, -11.194601376529853, 12.953784271555227, -7.65867505705111, 19.74683219783058, 3.7475181558418353, 17.002062691392243, -2.443891792748504, 18.396843101145635, -11.762109204809311, 19.38809075689896, -2.1972053862844403, 18.57184227315955, -3.064813554079872, 24.415780359307725, -9.086111364285482, 27.10861040427695, -0.9308727940889483, 34.08420290570531, -11.436030872464153, 45.025064066915306, 2.8070668738186972, 48.095511844786145, -15.519613403325163, 52.1079617223981, 16.658061366864874, 56.62563460742562, -19.23724704892077, 71.2607270586445, 8.597007090763544, 63.34446743082418, -96.43354396925197, 27.917757053159207]
size(return[]) == 256
===========================================================================
org.apache.commons.math.transform.FastSineTransformerTest:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastSineTransformerTest.FastSineTransformerTest():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.cosQ(double, double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.cosQ(double, double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.doubleHighPart(double):::ENTER
d != 0
===========================================================================
org.apache.commons.math.util.FastMath.doubleHighPart(double):::EXIT293
===========================================================================
org.apache.commons.math.util.FastMath.doubleHighPart(double):::EXIT
return != 0
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.log(double):::ENTER
x one of { 1.5967358903059725, 6.5786888543688296, 8.992488092363882 }
===========================================================================
org.apache.commons.math.util.FastMath.log(double):::EXIT
return one of { 0.46796147691259543, 1.883835463227888, 2.196389572412607 }
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::ENTER
x one of { 1.5967358903059725, 6.5786888543688296, 8.992488092363882 }
hiPrec == null
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT1484
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT
return one of { 0.46796147691259543, 1.883835463227888, 2.196389572412607 }
===========================================================================
org.apache.commons.math.util.FastMath.polyCosine(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.polyCosine(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.polySine(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.polySine(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a != null
a[] sorted by >
b != null
b[] sorted by >
result != null
size(a[]) == 2
size(b[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
a != null
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.sinQ(double, double):::ENTER
xb == 0.0
===========================================================================
org.apache.commons.math.util.FastMath.sinQ(double, double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] sorted by >
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return != null
return[] sorted by >=
size(return[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] sorted by >=
result[] <= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
split != null
size(split[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
a != null
b != null
b[] elements <= 2.0
ans != null
ans[] sorted by >=
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
a != null
b != null
ans != null
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
in != null
result != null
result[] elements <= 1.0
size(in[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::ENTER
a >= 1.0
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::EXIT
return >= 1.0
===========================================================================
org.apache.commons.math.util.Incrementor:::OBJECT
this.maximalCount one of { 0, 100 }
this.count >= 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::ENTER
this.maximalCount == 100
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maximalCount == 100
this.count >= 1
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::ENTER
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::ENTER
this.maximalCount == 0
this.count == 0
max == 100
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math.util.MathUtils.indicator(double):::ENTER
x == -Infinity
===========================================================================
org.apache.commons.math.util.MathUtils.indicator(double):::EXIT1054
===========================================================================
org.apache.commons.math.util.MathUtils.indicator(double):::EXIT
return == -1.0
