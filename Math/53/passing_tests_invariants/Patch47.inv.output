===========================================================================
org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex, org.apache.commons.math.complex.Complex, double):::ENTER
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
expected.isNaN == false
expected.isInfinite == false
actual.isNaN == false
actual.isInfinite == false
delta one of { 1.0E-12, 1.0E-5 }
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(org.apache.commons.math.complex.Complex, org.apache.commons.math.complex.Complex, double):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
expected.imaginary == orig(expected.imaginary)
expected.real == orig(expected.real)
expected.isNaN == orig(expected.isNaN)
expected.isInfinite == orig(expected.isInfinite)
actual.imaginary == orig(actual.imaginary)
actual.real == orig(actual.real)
actual.isNaN == orig(actual.isNaN)
actual.isInfinite == orig(actual.isInfinite)
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
expected.isNaN == false
expected.isInfinite == false
actual.isNaN == false
actual.isInfinite == false
===========================================================================
org.apache.commons.math.TestUtils.assertSame(double, double):::ENTER
expected == Double.NaN
actual == Double.NaN
===========================================================================
org.apache.commons.math.TestUtils.assertSame(double, double):::EXIT
===========================================================================
org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex, org.apache.commons.math.complex.Complex):::ENTER
expected has only one value
expected != null
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.I != null
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.NaN != null
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.INF != null
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ONE != null
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.ZERO != null
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
expected.imaginary == Double.NaN
expected.real == Double.NaN
expected.isNaN == true
expected.isInfinite == false
actual has only one value
actual != null
actual.imaginary == Double.NaN
actual.real == Double.NaN
actual.isNaN == true
actual.isInfinite == false
===========================================================================
org.apache.commons.math.TestUtils.assertSame(org.apache.commons.math.complex.Complex, org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
expected.isNaN == orig(expected.isNaN)
expected.isInfinite == orig(expected.isInfinite)
actual.isNaN == orig(actual.isNaN)
actual.isInfinite == orig(actual.isInfinite)
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.I != null
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.NaN != null
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.INF != null
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ONE != null
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.ZERO != null
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
expected.imaginary == Double.NaN
expected.real == Double.NaN
expected.isNaN == true
expected.isInfinite == false
actual.imaginary == Double.NaN
actual.real == Double.NaN
actual.isNaN == true
actual.isInfinite == false
===========================================================================
org.apache.commons.math.analysis.SinFunction:::OBJECT
===========================================================================
org.apache.commons.math.analysis.SinFunction.SinFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.SinFunction.value(double):::EXIT
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction:::CLASS
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction:::OBJECT
this.coefficients != null
this.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(this.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.PolynomialFunction(double[]):::ENTER
c[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(c[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.PolynomialFunction(double[]):::EXIT
c[] == orig(c[])
c[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.evaluate(double[], double):::ENTER
coefficients != null
coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.evaluate(double[], double):::EXIT
coefficients[] == orig(coefficients[])
coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.getCoefficients():::ENTER
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.getCoefficients():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients[] == orig(this.coefficients[])
return[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(return[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.polynomials.PolynomialFunction.value(double):::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients[] == orig(this.coefficients[])
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.LaguerreSolver.class
this.polynomialFunction.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count >= 0
this.function.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
size(this.polynomialFunction.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.AbstractPolynomialSolver(double):::ENTER
absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.AbstractPolynomialSolver(double):::EXIT
this.polynomialFunction == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.getCoefficients():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count one of { 2, 3 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.getCoefficients():::EXIT
this.polynomialFunction == orig(this.polynomialFunction)
this.polynomialFunction.coefficients == orig(this.polynomialFunction.coefficients)
this.polynomialFunction.coefficients[] == orig(this.polynomialFunction.coefficients[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count one of { 2, 3 }
return[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(return[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.setup(int, org.apache.commons.math.analysis.polynomials.PolynomialFunction, double, double, double):::ENTER
this.polynomialFunction.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0] }
this.evaluations.count one of { 0, 2, 6 }
this.searchMin one of { -5.0, -2.0, 0.0 }
this.searchMax one of { -2.5, 0.0, 2.0 }
this.searchStart one of { -3.75, 0.0, 1.0 }
maxEval == 100
f.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(this.polynomialFunction.coefficients[]) one of { 3, 6 }
size(f.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractPolynomialSolver.setup(int, org.apache.commons.math.analysis.polynomials.PolynomialFunction, double, double, double):::EXIT
this.polynomialFunction.coefficients == orig(this.polynomialFunction.coefficients)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
f.coefficients == orig(f.coefficients)
f.coefficients[] == orig(f.coefficients[])
this.evaluations.maximalCount == 100
this.evaluations.count == 0
f.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
size(f.coefficients[]) one of { 2, 3, 6 }
this.polynomialFunction.coefficients[] == orig(this.polynomialFunction.coefficients[]) (elementwise)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.LaguerreSolver.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count >= 0
this.function.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double):::ENTER
absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-14
absoluteAccuracy == 1.0E-6
functionValueAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count one of { 1, 2, 3 }
this.evaluations.count > orig(this.evaluations.count)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
return == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count one of { 0, 2, 3 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count one of { 0, 2, 3 }
return == 1.0E-15
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
return == 1.0E-14
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::ENTER
this.evaluations.maximalCount == 100
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count >= 1
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.isSequence(double, double, double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count >= 2
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.isSequence(double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count >= 2
return == true
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.isSequence(double, double, double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
this.evaluations.count one of { 0, 2, 6 }
this.searchMin one of { -5.0, -2.0, 0.0 }
this.searchMax one of { -2.5, 0.0, 2.0 }
this.searchStart one of { -3.75, 0.0, 1.0 }
maxEval == 100
f.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
this.evaluations.count one of { 0, 2, 6 }
this.searchMin one of { -5.0, -2.0, 0.0 }
this.searchMax one of { -2.5, 0.0, 2.0 }
this.searchStart one of { -3.75, 0.0, 1.0 }
maxEval == 100
f.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count >= 2
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
this.evaluations.count one of { 0, 2, 6 }
this.searchMin one of { -5.0, -2.0, 0.0 }
this.searchMax one of { -2.5, 0.0, 2.0 }
this.searchStart one of { -3.75, 0.0, 1.0 }
maxEval == 100
f.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count >= 2
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver:::OBJECT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == 1.0E-15
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == 1.0E-6
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == 1.0E-14
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount one of { 0, 100 }
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
size(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.ComplexSolver(org.apache.commons.math.analysis.solvers.LaguerreSolver):::ENTER
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == 1.0E-15
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == 1.0E-6
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == 1.0E-14
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == 0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.ComplexSolver(org.apache.commons.math.analysis.solvers.LaguerreSolver):::EXIT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == 0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.isRoot(double, double, org.apache.commons.math.complex.Complex):::ENTER
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == 100
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count >= 2
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
z.imaginary == 0.0
z.isNaN == false
z.isInfinite == false
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.isRoot(double, double, org.apache.commons.math.complex.Complex):::EXIT186
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.isRoot(double, double, org.apache.commons.math.complex.Complex):::EXIT186;condition="return == true"
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.isRoot(double, double, org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[] == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[])
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName())
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
z.imaginary == orig(z.imaginary)
z.real == orig(z.real)
z.isNaN == orig(z.isNaN)
z.isInfinite == orig(z.isInfinite)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == 100
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count >= 2
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
z.imaginary == 0.0
z.isNaN == false
z.isInfinite == false
return == true
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.isRoot(double, double, org.apache.commons.math.complex.Complex):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.solve(org.apache.commons.math.complex.Complex[], org.apache.commons.math.complex.Complex):::ENTER
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == 100
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3 }
coefficients.getClass().getName() == org.apache.commons.math.complex.Complex[].class
coefficients[].imaginary elements == 0.0
coefficients[].imaginary one of { [0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
coefficients[].real one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
coefficients[].isNaN elements == false
coefficients[].isNaN one of { [0, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0] }
coefficients[].isInfinite elements == false
coefficients[].isInfinite one of { [0, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0] }
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
initial.imaginary == 0.0
initial.isNaN == false
initial.isInfinite == false
size(coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.solve(org.apache.commons.math.complex.Complex[], org.apache.commons.math.complex.Complex):::EXIT296
org.apache.commons.math.analysis.solvers.LaguerreSolver.this has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[] == [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0]
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[] elements one of { -12.0, -1.0, 1.0 }
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == -5.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == -2.5
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == -3.75
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function has only one value
coefficients[] contains no nulls and has only one value, of length 6
coefficients[].imaginary == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
coefficients[].real == [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0]
coefficients[].real elements one of { -12.0, -1.0, 1.0 }
coefficients[].isNaN == [0, 0, 0, 0, 0, 0]
coefficients[].isInfinite == [0, 0, 0, 0, 0, 0]
initial.real == -3.125
return has only one value
return.real == -3.0
orig(this) has only one value
orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count) == 3
orig(coefficients) has only one value
orig(initial) has only one value
size(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[]) == 6
orig(size(coefficients[])) == 6
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.solve(org.apache.commons.math.complex.Complex[], org.apache.commons.math.complex.Complex):::EXIT299
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 }
orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count) == 2
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver$ComplexSolver.solve(org.apache.commons.math.complex.Complex[], org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[] == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[])
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName())
coefficients[] == orig(coefficients[])
coefficients[].imaginary == orig(coefficients[].imaginary)
coefficients[].real == orig(coefficients[].real)
coefficients[].isNaN == orig(coefficients[].isNaN)
coefficients[].isInfinite == orig(coefficients[].isInfinite)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
initial.imaginary == orig(initial.imaginary)
initial.real == orig(initial.real)
initial.isNaN == orig(initial.isNaN)
initial.isInfinite == orig(initial.isInfinite)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  <==>  (orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count) == 3)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (coefficients[] contains no nulls and has only one value, of length 6)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (coefficients[].imaginary == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (coefficients[].isInfinite == [0, 0, 0, 0, 0, 0])
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (coefficients[].isNaN == [0, 0, 0, 0, 0, 0])
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (coefficients[].real == [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0])
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (coefficients[].real elements one of { -12.0, -1.0, 1.0 })
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (initial.real == -3.125)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[] == [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0])
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[] elements one of { -12.0, -1.0, 1.0 })
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == -2.5)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == -5.0)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == -3.75)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (orig(coefficients) has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (orig(initial) has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (orig(size(coefficients[])) == 6)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (orig(this) has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (return has only one value)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (return.real == -3.0)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count == 6)  ==>  (size(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[]) == 6)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 })  <==>  (orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count) == 2)
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 })  ==>  (coefficients[].imaginary one of { [0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 })  ==>  (coefficients[].isInfinite one of { [0, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0] })
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 })  ==>  (coefficients[].isNaN one of { [0, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0] })
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 })  ==>  (coefficients[].real one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] })
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 })  ==>  (org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] })
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 })  ==>  (orig(size(coefficients[])) one of { 2, 3, 6 })
(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count one of { 2, 3, 4 })  ==>  (size(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction.coefficients[]) one of { 2, 3, 6 })
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.maximalCount == 100
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations.count >= 2
coefficients[].imaginary elements == 0.0
coefficients[].imaginary one of { [0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
coefficients[].real one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
coefficients[].isNaN elements == false
coefficients[].isNaN one of { [0, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0] }
coefficients[].isInfinite elements == false
coefficients[].isInfinite one of { [0, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0] }
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
initial.imaginary == 0.0
initial.isNaN == false
initial.isInfinite == false
return.imaginary == 0.0
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver:::OBJECT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == 1.0E-15
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == 1.0E-6
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == 1.0E-14
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
this.polynomialFunction.coefficients[] one of { [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0], [-3.0, 5.0, 2.0], [-1.0, 4.0] }
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count >= 0
this.function.getClass().getName() == org.apache.commons.math.analysis.polynomials.PolynomialFunction.class
size(this.polynomialFunction.coefficients[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.LaguerreSolver():::EXIT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == null
this.polynomialFunction == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.LaguerreSolver(double):::ENTER
absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.LaguerreSolver(double):::EXIT
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == null
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == 0.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == null
this.polynomialFunction == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.doSolve():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.doSolve():::EXIT110
this.evaluations.count one of { 2, 3, 4 }
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.doSolve():::EXIT121
this.complexSolver has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations has only one value
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == -5.0
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == -2.5
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == -3.75
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function has only one value
this.polynomialFunction has only one value
this.polynomialFunction.coefficients has only one value
this.polynomialFunction.coefficients[] == [-12.0, -1.0, 1.0, -12.0, -1.0, 1.0]
this.polynomialFunction.coefficients[] elements one of { -12.0, -1.0, 1.0 }
this.evaluations has only one value
this.evaluations.count == 6
this.searchMin == -5.0
this.searchMax == -2.5
this.searchStart == -3.75
this.function has only one value
return == -3.0
orig(this) has only one value
size(this.polynomialFunction.coefficients[]) == 6
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.doSolve():::EXIT
this.complexSolver == orig(this.complexSolver)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName())
this.polynomialFunction == orig(this.polynomialFunction)
this.polynomialFunction.coefficients == orig(this.polynomialFunction.coefficients)
this.polynomialFunction.coefficients[] == orig(this.polynomialFunction.coefficients[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count >= 2
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.laguerre(double, double, double, double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count one of { 2, 3 }
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.laguerre(double, double, double, double):::EXIT155
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolver.laguerre(double, double, double, double):::EXIT
this.complexSolver == orig(this.complexSolver)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.complexSolver)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.polynomialFunction)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.functionValueAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.absoluteAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.relativeAccuracy)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.evaluations)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMin)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchMax)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.searchStart)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function)
org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName() == orig(org.apache.commons.math.analysis.solvers.LaguerreSolver.this.function.getClass().getName())
this.polynomialFunction == orig(this.polynomialFunction)
this.polynomialFunction.coefficients == orig(this.polynomialFunction.coefficients)
this.polynomialFunction.coefficients[] == orig(this.polynomialFunction.coefficients[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count >= 2
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest.LaguerreSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest.testLinearFunction():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest.testLinearFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest.testQuadraticFunction():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest.testQuadraticFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest.testQuinticFunction():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.LaguerreSolverTest.testQuinticFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(double, double, double):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(double, double, double):::EXIT
return == true
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(double, double, double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.complex.Complex:::CLASS
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.I != null
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.NaN != null
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.INF != null
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ONE != null
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.ZERO != null
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex:::OBJECT
===========================================================================
org.apache.commons.math.complex.Complex.Complex(double, double):::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.Complex(double, double):::EXIT
===========================================================================
org.apache.commons.math.complex.Complex.abs():::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT115
this.imaginary == -Infinity
this.real == -Infinity
this.isInfinite == true
return == Infinity
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT123
this.imaginary one of { -24.0, 1.0, 8.080332172835138 }
this.real one of { 0.0, 5.940937034462573, 8.0 }
this.isInfinite == false
return one of { 1.0, 10.029282171262487, 25.298221281347036 }
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT126
this.imaginary == 0.0
this.real == 0.0
this.isInfinite == false
return == 0.0
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT129
this.imaginary one of { -0.3333333333333333, 0.0, 0.05906296553742685 }
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.abs():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
return >= 0.0
===========================================================================
org.apache.commons.math.complex.Complex.acos():::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.acos():::EXIT482
===========================================================================
org.apache.commons.math.complex.Complex.acos():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
return.imaginary one of { -2.305509031243477, 0.0, Double.NaN }
return.real one of { 0.93681246115572, 1.5707963267948966, Double.NaN }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.add(org.apache.commons.math.complex.Complex):::ENTER
rhs != null
===========================================================================
org.apache.commons.math.complex.Complex.add(org.apache.commons.math.complex.Complex):::EXIT154
this.imaginary one of { -Infinity, 1.0, Infinity }
rhs.imaginary one of { Infinity, Double.NaN }
rhs.real one of { Infinity, Double.NaN }
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
return.isInfinite == false
orig(rhs.imaginary) one of { Infinity, Double.NaN }
orig(rhs.real) one of { Infinity, Double.NaN }
===========================================================================
org.apache.commons.math.complex.Complex.add(org.apache.commons.math.complex.Complex):::EXIT156
this.real == orig(this.real)
rhs.imaginary == orig(rhs.imaginary)
rhs.real == orig(rhs.real)
this.isNaN == false
rhs.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.add(org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
rhs.isNaN == orig(rhs.isNaN)
rhs.isInfinite == orig(rhs.isInfinite)
return != null
===========================================================================
org.apache.commons.math.complex.Complex.asin():::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.asin():::EXIT505
===========================================================================
org.apache.commons.math.complex.Complex.asin():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
return.imaginary one of { 2.3055090312434685, Double.NaN }
return.real one of { 0.6339838656391773, Double.NaN }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.atan():::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.atan():::EXIT525
this.imaginary == Double.NaN
this.real == Double.NaN
this.isNaN == true
this.isInfinite == false
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
orig(this) has only one value
orig(this.imaginary) == Double.NaN
orig(this.real) == Double.NaN
===========================================================================
org.apache.commons.math.complex.Complex.atan():::EXIT528
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.atan():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
return.imaginary one of { 0.15899719167999918, Double.NaN }
return.real one of { 1.4483069952314644, Double.NaN }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.conjugate():::ENTER
this.isNaN == false
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.conjugate():::EXIT178
===========================================================================
org.apache.commons.math.complex.Complex.conjugate():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
this.isInfinite == false
return != null
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.createComplex(double, double):::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.createComplex(double, double):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
return != null
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::ENTER
this.isNaN == false
rhs != null
rhs.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::EXIT226
this.imaginary == 2.0
this.real == 0.0
this.isInfinite == false
rhs.imaginary == 0.0
rhs.real == 0.0
rhs.isInfinite == false
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
orig(this) has only one value
orig(rhs) has only one value
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::EXIT236
this.imaginary one of { -Infinity, Infinity }
this.real == 1.0
this.isInfinite == true
rhs.imaginary one of { -Infinity, Infinity }
rhs.real == -1.0
rhs.isInfinite == true
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::EXIT241
===========================================================================
org.apache.commons.math.complex.Complex.divide(org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
rhs.imaginary == orig(rhs.imaginary)
rhs.real == orig(rhs.real)
rhs.isNaN == orig(rhs.isNaN)
rhs.isInfinite == orig(rhs.isInfinite)
this.isNaN == false
rhs.isNaN == false
return != null
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::ENTER
this.imaginary == 0.0
this.isNaN == false
this.isInfinite == false
other.getClass().getName() == org.apache.commons.math.complex.Complex.class
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::EXIT274
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::EXIT274;condition="not(return == true)"
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary == 0.0
this.isNaN == false
this.isInfinite == false
return == false
===========================================================================
org.apache.commons.math.complex.Complex.equals(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.complex.Complex.getImaginary():::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.getImaginary():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
===========================================================================
org.apache.commons.math.complex.Complex.getReal():::ENTER
===========================================================================
org.apache.commons.math.complex.Complex.getReal():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
===========================================================================
org.apache.commons.math.complex.Complex.isInfinite():::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.isInfinite():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.isInfinite():::EXIT;condition="return == true"
this.isInfinite == true
return == true
===========================================================================
org.apache.commons.math.complex.Complex.isInfinite():::EXIT;condition="not(return == true)"
this.isInfinite == false
return == false
===========================================================================
org.apache.commons.math.complex.Complex.isNaN():::ENTER
this has only one value
this.imaginary == Double.NaN
this.real == Double.NaN
this.isNaN == true
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.isNaN():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary == Double.NaN
this.real == Double.NaN
this.isNaN == true
this.isInfinite == false
return == true
===========================================================================
org.apache.commons.math.complex.Complex.isNaN():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.complex.Complex.log():::ENTER
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.log():::EXIT667
this.imaginary == Double.NaN
this.real == Double.NaN
this.isNaN == true
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
orig(this.imaginary) == Double.NaN
orig(this.real) == Double.NaN
===========================================================================
org.apache.commons.math.complex.Complex.log():::EXIT670
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == false
return.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.log():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isInfinite == false
return != null
return.imaginary != 0
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::ENTER
rhs != null
rhs.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::EXIT369
this.imaginary one of { -Infinity, Double.NaN }
this.real == Double.NaN
this.isNaN == true
this.isInfinite == false
rhs.imaginary one of { -1.0, 0.5, 1.0 }
rhs.imaginary != 0
rhs.real == 0.0
rhs.isInfinite == false
return has only one value
return.imaginary == Double.NaN
return.real == Double.NaN
return.isNaN == true
return.isInfinite == false
orig(this.imaginary) one of { -Infinity, Double.NaN }
orig(this.real) == Double.NaN
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::EXIT374
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.imaginary one of { -Infinity, 1.0, Infinity }
this.real one of { -Infinity, 1.0, Infinity }
this.isNaN == false
this.isInfinite == true
rhs.imaginary one of { -Infinity, 1.0, Infinity }
return has only one value
return.imaginary == Infinity
return.real == Infinity
return.isNaN == false
return.isInfinite == true
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::EXIT376
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == false
this.isInfinite == false
rhs.isInfinite == false
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.multiply(org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
rhs.imaginary == orig(rhs.imaginary)
rhs.real == orig(rhs.real)
rhs.isNaN == orig(rhs.isNaN)
rhs.isInfinite == orig(rhs.isInfinite)
rhs.isNaN == false
return != null
===========================================================================
org.apache.commons.math.complex.Complex.negate():::ENTER
this has only one value
this.imaginary == 1.0
this.real == 0.0
this.isNaN == false
this.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.negate():::EXIT431
===========================================================================
org.apache.commons.math.complex.Complex.negate():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary == 1.0
this.real == 0.0
this.isNaN == false
this.isInfinite == false
return != null
return.imaginary == -1.0
return.real == 0.0
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::ENTER
this.imaginary one of { -Infinity, -24.0, 0.0 }
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::EXIT810
this.imaginary one of { -24.0, 0.0 }
this.isInfinite == false
return.imaginary one of { -2.940937034462573, 0.0 }
return.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::EXIT812
this.imaginary == -Infinity
this.real == -Infinity
this.isInfinite == true
return.imaginary == -Infinity
return.real == Double.NaN
return.isNaN == true
===========================================================================
org.apache.commons.math.complex.Complex.sqrt():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.imaginary one of { -Infinity, -24.0, 0.0 }
this.isNaN == false
return != null
return.imaginary one of { -Infinity, -2.940937034462573, 0.0 }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt1z():::ENTER
this.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.sqrt1z():::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
this.isNaN == false
return != null
return.imaginary one of { -Infinity, -2.940937034462573, 0.0 }
return.real one of { 1.0, 4.0803321728351385, Double.NaN }
return.isInfinite == false
===========================================================================
org.apache.commons.math.complex.Complex.subtract(org.apache.commons.math.complex.Complex):::ENTER
this.isNaN == false
this.isInfinite == false
rhs != null
rhs.isNaN == false
===========================================================================
org.apache.commons.math.complex.Complex.subtract(org.apache.commons.math.complex.Complex):::EXIT459
===========================================================================
org.apache.commons.math.complex.Complex.subtract(org.apache.commons.math.complex.Complex):::EXIT
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.imaginary == orig(this.imaginary)
this.real == orig(this.real)
this.isNaN == orig(this.isNaN)
this.isInfinite == orig(this.isInfinite)
rhs.imaginary == orig(rhs.imaginary)
rhs.real == orig(rhs.real)
rhs.isNaN == orig(rhs.isNaN)
rhs.isInfinite == orig(rhs.isInfinite)
this.isNaN == false
this.isInfinite == false
rhs.isNaN == false
return != null
return.isNaN == false
===========================================================================
org.apache.commons.math.complex.ComplexTest:::OBJECT
this.inf == Infinity
this.neginf == -Infinity
this.nan == Double.NaN
this.pi == 3.141592653589793
this.oneInf != null
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.I != null
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.NaN != null
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.INF != null
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ONE != null
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.ZERO != null
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
this.oneInf.imaginary == Infinity
this.oneInf.real == 1.0
this.oneInf.isNaN == false
this.oneInf.isInfinite == true
this.oneNegInf != null
this.oneNegInf.imaginary == -Infinity
this.oneNegInf.real == 1.0
this.oneNegInf.isNaN == false
this.oneNegInf.isInfinite == true
this.infOne != null
this.infOne.imaginary == 1.0
this.infOne.real == Infinity
this.infOne.isNaN == false
this.infOne.isInfinite == true
this.infZero != null
this.infZero.imaginary == 0.0
this.infZero.real == Infinity
this.infZero.isNaN == false
this.infZero.isInfinite == true
this.infNaN != null
this.infNaN.imaginary == Double.NaN
this.infNaN.real == Infinity
this.infNaN.isNaN == true
this.infNaN.isInfinite == false
this.infNegInf != null
this.infNegInf.imaginary == -Infinity
this.infNegInf.real == Infinity
this.infNegInf.isNaN == false
this.infNegInf.isInfinite == true
this.infInf != null
this.infInf.imaginary == Infinity
this.infInf.real == Infinity
this.infInf.isNaN == false
this.infInf.isInfinite == true
this.negInfInf != null
this.negInfInf.imaginary == Infinity
this.negInfInf.real == -Infinity
this.negInfInf.isNaN == false
this.negInfInf.isInfinite == true
this.negInfZero != null
this.negInfZero.imaginary == 0.0
this.negInfZero.real == -Infinity
this.negInfZero.isNaN == false
this.negInfZero.isInfinite == true
this.negInfOne != null
this.negInfOne.imaginary == 1.0
this.negInfOne.real == -Infinity
this.negInfOne.isNaN == false
this.negInfOne.isInfinite == true
this.negInfNaN != null
this.negInfNaN.imaginary == Double.NaN
this.negInfNaN.real == -Infinity
this.negInfNaN.isNaN == true
this.negInfNaN.isInfinite == false
this.negInfNegInf != null
this.negInfNegInf.imaginary == -Infinity
this.negInfNegInf.real == -Infinity
this.negInfNegInf.isNaN == false
this.negInfNegInf.isInfinite == true
this.oneNaN != null
this.oneNaN.imaginary == Double.NaN
this.oneNaN.real == 1.0
this.oneNaN.isNaN == true
this.oneNaN.isInfinite == false
this.zeroInf != null
this.zeroInf.imaginary == Infinity
this.zeroInf.real == 0.0
this.zeroInf.isNaN == false
this.zeroInf.isInfinite == true
this.zeroNaN != null
this.zeroNaN.imaginary == Double.NaN
this.zeroNaN.real == 0.0
this.zeroNaN.isNaN == true
this.zeroNaN.isInfinite == false
this.nanInf != null
this.nanInf.imaginary == Infinity
this.nanInf.real == Double.NaN
this.nanInf.isNaN == true
this.nanInf.isInfinite == false
this.nanNegInf != null
this.nanNegInf.imaginary == -Infinity
this.nanNegInf.real == Double.NaN
this.nanNegInf.isNaN == true
this.nanNegInf.isInfinite == false
this.nanZero != null
this.nanZero.imaginary == 0.0
this.nanZero.real == Double.NaN
this.nanZero.isNaN == true
this.nanZero.isInfinite == false
===========================================================================
org.apache.commons.math.complex.ComplexTest.ComplexTest():::EXIT
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAcos():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAcos():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAcosInf():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAcosInf():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAdd():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAdd():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAddInfinite():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAddInfinite():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAsin():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAsin():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAsinInf():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAsinInf():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtan():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtan():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtanInf():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtanInf():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtanNaN():::ENTER
this has only one value
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.complex.ComplexTest.testAtanNaN():::EXIT
this.inf == orig(this.inf)
this.neginf == orig(this.neginf)
this.pi == orig(this.pi)
this.oneInf == orig(this.oneInf)
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
this.oneInf.imaginary == orig(this.oneInf.imaginary)
this.oneInf.real == orig(this.oneInf.real)
this.oneInf.isNaN == orig(this.oneInf.isNaN)
this.oneInf.isInfinite == orig(this.oneInf.isInfinite)
this.oneNegInf == orig(this.oneNegInf)
this.oneNegInf.imaginary == orig(this.oneNegInf.imaginary)
this.oneNegInf.real == orig(this.oneNegInf.real)
this.oneNegInf.isNaN == orig(this.oneNegInf.isNaN)
this.oneNegInf.isInfinite == orig(this.oneNegInf.isInfinite)
this.infOne == orig(this.infOne)
this.infOne.imaginary == orig(this.infOne.imaginary)
this.infOne.real == orig(this.infOne.real)
this.infOne.isNaN == orig(this.infOne.isNaN)
this.infOne.isInfinite == orig(this.infOne.isInfinite)
this.infZero == orig(this.infZero)
this.infZero.imaginary == orig(this.infZero.imaginary)
this.infZero.real == orig(this.infZero.real)
this.infZero.isNaN == orig(this.infZero.isNaN)
this.infZero.isInfinite == orig(this.infZero.isInfinite)
this.infNaN == orig(this.infNaN)
this.infNaN.real == orig(this.infNaN.real)
this.infNaN.isNaN == orig(this.infNaN.isNaN)
this.infNaN.isInfinite == orig(this.infNaN.isInfinite)
this.infNegInf == orig(this.infNegInf)
this.infNegInf.imaginary == orig(this.infNegInf.imaginary)
this.infNegInf.real == orig(this.infNegInf.real)
this.infNegInf.isNaN == orig(this.infNegInf.isNaN)
this.infNegInf.isInfinite == orig(this.infNegInf.isInfinite)
this.infInf == orig(this.infInf)
this.infInf.imaginary == orig(this.infInf.imaginary)
this.infInf.real == orig(this.infInf.real)
this.infInf.isNaN == orig(this.infInf.isNaN)
this.infInf.isInfinite == orig(this.infInf.isInfinite)
this.negInfInf == orig(this.negInfInf)
this.negInfInf.imaginary == orig(this.negInfInf.imaginary)
this.negInfInf.real == orig(this.negInfInf.real)
this.negInfInf.isNaN == orig(this.negInfInf.isNaN)
this.negInfInf.isInfinite == orig(this.negInfInf.isInfinite)
this.negInfZero == orig(this.negInfZero)
this.negInfZero.imaginary == orig(this.negInfZero.imaginary)
this.negInfZero.real == orig(this.negInfZero.real)
this.negInfZero.isNaN == orig(this.negInfZero.isNaN)
this.negInfZero.isInfinite == orig(this.negInfZero.isInfinite)
this.negInfOne == orig(this.negInfOne)
this.negInfOne.imaginary == orig(this.negInfOne.imaginary)
this.negInfOne.real == orig(this.negInfOne.real)
this.negInfOne.isNaN == orig(this.negInfOne.isNaN)
this.negInfOne.isInfinite == orig(this.negInfOne.isInfinite)
this.negInfNaN == orig(this.negInfNaN)
this.negInfNaN.real == orig(this.negInfNaN.real)
this.negInfNaN.isNaN == orig(this.negInfNaN.isNaN)
this.negInfNaN.isInfinite == orig(this.negInfNaN.isInfinite)
this.negInfNegInf == orig(this.negInfNegInf)
this.negInfNegInf.imaginary == orig(this.negInfNegInf.imaginary)
this.negInfNegInf.real == orig(this.negInfNegInf.real)
this.negInfNegInf.isNaN == orig(this.negInfNegInf.isNaN)
this.negInfNegInf.isInfinite == orig(this.negInfNegInf.isInfinite)
this.oneNaN == orig(this.oneNaN)
this.oneNaN.real == orig(this.oneNaN.real)
this.oneNaN.isNaN == orig(this.oneNaN.isNaN)
this.oneNaN.isInfinite == orig(this.oneNaN.isInfinite)
this.zeroInf == orig(this.zeroInf)
this.zeroInf.imaginary == orig(this.zeroInf.imaginary)
this.zeroInf.real == orig(this.zeroInf.real)
this.zeroInf.isNaN == orig(this.zeroInf.isNaN)
this.zeroInf.isInfinite == orig(this.zeroInf.isInfinite)
this.zeroNaN == orig(this.zeroNaN)
this.zeroNaN.real == orig(this.zeroNaN.real)
this.zeroNaN.isNaN == orig(this.zeroNaN.isNaN)
this.zeroNaN.isInfinite == orig(this.zeroNaN.isInfinite)
this.nanInf == orig(this.nanInf)
this.nanInf.imaginary == orig(this.nanInf.imaginary)
this.nanInf.isNaN == orig(this.nanInf.isNaN)
this.nanInf.isInfinite == orig(this.nanInf.isInfinite)
this.nanNegInf == orig(this.nanNegInf)
this.nanNegInf.imaginary == orig(this.nanNegInf.imaginary)
this.nanNegInf.isNaN == orig(this.nanNegInf.isNaN)
this.nanNegInf.isInfinite == orig(this.nanNegInf.isInfinite)
this.nanZero == orig(this.nanZero)
this.nanZero.imaginary == orig(this.nanZero.imaginary)
this.nanZero.isNaN == orig(this.nanZero.isNaN)
this.nanZero.isInfinite == orig(this.nanZero.isInfinite)
this.oneInf has only one value
this.oneNegInf has only one value
this.infOne has only one value
this.infZero has only one value
this.infNaN has only one value
this.infNegInf has only one value
this.infInf has only one value
this.negInfInf has only one value
this.negInfZero has only one value
this.negInfOne has only one value
this.negInfNaN has only one value
this.negInfNegInf has only one value
this.oneNaN has only one value
this.zeroInf has only one value
this.zeroNaN has only one value
this.nanInf has only one value
this.nanNegInf has only one value
this.nanZero has only one value
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.FastCosineTransformer():::EXIT
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.fct(double[]):::ENTER
size(f[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.fct(double[]):::EXIT260
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.fct(double[]):::EXIT
f[] == orig(f[])
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.inversetransform(double[]):::ENTER
this has only one value
f has only one value
f[] == [172.0, -105.096569476353, 27.3137084989848, -12.9593152353742, 8.0, -5.78585076868676, 4.68629150101524, -4.15826451958632, 4.0]
size(f[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.inversetransform(double[]):::EXIT
f[] == orig(f[])
f[] == [172.0, -105.096569476353, 27.3137084989848, -12.9593152353742, 8.0, -5.78585076868676, 4.68629150101524, -4.15826451958632, 4.0]
return has only one value
return[] == [-6.394884621840902E-14, 0.9999999999999443, 3.9999999999999503, 8.999999999999972, 15.999999999999995, 25.00000000000003, 36.00000000000006, 49.00000000000007, 64.00000000000009]
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.inversetransform2(double[]):::ENTER
this has only one value
f has only one value
f[] == [0.0, 2.0, 8.0, 18.0, 32.0, 50.0, 72.0, 98.0, 128.0]
size(f[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.inversetransform2(double[]):::EXIT
f[] == orig(f[])
f[] == [0.0, 2.0, 8.0, 18.0, 32.0, 50.0, 72.0, 98.0, 128.0]
return has only one value
return[] == [172.0, -105.09656947635271, 27.31370849898476, -12.959315235374206, 8.000000000000002, -5.785850768686757, 4.6862915010152495, -4.158264519586318, 4.0]
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform(double[]):::ENTER
this has only one value
f has only one value
f[] == [0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0]
size(f[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform(double[]):::EXIT
f[] == orig(f[])
f[] == [0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0]
return has only one value
return[] == [172.0, -105.09656947635271, 27.31370849898476, -12.959315235374206, 8.000000000000002, -5.785850768686757, 4.6862915010152495, -4.158264519586318, 4.0]
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
this has only one value
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min one of { -3.141592653589793, 0.0 }
max one of { 3.9269908169872414, 7.0685834705770345 }
n == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
return[] one of { [-2.220446049250313E-16, 3.261972627395669, -8.881784197001252E-16, -2.179580427103274, 3.398911662034451E-16, -0.6488466976429155, -4.440892098500626E-16, -0.4335455026494788, 2.220446049250313E-16], [0.0, -3.261972627395669, 4.440892098500626E-16, 2.179580427103274, -3.398911662034451E-16, 0.6488466976429155, 4.440892098500626E-16, 0.4335455026494788, 0.0] }
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform2(double[]):::ENTER
this has only one value
f[] one of { [0.0, 2.0, 8.0, 18.0, 32.0, 50.0, 72.0, 98.0, 128.0], [172.0, -105.096569476353, 27.3137084989848, -12.9593152353742, 8.0, -5.78585076868676, 4.68629150101524, -4.15826451958632, 4.0] }
size(f[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformer.transform2(double[]):::EXIT
f[] == orig(f[])
f[] one of { [0.0, 2.0, 8.0, 18.0, 32.0, 50.0, 72.0, 98.0, 128.0], [172.0, -105.096569476353, 27.3137084989848, -12.9593152353742, 8.0, -5.78585076868676, 4.68629150101524, -4.15826451958632, 4.0] }
return[] one of { [-1.2789769243681803E-13, 1.9999999999998885, 7.9999999999999005, 17.999999999999943, 31.99999999999999, 50.00000000000006, 72.00000000000011, 98.00000000000014, 128.00000000000017], [172.0, -105.09656947635271, 27.31370849898476, -12.959315235374206, 8.000000000000002, -5.785850768686757, 4.6862915010152495, -4.158264519586318, 4.0] }
size(return[]) == 9
===========================================================================
org.apache.commons.math.transform.FastCosineTransformerTest:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastCosineTransformerTest.FastCosineTransformerTest():::EXIT
===========================================================================
org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.transform.FastCosineTransformerTest.testAdHocData():::EXIT
===========================================================================
org.apache.commons.math.transform.FastCosineTransformerTest.testSinFunction():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.transform.FastCosineTransformerTest.testSinFunction():::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix:::OBJECT
this.dimensionSize[] == [2, 2]
this.dimensionSize[] elements == 2
this.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(this.dimensionSize[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.MultiDimensionalComplexMatrix(java.lang.Object):::ENTER
multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.MultiDimensionalComplexMatrix(java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.clone():::ENTER
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.clone():::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
return.getClass().getName() == org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.class
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.clone(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix):::ENTER
mdcm.dimensionSize[] == [2, 2]
mdcm.dimensionSize[] elements == 2
mdcm.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(mdcm.dimensionSize[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.clone(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix):::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
mdcm.dimensionSize == orig(mdcm.dimensionSize)
mdcm.dimensionSize[] == orig(mdcm.dimensionSize[])
mdcm.multiDimensionalComplexArray == orig(mdcm.multiDimensionalComplexArray)
mdcm.multiDimensionalComplexArray.getClass().getName() == orig(mdcm.multiDimensionalComplexArray.getClass().getName())
mdcm.dimensionSize[] == [2, 2]
mdcm.dimensionSize[] elements == 2
mdcm.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(mdcm.dimensionSize[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.get(int[]):::ENTER
vector[] elements one of { 0, 1 }
size(vector[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.get(int[]):::EXIT679
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.get(int[]):::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
vector[] == orig(vector[])
vector[] elements one of { 0, 1 }
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.getArray():::ENTER
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.getArray():::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
return.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.getDimensionSizes():::ENTER
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.getDimensionSizes():::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
return[] == [2, 2]
return[] elements == 2
size(return[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.set(org.apache.commons.math.complex.Complex, int[]):::ENTER
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
magnitude.isNaN == false
magnitude.isInfinite == false
vector[] elements one of { 0, 1 }
size(vector[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.set(org.apache.commons.math.complex.Complex, int[]):::EXIT711
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix.set(org.apache.commons.math.complex.Complex, int[]):::EXIT
this.dimensionSize == orig(this.dimensionSize)
this.dimensionSize[] == orig(this.dimensionSize[])
this.multiDimensionalComplexArray == orig(this.multiDimensionalComplexArray)
this.multiDimensionalComplexArray.getClass().getName() == orig(this.multiDimensionalComplexArray.getClass().getName())
org.apache.commons.math.complex.Complex.I == orig(org.apache.commons.math.complex.Complex.I)
org.apache.commons.math.complex.Complex.NaN == orig(org.apache.commons.math.complex.Complex.NaN)
org.apache.commons.math.complex.Complex.INF == orig(org.apache.commons.math.complex.Complex.INF)
org.apache.commons.math.complex.Complex.ONE == orig(org.apache.commons.math.complex.Complex.ONE)
org.apache.commons.math.complex.Complex.ZERO == orig(org.apache.commons.math.complex.Complex.ZERO)
org.apache.commons.math.complex.Complex.I.imaginary == orig(org.apache.commons.math.complex.Complex.I.imaginary)
org.apache.commons.math.complex.Complex.I.real == orig(org.apache.commons.math.complex.Complex.I.real)
org.apache.commons.math.complex.Complex.I.isNaN == orig(org.apache.commons.math.complex.Complex.I.isNaN)
org.apache.commons.math.complex.Complex.I.isInfinite == orig(org.apache.commons.math.complex.Complex.I.isInfinite)
org.apache.commons.math.complex.Complex.NaN.isNaN == orig(org.apache.commons.math.complex.Complex.NaN.isNaN)
org.apache.commons.math.complex.Complex.NaN.isInfinite == orig(org.apache.commons.math.complex.Complex.NaN.isInfinite)
org.apache.commons.math.complex.Complex.INF.imaginary == orig(org.apache.commons.math.complex.Complex.INF.imaginary)
org.apache.commons.math.complex.Complex.INF.real == orig(org.apache.commons.math.complex.Complex.INF.real)
org.apache.commons.math.complex.Complex.INF.isNaN == orig(org.apache.commons.math.complex.Complex.INF.isNaN)
org.apache.commons.math.complex.Complex.INF.isInfinite == orig(org.apache.commons.math.complex.Complex.INF.isInfinite)
org.apache.commons.math.complex.Complex.ONE.imaginary == orig(org.apache.commons.math.complex.Complex.ONE.imaginary)
org.apache.commons.math.complex.Complex.ONE.real == orig(org.apache.commons.math.complex.Complex.ONE.real)
org.apache.commons.math.complex.Complex.ONE.isNaN == orig(org.apache.commons.math.complex.Complex.ONE.isNaN)
org.apache.commons.math.complex.Complex.ONE.isInfinite == orig(org.apache.commons.math.complex.Complex.ONE.isInfinite)
org.apache.commons.math.complex.Complex.ZERO.imaginary == orig(org.apache.commons.math.complex.Complex.ZERO.imaginary)
org.apache.commons.math.complex.Complex.ZERO.real == orig(org.apache.commons.math.complex.Complex.ZERO.real)
org.apache.commons.math.complex.Complex.ZERO.isNaN == orig(org.apache.commons.math.complex.Complex.ZERO.isNaN)
org.apache.commons.math.complex.Complex.ZERO.isInfinite == orig(org.apache.commons.math.complex.Complex.ZERO.isInfinite)
magnitude.imaginary == orig(magnitude.imaginary)
magnitude.real == orig(magnitude.real)
magnitude.isNaN == orig(magnitude.isNaN)
magnitude.isInfinite == orig(magnitude.isInfinite)
vector[] == orig(vector[])
org.apache.commons.math.complex.Complex.I has only one value
org.apache.commons.math.complex.Complex.NaN has only one value
org.apache.commons.math.complex.Complex.INF has only one value
org.apache.commons.math.complex.Complex.ONE has only one value
org.apache.commons.math.complex.Complex.ZERO has only one value
org.apache.commons.math.complex.Complex.I.imaginary == 1.0
org.apache.commons.math.complex.Complex.I.real == 0.0
org.apache.commons.math.complex.Complex.I.isNaN == false
org.apache.commons.math.complex.Complex.I.isInfinite == false
org.apache.commons.math.complex.Complex.NaN.imaginary == Double.NaN
org.apache.commons.math.complex.Complex.NaN.real == Double.NaN
org.apache.commons.math.complex.Complex.NaN.isNaN == true
org.apache.commons.math.complex.Complex.NaN.isInfinite == false
org.apache.commons.math.complex.Complex.INF.imaginary == Infinity
org.apache.commons.math.complex.Complex.INF.real == Infinity
org.apache.commons.math.complex.Complex.INF.isNaN == false
org.apache.commons.math.complex.Complex.INF.isInfinite == true
org.apache.commons.math.complex.Complex.ONE.imaginary == 0.0
org.apache.commons.math.complex.Complex.ONE.real == 1.0
org.apache.commons.math.complex.Complex.ONE.isNaN == false
org.apache.commons.math.complex.Complex.ONE.isInfinite == false
org.apache.commons.math.complex.Complex.ZERO.imaginary == 0.0
org.apache.commons.math.complex.Complex.ZERO.real == 0.0
org.apache.commons.math.complex.Complex.ZERO.isNaN == false
org.apache.commons.math.complex.Complex.ZERO.isInfinite == false
magnitude.isNaN == false
magnitude.isInfinite == false
vector[] elements one of { 0, 1 }
return.isNaN == false
return.isInfinite == false
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity:::CLASS
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity:::OBJECT
this.omegaReal[] elements <= 1.0
this.omegaImaginaryForward[] elements <= 1.0000000000000049
this.omegaImaginaryInverse[] elements <= 1.0000000000000016
size(this.omegaReal[]) is a power of 2
size(this.omegaImaginaryForward[]) is a power of 2
size(this.omegaImaginaryInverse[]) is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.RootsOfUnity():::EXIT
this.omegaCount == 0
this.omegaReal == null
this.omegaImaginaryForward == null
this.omegaImaginaryInverse == null
this.isForward == true
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.computeOmega(int):::ENTER
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.computeOmega(int):::EXIT843
this.omegaCount == orig(this.omegaCount)
this.omegaReal == orig(this.omegaReal)
this.omegaReal[] == orig(this.omegaReal[])
this.omegaImaginaryForward == orig(this.omegaImaginaryForward)
this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[])
this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse)
this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[])
this.omegaCount one of { 2, 8 }
this.omegaReal[] one of { [1.0, -1.0], [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -1.2246467991473532E-16] }
this.omegaImaginaryInverse[] one of { [0.0, 1.2246467991473532E-16], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
size(this.omegaReal[]) one of { 2, 8 }
size(this.omegaImaginaryForward[]) one of { 2, 8 }
size(this.omegaImaginaryInverse[]) one of { 2, 8 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.computeOmega(int):::EXIT865
this.omegaCount != orig(this.omegaCount)
size(this.omegaReal[]) != orig(size(this.omegaReal[]))
size(this.omegaReal[])-1 != orig(size(this.omegaReal[]))-1
size(this.omegaImaginaryForward[]) != orig(size(this.omegaImaginaryForward[]))
size(this.omegaImaginaryForward[])-1 != orig(size(this.omegaImaginaryForward[]))-1
size(this.omegaImaginaryInverse[]) != orig(size(this.omegaImaginaryInverse[]))
size(this.omegaImaginaryInverse[])-1 != orig(size(this.omegaImaginaryInverse[]))-1
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.computeOmega(int):::EXIT
(this.omegaCount != orig(this.omegaCount))  <==>  (size(this.omegaImaginaryForward[]) != orig(size(this.omegaImaginaryForward[])))
(this.omegaCount != orig(this.omegaCount))  <==>  (size(this.omegaImaginaryForward[])-1 != orig(size(this.omegaImaginaryForward[]))-1)
(this.omegaCount != orig(this.omegaCount))  <==>  (size(this.omegaImaginaryInverse[]) != orig(size(this.omegaImaginaryInverse[])))
(this.omegaCount != orig(this.omegaCount))  <==>  (size(this.omegaImaginaryInverse[])-1 != orig(size(this.omegaImaginaryInverse[]))-1)
(this.omegaCount != orig(this.omegaCount))  <==>  (size(this.omegaReal[]) != orig(size(this.omegaReal[])))
(this.omegaCount != orig(this.omegaCount))  <==>  (size(this.omegaReal[])-1 != orig(size(this.omegaReal[]))-1)
(this.omegaCount == orig(this.omegaCount))  ==>  (orig(size(this.omegaImaginaryForward[])) one of { 2, 8 })
(this.omegaCount == orig(this.omegaCount))  ==>  (orig(size(this.omegaImaginaryInverse[])) one of { 2, 8 })
(this.omegaCount == orig(this.omegaCount))  ==>  (orig(size(this.omegaReal[])) one of { 2, 8 })
(this.omegaCount == orig(this.omegaCount))  ==>  (orig(this.omegaCount) one of { 2, 8 })
(this.omegaCount == orig(this.omegaCount))  ==>  (orig(this.omegaImaginaryForward[]) one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -1.2246467991473532E-16] })
(this.omegaCount == orig(this.omegaCount))  ==>  (orig(this.omegaImaginaryInverse[]) one of { [0.0, 1.2246467991473532E-16], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] })
(this.omegaCount == orig(this.omegaCount))  ==>  (orig(this.omegaReal[]) one of { [1.0, -1.0], [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471] })
(this.omegaCount == orig(this.omegaCount))  ==>  (size(this.omegaImaginaryForward[]) one of { 2, 8 })
(this.omegaCount == orig(this.omegaCount))  ==>  (size(this.omegaImaginaryInverse[]) one of { 2, 8 })
(this.omegaCount == orig(this.omegaCount))  ==>  (size(this.omegaReal[]) one of { 2, 8 })
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaCount one of { 2, 8 })
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaImaginaryForward == orig(this.omegaImaginaryForward))
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[]))
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -1.2246467991473532E-16] })
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse))
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[]))
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaImaginaryInverse[] one of { [0.0, 1.2246467991473532E-16], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] })
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaReal == orig(this.omegaReal))
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaReal[] == orig(this.omegaReal[]))
(this.omegaCount == orig(this.omegaCount))  ==>  (this.omegaReal[] one of { [1.0, -1.0], [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471] })
this.omegaCount >= 2
this.omegaCount is a power of 2
size(this.omegaReal[]) != orig(size(this.omegaReal[]))-1
size(this.omegaReal[])-1 != orig(size(this.omegaReal[]))
size(this.omegaImaginaryForward[]) != orig(size(this.omegaImaginaryForward[]))-1
size(this.omegaImaginaryForward[])-1 != orig(size(this.omegaImaginaryForward[]))
size(this.omegaImaginaryInverse[]) != orig(size(this.omegaImaginaryInverse[]))-1
size(this.omegaImaginaryInverse[])-1 != orig(size(this.omegaImaginaryInverse[]))
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.getOmegaImaginary(int):::ENTER
this.omegaCount one of { 8, 128, 256 }
this.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
k >= 0
size(this.omegaReal[]) one of { 8, 128, 256 }
size(this.omegaImaginaryForward[]) one of { 8, 128, 256 }
size(this.omegaImaginaryInverse[]) one of { 8, 128, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.getOmegaImaginary(int):::EXIT
this.omegaCount == orig(this.omegaCount)
this.omegaReal == orig(this.omegaReal)
this.omegaReal[] == orig(this.omegaReal[])
this.omegaImaginaryForward == orig(this.omegaImaginaryForward)
this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[])
this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse)
this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[])
this.isForward == orig(this.isForward)
this.omegaCount one of { 8, 128, 256 }
this.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
size(this.omegaReal[]) one of { 8, 128, 256 }
size(this.omegaImaginaryForward[]) one of { 8, 128, 256 }
size(this.omegaImaginaryInverse[]) one of { 8, 128, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.getOmegaReal(int):::ENTER
this.omegaCount one of { 8, 128, 256 }
this.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
k >= 0
size(this.omegaReal[]) one of { 8, 128, 256 }
size(this.omegaImaginaryForward[]) one of { 8, 128, 256 }
size(this.omegaImaginaryInverse[]) one of { 8, 128, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.getOmegaReal(int):::EXIT
this.omegaCount == orig(this.omegaCount)
this.omegaReal == orig(this.omegaReal)
this.omegaReal[] == orig(this.omegaReal[])
this.omegaImaginaryForward == orig(this.omegaImaginaryForward)
this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[])
this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse)
this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[])
this.isForward == orig(this.isForward)
this.omegaCount one of { 8, 128, 256 }
this.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
size(this.omegaReal[]) one of { 8, 128, 256 }
size(this.omegaImaginaryForward[]) one of { 8, 128, 256 }
size(this.omegaImaginaryInverse[]) one of { 8, 128, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.isForward():::ENTER
this.omegaCount one of { 4, 8, 128 }
this.omegaReal[] one of { [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195] }
this.omegaImaginaryInverse[] one of { [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
size(this.omegaReal[]) one of { 4, 8, 128 }
size(this.omegaImaginaryForward[]) one of { 4, 8, 128 }
size(this.omegaImaginaryInverse[]) one of { 4, 8, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.isForward():::EXIT
this.omegaCount == orig(this.omegaCount)
this.omegaReal == orig(this.omegaReal)
this.omegaReal[] == orig(this.omegaReal[])
this.omegaImaginaryForward == orig(this.omegaImaginaryForward)
this.omegaImaginaryForward[] == orig(this.omegaImaginaryForward[])
this.omegaImaginaryInverse == orig(this.omegaImaginaryInverse)
this.omegaImaginaryInverse[] == orig(this.omegaImaginaryInverse[])
this.isForward == orig(this.isForward)
(this.isForward == false)  <==>  (return == false)
(this.isForward == true)  <==>  (return == true)
this.omegaCount one of { 4, 8, 128 }
this.omegaReal[] one of { [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195] }
this.omegaImaginaryInverse[] one of { [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
size(this.omegaReal[]) one of { 4, 8, 128 }
size(this.omegaImaginaryForward[]) one of { 4, 8, 128 }
size(this.omegaImaginaryInverse[]) one of { 4, 8, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.isForward():::EXIT;condition="return == true"
this.isForward == true
return == true
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity.isForward():::EXIT;condition="not(return == true)"
this.isForward == false
return == false
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer:::CLASS
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer:::OBJECT
this.roots.omegaCount >= 0
size(this.roots.omegaReal[]) >= 2
size(this.roots.omegaReal[]) is a power of 2
size(this.roots.omegaImaginaryForward[]) >= 2
size(this.roots.omegaImaginaryForward[]) is a power of 2
size(this.roots.omegaImaginaryInverse[]) >= 2
size(this.roots.omegaImaginaryInverse[]) is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.FastFourierTransformer():::EXIT
this.roots.omegaCount == 0
this.roots.omegaReal == null
this.roots.omegaImaginaryForward == null
this.roots.omegaImaginaryInverse == null
this.roots.isForward == true
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(double[], boolean):::ENTER
this.roots.omegaCount one of { 0, 8, 256 }
this.roots.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.roots.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.roots.isForward == true
size(this.roots.omegaReal[]) one of { 8, 256 }
size(this.roots.omegaImaginaryForward[]) one of { 8, 256 }
size(this.roots.omegaImaginaryInverse[]) one of { 8, 256 }
size(f[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(double[], boolean):::EXIT336
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(double[], boolean):::EXIT
this.roots == orig(this.roots)
f[] == orig(f[])
this.roots.omegaCount one of { 8, 256 }
this.roots.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.roots.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] elements != null
return[].isNaN elements == false
return[].isNaN one of { [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite elements == false
return[].isInfinite one of { [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 8, 256 }
size(this.roots.omegaImaginaryForward[]) one of { 8, 256 }
size(this.roots.omegaImaginaryInverse[]) one of { 8, 256 }
size(return[]) one of { 8, 256 }
orig(this.roots.omegaCount) % this.roots.omegaCount == 0
this.roots.omegaCount >= orig(this.roots.omegaCount)
this.roots.omegaReal[] == orig(this.roots.omegaReal[]) (elementwise)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[]) (elementwise)
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[]) (elementwise)
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(org.apache.commons.math.complex.Complex[]):::ENTER
this.roots.omegaCount >= 2
this.roots.omegaCount is a power of 2
data.getClass().getName() == org.apache.commons.math.complex.Complex[].class
data[] elements != null
data[].isNaN elements == false
data[].isInfinite elements == false
size(data[]) >= 2
size(data[]) is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(org.apache.commons.math.complex.Complex[]):::EXIT361
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaReal[] sorted by >
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
data[].isNaN == [0, 0]
data[].isInfinite == [0, 0]
return[].isNaN == [0, 0]
return[].isInfinite == [0, 0]
orig(this) has only one value
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(return[]) == 2
orig(size(data[])) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(org.apache.commons.math.complex.Complex[]):::EXIT411
this.roots.omegaCount one of { 4, 8, 128 }
this.roots.omegaReal[] one of { [1.0, 6.123233995736766E-17, -1.0, -1.8369701987210297E-16], [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112868, 0.9039892931234434, 0.8819212643483552, 0.8577286100002722, 0.8314696123025453, 0.803207531480645, 0.7730104533627371, 0.7409511253549592, 0.7071067811865477, 0.6715589548470186, 0.6343932841636457, 0.5956993044924336, 0.5555702330196024, 0.5141027441932219, 0.47139673682599775, 0.4275550934302822, 0.3826834323650899, 0.33688985339222016, 0.29028467725446244, 0.24298017990326398, 0.19509032201612833, 0.1467304744553618, 0.09801714032956063, 0.04906767432741802, -1.3877787807814457E-17, -0.04906767432741805, -0.09801714032956066, -0.14673047445536183, -0.19509032201612836, -0.242980179903264, -0.2902846772544625, -0.3368898533922202, -0.38268343236508995, -0.4275550934302823, -0.4713967368259979, -0.514102744193222, -0.5555702330196025, -0.5956993044924337, -0.6343932841636458, -0.6715589548470188, -0.7071067811865479, -0.7409511253549595, -0.7730104533627374, -0.8032075314806454, -0.8314696123025457, -0.8577286100002726, -0.8819212643483555, -0.9039892931234439, -0.9238795325112874, -0.9415440651830215, -0.9569403357322096, -0.9700312531945448, -0.9807852804032312, -0.9891765099647818, -0.9951847266721977, -0.9987954562051733, -1.0000000000000009, -0.9987954562051733, -0.9951847266721978, -0.9891765099647819, -0.9807852804032313, -0.9700312531945449, -0.9569403357322097, -0.9415440651830217, -0.9238795325112877, -0.9039892931234443, -0.881921264348356, -0.8577286100002731, -0.8314696123025462, -0.8032075314806458, -0.7730104533627379, -0.74095112535496, -0.7071067811865485, -0.6715589548470193, -0.6343932841636464, -0.5956993044924341, -0.555570233019603, -0.5141027441932224, -0.47139673682599825, -0.4275550934302827, -0.38268343236509034, -0.33688985339222055, -0.2902846772544628, -0.24298017990326426, -0.19509032201612855, -0.14673047445536197, -0.09801714032956074, -0.049067674327418084, 0.0, 0.04906767432741809, 0.09801714032956076, 0.14673047445536197, 0.19509032201612855, 0.24298017990326426, 0.29028467725446283, 0.3368898533922206, 0.3826834323650904, 0.4275550934302828, 0.4713967368259985, 0.5141027441932227, 0.5555702330196032, 0.5956993044924344, 0.6343932841636466, 0.6715589548470196, 0.7071067811865488, 0.7409511253549604, 0.7730104533627384, 0.8032075314806464, 0.8314696123025468, 0.8577286100002737, 0.8819212643483566, 0.903989293123445, 0.9238795325112885, 0.9415440651830226, 0.9569403357322107, 0.9700312531945459, 0.9807852804032323, 0.9891765099647829, 0.9951847266721988, 0.9987954562051744] }
this.roots.omegaImaginaryForward[] one of { [0.0, -1.0, -1.2246467991473532E-16, 1.0], [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.049067674327418015, -0.0980171403295606, -0.14673047445536175, -0.19509032201612825, -0.24298017990326387, -0.29028467725446233, -0.33688985339222005, -0.3826834323650898, -0.42755509343028214, -0.4713967368259977, -0.5141027441932218, -0.5555702330196022, -0.5956993044924334, -0.6343932841636455, -0.6715589548470183, -0.7071067811865475, -0.7409511253549591, -0.773010453362737, -0.8032075314806449, -0.8314696123025452, -0.8577286100002721, -0.881921264348355, -0.9039892931234434, -0.923879532511287, -0.941544065183021, -0.9569403357322092, -0.9700312531945443, -0.9807852804032308, -0.9891765099647813, -0.9951847266721973, -0.9987954562051728, -1.0000000000000004, -0.9987954562051728, -0.9951847266721974, -0.9891765099647815, -0.9807852804032309, -0.9700312531945444, -0.9569403357322093, -0.9415440651830213, -0.9238795325112873, -0.9039892931234439, -0.8819212643483556, -0.8577286100002727, -0.8314696123025458, -0.8032075314806454, -0.7730104533627374, -0.7409511253549595, -0.707106781186548, -0.6715589548470189, -0.634393284163646, -0.5956993044924338, -0.5555702330196026, -0.5141027441932221, -0.471396736825998, -0.4275550934302824, -0.38268343236509006, -0.33688985339222033, -0.2902846772544626, -0.24298017990326412, -0.19509032201612844, -0.1467304744553619, -0.09801714032956069, -0.04906767432741806, 0.0, 0.04906767432741806, 0.09801714032956069, 0.1467304744553619, 0.19509032201612844, 0.24298017990326412, 0.2902846772544626, 0.3368898533922204, 0.3826834323650901, 0.42755509343028253, 0.47139673682599814, 0.5141027441932223, 0.5555702330196028, 0.595699304492434, 0.6343932841636462, 0.6715589548470191, 0.7071067811865483, 0.74095112535496, 0.773010453362738, 0.8032075314806459, 0.8314696123025462, 0.8577286100002731, 0.881921264348356, 0.9039892931234444, 0.923879532511288, 0.941544065183022, 0.9569403357322102, 0.9700312531945453, 0.9807852804032318, 0.9891765099647823, 0.9951847266721983, 0.9987954562051738, 1.0000000000000016, 0.998795456205174, 0.9951847266721985, 0.9891765099647826, 0.980785280403232, 0.9700312531945455, 0.9569403357322104, 0.9415440651830224, 0.9238795325112884, 0.903989293123445, 0.8819212643483567, 0.8577286100002738, 0.8314696123025469, 0.8032075314806465, 0.7730104533627384, 0.7409511253549605, 0.7071067811865489, 0.6715589548470198, 0.6343932841636468, 0.5956993044924346, 0.5555702330196033, 0.5141027441932228, 0.4713967368259986, 0.427555093430283, 0.38268343236509056, 0.3368898533922208, 0.290284677254463, 0.24298017990326445, 0.19509032201612872, 0.14673047445536214, 0.09801714032956088, 0.049067674327418195] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.42755509343028214, 0.4713967368259977, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470183, 0.7071067811865475, 0.7409511253549591, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234434, 0.923879532511287, 0.941544065183021, 0.9569403357322092, 0.9700312531945443, 0.9807852804032308, 0.9891765099647813, 0.9951847266721973, 0.9987954562051728, 1.0000000000000004, 0.9987954562051728, 0.9951847266721974, 0.9891765099647815, 0.9807852804032309, 0.9700312531945444, 0.9569403357322093, 0.9415440651830213, 0.9238795325112873, 0.9039892931234439, 0.8819212643483556, 0.8577286100002727, 0.8314696123025458, 0.8032075314806454, 0.7730104533627374, 0.7409511253549595, 0.707106781186548, 0.6715589548470189, 0.634393284163646, 0.5956993044924338, 0.5555702330196026, 0.5141027441932221, 0.471396736825998, 0.4275550934302824, 0.38268343236509006, 0.33688985339222033, 0.2902846772544626, 0.24298017990326412, 0.19509032201612844, 0.1467304744553619, 0.09801714032956069, 0.04906767432741806, -0.0, -0.04906767432741806, -0.09801714032956069, -0.1467304744553619, -0.19509032201612844, -0.24298017990326412, -0.2902846772544626, -0.3368898533922204, -0.3826834323650901, -0.42755509343028253, -0.47139673682599814, -0.5141027441932223, -0.5555702330196028, -0.595699304492434, -0.6343932841636462, -0.6715589548470191, -0.7071067811865483, -0.74095112535496, -0.773010453362738, -0.8032075314806459, -0.8314696123025462, -0.8577286100002731, -0.881921264348356, -0.9039892931234444, -0.923879532511288, -0.941544065183022, -0.9569403357322102, -0.9700312531945453, -0.9807852804032318, -0.9891765099647823, -0.9951847266721983, -0.9987954562051738, -1.0000000000000016, -0.998795456205174, -0.9951847266721985, -0.9891765099647826, -0.980785280403232, -0.9700312531945455, -0.9569403357322104, -0.9415440651830224, -0.9238795325112884, -0.903989293123445, -0.8819212643483567, -0.8577286100002738, -0.8314696123025469, -0.8032075314806465, -0.7730104533627384, -0.7409511253549605, -0.7071067811865489, -0.6715589548470198, -0.6343932841636468, -0.5956993044924346, -0.5555702330196033, -0.5141027441932228, -0.4713967368259986, -0.427555093430283, -0.38268343236509056, -0.3368898533922208, -0.290284677254463, -0.24298017990326445, -0.19509032201612872, -0.14673047445536214, -0.09801714032956088, -0.049067674327418195], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479], [0.0, 1.0, 1.2246467991473532E-16, -1.0] }
data[].isNaN one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
data[].isInfinite one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isNaN one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 4, 8, 128 }
size(this.roots.omegaImaginaryForward[]) one of { 4, 8, 128 }
size(this.roots.omegaImaginaryInverse[]) one of { 4, 8, 128 }
size(return[]) one of { 4, 8, 128 }
orig(size(data[])) one of { 4, 8, 128 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.fft(org.apache.commons.math.complex.Complex[]):::EXIT
this.roots == orig(this.roots)
this.roots.omegaCount == orig(this.roots.omegaCount)
this.roots.omegaReal == orig(this.roots.omegaReal)
this.roots.omegaReal[] == orig(this.roots.omegaReal[])
this.roots.omegaImaginaryForward == orig(this.roots.omegaImaginaryForward)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse == orig(this.roots.omegaImaginaryInverse)
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[])
this.roots.isForward == orig(this.roots.isForward)
data[] == orig(data[])
data[].imaginary == orig(data[].imaginary)
data[].real == orig(data[].real)
data[].isNaN == orig(data[].isNaN)
data[].isInfinite == orig(data[].isInfinite)
this.roots.omegaCount >= 2
this.roots.omegaCount is a power of 2
data[] elements != null
data[].isNaN elements == false
data[].isInfinite elements == false
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] elements != null
return[].isNaN elements == false
return[].isInfinite elements == false
size(return[]) >= 2
size(return[]) is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount == 256
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107]
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704]
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704]
this.roots.isForward == true
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min == -3.141592653589793
max == 3.141592653589793
n == 256
size(this.roots.omegaReal[]) == 256
size(this.roots.omegaImaginaryForward[]) == 256
size(this.roots.omegaImaginaryInverse[]) == 256
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
this.roots == orig(this.roots)
this.roots.omegaCount == orig(this.roots.omegaCount)
this.roots.omegaReal[] == orig(this.roots.omegaReal[])
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[])
this.roots has only one value
this.roots.omegaCount == 256
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107]
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704]
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704]
this.roots.isForward == false
return has only one value
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] contains no nulls and has only one value, of length 256
return[].imaginary == [0.0, -0.5000000000000004, -2.5738155729696133E-17, -1.4658425357961053E-17, -1.2565126884394847E-17, -1.229995093758475E-17, -5.789283124599709E-18, -7.142435444861458E-18, -2.6011521423049294E-18, -1.816477337038304E-18, -8.016717495888053E-19, -2.6987958630421376E-18, -2.590034915466104E-18, -2.4893901843607767E-18, -1.7375871172497026E-18, -1.0651999342323608E-17, 1.3176531822291445E-18, 1.3757977622454085E-18, -1.9726253064870193E-18, -1.0895823144969615E-19, -4.429107042502557E-18, -9.278294294408487E-18, 5.349200668819195E-18, 2.2969948926475432E-17, 1.769466425679461E-17, 2.3152611756152443E-17, 8.977558569341732E-18, -1.1381216602552905E-17, -1.659087795631385E-18, 2.839372115199543E-18, -2.048232598151798E-18, -3.705318837333118E-17, -9.264560377166857E-19, 2.4723849924643453E-17, 4.2704707211016775E-19, -1.4973471229149266E-17, -2.86394107294588E-18, -2.29355418018216E-18, -5.230864880461407E-18, -1.1012910348972683E-17, 7.227811115290584E-19, -1.2632797743539576E-17, 2.480190452026513E-18, -3.2382658387868358E-18, -1.9568328432844954E-19, 1.4535786512235082E-17, -7.765780833658051E-18, -1.2206768939029332E-17, -1.951467215441898E-17, 2.2553815332138367E-17, -1.1963578707819651E-17, -1.758860563733447E-18, -2.7753735408413965E-18, -3.4621741351450236E-19, 1.159438574770152E-18, -1.554219931209023E-17, -1.148079119834057E-18, 1.6052278474648748E-17, -2.7828055118457275E-18, 2.221016581905552E-18, -9.026143538650424E-19, 5.337657622926608E-18, 4.585826549518683E-18, -1.2658835102446036E-16, 1.0028870095490931E-18, 2.6067314861498705E-17, -7.26490629441138E-18, -6.279630373757717E-18, 1.9474111975604305E-19, -5.2884579411745E-18, 4.2810403904955446E-18, -1.9917125366572377E-17, 4.0368630007280015E-18, 3.96950990033087E-18, 6.1390888277263006E-18, -1.1381180192372615E-17, 2.0208993089460043E-18, 3.478779400586988E-18, -1.73283485140375E-18, -2.966896969365922E-17, -8.714209214408249E-20, 5.778657197968583E-18, -2.908662802020675E-18, -1.0494111384516045E-17, -2.7353482803557674E-18, 7.722639848049712E-19, -1.9162131242463723E-18, -1.801013132868776E-17, -2.8501205583849583E-18, 5.77434461399089E-20, -3.382796875764763E-18, 1.791286650439032E-18, 1.095590605030944E-18, -3.26846606153504E-18, 2.4742893712932813E-18, -1.1919024670692231E-16, 2.651411131485485E-18, -5.606719473456679E-17, -1.904665819601806E-18, -1.6550941843573072E-17, -4.6202163891333404E-18, -8.815771584228397E-18, 2.296424867265786E-19, -2.5453903046514028E-17, 3.805109571873426E-18, -4.276331438487121E-20, 2.4969681087170426E-18, -2.7775027240835117E-18, -1.7537931447086716E-18, -1.646951202465508E-17, 3.7077578301589375E-18, -8.244790435165203E-17, 5.349512395209888E-18, -5.3661610156500845E-17, 2.5719301888904524E-18, -2.7126127638983176E-17, -2.0581207889152697E-18, -1.3727065350236719E-17, -5.826300118815917E-19, -5.2914214592451455E-17, 9.407543431339778E-19, -3.0862985425653545E-17, 2.3885144182098085E-18, -4.685795499972365E-17, 3.357253268272217E-18, -3.5693592428326546E-17, -4.667648747150337E-19, -7.771561172376096E-16, 0.0, 7.771561172376096E-16, 4.667648747150337E-19, 3.5693592428326546E-17, -3.357253268272217E-18, 4.685795499972365E-17, -2.3885144182098085E-18, 3.0862985425653545E-17, -9.407543431339778E-19, 5.2914214592451455E-17, 5.826300118815917E-19, 1.3727065350236719E-17, 2.0581207889152697E-18, 2.7126127638983176E-17, -2.5719301888904524E-18, 5.3661610156500845E-17, -5.349512395209888E-18, 8.244790435165203E-17, -3.7077578301589375E-18, 1.646951202465508E-17, 1.7537931447086716E-18, 2.7775027240835117E-18, -2.4969681087170426E-18, 4.276331438487121E-20, -3.805109571873426E-18, 2.5453903046514028E-17, -2.296424867265786E-19, 8.815771584228397E-18, 4.6202163891333404E-18, 1.6550941843573072E-17, 1.904665819601806E-18, 5.606719473456679E-17, -2.651411131485485E-18, 1.1919024670692231E-16, -2.4742893712932813E-18, 3.26846606153504E-18, -1.095590605030944E-18, -1.791286650439032E-18, 3.382796875764763E-18, -5.77434461399089E-20, 2.8501205583849583E-18, 1.801013132868776E-17, 1.9162131242463723E-18, -7.722639848049712E-19, 2.7353482803557674E-18, 1.0494111384516045E-17, 2.908662802020675E-18, -5.778657197968583E-18, 8.714209214408249E-20, 2.966896969365922E-17, 1.73283485140375E-18, -3.478779400586988E-18, -2.0208993089460043E-18, 1.1381180192372615E-17, -6.1390888277263006E-18, -3.96950990033087E-18, -4.0368630007280015E-18, 1.9917125366572377E-17, -4.2810403904955446E-18, 5.2884579411745E-18, -1.9474111975604305E-19, 6.279630373757717E-18, 7.26490629441138E-18, -2.6067314861498705E-17, -1.0028870095490931E-18, 1.2658835102446036E-16, -4.585826549518683E-18, -5.337657622926608E-18, 9.026143538650424E-19, -2.221016581905552E-18, 2.7828055118457275E-18, -1.6052278474648748E-17, 1.148079119834057E-18, 1.554219931209023E-17, -1.159438574770152E-18, 3.4621741351450236E-19, 2.7753735408413965E-18, 1.758860563733447E-18, 1.1963578707819651E-17, -2.2553815332138367E-17, 1.951467215441898E-17, 1.2206768939029332E-17, 7.765780833658051E-18, -1.4535786512235082E-17, 1.9568328432844954E-19, 3.2382658387868358E-18, -2.480190452026513E-18, 1.2632797743539576E-17, -7.227811115290584E-19, 1.1012910348972683E-17, 5.230864880461407E-18, 2.29355418018216E-18, 2.86394107294588E-18, 1.4973471229149266E-17, -4.2704707211016775E-19, -2.4723849924643453E-17, 9.264560377166857E-19, 3.705318837333118E-17, 2.048232598151798E-18, -2.839372115199543E-18, 1.659087795631385E-18, 1.1381216602552905E-17, -8.977558569341732E-18, -2.3152611756152443E-17, -1.769466425679461E-17, -2.2969948926475432E-17, -5.349200668819195E-18, 9.278294294408487E-18, 4.429107042502557E-18, 1.0895823144969615E-19, 1.9726253064870193E-18, -1.3757977622454085E-18, -1.3176531822291445E-18, 1.0651999342323608E-17, 1.7375871172497026E-18, 2.4893901843607767E-18, 2.590034915466104E-18, 2.6987958630421376E-18, 8.016717495888053E-19, 1.816477337038304E-18, 2.6011521423049294E-18, 7.142435444861458E-18, 5.789283124599709E-18, 1.229995093758475E-17, 1.2565126884394847E-17, 1.4658425357961053E-17, 2.5738155729696133E-17, 0.5000000000000004]
return[].imaginary elements one of { -0.5000000000000004, 0.0, 0.5000000000000004 }
return[].real == [-3.7851942819977235E-18, -2.42861286636753E-17, -1.8472357274817994E-18, 4.759272847554877E-17, -1.0003937964844316E-18, -4.6861780547996746E-17, -5.67009625965923E-18, 5.675229025507333E-17, -4.475331422693832E-18, -6.451046468731644E-17, -2.384343017980328E-18, 1.766961697351147E-17, 1.0032253719620007E-19, -2.0316059773022158E-17, -2.039181583017112E-18, 7.598894365992566E-17, -3.6762689970785884E-18, -4.5862358271832716E-17, -1.1729502560428314E-19, 3.8085720734572296E-18, -3.2493657950569307E-18, -9.215878586265939E-18, -1.5323079964345113E-17, 3.047751964596107E-17, 4.5318568116593995E-19, -2.1899263173414612E-17, 1.4170058703680355E-17, 2.3942617289922385E-17, 2.1315751539990267E-18, 2.7312620305898414E-18, 7.179244519714535E-18, 1.2533117969414856E-16, 5.915884569137846E-18, -2.0787431220690235E-17, 4.4405133378441805E-18, 9.904014503869759E-18, -1.153769252499699E-18, 3.5682900030046294E-18, 1.4461718991845553E-18, 5.5615851246993765E-18, 7.577668761957944E-18, -1.5274087715316087E-17, 2.3232483929345383E-19, 1.4414465149406524E-17, 3.4591140971689832E-18, 5.452872265855267E-18, 2.0116103376435818E-17, 5.042892355714521E-17, 1.2144240557405552E-18, -6.678537378597587E-18, -1.4976165862564958E-17, 1.38144561596492E-18, -3.76739507939567E-18, -7.069544764146979E-18, -5.334371868292405E-18, 1.0153755473082237E-17, -4.9726584022450145E-18, -5.448174941734834E-18, -5.106282291277449E-18, -5.73753839447941E-19, -2.671697391691214E-19, 4.2350484125547987E-19, -2.7345451277286395E-18, 1.236871687522572E-16, -3.893614499246274E-18, -1.2664866289741572E-17, 8.813769271813556E-19, 1.2800468116991857E-18, -4.600797658218442E-19, -1.1657423101578156E-17, -1.4475289664611356E-17, 3.491277328710905E-18, -1.1360686876032956E-18, -9.325487058013512E-18, 7.189700694161455E-18, 5.322197001092721E-18, -1.3013657443508585E-19, -2.9612989583526897E-18, 3.249910027116584E-18, 1.4471068663706446E-17, 1.0224296514498427E-18, 9.242894977078605E-18, 3.103326572334072E-18, 6.566138347945706E-18, -1.5891795881970358E-19, 9.941098016509661E-19, 2.2572553311217503E-18, -3.620031996576374E-18, -2.9387942357076013E-18, -4.020288229226826E-18, -5.062425738819707E-18, -7.116408629177652E-18, -3.78064146167158E-18, -7.276137238665399E-18, 3.765121842452992E-18, 4.449909320906065E-17, -2.2105705392840522E-18, -2.4142751412188983E-17, -3.738404301535016E-18, -1.2950871567470886E-18, 2.2916660112735915E-18, 6.572545621804538E-18, -5.698802400172447E-18, 1.1135104464094864E-17, -1.893088244007269E-18, 5.771903780612342E-18, -3.893761906528434E-18, -4.0320205001034546E-18, -1.3834722747178743E-18, 3.877493078183337E-18, -1.7815544361218496E-18, 2.316322741069367E-17, 3.9326640420885586E-19, 4.1459276522107765E-18, 4.564087217593354E-18, 2.0636194758603872E-18, 1.3028298007246011E-18, 1.599563700356263E-17, -2.5169968882729483E-18, -1.312062465056625E-18, 1.8233418258208465E-18, 2.066424194421171E-18, 6.23392970832687E-19, -1.2133113748313458E-17, -1.588208396961429E-18, 2.6336269518704153E-17, 4.173158815724008E-18, -5.473052566706826E-16, 2.0694974494240005E-18, -5.473052566706826E-16, 4.173158815724008E-18, 2.6336269518704153E-17, -1.588208396961429E-18, -1.2133113748313458E-17, 6.23392970832687E-19, 2.066424194421171E-18, 1.8233418258208465E-18, -1.312062465056625E-18, -2.5169968882729483E-18, 1.599563700356263E-17, 1.3028298007246011E-18, 2.0636194758603872E-18, 4.564087217593354E-18, 4.1459276522107765E-18, 3.9326640420885586E-19, 2.316322741069367E-17, -1.7815544361218496E-18, 3.877493078183337E-18, -1.3834722747178743E-18, -4.0320205001034546E-18, -3.893761906528434E-18, 5.771903780612342E-18, -1.893088244007269E-18, 1.1135104464094864E-17, -5.698802400172447E-18, 6.572545621804538E-18, 2.2916660112735915E-18, -1.2950871567470886E-18, -3.738404301535016E-18, -2.4142751412188983E-17, -2.2105705392840522E-18, 4.449909320906065E-17, 3.765121842452992E-18, -7.276137238665399E-18, -3.78064146167158E-18, -7.116408629177652E-18, -5.062425738819707E-18, -4.020288229226826E-18, -2.9387942357076013E-18, -3.620031996576374E-18, 2.2572553311217503E-18, 9.941098016509661E-19, -1.5891795881970358E-19, 6.566138347945706E-18, 3.103326572334072E-18, 9.242894977078605E-18, 1.0224296514498427E-18, 1.4471068663706446E-17, 3.249910027116584E-18, -2.9612989583526897E-18, -1.3013657443508585E-19, 5.322197001092721E-18, 7.189700694161455E-18, -9.325487058013512E-18, -1.1360686876032956E-18, 3.491277328710905E-18, -1.4475289664611356E-17, -1.1657423101578156E-17, -4.600797658218442E-19, 1.2800468116991857E-18, 8.813769271813556E-19, -1.2664866289741572E-17, -3.893614499246274E-18, 1.236871687522572E-16, -2.7345451277286395E-18, 4.2350484125547987E-19, -2.671697391691214E-19, -5.73753839447941E-19, -5.106282291277449E-18, -5.448174941734834E-18, -4.9726584022450145E-18, 1.0153755473082237E-17, -5.334371868292405E-18, -7.069544764146979E-18, -3.76739507939567E-18, 1.38144561596492E-18, -1.4976165862564958E-17, -6.678537378597587E-18, 1.2144240557405552E-18, 5.042892355714521E-17, 2.0116103376435818E-17, 5.452872265855267E-18, 3.4591140971689832E-18, 1.4414465149406524E-17, 2.3232483929345383E-19, -1.5274087715316087E-17, 7.577668761957944E-18, 5.5615851246993765E-18, 1.4461718991845553E-18, 3.5682900030046294E-18, -1.153769252499699E-18, 9.904014503869759E-18, 4.4405133378441805E-18, -2.0787431220690235E-17, 5.915884569137846E-18, 1.2533117969414856E-16, 7.179244519714535E-18, 2.7312620305898414E-18, 2.1315751539990267E-18, 2.3942617289922385E-17, 1.4170058703680355E-17, -2.1899263173414612E-17, 4.5318568116593995E-19, 3.047751964596107E-17, -1.5323079964345113E-17, -9.215878586265939E-18, -3.2493657950569307E-18, 3.8085720734572296E-18, -1.1729502560428314E-19, -4.5862358271832716E-17, -3.6762689970785884E-18, 7.598894365992566E-17, -2.039181583017112E-18, -2.0316059773022158E-17, 1.0032253719620007E-19, 1.766961697351147E-17, -2.384343017980328E-18, -6.451046468731644E-17, -4.475331422693832E-18, 5.675229025507333E-17, -5.67009625965923E-18, -4.6861780547996746E-17, -1.0003937964844316E-18, 4.759272847554877E-17, -1.8472357274817994E-18, -2.42861286636753E-17]
return[].isNaN == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return[].isNaN elements == false
return[].isInfinite == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return[].isInfinite elements == false
size(this.roots.omegaReal[]) == 256
size(this.roots.omegaImaginaryForward[]) == 256
size(this.roots.omegaImaginaryInverse[]) == 256
size(return[]) == 256
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform(org.apache.commons.math.complex.Complex[]):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount == 8
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471]
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479]
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479]
this.roots.isForward == true
f has only one value
f.getClass().getName() == org.apache.commons.math.complex.Complex[].class
f[] contains no nulls and has only one value, of length 8
f[].imaginary == [0.0, 1.91507575950825, 2.7, -4.88492424049175, 0.0, 4.88492424049175, -2.7, -1.91507575950825]
f[].real == [21.9, -2.09497474683058, -2.6, -1.10502525316942, 0.1, -1.10502525316942, -2.6, -2.09497474683058]
f[].isNaN == [0, 0, 0, 0, 0, 0, 0, 0]
f[].isNaN elements == false
f[].isInfinite == [0, 0, 0, 0, 0, 0, 0, 0]
f[].isInfinite elements == false
size(this.roots.omegaReal[]) == 8
size(this.roots.omegaImaginaryForward[]) == 8
size(this.roots.omegaImaginaryInverse[]) == 8
size(f[]) == 8
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform(org.apache.commons.math.complex.Complex[]):::EXIT
this.roots == orig(this.roots)
this.roots.omegaCount == orig(this.roots.omegaCount)
this.roots.omegaReal == orig(this.roots.omegaReal)
this.roots.omegaReal[] == orig(this.roots.omegaReal[])
this.roots.omegaImaginaryForward == orig(this.roots.omegaImaginaryForward)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse == orig(this.roots.omegaImaginaryInverse)
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[])
f[] == orig(f[])
f[].imaginary == orig(f[].imaginary)
f[].real == orig(f[].real)
f[].isNaN == orig(f[].isNaN)
f[].isInfinite == orig(f[].isInfinite)
this.roots has only one value
this.roots.omegaCount == 8
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471]
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479]
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479]
this.roots.isForward == false
f[] contains no nulls and has only one value, of length 8
f[].imaginary == [0.0, 1.91507575950825, 2.7, -4.88492424049175, 0.0, 4.88492424049175, -2.7, -1.91507575950825]
f[].real == [21.9, -2.09497474683058, -2.6, -1.10502525316942, 0.1, -1.10502525316942, -2.6, -2.09497474683058]
f[].isNaN == [0, 0, 0, 0, 0, 0, 0, 0]
f[].isNaN elements == false
f[].isInfinite == [0, 0, 0, 0, 0, 0, 0, 0]
f[].isInfinite elements == false
return has only one value
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] contains no nulls and has only one value, of length 8
return[].imaginary == [0.0, -2.7755575615628914E-17, 3.774758283725532E-16, -1.6653345369377348E-16, 0.0, 2.7755575615628914E-17, -3.774758283725532E-16, 1.6653345369377348E-16]
return[].imaginary elements == 0.0
return[].real == [1.3, 2.4000000000000012, 1.7, 4.099999999999998, 2.9000000000000004, 1.6999999999999986, 5.1, 2.7000000000000006]
return[].isNaN == [0, 0, 0, 0, 0, 0, 0, 0]
return[].isNaN elements == false
return[].isInfinite == [0, 0, 0, 0, 0, 0, 0, 0]
return[].isInfinite elements == false
size(this.roots.omegaReal[]) == 8
size(this.roots.omegaImaginaryForward[]) == 8
size(this.roots.omegaImaginaryInverse[]) == 8
size(return[]) == 8
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(double[]):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount == 8
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471]
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479]
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479]
this.roots.isForward == true
f has only one value
f[] == [3.676955262170047, 7.636753236814713, 14.424978336205568, 4.808326112068523, 8.202438661763951, 11.596551211459378, 4.808326112068523, 6.788225099390855]
size(this.roots.omegaReal[]) == 8
size(this.roots.omegaImaginaryForward[]) == 8
size(this.roots.omegaImaginaryInverse[]) == 8
size(f[]) == 8
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(double[]):::EXIT
this.roots == orig(this.roots)
this.roots.omegaCount == orig(this.roots.omegaCount)
this.roots.omegaReal[] == orig(this.roots.omegaReal[])
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[])
f[] == orig(f[])
this.roots has only one value
this.roots.omegaCount == 8
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471]
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479]
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479]
this.roots.isForward == false
f[] == [3.676955262170047, 7.636753236814713, 14.424978336205568, 4.808326112068523, 8.202438661763951, 11.596551211459378, 4.808326112068523, 6.788225099390855]
return has only one value
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] contains no nulls and has only one value, of length 8
return[].imaginary == [0.0, 1.91507575950825, 2.6999999999999993, -4.884924240491749, 0.0, 4.884924240491749, -2.6999999999999993, -1.91507575950825]
return[].real == [21.899999999999995, -2.094974746830583, -2.5999999999999983, -1.1050252531694171, 0.0999999999999998, -1.1050252531694171, -2.5999999999999983, -2.094974746830583]
return[].isNaN == [0, 0, 0, 0, 0, 0, 0, 0]
return[].isNaN elements == false
return[].isInfinite == [0, 0, 0, 0, 0, 0, 0, 0]
return[].isInfinite elements == false
size(this.roots.omegaReal[]) == 8
size(this.roots.omegaImaginaryForward[]) == 8
size(this.roots.omegaImaginaryInverse[]) == 8
size(return[]) == 8
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(org.apache.commons.math.complex.Complex[]):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
f.getClass().getName() == org.apache.commons.math.complex.Complex[].class
f[].isNaN == [0, 0]
f[].isNaN elements == false
f[].isInfinite == [0, 0]
f[].isInfinite elements == false
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(f[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.inversetransform2(org.apache.commons.math.complex.Complex[]):::EXIT
this.roots == orig(this.roots)
this.roots.omegaCount == orig(this.roots.omegaCount)
this.roots.omegaReal == orig(this.roots.omegaReal)
this.roots.omegaReal[] == orig(this.roots.omegaReal[])
this.roots.omegaImaginaryForward == orig(this.roots.omegaImaginaryForward)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse == orig(this.roots.omegaImaginaryInverse)
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[])
f[] == orig(f[])
f[].imaginary == orig(f[].imaginary)
f[].real == orig(f[].real)
f[].isNaN == orig(f[].isNaN)
f[].isInfinite == orig(f[].isInfinite)
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
this.roots.isForward == false
f[].isNaN == [0, 0]
f[].isNaN elements == false
f[].isInfinite == [0, 0]
f[].isInfinite elements == false
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[].isNaN == [0, 0]
return[].isNaN elements == false
return[].isInfinite == [0, 0]
return[].isInfinite elements == false
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(return[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long):::ENTER
n >= 2
n is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long):::EXIT
return == true
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2(long):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.mdfft(java.lang.Object, boolean):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount one of { 0, 2 }
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
this.roots.isForward == true
mdca.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.mdfft(java.lang.Object, boolean):::EXIT
this.roots == orig(this.roots)
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
return.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
this.roots.omegaReal[] == orig(this.roots.omegaReal[]) (elementwise)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[]) (elementwise)
this.roots.omegaImaginaryForward[] is the reverse of orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[]) (elementwise)
this.roots.omegaImaginaryInverse[] is the reverse of orig(this.roots.omegaImaginaryInverse[])
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.mdfft(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix, boolean, int, int[]):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount one of { 0, 2 }
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaReal[] elements != 0
this.roots.omegaReal[] sorted by >
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
mdcm.dimensionSize[] == [2, 2]
mdcm.dimensionSize[] elements == 2
mdcm.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
d one of { 0, 1 }
subVector[] elements one of { 0, 1 }
subVector[] sorted by >=
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(mdcm.dimensionSize[]) == 2
size(subVector[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.mdfft(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix, boolean, int, int[]):::EXIT
this.roots == orig(this.roots)
mdcm.dimensionSize == orig(mdcm.dimensionSize)
mdcm.dimensionSize[] == orig(mdcm.dimensionSize[])
mdcm.multiDimensionalComplexArray == orig(mdcm.multiDimensionalComplexArray)
mdcm.multiDimensionalComplexArray.getClass().getName() == orig(mdcm.multiDimensionalComplexArray.getClass().getName())
this.roots has only one value
this.roots.omegaCount == 2
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, -1.0]
this.roots.omegaReal[] elements one of { -1.0, 1.0 }
this.roots.omegaReal[] elements != 0
this.roots.omegaReal[] sorted by >
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -1.2246467991473532E-16]
this.roots.omegaImaginaryForward[] elements == 0.0
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 1.2246467991473532E-16]
this.roots.omegaImaginaryInverse[] elements == 0.0
mdcm.dimensionSize[] == [2, 2]
mdcm.dimensionSize[] elements == 2
mdcm.multiDimensionalComplexArray.getClass().getName() == org.apache.commons.math.complex.Complex[][].class
subVector[] elements one of { 0, 1 }
size(this.roots.omegaReal[]) == 2
size(this.roots.omegaImaginaryForward[]) == 2
size(this.roots.omegaImaginaryInverse[]) == 2
size(mdcm.dimensionSize[]) == 2
this.roots.omegaCount >= orig(this.roots.omegaCount)
this.roots.omegaReal[] == orig(this.roots.omegaReal[]) (elementwise)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[]) (elementwise)
this.roots.omegaImaginaryForward[] is the reverse of orig(this.roots.omegaImaginaryForward[])
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[]) (elementwise)
this.roots.omegaImaginaryInverse[] is the reverse of orig(this.roots.omegaImaginaryInverse[])
subVector[] >= orig(subVector[]) (lexically)
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.sample(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min one of { -3.141592653589793, 0.0 }
n one of { 9, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.sample(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
size(return[]) one of { 9, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[], double):::ENTER
size(f[]) one of { 8, 9 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.scaleArray(double[], double):::EXIT
size(return[]) one of { 8, 9 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.scaleArray(org.apache.commons.math.complex.Complex[], double):::ENTER
f.getClass().getName() == org.apache.commons.math.complex.Complex[].class
f[] elements != null
f[].isNaN elements == false
f[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
f[].isInfinite elements == false
f[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(f[]) one of { 2, 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.scaleArray(org.apache.commons.math.complex.Complex[], double):::EXIT
f[].isNaN == orig(f[].isNaN)
f[].isInfinite == orig(f[].isInfinite)
f[] elements != null
f[].isNaN elements == false
f[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
f[].isInfinite elements == false
f[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] elements != null
return[].isNaN elements == false
return[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite elements == false
return[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(return[]) one of { 2, 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform(double[]):::ENTER
this.roots.omegaCount == 0
this.roots.omegaReal == null
this.roots.omegaImaginaryForward == null
this.roots.omegaImaginaryInverse == null
this.roots.isForward == true
size(f[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform(double[]):::EXIT
this.roots == orig(this.roots)
this.roots.isForward == orig(this.roots.isForward)
f[] == orig(f[])
this.roots.omegaCount one of { 8, 256 }
this.roots.omegaReal[] one of { [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471], [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107] }
this.roots.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.roots.isForward == true
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] elements != null
return[].isNaN elements == false
return[].isNaN one of { [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite elements == false
return[].isInfinite one of { [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 8, 256 }
size(this.roots.omegaImaginaryForward[]) one of { 8, 256 }
size(this.roots.omegaImaginaryInverse[]) one of { 8, 256 }
size(return[]) one of { 8, 256 }
this.roots.omegaCount > orig(this.roots.omegaCount)
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
this has only one value
this.roots has only one value
this.roots.omegaCount == 0
this.roots.omegaReal == null
this.roots.omegaImaginaryForward == null
this.roots.omegaImaginaryInverse == null
this.roots.isForward == true
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min == 0.0
max == 6.283185307179586
n == 256
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
this.roots == orig(this.roots)
this.roots.isForward == orig(this.roots.isForward)
this.roots has only one value
this.roots.omegaCount == 256
this.roots.omegaReal has only one value
this.roots.omegaReal[] == [1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786903, 0.995184726672197, 0.9924795345987102, 0.9891765099647812, 0.9852776423889416, 0.9807852804032308, 0.9757021300385289, 0.9700312531945443, 0.9637760657954402, 0.9569403357322093, 0.949528180593037, 0.9415440651830211, 0.9329927988347393, 0.9238795325112872, 0.9142097557035311, 0.9039892931234438, 0.8932243011955159, 0.8819212643483556, 0.870086991108712, 0.8577286100002727, 0.8448535652497077, 0.8314696123025459, 0.8175848131515844, 0.8032075314806456, 0.788346427626607, 0.7730104533627378, 0.7572088465064853, 0.7409511253549599, 0.7242470829514677, 0.7071067811865483, 0.6895405447370677, 0.6715589548470191, 0.6531728429537775, 0.6343932841636463, 0.6152315905806276, 0.595699304492434, 0.575808191417846, 0.555570233019603, 0.5349976198870979, 0.5141027441932224, 0.4928981922297847, 0.4713967368259983, 0.44961132965460726, 0.42755509343028275, 0.4052413140049905, 0.38268343236509045, 0.35989503653498883, 0.3368898533922207, 0.31368174039889213, 0.290284677254463, 0.26671275747489903, 0.2429801799032645, 0.21910124015687038, 0.19509032201612883, 0.17096188876030174, 0.14673047445536225, 0.12241067519921667, 0.09801714032956103, 0.07356456359966781, 0.04906767432741837, 0.02454122852291261, 2.8796409701215E-16, -0.02454122852291204, -0.04906767432741781, -0.07356456359966726, -0.09801714032956048, -0.12241067519921611, -0.14673047445536172, -0.17096188876030124, -0.19509032201612833, -0.2191012401568699, -0.24298017990326407, -0.2667127574748986, -0.2902846772544626, -0.3136817403988918, -0.33688985339222044, -0.3598950365349886, -0.3826834323650903, -0.40524131400499047, -0.4275550934302828, -0.4496113296546074, -0.4713967368259985, -0.4928981922297849, -0.5141027441932227, -0.5349976198870982, -0.5555702330196033, -0.5758081914178464, -0.5956993044924346, -0.6152315905806282, -0.6343932841636468, -0.6531728429537781, -0.6715589548470198, -0.6895405447370684, -0.707106781186549, -0.7242470829514684, -0.7409511253549608, -0.7572088465064862, -0.7730104533627387, -0.788346427626608, -0.8032075314806467, -0.8175848131515856, -0.8314696123025472, -0.8448535652497091, -0.8577286100002742, -0.8700869911087136, -0.8819212643483573, -0.8932243011955177, -0.9039892931234457, -0.9142097557035331, -0.9238795325112893, -0.9329927988347415, -0.9415440651830235, -0.9495281805930395, -0.9569403357322117, -0.9637760657954427, -0.970031253194547, -0.9757021300385316, -0.9807852804032335, -0.9852776423889443, -0.989176509964784, -0.9924795345987131, -0.9951847266722, -0.9972904566786934, -0.9987954562051756, -0.9996988186962075, -1.0000000000000033, -0.9996988186962076, -0.9987954562051757, -0.9972904566786936, -0.9951847266722004, -0.9924795345987135, -0.9891765099647845, -0.9852776423889448, -0.980785280403234, -0.9757021300385321, -0.9700312531945475, -0.9637760657954434, -0.9569403357322124, -0.9495281805930401, -0.9415440651830242, -0.9329927988347424, -0.9238795325112903, -0.9142097557035341, -0.9039892931234468, -0.8932243011955188, -0.8819212643483585, -0.8700869911087149, -0.8577286100002756, -0.8448535652497106, -0.8314696123025487, -0.8175848131515872, -0.8032075314806483, -0.7883464276266096, -0.7730104533627403, -0.7572088465064879, -0.7409511253549624, -0.7242470829514702, -0.7071067811865508, -0.6895405447370702, -0.6715589548470215, -0.65317284295378, -0.6343932841636487, -0.6152315905806299, -0.5956993044924364, -0.5758081914178482, -0.5555702330196051, -0.5349976198870999, -0.5141027441932244, -0.49289819222978665, -0.47139673682600014, -0.449611329654609, -0.4275550934302844, -0.4052413140049921, -0.38268343236509195, -0.3598950365349902, -0.336889853392222, -0.3136817403988933, -0.29028467725446405, -0.2667127574749, -0.24298017990326537, -0.21910124015687116, -0.19509032201612952, -0.17096188876030238, -0.1467304744553628, -0.12241067519921714, -0.09801714032956144, -0.07356456359966813, -0.049067674327418605, -0.024541228522912763, -3.5388358909926865E-16, 0.024541228522912056, 0.049067674327417904, 0.07356456359966744, 0.09801714032956074, 0.12241067519921646, 0.14673047445536214, 0.17096188876030174, 0.19509032201612891, 0.21910124015687057, 0.24298017990326481, 0.2667127574748994, 0.2902846772544635, 0.31368174039889274, 0.33688985339222144, 0.35989503653498967, 0.3826834323650914, 0.40524131400499164, 0.42755509343028403, 0.44961132965460865, 0.47139673682599986, 0.49289819222978637, 0.5141027441932242, 0.5349976198870998, 0.555570233019605, 0.5758081914178481, 0.5956993044924362, 0.6152315905806298, 0.6343932841636486, 0.65317284295378, 0.6715589548470218, 0.6895405447370705, 0.7071067811865511, 0.7242470829514707, 0.740951125354963, 0.7572088465064886, 0.7730104533627411, 0.7883464276266106, 0.8032075314806494, 0.8175848131515883, 0.8314696123025499, 0.8448535652497119, 0.857728610000277, 0.8700869911087165, 0.8819212643483602, 0.8932243011955205, 0.9039892931234487, 0.9142097557035361, 0.9238795325112923, 0.9329927988347445, 0.9415440651830265, 0.9495281805930424, 0.9569403357322147, 0.9637760657954457, 0.97003125319455, 0.9757021300385346, 0.9807852804032365, 0.9852776423889474, 0.9891765099647872, 0.9924795345987163, 0.9951847266722033, 0.9972904566786966, 0.9987954562051788, 0.9996988186962107]
this.roots.omegaImaginaryForward has only one value
this.roots.omegaImaginaryForward[] == [0.0, -0.024541228522912288, -0.049067674327418015, -0.07356456359966743, -0.0980171403295606, -0.1224106751992162, -0.14673047445536175, -0.17096188876030124, -0.1950903220161283, -0.21910124015686985, -0.24298017990326395, -0.2667127574748985, -0.29028467725446244, -0.3136817403988916, -0.33688985339222016, -0.3598950365349883, -0.3826834323650899, -0.40524131400499, -0.4275550934302823, -0.4496113296546068, -0.4713967368259979, -0.4928981922297843, -0.514102744193222, -0.5349976198870975, -0.5555702330196026, -0.5758081914178457, -0.5956993044924337, -0.6152315905806272, -0.6343932841636458, -0.6531728429537771, -0.6715589548470188, -0.6895405447370674, -0.707106781186548, -0.7242470829514674, -0.7409511253549597, -0.7572088465064851, -0.7730104533627375, -0.7883464276266069, -0.8032075314806456, -0.8175848131515844, -0.8314696123025459, -0.8448535652497078, -0.8577286100002728, -0.8700869911087121, -0.8819212643483558, -0.8932243011955162, -0.9039892931234442, -0.9142097557035316, -0.9238795325112877, -0.93299279883474, -0.9415440651830218, -0.9495281805930378, -0.95694033573221, -0.9637760657954411, -0.9700312531945453, -0.9757021300385299, -0.9807852804032319, -0.9852776423889427, -0.9891765099647823, -0.9924795345987114, -0.9951847266721984, -0.9972904566786917, -0.9987954562051738, -0.9996988186962057, -1.0000000000000016, -0.9996988186962058, -0.998795456205174, -0.9972904566786919, -0.9951847266721986, -0.9924795345987117, -0.9891765099647828, -0.9852776423889431, -0.9807852804032323, -0.9757021300385305, -0.9700312531945459, -0.9637760657954417, -0.9569403357322108, -0.9495281805930386, -0.9415440651830227, -0.9329927988347408, -0.9238795325112887, -0.9142097557035327, -0.9039892931234453, -0.8932243011955173, -0.881921264348357, -0.8700869911087135, -0.8577286100002741, -0.8448535652497091, -0.8314696123025473, -0.8175848131515858, -0.803207531480647, -0.7883464276266083, -0.7730104533627391, -0.7572088465064867, -0.7409511253549612, -0.724247082951469, -0.7071067811865497, -0.689540544737069, -0.6715589548470204, -0.6531728429537789, -0.6343932841636476, -0.6152315905806289, -0.5956993044924354, -0.5758081914178472, -0.5555702330196041, -0.5349976198870989, -0.5141027441932234, -0.4928981922297857, -0.47139673682599925, -0.44961132965460815, -0.42755509343028364, -0.40524131400499136, -0.3826834323650912, -0.35989503653498955, -0.3368898533922214, -0.31368174039889274, -0.29028467725446355, -0.26671275747489953, -0.24298017990326495, -0.21910124015687077, -0.19509032201612916, -0.17096188876030205, -0.1467304744553625, -0.12241067519921689, -0.09801714032956121, -0.07356456359966795, -0.04906767432741846, -0.024541228522912656, -2.8796409701215E-16, 0.024541228522912083, 0.04906767432741789, 0.07356456359966738, 0.09801714032956065, 0.12241067519921632, 0.14673047445536197, 0.17096188876030155, 0.19509032201612866, 0.21910124015687027, 0.24298017990326445, 0.26671275747489903, 0.2902846772544631, 0.3136817403988923, 0.33688985339222094, 0.3598950365349891, 0.3826834323650908, 0.40524131400499097, 0.4275550934302833, 0.4496113296546079, 0.4713967368259991, 0.4928981922297856, 0.5141027441932233, 0.5349976198870989, 0.5555702330196041, 0.5758081914178472, 0.5956993044924354, 0.6152315905806289, 0.6343932841636476, 0.653172842953779, 0.6715589548470207, 0.6895405447370694, 0.70710678118655, 0.7242470829514694, 0.7409511253549618, 0.7572088465064872, 0.7730104533627398, 0.7883464276266091, 0.8032075314806479, 0.8175848131515868, 0.8314696123025485, 0.8448535652497104, 0.8577286100002756, 0.870086991108715, 0.8819212643483587, 0.8932243011955191, 0.9039892931234472, 0.9142097557035347, 0.9238795325112908, 0.9329927988347431, 0.941544065183025, 0.949528180593041, 0.9569403357322133, 0.9637760657954443, 0.9700312531945485, 0.9757021300385331, 0.9807852804032351, 0.985277642388946, 0.9891765099647857, 0.9924795345987147, 0.9951847266722017, 0.9972904566786951, 0.9987954562051773, 0.9996988186962091, 1.0000000000000049, 0.9996988186962091, 0.9987954562051773, 0.9972904566786952, 0.9951847266722019, 0.9924795345987151, 0.989176509964786, 0.9852776423889463, 0.9807852804032355, 0.9757021300385337, 0.9700312531945491, 0.963776065795445, 0.9569403357322139, 0.9495281805930417, 0.9415440651830258, 0.932992798834744, 0.9238795325112917, 0.9142097557035356, 0.9039892931234482, 0.8932243011955202, 0.8819212643483598, 0.8700869911087162, 0.8577286100002769, 0.8448535652497118, 0.8314696123025499, 0.8175848131515884, 0.8032075314806495, 0.7883464276266108, 0.7730104533627414, 0.757208846506489, 0.7409511253549634, 0.7242470829514711, 0.7071067811865517, 0.689540544737071, 0.6715589548470224, 0.6531728429537808, 0.6343932841636494, 0.6152315905806306, 0.5956993044924369, 0.5758081914178488, 0.5555702330196056, 0.5349976198871005, 0.514102744193225, 0.49289819222978715, 0.47139673682600064, 0.4496113296546095, 0.42755509343028486, 0.4052413140049925, 0.38268343236509234, 0.3598950365349906, 0.3368898533922224, 0.3136817403988937, 0.29028467725446444, 0.2667127574749003, 0.24298017990326565, 0.2191012401568714, 0.19509032201612975, 0.17096188876030255, 0.1467304744553629, 0.12241067519921722, 0.09801714032956148, 0.07356456359966815, 0.049067674327418584, 0.024541228522912704]
this.roots.omegaImaginaryInverse has only one value
this.roots.omegaImaginaryInverse[] == [0.0, 0.024541228522912288, 0.049067674327418015, 0.07356456359966743, 0.0980171403295606, 0.1224106751992162, 0.14673047445536175, 0.17096188876030124, 0.1950903220161283, 0.21910124015686985, 0.24298017990326395, 0.2667127574748985, 0.29028467725446244, 0.3136817403988916, 0.33688985339222016, 0.3598950365349883, 0.3826834323650899, 0.40524131400499, 0.4275550934302823, 0.4496113296546068, 0.4713967368259979, 0.4928981922297843, 0.514102744193222, 0.5349976198870975, 0.5555702330196026, 0.5758081914178457, 0.5956993044924337, 0.6152315905806272, 0.6343932841636458, 0.6531728429537771, 0.6715589548470188, 0.6895405447370674, 0.707106781186548, 0.7242470829514674, 0.7409511253549597, 0.7572088465064851, 0.7730104533627375, 0.7883464276266069, 0.8032075314806456, 0.8175848131515844, 0.8314696123025459, 0.8448535652497078, 0.8577286100002728, 0.8700869911087121, 0.8819212643483558, 0.8932243011955162, 0.9039892931234442, 0.9142097557035316, 0.9238795325112877, 0.93299279883474, 0.9415440651830218, 0.9495281805930378, 0.95694033573221, 0.9637760657954411, 0.9700312531945453, 0.9757021300385299, 0.9807852804032319, 0.9852776423889427, 0.9891765099647823, 0.9924795345987114, 0.9951847266721984, 0.9972904566786917, 0.9987954562051738, 0.9996988186962057, 1.0000000000000016, 0.9996988186962058, 0.998795456205174, 0.9972904566786919, 0.9951847266721986, 0.9924795345987117, 0.9891765099647828, 0.9852776423889431, 0.9807852804032323, 0.9757021300385305, 0.9700312531945459, 0.9637760657954417, 0.9569403357322108, 0.9495281805930386, 0.9415440651830227, 0.9329927988347408, 0.9238795325112887, 0.9142097557035327, 0.9039892931234453, 0.8932243011955173, 0.881921264348357, 0.8700869911087135, 0.8577286100002741, 0.8448535652497091, 0.8314696123025473, 0.8175848131515858, 0.803207531480647, 0.7883464276266083, 0.7730104533627391, 0.7572088465064867, 0.7409511253549612, 0.724247082951469, 0.7071067811865497, 0.689540544737069, 0.6715589548470204, 0.6531728429537789, 0.6343932841636476, 0.6152315905806289, 0.5956993044924354, 0.5758081914178472, 0.5555702330196041, 0.5349976198870989, 0.5141027441932234, 0.4928981922297857, 0.47139673682599925, 0.44961132965460815, 0.42755509343028364, 0.40524131400499136, 0.3826834323650912, 0.35989503653498955, 0.3368898533922214, 0.31368174039889274, 0.29028467725446355, 0.26671275747489953, 0.24298017990326495, 0.21910124015687077, 0.19509032201612916, 0.17096188876030205, 0.1467304744553625, 0.12241067519921689, 0.09801714032956121, 0.07356456359966795, 0.04906767432741846, 0.024541228522912656, 2.8796409701215E-16, -0.024541228522912083, -0.04906767432741789, -0.07356456359966738, -0.09801714032956065, -0.12241067519921632, -0.14673047445536197, -0.17096188876030155, -0.19509032201612866, -0.21910124015687027, -0.24298017990326445, -0.26671275747489903, -0.2902846772544631, -0.3136817403988923, -0.33688985339222094, -0.3598950365349891, -0.3826834323650908, -0.40524131400499097, -0.4275550934302833, -0.4496113296546079, -0.4713967368259991, -0.4928981922297856, -0.5141027441932233, -0.5349976198870989, -0.5555702330196041, -0.5758081914178472, -0.5956993044924354, -0.6152315905806289, -0.6343932841636476, -0.653172842953779, -0.6715589548470207, -0.6895405447370694, -0.70710678118655, -0.7242470829514694, -0.7409511253549618, -0.7572088465064872, -0.7730104533627398, -0.7883464276266091, -0.8032075314806479, -0.8175848131515868, -0.8314696123025485, -0.8448535652497104, -0.8577286100002756, -0.870086991108715, -0.8819212643483587, -0.8932243011955191, -0.9039892931234472, -0.9142097557035347, -0.9238795325112908, -0.9329927988347431, -0.941544065183025, -0.949528180593041, -0.9569403357322133, -0.9637760657954443, -0.9700312531945485, -0.9757021300385331, -0.9807852804032351, -0.985277642388946, -0.9891765099647857, -0.9924795345987147, -0.9951847266722017, -0.9972904566786951, -0.9987954562051773, -0.9996988186962091, -1.0000000000000049, -0.9996988186962091, -0.9987954562051773, -0.9972904566786952, -0.9951847266722019, -0.9924795345987151, -0.989176509964786, -0.9852776423889463, -0.9807852804032355, -0.9757021300385337, -0.9700312531945491, -0.963776065795445, -0.9569403357322139, -0.9495281805930417, -0.9415440651830258, -0.932992798834744, -0.9238795325112917, -0.9142097557035356, -0.9039892931234482, -0.8932243011955202, -0.8819212643483598, -0.8700869911087162, -0.8577286100002769, -0.8448535652497118, -0.8314696123025499, -0.8175848131515884, -0.8032075314806495, -0.7883464276266108, -0.7730104533627414, -0.757208846506489, -0.7409511253549634, -0.7242470829514711, -0.7071067811865517, -0.689540544737071, -0.6715589548470224, -0.6531728429537808, -0.6343932841636494, -0.6152315905806306, -0.5956993044924369, -0.5758081914178488, -0.5555702330196056, -0.5349976198871005, -0.514102744193225, -0.49289819222978715, -0.47139673682600064, -0.4496113296546095, -0.42755509343028486, -0.4052413140049925, -0.38268343236509234, -0.3598950365349906, -0.3368898533922224, -0.3136817403988937, -0.29028467725446444, -0.2667127574749003, -0.24298017990326565, -0.2191012401568714, -0.19509032201612975, -0.17096188876030255, -0.1467304744553629, -0.12241067519921722, -0.09801714032956148, -0.07356456359966815, -0.049067674327418584, -0.024541228522912704]
this.roots.isForward == true
return has only one value
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[] contains no nulls and has only one value, of length 256
return[].imaginary == [0.0, -128.0000000000001, -7.068077193888456E-15, -4.112885079663858E-15, -2.6844840011506876E-15, -1.5533821663415554E-17, -1.0165349191731833E-15, -2.347574583949378E-15, 3.477732166295097E-17, 1.2050810346864144E-15, -7.245074632944857E-16, 1.024817306957487E-15, -8.446972686089641E-16, -2.980350806911543E-16, 7.734350546920882E-16, -4.711633862389174E-15, -2.2380164720712297E-16, -1.0783005683078934E-15, -5.851425545740678E-16, -1.2218118568891174E-15, -6.1926278369903645E-16, -2.584435859136982E-15, 1.2103924340400161E-15, 4.411799253923764E-15, 2.4115278873233977E-15, 1.1877309684506916E-14, 2.760444123252314E-15, -1.793149112796638E-17, 2.55306228545049E-16, 6.301075931329781E-16, -9.280342944211392E-16, -7.264927287924299E-15, -4.208543044843114E-16, 1.3637209364474203E-14, 2.6404365266526126E-16, -2.0863923813435287E-15, -1.0460824753663915E-16, 3.1676586509673416E-15, -1.0481988449534268E-15, -3.061561943119667E-17, 7.188797214941093E-17, 1.5112991425419606E-15, 1.1998201629144425E-15, 6.981590554764862E-16, 5.529164590488672E-16, 1.8656811848255896E-16, -4.440121850282464E-15, 5.059738223808361E-15, -6.314585091577444E-15, 8.260768467773083E-15, -4.472833521082773E-15, 1.0929797368680056E-15, -8.786260662833171E-16, -9.180157190995777E-16, 1.6363910874607167E-16, -2.765114219717219E-16, -8.236949093217678E-16, 5.307610828218351E-16, -3.3477361427444667E-16, 1.797297581152357E-15, 2.250624648460448E-16, 2.1077835945503906E-16, -1.860919147417071E-16, -3.5303187682283884E-16, -9.12464548363802E-16, 2.8068677553581176E-14, -7.30798408373575E-16, -1.4086592824084902E-15, -4.98107521323222E-16, 1.623876517099677E-15, 1.0487705509509931E-15, 2.4656702985597226E-15, 2.450799752343191E-15, 1.7312652123773553E-15, 1.1489548840095299E-15, -4.670772048966044E-16, 4.2429440307930936E-16, 1.223243800326184E-15, 5.379344971200673E-16, -4.336317776182137E-15, -6.359905771706871E-16, 8.776332250029498E-15, -3.723119201047177E-16, -5.576266929584297E-16, -5.409495278152144E-16, 9.779389303951214E-16, -1.3934274278082457E-15, -1.080397153709643E-15, -1.4102026619434989E-15, 4.87336314751922E-15, -2.246743950312836E-16, 3.4837697396424632E-15, -3.309793997837844E-16, 1.6077864649402914E-15, 8.143199161948334E-16, 7.477722496958125E-15, 1.799591744766004E-15, 2.2102722632564643E-14, 4.203391182316237E-17, -6.6855300473797E-16, -7.054493857095777E-16, 2.516179819093265E-16, 1.9215013691910132E-16, 1.7658175761735667E-15, 6.131078011627155E-16, 5.829482809487277E-15, 6.149381708843385E-16, 2.501277196921521E-15, 8.798162519372475E-16, 4.022143919773132E-15, 1.38393782634319E-15, 1.4247024919128298E-14, 1.79105688593662E-15, 1.2063579748873174E-14, 6.960856039182721E-16, 2.0782718617093955E-15, -3.175976819230282E-16, 4.677263464601362E-15, -7.94672802569438E-16, 1.0414680210409046E-14, 3.284072721597573E-16, 1.61860158764672E-14, 3.100403134468623E-16, 1.19429291322331E-14, 4.82801422796636E-16, 1.3526456011644992E-14, -2.415420399658865E-16, -2.2737367544323206E-13, 0.0, 2.2737367544323206E-13, 2.415420399658865E-16, -1.3526456011644992E-14, -4.82801422796636E-16, -1.19429291322331E-14, -3.100403134468623E-16, -1.61860158764672E-14, -3.284072721597573E-16, -1.0414680210409046E-14, 7.94672802569438E-16, -4.677263464601362E-15, 3.175976819230282E-16, -2.0782718617093955E-15, -6.960856039182721E-16, -1.2063579748873174E-14, -1.79105688593662E-15, -1.4247024919128298E-14, -1.38393782634319E-15, -4.022143919773132E-15, -8.798162519372475E-16, -2.501277196921521E-15, -6.149381708843385E-16, -5.829482809487277E-15, -6.131078011627155E-16, -1.7658175761735667E-15, -1.9215013691910132E-16, -2.516179819093265E-16, 7.054493857095777E-16, 6.6855300473797E-16, -4.203391182316237E-17, -2.2102722632564643E-14, -1.799591744766004E-15, -7.477722496958125E-15, -8.143199161948334E-16, -1.6077864649402914E-15, 3.309793997837844E-16, -3.4837697396424632E-15, 2.246743950312836E-16, -4.87336314751922E-15, 1.4102026619434989E-15, 1.080397153709643E-15, 1.3934274278082457E-15, -9.779389303951214E-16, 5.409495278152144E-16, 5.576266929584297E-16, 3.723119201047177E-16, -8.776332250029498E-15, 6.359905771706871E-16, 4.336317776182137E-15, -5.379344971200673E-16, -1.223243800326184E-15, -4.2429440307930936E-16, 4.670772048966044E-16, -1.1489548840095299E-15, -1.7312652123773553E-15, -2.450799752343191E-15, -2.4656702985597226E-15, -1.0487705509509931E-15, -1.623876517099677E-15, 4.98107521323222E-16, 1.4086592824084902E-15, 7.30798408373575E-16, -2.8068677553581176E-14, 9.12464548363802E-16, 3.5303187682283884E-16, 1.860919147417071E-16, -2.1077835945503906E-16, -2.250624648460448E-16, -1.797297581152357E-15, 3.3477361427444667E-16, -5.307610828218351E-16, 8.236949093217678E-16, 2.765114219717219E-16, -1.6363910874607167E-16, 9.180157190995777E-16, 8.786260662833171E-16, -1.0929797368680056E-15, 4.472833521082773E-15, -8.260768467773083E-15, 6.314585091577444E-15, -5.059738223808361E-15, 4.440121850282464E-15, -1.8656811848255896E-16, -5.529164590488672E-16, -6.981590554764862E-16, -1.1998201629144425E-15, -1.5112991425419606E-15, -7.188797214941093E-17, 3.061561943119667E-17, 1.0481988449534268E-15, -3.1676586509673416E-15, 1.0460824753663915E-16, 2.0863923813435287E-15, -2.6404365266526126E-16, -1.3637209364474203E-14, 4.208543044843114E-16, 7.264927287924299E-15, 9.280342944211392E-16, -6.301075931329781E-16, -2.55306228545049E-16, 1.793149112796638E-17, -2.760444123252314E-15, -1.1877309684506916E-14, -2.4115278873233977E-15, -4.411799253923764E-15, -1.2103924340400161E-15, 2.584435859136982E-15, 6.1926278369903645E-16, 1.2218118568891174E-15, 5.851425545740678E-16, 1.0783005683078934E-15, 2.2380164720712297E-16, 4.711633862389174E-15, -7.734350546920882E-16, 2.980350806911543E-16, 8.446972686089641E-16, -1.024817306957487E-15, 7.245074632944857E-16, -1.2050810346864144E-15, -3.477732166295097E-17, 2.347574583949378E-15, 1.0165349191731833E-15, 1.5533821663415554E-17, 2.6844840011506876E-15, 4.112885079663858E-15, 7.068077193888456E-15, 128.0000000000001]
return[].imaginary elements one of { -128.0000000000001, 0.0, 128.0000000000001 }
return[].real == [8.753346684886696E-16, -1.199040866595169E-14, -7.204984123420492E-17, -1.2045278892790609E-14, 5.774100807666515E-16, 1.6026475524333465E-14, 1.538348138894674E-15, -1.6652974034576513E-14, 5.571028013426931E-16, 1.9889548660178614E-14, 7.371435884369223E-16, -3.2674023508395422E-15, 6.314697173372505E-16, 6.4239368324555384E-15, 9.171780820759478E-16, -9.055500456179482E-15, 6.524576754151317E-16, 1.7746519953290166E-14, 1.1308505032694112E-16, -7.729579786124874E-16, 1.4063852381009894E-15, 6.138920929608419E-15, 5.3485516352615786E-15, -2.9652545031405197E-16, -2.959141449535886E-16, 5.434215644022762E-15, -4.3671992710894396E-15, -5.0801041503212185E-15, -3.872674066768122E-16, 2.318198014195283E-16, -1.594651615160103E-15, -1.3241309262470332E-14, -1.2802751513296916E-15, 2.5585969899845498E-14, -1.5369623476972292E-15, -7.340498255975675E-16, 3.690753342687724E-16, 1.1931344248779868E-15, -3.9634340338515817E-17, -2.0953423004353615E-15, -1.2680658340559844E-15, 2.707008343372084E-15, 2.322035258911219E-16, -2.5620086014980716E-15, 6.042384541641925E-16, -3.259438534469799E-16, -3.6393474607994915E-15, -4.7674039133258764E-15, -5.654202867591654E-16, 4.717502089484935E-15, 3.3341818366783455E-15, -8.625787306034928E-17, -4.553658376053329E-16, 3.72533885390955E-15, 1.1917526040498518E-15, 8.359435933349986E-16, 1.3737654314227843E-15, 3.863134921752331E-15, 9.305668019352559E-16, -1.272219894877966E-15, 5.551484549693682E-18, 3.3001395490414757E-15, 4.602381981694679E-16, -3.897185468121026E-15, 9.27376372767974E-16, 2.5213467540924025E-14, -5.337091999493003E-16, -4.150116049830386E-16, -5.528954702581498E-16, 3.861907299503462E-15, 2.449747562618405E-15, -5.069942566024108E-16, -3.879509386626198E-18, -4.580165752370517E-16, -1.3684318712607446E-15, -2.2832562028082074E-15, 2.9760156476686287E-16, -3.8415587810718305E-17, -8.517671865425078E-16, 2.754374851801684E-16, -8.830788982696776E-16, 6.741366652047785E-15, -8.704087366534048E-16, -1.3724352049097558E-15, 6.069809979647148E-16, 2.2768327347177557E-15, -8.877215829972007E-16, 7.820006125912728E-16, 3.5567310015226983E-16, 2.8822930489028522E-15, 9.289710333335852E-16, 1.5076971840958788E-15, -2.5667444983179486E-16, 6.754585501511385E-16, -1.5528412050118619E-15, 2.289232641557361E-15, -2.91077233160563E-17, 3.1296751150699634E-15, 1.229829343420257E-15, 2.2665934176024415E-16, 2.521799503738506E-16, 2.3706330689707514E-15, 1.2566108483021352E-15, 1.165020083575485E-15, 3.7705627251257123E-16, 2.0217639826479974E-15, 8.0950650255431135E-16, -8.391745920757803E-16, 4.54056626565052E-16, 3.3297846931461775E-15, 5.25553491370134E-16, -3.707700750971911E-16, 1.75677204647497E-16, 6.0291303374025E-15, -8.490707725852908E-16, -1.344435514892727E-15, 2.066400481448092E-16, 1.4473212101237208E-15, 1.6597666549285209E-15, 1.6026208949884036E-15, -5.601098875662998E-16, 3.695298583402087E-15, -2.962661667290624E-16, -3.933737855755765E-15, -2.35946145947349E-17, 4.952912058968692E-15, -1.2843035429275677E-15, -9.747758156208874E-14, 4.243065647346998E-16, -9.747758156208874E-14, -1.2843035429275677E-15, 4.952912058968692E-15, -2.35946145947349E-17, -3.933737855755765E-15, -2.962661667290624E-16, 3.695298583402087E-15, -5.601098875662998E-16, 1.6026208949884036E-15, 1.6597666549285209E-15, 1.4473212101237208E-15, 2.066400481448092E-16, -1.344435514892727E-15, -8.490707725852908E-16, 6.0291303374025E-15, 1.75677204647497E-16, -3.707700750971911E-16, 5.25553491370134E-16, 3.3297846931461775E-15, 4.54056626565052E-16, -8.391745920757803E-16, 8.0950650255431135E-16, 2.0217639826479974E-15, 3.7705627251257123E-16, 1.165020083575485E-15, 1.2566108483021352E-15, 2.3706330689707514E-15, 2.521799503738506E-16, 2.2665934176024415E-16, 1.229829343420257E-15, 3.1296751150699634E-15, -2.91077233160563E-17, 2.289232641557361E-15, -1.5528412050118619E-15, 6.754585501511385E-16, -2.5667444983179486E-16, 1.5076971840958788E-15, 9.289710333335852E-16, 2.8822930489028522E-15, 3.5567310015226983E-16, 7.820006125912728E-16, -8.877215829972007E-16, 2.2768327347177557E-15, 6.069809979647148E-16, -1.3724352049097558E-15, -8.704087366534048E-16, 6.741366652047785E-15, -8.830788982696776E-16, 2.754374851801684E-16, -8.517671865425078E-16, -3.8415587810718305E-17, 2.9760156476686287E-16, -2.2832562028082074E-15, -1.3684318712607446E-15, -4.580165752370517E-16, -3.879509386626198E-18, -5.069942566024108E-16, 2.449747562618405E-15, 3.861907299503462E-15, -5.528954702581498E-16, -4.150116049830386E-16, -5.337091999493003E-16, 2.5213467540924025E-14, 9.27376372767974E-16, -3.897185468121026E-15, 4.602381981694679E-16, 3.3001395490414757E-15, 5.551484549693682E-18, -1.272219894877966E-15, 9.305668019352559E-16, 3.863134921752331E-15, 1.3737654314227843E-15, 8.359435933349986E-16, 1.1917526040498518E-15, 3.72533885390955E-15, -4.553658376053329E-16, -8.625787306034928E-17, 3.3341818366783455E-15, 4.717502089484935E-15, -5.654202867591654E-16, -4.7674039133258764E-15, -3.6393474607994915E-15, -3.259438534469799E-16, 6.042384541641925E-16, -2.5620086014980716E-15, 2.322035258911219E-16, 2.707008343372084E-15, -1.2680658340559844E-15, -2.0953423004353615E-15, -3.9634340338515817E-17, 1.1931344248779868E-15, 3.690753342687724E-16, -7.340498255975675E-16, -1.5369623476972292E-15, 2.5585969899845498E-14, -1.2802751513296916E-15, -1.3241309262470332E-14, -1.594651615160103E-15, 2.318198014195283E-16, -3.872674066768122E-16, -5.0801041503212185E-15, -4.3671992710894396E-15, 5.434215644022762E-15, -2.959141449535886E-16, -2.9652545031405197E-16, 5.3485516352615786E-15, 6.138920929608419E-15, 1.4063852381009894E-15, -7.729579786124874E-16, 1.1308505032694112E-16, 1.7746519953290166E-14, 6.524576754151317E-16, -9.055500456179482E-15, 9.171780820759478E-16, 6.4239368324555384E-15, 6.314697173372505E-16, -3.2674023508395422E-15, 7.371435884369223E-16, 1.9889548660178614E-14, 5.571028013426931E-16, -1.6652974034576513E-14, 1.538348138894674E-15, 1.6026475524333465E-14, 5.774100807666515E-16, -1.2045278892790609E-14, -7.204984123420492E-17, -1.199040866595169E-14]
return[].isNaN == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return[].isNaN elements == false
return[].isInfinite == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return[].isInfinite elements == false
size(this.roots.omegaReal[]) == 256
size(this.roots.omegaImaginaryForward[]) == 256
size(this.roots.omegaImaginaryInverse[]) == 256
size(return[]) == 256
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform2(org.apache.commons.math.complex.Complex[]):::ENTER
this.roots.omegaCount one of { 0, 2, 8 }
this.roots.omegaReal[] one of { [1.0, -1.0], [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471] }
this.roots.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -1.2246467991473532E-16] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 1.2246467991473532E-16], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
f.getClass().getName() == org.apache.commons.math.complex.Complex[].class
f[].isNaN elements == false
f[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
f[].isInfinite elements == false
f[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 2, 8 }
size(this.roots.omegaImaginaryForward[]) one of { 2, 8 }
size(this.roots.omegaImaginaryInverse[]) one of { 2, 8 }
size(f[]) one of { 2, 8 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.transform2(org.apache.commons.math.complex.Complex[]):::EXIT
this.roots == orig(this.roots)
f[] == orig(f[])
f[].imaginary == orig(f[].imaginary)
f[].real == orig(f[].real)
f[].isNaN == orig(f[].isNaN)
f[].isInfinite == orig(f[].isInfinite)
this.roots.omegaCount one of { 2, 8 }
this.roots.omegaReal[] one of { [1.0, -1.0], [1.0, 0.7071067811865476, 2.220446049250313E-16, -0.7071067811865474, -1.0, -0.7071067811865478, -4.440892098500626E-16, 0.7071067811865471] }
this.roots.omegaImaginaryForward[] one of { [0.0, -0.7071067811865475, -1.0, -0.7071067811865477, -2.7755575615628914E-16, 0.7071067811865472, 1.0, 0.7071067811865479], [0.0, -1.2246467991473532E-16] }
this.roots.omegaImaginaryInverse[] one of { [0.0, 1.2246467991473532E-16], [0.0, 0.7071067811865475, 1.0, 0.7071067811865477, 2.7755575615628914E-16, -0.7071067811865472, -1.0, -0.7071067811865479] }
this.roots.isForward == true
f[].isNaN elements == false
f[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
f[].isInfinite elements == false
f[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return.getClass().getName() == org.apache.commons.math.complex.Complex[].class
return[].isNaN elements == false
return[].isNaN one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return[].isInfinite elements == false
return[].isInfinite one of { [0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
size(this.roots.omegaReal[]) one of { 2, 8 }
size(this.roots.omegaImaginaryForward[]) one of { 2, 8 }
size(this.roots.omegaImaginaryInverse[]) one of { 2, 8 }
size(return[]) one of { 2, 8 }
orig(this.roots.omegaCount) % this.roots.omegaCount == 0
this.roots.omegaReal[] == orig(this.roots.omegaReal[]) (elementwise)
this.roots.omegaImaginaryForward[] == orig(this.roots.omegaImaginaryForward[]) (elementwise)
this.roots.omegaImaginaryInverse[] == orig(this.roots.omegaImaginaryInverse[]) (elementwise)
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(double[]):::ENTER
size(d[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(double[]):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(java.lang.Object[]):::ENTER
o.getClass().getName() == org.apache.commons.math.complex.Complex[].class
o[] elements != null
size(o[]) >= 2
size(o[]) is a power of 2
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(java.lang.Object[]):::EXIT
o[] == orig(o[])
o[] elements != null
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(double, double):::ENTER
lower one of { -3.141592653589793, 0.0 }
===========================================================================
org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest.FastFourierTransformerTest():::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest.test2DData():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest.test2DData():::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest.testAdHocData():::EXIT
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.transform.FastFourierTransformerTest.testSinFunction():::EXIT
===========================================================================
org.apache.commons.math.transform.FastSineTransformer:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.FastSineTransformer():::EXIT
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.fst(double[]):::ENTER
size(f[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.fst(double[]):::EXIT250
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.fst(double[]):::EXIT
f[] == orig(f[])
size(return[]) one of { 8, 256 }
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.inversetransform(double[]):::ENTER
this has only one value
f has only one value
f[] == [0.0, 20.1093579685034, -9.65685424949238, 5.98642305066196, -4.0, 2.6727145516772, -1.65685424949238, 0.795649469518633]
size(f[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.inversetransform(double[]):::EXIT
f[] == orig(f[])
f[] == [0.0, 20.1093579685034, -9.65685424949238, 5.98642305066196, -4.0, 2.6727145516772, -1.65685424949238, 0.795649469518633]
return has only one value
return[] == [0.0, 1.000000000000003, 2.000000000000001, 3.0000000000000018, 4.000000000000002, 5.000000000000002, 6.000000000000001, 7.0000000000000036]
size(return[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.inversetransform2(double[]):::ENTER
this has only one value
f has only one value
f[] == [0.0, 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0]
size(f[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.inversetransform2(double[]):::EXIT
f[] == orig(f[])
f[] == [0.0, 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0]
return has only one value
return[] == [0.0, 20.109357968503392, -9.65685424949238, 5.986423050661955, -4.0, 2.6727145516771946, -1.6568542494923815, 0.7956494695186294]
size(return[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform(double[]):::ENTER
this has only one value
f has only one value
f[] == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
size(f[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform(double[]):::EXIT
f[] == orig(f[])
f[] == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
return has only one value
return[] == [0.0, 20.109357968503392, -9.65685424949238, 5.986423050661955, -4.0, 2.6727145516771946, -1.6568542494923815, 0.7956494695186294]
size(return[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::ENTER
this has only one value
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.SinFunction.class
min one of { -3.141592653589793, 0.0 }
max one of { 3.141592653589793, 6.283185307179586 }
n == 256
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int):::EXIT
return[] elements one of { -128.0000000000001, 0.0, 128.0000000000001 }
return[] one of { [0.0, -4.579669976578771E-16, -128.0000000000001, -2.9004576518332215E-15, -6.396731285967134E-15, -2.582312512352657E-15, -4.135871744368441E-15, 9.927151909292529E-15, -2.728341209265922E-15, 1.069150339906907E-14, -2.710663778929551E-15, -1.889522309054744E-15, -2.0235135414278305E-15, -2.8737371701896443E-15, -2.3711003236088297E-15, 1.3735326163969023E-14, -4.522490523280477E-16, 1.3663973277185579E-14, 1.0231727021665488E-15, -3.937591702533001E-15, 9.357348202216501E-17, -4.394803863267217E-15, -1.4120969139807089E-15, -8.27205487883589E-16, -1.7314529107093043E-15, -1.3315485447796707E-17, -1.1998154288288396E-15, -6.562822091556425E-15, -4.4969911228988626E-17, -6.323808055105342E-15, -8.668434832172025E-15, 4.315131140591154E-15, 8.374053553706649E-16, 3.0213681616811477E-15, 5.373793583623165E-15, -1.4809456462693927E-14, -8.1168934621508975E-16, -1.3722629866299556E-14, -4.43857093347011E-16, -1.4099665935472626E-14, -1.255872373047787E-15, -1.2711710081632327E-14, -1.78578445410899E-15, -1.5672026219647366E-14, 1.7391924012245818E-15, -1.9850200576758615E-14, 6.164580762692672E-15, -1.5600237101019618E-14, 4.602422462040078E-15, -1.5130945251623646E-14, 7.576562563310674E-15, -2.211184549606098E-14, 2.423061984951206E-15, -1.845545402287602E-14, -1.6728944724791637E-15, -1.6699366190004026E-14, -1.1616504573513174E-15, -1.890251579683978E-14, 8.336488017187923E-16, -1.9768482742197516E-14, -2.419885568789984E-16, -1.9007720193266295E-14, -2.775134018320374E-16, -6.982672315508566E-15, 3.422611864480577E-17, -6.848078801260364E-15, 1.3461901399499588E-14, -2.729967168461405E-14, -8.052707669168205E-17, -2.61394545334521E-14, -1.2441988959580694E-15, -2.40643929073652E-14, 3.783094304244072E-17, -2.548402252940513E-14, -2.5463832098722633E-16, -2.668911966323578E-14, -1.877043780410091E-15, -2.7517706638493438E-14, -3.306255974434977E-15, -2.5276073233808484E-14, -2.339254398067327E-16, -2.261489356107976E-14, 3.93600063571837E-15, -2.7540788972921414E-14, 7.269750813917371E-16, -2.882482097536789E-14, 7.19623313500002E-16, -2.7501091614346507E-14, 2.211171643776453E-16, -2.9630444167998265E-14, 2.7531027911408988E-15, -2.959166808353063E-14, -1.9704385324653473E-15, -2.470858175644899E-14, 5.832373211839335E-15, -2.257814071657403E-14, -5.430849091006659E-15, -2.2822041952109532E-14, 3.5452099441537793E-15, -3.1455878302587104E-14, -3.1129803193172E-15, -3.523088311593371E-14, 7.079459231697271E-16, -3.393254010325019E-14, -3.234511118519061E-16, -3.256066932358761E-14, -1.6649344515022903E-15, -3.652661439632797E-14, 3.296912976151813E-16, -3.657048008337576E-14, -9.349607885459798E-16, -3.584050646180485E-14, -3.2913745630850984E-16, -3.568705144241285E-14, 2.8510236896636625E-15, -3.8155094236054526E-14, -1.2218343611939475E-15, -3.931294042105083E-14, 2.086074825403258E-15, -3.934877516279845E-14, -1.4618342155871997E-16, -3.831867632306174E-14, 2.4858399851866847E-16, -4.133679503368235E-14, 1.401617850677133E-15, -4.1329908547486965E-14, -3.551718986984137E-16, -4.08110608416306E-14, 5.620504062164864E-16, -4.203230616871827E-14, 4.227739224690761E-14, -7.097286330497864E-14, -1.8602226537016245E-15, -7.04387202747397E-14, 1.15319120754242E-16, -7.018611461104367E-14, -3.2093548889145663E-16, -6.837732689746237E-14, -1.2034170812278832E-16, -7.211341644105645E-14, 1.1766757334939146E-15, -7.538410842083308E-14, -8.088330213489277E-16, -7.494613868152039E-14, 1.2173295239327326E-15, -7.438918330404054E-14, 4.422699884255596E-15, -7.875061544831753E-14, 1.6764614243036786E-15, -7.690504171526315E-14, -5.414857670975869E-16, -7.418946999639583E-14, 4.431015950733158E-16, -7.538215720765904E-14, 2.08912712352579E-15, -7.553327255620127E-14, -6.116046214686774E-16, -7.481557223985016E-14, -1.840298975667215E-15, -7.797095439698507E-14, -2.8610583745781545E-16, -7.860176231727217E-14, 7.772777737630823E-15, -8.392042025567528E-14, -8.01453592192742E-17, -8.317601004383125E-14, 4.87441907741887E-16, -8.235295164655431E-14, -9.941581886251905E-16, -8.294446454898569E-14, 1.9480603736822196E-15, -8.501839023241453E-14, -5.310030311776617E-16, -8.374667298721854E-14, 7.59074855465484E-16, -8.418753933733024E-14, -8.693816328054022E-16, -8.474814391472502E-14, 8.423769430953034E-15, -8.806366513598762E-14, -8.366084294896807E-16, -8.852809898786016E-14, 3.2244108644040043E-15, -8.867553881691627E-14, 5.824042532001562E-16, -8.933834771918426E-14, 1.4605451433207436E-15, -9.076882825739577E-14, 3.4068188189599056E-16, -8.932636048937142E-14, 5.270991694753235E-15, -9.168880382469967E-14, 8.391378114980457E-16, -9.237850885126046E-14, 1.995328632382563E-14, -9.935308890433874E-14, -5.625969727645081E-16, -1.0012261658541016E-13, -8.252744604018601E-16, -1.0072246757987677E-13, -1.2340388104996277E-15, -9.869344657247581E-14, 1.3162966429545041E-15, -1.000100619513302E-13, 3.1635307462879415E-16, -1.0167466336530468E-13, 3.040007966764001E-15, -1.0071342702258787E-13, 9.726322939957266E-16, -1.0027780168872558E-13, 5.35509803999686E-15, -1.0223263844266632E-13, 6.181287961287723E-16, -1.0257744537110134E-13, 3.4526415526444804E-15, -1.0281436089737372E-13, -6.226777656874367E-16, -1.0241615200219036E-13, -8.156909240220054E-16, -1.0408680478885752E-13, 9.563682595488632E-16, -1.049019554329817E-13, 1.1826055856738141E-14, -1.0873581046279697E-13, 1.5412565104188855E-15, -1.0878778437731469E-13, 1.887962342573448E-14, -1.1475903162188469E-13, 2.9356186364786454E-16, -1.1344365476822158E-13, 1.5664835010714476E-15, -1.1188340460555079E-13, -2.1087304383749942E-16, -1.1194177746932649E-13, 3.587004448285214E-15, -1.1258960879577769E-13, -3.507839355959407E-16, -1.1379506752256786E-13, 1.3614679365765256E-14, -1.1375874611870766E-13, 3.20330002117821E-16, -1.1296240380888764E-13, 1.8096002684688986E-14, -1.174957873045026E-13, 5.396143300656566E-16, -1.1717806239498962E-13, 1.1249744979598324E-14, -1.1243030011023193E-13, 7.145727778794707E-16, -1.137769710295838E-13, 1.1202220062809907E-14, -1.170863706049527E-13, -9.576607287898287E-17, -1.1614320616359914E-13, -2.1316282072803006E-13, -1.133815263898436E-14], [0.0, 7.449936642440768E-15, 128.0000000000001, -4.540472023510922E-15, 6.667880352787664E-15, 1.8438524836237767E-15, 1.7531343570967798E-15, -9.145350762475177E-15, 1.7138495540051175E-15, -9.220104545669683E-15, 1.5153560308216611E-15, 6.88388850457667E-15, 2.0158884557533456E-15, 8.568647458623135E-15, 6.338862136235623E-15, -8.382650369394118E-15, -2.850180050771859E-16, -8.437260701884164E-15, 7.131968940643672E-16, 1.0587476530138518E-14, 5.867495523103412E-16, 1.0250397361277046E-14, -3.6558182316366E-16, 6.0162577307906746E-15, 1.0950607297416054E-15, 5.7383844424462395E-15, -1.889349327144364E-15, 1.001622199426659E-14, -1.116478386680054E-15, 1.0555511986427676E-14, 5.302239200778392E-15, -1.4212375114395495E-16, 4.4030993557604375E-16, 2.1763286646882605E-16, 5.541605117416181E-16, 1.5230112182622474E-14, 1.1236798984069147E-15, 1.4225558080063037E-14, 5.043954810093914E-16, 1.2924221936711956E-14, 3.309438190284702E-16, 1.1822332110508443E-14, 2.4519925937110058E-15, 1.4379028032869318E-14, -1.3114227930450467E-15, 1.9545324650300888E-14, -5.328748804035532E-15, 1.4540645618393186E-14, -3.06644464881836E-15, 1.3737451583954621E-14, -1.0686076142566639E-14, 2.0418796554965116E-14, -3.0410033301002367E-15, 1.6831479649961617E-14, 1.2135501588023202E-15, 1.2438135055892892E-14, 5.328661482844868E-16, 1.4997750408086216E-14, -2.0396096348624977E-15, 1.5570368457055738E-14, 9.628795681544044E-16, 1.435994387402837E-14, 4.9988593159415105E-15, 6.492132708502867E-15, -4.728685859206196E-17, 6.657451527496212E-15, -9.627824112530213E-15, 3.375964576171241E-14, 2.77059484475719E-16, 3.207419519318561E-14, 4.749028917953078E-16, 3.129980570261842E-14, -9.881560941030734E-18, 3.2962624066926385E-14, -4.155906310213971E-15, 3.433067677910668E-14, 6.349184958539046E-16, 3.5282994669593845E-14, 1.528942390728421E-15, 3.466357920549157E-14, 6.143891974000393E-16, 3.213302274483573E-14, -4.752226489489595E-16, 3.606900859128424E-14, -1.2599306757375806E-15, 3.657137101752569E-14, 9.358320410110113E-17, 3.3259854105845673E-14, -7.307027703643225E-16, 3.6447665347648877E-14, -9.091072815276524E-17, 3.733246152310286E-14, 4.052389775017493E-15, 3.325278167506465E-14, -3.0458754499120173E-15, 3.08662157812465E-14, 6.313625739601727E-15, 3.01357902612169E-14, -5.882562578283385E-15, 3.317154856987372E-14, 4.411296616100246E-15, 3.732481186367473E-14, 7.880582404145803E-16, 3.4996510478886595E-14, 1.178095429255649E-15, 3.207358275840602E-14, 8.906780306235234E-16, 3.8019612960787534E-14, 1.4021156305138594E-16, 3.861731041097214E-14, 9.91297959794737E-16, 3.695299832167244E-14, -5.029600016574064E-17, 3.784895844972221E-14, -2.4916562941154907E-15, 4.165829683966187E-14, 7.306048983104242E-16, 4.239654974716291E-14, -1.195979230399242E-15, 4.308303538795885E-14, 1.281668862132835E-15, 4.200126296363461E-14, -1.1704038440144391E-15, 4.484892730549926E-14, -3.757237516480053E-16, 4.466092338633285E-14, 3.966258559567994E-16, 4.076427292368072E-14, -6.245004513516515E-17, 4.238310327648382E-14, -2.802508357444722E-14, 7.114874949073946E-14, 1.0186516370371913E-15, 7.109636619226358E-14, 9.90902512295974E-16, 7.148392333986162E-14, 1.5085520398328621E-15, 6.980816642368142E-14, -2.4608173836637186E-15, 7.283006369071517E-14, -1.5965394036615149E-15, 7.459408510874507E-14, -1.6375026247741627E-15, 7.234659084055068E-14, -3.4646527052106814E-15, 7.151596320912215E-14, -3.2924992204720274E-15, 7.083867664255422E-14, -9.853851320273549E-16, 6.964985269583971E-14, 1.1064818877412659E-15, 6.706018237723925E-14, -3.062364465173989E-16, 6.828358455028099E-14, -2.0968530201376925E-15, 6.824716849915741E-14, -1.3847065478668051E-16, 6.76634375649282E-14, 3.1799450498556105E-15, 6.94274704024881E-14, 4.94280819090757E-16, 6.934069232013326E-14, -8.511237660978465E-15, 7.919482346920208E-14, 1.2871509299809934E-16, 7.822685510000804E-14, 2.6440522009239467E-15, 7.673337065827765E-14, 6.066562366872666E-16, 7.836779126648704E-14, -1.1343159171591914E-15, 8.042139434926654E-14, 1.4061658481939042E-15, 7.90915327995253E-14, -9.125955862354925E-16, 8.001816461901337E-14, 1.3301390179467336E-15, 8.060155112871155E-14, -5.136338491155194E-15, 8.042062212259964E-14, 7.898257062192427E-16, 8.128230303023968E-14, -2.0728288626054636E-15, 8.272355919984714E-14, -5.247322044046027E-16, 8.242275971193277E-14, -5.888465461238529E-16, 8.438963956355989E-14, -7.837989236541828E-16, 8.277602534938361E-14, -5.242554384806085E-15, 9.056729931528631E-14, -1.7681325467610568E-15, 9.028121655240807E-14, -2.6143007744339386E-14, 9.522998262701917E-14, 9.933677834729187E-17, 9.636812478231775E-14, -7.731602840531554E-16, 9.740808790641278E-14, 1.058198436949866E-15, 9.680908775868773E-14, -2.7229221250613798E-15, 9.684099988873217E-14, -7.892500750177734E-16, 9.806291067040449E-14, -7.399959140259068E-16, 9.779549684069572E-14, -9.868833060424215E-17, 9.726632298020162E-14, -5.3629788607826514E-15, 9.978041316049676E-14, -5.787587507434905E-16, 9.996327745873021E-14, -2.3936152163449997E-15, 9.919583567409695E-14, -9.683703166364607E-17, 9.957043833087081E-14, -2.156401230084676E-15, 1.034086345848523E-13, -2.008975273179766E-15, 1.0470676862169472E-13, -9.431613090357728E-15, 1.0547737718121152E-13, -1.8263213061344284E-15, 1.0536022937082584E-13, -1.5024660313719035E-14, 1.1642913026166363E-13, -3.4375014977777383E-16, 1.146110260104461E-13, -1.3834675630923227E-15, 1.1602110567302257E-13, -7.459497116217914E-16, 1.161770131985954E-13, -3.5927342387847585E-15, 1.1787073916459973E-13, 8.274047529228894E-16, 1.1988016882740882E-13, -1.3328798658530906E-14, 1.211940748690347E-13, 3.289886269455507E-16, 1.1931689807182858E-13, -1.4778673767270638E-14, 1.2293454639011008E-13, -1.54529514008891E-16, 1.226392002712133E-13, -1.2143950206764633E-14, 1.1809838210254404E-13, -9.39693562213306E-16, 1.192534475322801E-13, -1.2834760674798723E-14, 1.252005474694595E-13, 4.458159097225045E-16, 1.237858814623163E-13, 2.2737367544323206E-13, 2.6308299900227568E-14] }
size(return[]) == 256
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform2(double[]):::ENTER
this has only one value
f[] one of { [0.0, 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0], [0.0, 20.1093579685034, -9.65685424949238, 5.98642305066196, -4.0, 2.6727145516772, -1.65685424949238, 0.795649469518633] }
size(f[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformer.transform2(double[]):::EXIT
f[] == orig(f[])
f[] one of { [0.0, 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0], [0.0, 20.1093579685034, -9.65685424949238, 5.98642305066196, -4.0, 2.6727145516772, -1.65685424949238, 0.795649469518633] }
return[] one of { [0.0, 2.000000000000006, 4.000000000000002, 6.0000000000000036, 8.000000000000004, 10.000000000000004, 12.000000000000002, 14.000000000000007], [0.0, 20.109357968503392, -9.65685424949238, 5.986423050661955, -4.0, 2.6727145516771946, -1.6568542494923815, 0.7956494695186294] }
size(return[]) == 8
===========================================================================
org.apache.commons.math.transform.FastSineTransformerTest:::OBJECT
===========================================================================
org.apache.commons.math.transform.FastSineTransformerTest.FastSineTransformerTest():::EXIT
===========================================================================
org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.transform.FastSineTransformerTest.testAdHocData():::EXIT
===========================================================================
org.apache.commons.math.transform.FastSineTransformerTest.testSinFunction():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.transform.FastSineTransformerTest.testSinFunction():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.cosQ(double, double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.cosQ(double, double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.doubleHighPart(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.doubleHighPart(double):::EXIT293
===========================================================================
org.apache.commons.math.util.FastMath.doubleHighPart(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.log(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.log(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::ENTER
hiPrec == null
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT1357
return == 0.0
orig(x) == 1.0
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT1484
return one of { -2.3055090312434685, 0.31799438335999836, 2.305509031243477 }
orig(x) one of { 0.09970803322947372, 1.3743685418725535, 10.029282171262487 }
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.polyCosine(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.polyCosine(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.polySine(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.polySine(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a != null
a[] sorted by >
b != null
b[] sorted by >
result != null
size(a[]) == 2
size(b[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
a != null
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.sinQ(double, double):::ENTER
xb == 0.0
===========================================================================
org.apache.commons.math.util.FastMath.sinQ(double, double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] sorted by >
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return != null
return[] sorted by >=
size(return[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] sorted by >=
result[] <= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
split != null
size(split[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
a != null
b != null
b[] elements <= 2.0
ans != null
ans[] sorted by >=
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
a != null
b != null
ans != null
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
in != null
result != null
result[] elements <= 1.0
size(in[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::ENTER
a >= 0.25
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::EXIT
return >= 0.5
===========================================================================
org.apache.commons.math.util.Incrementor:::OBJECT
this.maximalCount one of { 0, 100 }
this.count >= 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::ENTER
this.maximalCount == 100
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maximalCount == 100
this.count >= 1
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::ENTER
this.maximalCount == 100
this.count one of { 0, 2, 6 }
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::ENTER
this.count one of { 0, 2, 6 }
max == 100
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maximalCount == 100
this.count one of { 0, 2, 6 }
===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math.util.MathUtils.indicator(double):::ENTER
x == -Infinity
===========================================================================
org.apache.commons.math.util.MathUtils.indicator(double):::EXIT1054
===========================================================================
org.apache.commons.math.util.MathUtils.indicator(double):::EXIT
return == -1.0
