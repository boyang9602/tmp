===========================================================================
org.apache.commons.math3.analysis.FunctionUtils$14$1:::OBJECT
this has only one value
org.apache.commons.math3.analysis.FunctionUtils$14.this has only one value
org.apache.commons.math3.analysis.FunctionUtils$14.this.val$f has only one value
org.apache.commons.math3.analysis.FunctionUtils$14.this.val$f.getClass().getName() == org.apache.commons.math3.analysis.function.Sinc.class
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils$14$1.(org.apache.commons.math3.analysis.FunctionUtils$14):::ENTER
org.apache.commons.math3.analysis.FunctionUtils$14.this has only one value
org.apache.commons.math3.analysis.FunctionUtils$14.this.val$f has only one value
org.apache.commons.math3.analysis.FunctionUtils$14.this.val$f.getClass().getName() == org.apache.commons.math3.analysis.function.Sinc.class
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils$14$1.(org.apache.commons.math3.analysis.FunctionUtils$14):::EXIT
org.apache.commons.math3.analysis.FunctionUtils$14.this == orig(org.apache.commons.math3.analysis.FunctionUtils$14.this)
org.apache.commons.math3.analysis.FunctionUtils$14.this.val$f == orig(org.apache.commons.math3.analysis.FunctionUtils$14.this.val$f)
org.apache.commons.math3.analysis.FunctionUtils$14.this.val$f.getClass().getName() == orig(org.apache.commons.math3.analysis.FunctionUtils$14.this.val$f.getClass().getName())
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils$14:::OBJECT
this has only one value
this.val$f has only one value
this.val$f.getClass().getName() == org.apache.commons.math3.analysis.function.Sinc.class
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils$14.(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.apache.commons.math3.analysis.function.Sinc.class
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils$14.(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable):::EXIT
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils$14.derivative():::ENTER
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils$14.derivative():::EXIT
this.val$f == orig(this.val$f)
this.val$f.getClass().getName() == orig(this.val$f.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math3.analysis.FunctionUtils$14$1.class
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable):::ENTER
f has only one value
f.getClass().getName() == org.apache.commons.math3.analysis.function.Sinc.class
===========================================================================
org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math3.analysis.FunctionUtils$14.class
===========================================================================
org.apache.commons.math3.analysis.QuinticFunction:::OBJECT
===========================================================================
org.apache.commons.math3.analysis.QuinticFunction.QuinticFunction():::EXIT
===========================================================================
org.apache.commons.math3.analysis.QuinticFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math3.analysis.QuinticFunction.value(double):::EXIT
===========================================================================
org.apache.commons.math3.analysis.SumSincFunction:::CLASS
org.apache.commons.math3.analysis.SumSincFunction.sinc has only one value
org.apache.commons.math3.analysis.SumSincFunction.sinc.getClass().getName() == org.apache.commons.math3.analysis.function.Sinc.class
org.apache.commons.math3.analysis.SumSincFunction.sincDeriv has only one value
org.apache.commons.math3.analysis.SumSincFunction.sincDeriv.getClass().getName() == org.apache.commons.math3.analysis.FunctionUtils$14$1.class
===========================================================================
org.apache.commons.math3.analysis.SumSincFunction:::OBJECT
this has only one value
this.factor == -1.0
===========================================================================
org.apache.commons.math3.analysis.SumSincFunction.SumSincFunction(double):::ENTER
factor == -1.0
===========================================================================
org.apache.commons.math3.analysis.SumSincFunction.SumSincFunction(double):::EXIT
===========================================================================
org.apache.commons.math3.analysis.SumSincFunction.value(double[]):::ENTER
size(point[]) == 2
===========================================================================
org.apache.commons.math3.analysis.SumSincFunction.value(double[]):::EXIT
org.apache.commons.math3.analysis.SumSincFunction.sinc == orig(org.apache.commons.math3.analysis.SumSincFunction.sinc)
org.apache.commons.math3.analysis.SumSincFunction.sinc.getClass().getName() == orig(org.apache.commons.math3.analysis.SumSincFunction.sinc.getClass().getName())
org.apache.commons.math3.analysis.SumSincFunction.sincDeriv == orig(org.apache.commons.math3.analysis.SumSincFunction.sincDeriv)
org.apache.commons.math3.analysis.SumSincFunction.sincDeriv.getClass().getName() == orig(org.apache.commons.math3.analysis.SumSincFunction.sincDeriv.getClass().getName())
this.factor == orig(this.factor)
point[] == orig(point[])
===========================================================================
org.apache.commons.math3.analysis.function.Sin:::OBJECT
===========================================================================
org.apache.commons.math3.analysis.function.Sin.Sin():::EXIT
===========================================================================
org.apache.commons.math3.analysis.function.Sin.value(double):::ENTER
===========================================================================
org.apache.commons.math3.analysis.function.Sin.value(double):::EXIT
===========================================================================
org.apache.commons.math3.analysis.function.Sinc:::CLASS
===========================================================================
org.apache.commons.math3.analysis.function.Sinc:::OBJECT
this has only one value
this.normalized == false
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.Sinc():::EXIT
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.Sinc(boolean):::ENTER
normalized == false
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.Sinc(boolean):::EXIT
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.derivative():::ENTER
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.derivative():::EXIT
this.normalized == orig(this.normalized)
return has only one value
return.getClass().getName() == org.apache.commons.math3.analysis.FunctionUtils$14$1.class
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.value(double):::ENTER
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.value(double):::EXIT90
return == 1.0
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.value(double):::EXIT93
===========================================================================
org.apache.commons.math3.analysis.function.Sinc.value(double):::EXIT
this.normalized == orig(this.normalized)
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException:::CLASS
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException:::OBJECT
this.context.msgPatterns[] elements != null
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
this.context.msgPatterns[].getClass().getName() one of { [org.apache.commons.math3.exception.util.LocalizedFormats], [org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats] }
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[] elements != null
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) one of { 1, 2 }
size(this.context.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException():::EXIT
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math3.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math3.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math3.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
args[] == []
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.getContext():::ENTER
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.getContext():::EXIT
this.context == orig(this.context)
this.context.throwable == orig(this.context.throwable)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
return.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
return.msgPatterns[].getClass().getName() one of { [org.apache.commons.math3.exception.util.LocalizedFormats], [org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats] }
return.msgPatterns.getClass().getName() == java.util.ArrayList.class
return.msgArguments[].getClass().getName() elements == java.lang.Object[].class
return.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
return.msgArguments.getClass().getName() == java.util.ArrayList.class
return.context.getClass().getName() == java.util.HashMap.class
size(return.msgPatterns[]) one of { 1, 2 }
size(return.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException:::CLASS
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException:::OBJECT
this.max.getClass().getName() == java.lang.Integer.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 2
this.context.msgPatterns[] elements != null
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[] elements != null
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 2
size(this.context.msgArguments[]) == 2
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::ENTER
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
specific has only one value
specific.getClass().getName() == org.apache.commons.math3.exception.util.LocalizedFormats.class
max.getClass().getName() == java.lang.Integer.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] == []
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.getMax():::ENTER
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.getMax():::EXIT
this.max == orig(this.max)
this.max.getClass().getName() == orig(this.max.getClass().getName())
this.context == orig(this.context)
this.context.throwable == orig(this.context.throwable)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.exception.TooManyEvaluationsException:::CLASS
===========================================================================
org.apache.commons.math3.exception.TooManyEvaluationsException:::OBJECT
this.max.getClass().getName() == java.lang.Integer.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 3
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 3
size(this.context.msgArguments[]) == 3
===========================================================================
org.apache.commons.math3.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::ENTER
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math3.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
array[] elements != null
size(array[]) one of { 0, 2 }
size(array[])-1 != 0
===========================================================================
org.apache.commons.math3.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
array[] elements != null
return.getClass().getName() == java.lang.Object[].class
return[] elements != null
size(array[])-1 != 0
size(return[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext:::CLASS
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext:::OBJECT
this.msgPatterns[] elements != null
this.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
this.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.msgArguments[] elements != null
this.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext.ExceptionContext(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext.ExceptionContext(java.lang.Throwable):::EXIT
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext.addMessage(org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern.getClass().getName() == org.apache.commons.math3.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
size(this.msgPatterns[]) one of { 0, 1, 2 }
size(this.msgArguments[]) one of { 0, 1, 2 }
size(arguments[]) one of { 0, 2 }
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext.addMessage(org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::EXIT
this.throwable == orig(this.throwable)
this.msgPatterns == orig(this.msgPatterns)
this.msgPatterns.getClass().getName() == orig(this.msgPatterns.getClass().getName())
this.msgArguments == orig(this.msgArguments)
this.msgArguments.getClass().getName() == orig(this.msgArguments.getClass().getName())
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
arguments[] == orig(arguments[])
size(this.msgPatterns[])-1 == orig(size(this.msgPatterns[]))
size(this.msgArguments[])-1 == orig(size(this.msgArguments[]))
size(this.msgPatterns[]) one of { 1, 2, 3 }
size(this.msgArguments[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math3.exception.util.LocalizedFormats:::OBJECT
===========================================================================
org.apache.commons.math3.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
org.apache.commons.math3.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math3.optimization.AbstractConvergenceChecker:::CLASS
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD == 1.1102230246251565E-14
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math3.optimization.AbstractConvergenceChecker:::OBJECT
this.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
this.relativeThreshold one of { 1.0E-5, 3.1622776601683795E-5 }
this.absoluteThreshold one of { 1.0E-50, 1.0E-14, 1.4901161193847656E-8 }
===========================================================================
org.apache.commons.math3.optimization.AbstractConvergenceChecker.AbstractConvergenceChecker(double, double):::ENTER
relativeThreshold one of { 1.0E-5, 3.1622776601683795E-5 }
absoluteThreshold one of { 1.0E-50, 1.0E-14, 1.4901161193847656E-8 }
===========================================================================
org.apache.commons.math3.optimization.AbstractConvergenceChecker.AbstractConvergenceChecker(double, double):::EXIT
===========================================================================
org.apache.commons.math3.optimization.AbstractConvergenceChecker.getAbsoluteThreshold():::ENTER
===========================================================================
org.apache.commons.math3.optimization.AbstractConvergenceChecker.getAbsoluteThreshold():::EXIT
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD == orig(org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD)
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD == orig(org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD)
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
return one of { 1.0E-50, 1.0E-14, 1.4901161193847656E-8 }
===========================================================================
org.apache.commons.math3.optimization.AbstractConvergenceChecker.getRelativeThreshold():::ENTER
===========================================================================
org.apache.commons.math3.optimization.AbstractConvergenceChecker.getRelativeThreshold():::EXIT
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD == orig(org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD)
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD == orig(org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD)
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
return one of { 1.0E-5, 3.1622776601683795E-5 }
===========================================================================
org.apache.commons.math3.optimization.GoalType:::OBJECT
===========================================================================
org.apache.commons.math3.optimization.GoalType.GoalType(java.lang.String, int):::ENTER
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
$hidden$2 one of { 0, 1 }
===========================================================================
org.apache.commons.math3.optimization.GoalType.GoalType(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
===========================================================================
org.apache.commons.math3.optimization.PointValuePair:::CLASS
===========================================================================
org.apache.commons.math3.optimization.PointValuePair:::OBJECT
this.key.getClass().getName() == double[].class
this.value.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.PointValuePair(double[], double):::ENTER
point[] sorted by >=
size(point[]) == 2
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.PointValuePair(double[], double):::EXIT
point[] == orig(point[])
point[] sorted by >=
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.PointValuePair(double[], double, boolean):::ENTER
point[] sorted by >=
copyArray == true
size(point[]) == 2
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.PointValuePair(double[], double, boolean):::EXIT
point[] == orig(point[])
point[] sorted by >=
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.getPoint():::ENTER
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.getPoint():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
return[] sorted by >=
size(return[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:::OBJECT
this.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizer.class
this.evaluations.maximalCount one of { 0, 1000 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.checker == null
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
this.start[] sorted by ==
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
size(this.start[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.BaseAbstractMultivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker):::ENTER
checker == null
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.BaseAbstractMultivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.goal == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.computeObjectiveValue(double[]):::ENTER
this.evaluations.maximalCount == 1000
size(point[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.computeObjectiveValue(double[]):::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.checker == orig(this.checker)
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
point[] == orig(point[])
this.evaluations.maximalCount == 1000
this.evaluations.count >= 1
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.getConvergenceChecker():::ENTER
this.evaluations.maximalCount == 1000
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.getConvergenceChecker():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.checker == orig(this.checker)
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 1000
this.evaluations.count == 0
return == null
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.getEvaluations():::ENTER
this has only one value
this.evaluations has only one value
this.evaluations.maximalCount == 1000
this.evaluations.count == 64
this.evaluations.maxCountCallback has only one value
this.goal has only one value
this.start[] == [-19.0, -19.0]
this.start[] elements == -19.0
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.getEvaluations():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.checker == orig(this.checker)
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations has only one value
this.evaluations.maximalCount == 1000
this.evaluations.count == 64
this.evaluations.maxCountCallback has only one value
this.goal has only one value
this.start[] == [-19.0, -19.0]
this.start[] elements == -19.0
return == 64
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.getGoalType():::ENTER
this.evaluations.maximalCount == 1000
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.getGoalType():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.checker == orig(this.checker)
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 1000
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.getStartPoint():::ENTER
this.evaluations.maximalCount == 1000
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.getStartPoint():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.checker == orig(this.checker)
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 1000
this.evaluations.count == 0
return[] sorted by ==
size(return[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, double[]):::ENTER
this.evaluations.count one of { 0, 64 }
this.start[] == [-19.0, -19.0]
this.start[] elements == -19.0
this.function.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizerTest$3.class
maxEval == 1000
startPoint[] sorted by ==
size(startPoint[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, double[]):::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.checker == orig(this.checker)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
startPoint[] == orig(startPoint[])
this.evaluations.maximalCount == 1000
startPoint[] sorted by ==
return.key.getClass().getName() == double[].class
return.value.getClass().getName() == java.lang.Double.class
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
orig(this.evaluations.count) % this.evaluations.count == 0
this.evaluations.count >= orig(this.evaluations.count)
this.start[] == orig(this.start[]) (elementwise)
this.start[] is the reverse of orig(this.start[])
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1:::OBJECT
this.val$n == 2
this.val$d[] elements <= 1.0
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.growLimit == 100.0
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold one of { 1.0E-10, 1.0E-9 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold one of { 1.0E-100, 2.220446049250313E-16 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] sorted by ==
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == 0.3819660112501051
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.relativeThreshold == 1.0E-15
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.absoluteThreshold == 4.9E-324
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maximalCount one of { 0, 2147483647 }
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.count >= 0
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.class
size(this.val$p[]) == 2
size(this.val$d[]) == 2
size(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[]) == 2
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch, int, double[], double[]):::ENTER
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.growLimit == 100.0
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold one of { 1.0E-10, 1.0E-9 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold one of { 1.0E-100, 2.220446049250313E-16 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] sorted by ==
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == 0.3819660112501051
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.relativeThreshold == 1.0E-15
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.absoluteThreshold == 4.9E-324
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maximalCount one of { 0, 2147483647 }
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.count >= 0
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.class
$hidden$2 == 2
size(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[]) == 2
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
size($hidden$3[]) == 2
size($hidden$4[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch, int, double[], double[]):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.growLimit == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.growLimit)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.lo == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.lo)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.hi == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.hi)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.mid == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.mid)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fLo == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fLo)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fHi == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fHi)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fMid == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fMid)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this)
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[])
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName())
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maximalCount == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maximalCount)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.count == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.count)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.goal == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchMin == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchMin)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchMax == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchMax)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchStart == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchStart)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function.getClass().getName())
$hidden$3[] == orig($hidden$3[])
$hidden$4[] == orig($hidden$4[])
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.value(double):::ENTER
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.value(double):::EXIT
this.val$n == orig(this.val$n)
this.val$p == orig(this.val$p)
this.val$p[] == orig(this.val$p[])
this.val$d == orig(this.val$d)
this.val$d[] == orig(this.val$d[])
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.growLimit == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.growLimit)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.lo == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.lo)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.hi == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.hi)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.mid == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.mid)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fLo == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fLo)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fHi == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fHi)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fMid == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.bracket.fMid)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this)
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[])
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName())
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.checker.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maximalCount == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maximalCount)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.count == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.count)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.goal == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchMin == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchMin)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchMax == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchMax)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchStart == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.searchStart)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function)
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.this.function.getClass().getName())
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch:::CLASS
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch:::OBJECT
this.bracket.growLimit == 100.0
this.bracket.evaluations.maximalCount == 50
this.bracket.evaluations.count one of { 0, 3, 5 }
this.bracket.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold one of { 1.0E-10, 1.0E-9 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold one of { 1.0E-100, 2.220446049250313E-16 }
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == 0.3819660112501051
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.relativeThreshold == 1.0E-15
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.absoluteThreshold == 4.9E-324
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.function.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.class
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount one of { 0, 1000 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.count >= 0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == null
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] sorted by ==
this.relativeThreshold == 1.0E-15
this.absoluteThreshold == 4.9E-324
this.checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
this.evaluations.maximalCount one of { 0, 2147483647 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.function.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.class
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
size(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.LineSearch(org.apache.commons.math3.optimization.direct.PowellOptimizer, double, double):::ENTER
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold one of { 1.0E-10, 1.0E-9 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold one of { 1.0E-100, 2.220446049250313E-16 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line == null
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == 0.3819660112501051
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount == 0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.count == 0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == null
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == null
rel one of { 1.0E-5, 3.1622776601683795E-5 }
abs one of { 1.0E-50, 1.4901161193847656E-8 }
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.LineSearch(org.apache.commons.math3.optimization.direct.PowellOptimizer, double, double):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizer.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this)
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.count == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.count)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function)
this.bracket.evaluations.count == 0
this.bracket.lo == 0.0
this.bracket.hi == 0.0
this.bracket.mid == 0.0
this.bracket.fLo == 0.0
this.bracket.fHi == 0.0
this.bracket.fMid == 0.0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount == 0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.count == 0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.goal == null
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.search(double[], double[]):::ENTER
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount == 1000
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.count >= 1
size(p[]) == 2
size(d[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch.search(double[], double[]):::EXIT
this.bracket == orig(this.bracket)
this.bracket.growLimit == orig(this.bracket.growLimit)
this.bracket.evaluations == orig(this.bracket.evaluations)
this.bracket.evaluations.maximalCount == orig(this.bracket.evaluations.maximalCount)
this.bracket.evaluations.maxCountCallback == orig(this.bracket.evaluations.maxCountCallback)
this.bracket.evaluations.maxCountCallback.getClass().getName() == orig(this.bracket.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this)
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.bracket == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.bracket)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.checker.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.checker.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.function.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.function.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[])
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName())
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.function.getClass().getName() == orig(this.function.getClass().getName())
p[] == orig(p[])
d[] == orig(d[])
this.bracket.evaluations.count one of { 3, 5 }
this.bracket.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line.searchMin one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.maximalCount == 1000
this.evaluations.maximalCount == 2147483647
this.evaluations.count one of { 2, 5, 7 }
this.searchMin one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.count > orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations.count)
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer:::CLASS
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer:::OBJECT
this.relativeThreshold one of { 1.0E-10, 1.0E-9 }
this.absoluteThreshold one of { 1.0E-100, 2.220446049250313E-16 }
this.line.bracket.growLimit == 100.0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold one of { 1.0E-10, 1.0E-9 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold one of { 1.0E-100, 2.220446049250313E-16 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] sorted by ==
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == 0.3819660112501051
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
this.line.relativeThreshold == 1.0E-15
this.line.absoluteThreshold == 4.9E-324
this.line.checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
this.line.evaluations.maximalCount one of { 0, 2147483647 }
this.line.evaluations.count >= 0
this.line.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
this.line.function.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.class
this.evaluations.maximalCount one of { 0, 1000 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.checker == null
this.start[] sorted by ==
size(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[]) == 2
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
size(this.start[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.PowellOptimizer(double, double):::ENTER
rel one of { 1.0E-10, 1.0E-9 }
abs one of { 1.0E-100, 2.220446049250313E-16 }
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.PowellOptimizer(double, double):::EXIT
this.line.bracket.lo == 0.0
this.line.bracket.hi == 0.0
this.line.bracket.mid == 0.0
this.line.bracket.fLo == 0.0
this.line.bracket.fHi == 0.0
this.line.bracket.fMid == 0.0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == null
this.line.evaluations.maximalCount == 0
this.line.evaluations.count == 0
this.line.goal == null
this.line.searchMin == 0.0
this.line.searchMax == 0.0
this.line.searchStart == 0.0
this.line.function == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.goal == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.PowellOptimizer(double, double, org.apache.commons.math3.optimization.ConvergenceChecker):::ENTER
rel one of { 1.0E-10, 1.0E-9 }
abs one of { 1.0E-100, 2.220446049250313E-16 }
checker == null
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.PowellOptimizer(double, double, org.apache.commons.math3.optimization.ConvergenceChecker):::EXIT
this.line.bracket.lo == 0.0
this.line.bracket.hi == 0.0
this.line.bracket.mid == 0.0
this.line.bracket.fLo == 0.0
this.line.bracket.fHi == 0.0
this.line.bracket.fMid == 0.0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == null
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == null
this.line.evaluations.maximalCount == 0
this.line.evaluations.count == 0
this.line.goal == null
this.line.searchMin == 0.0
this.line.searchMax == 0.0
this.line.searchStart == 0.0
this.line.function == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.goal == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.doOptimize():::ENTER
this.line.bracket.lo one of { -1.618034, 0.0 }
this.line.bracket.hi one of { 0.0, 1.0 }
this.line.bracket.mid == 0.0
this.line.bracket.fLo one of { 0.0, 1.0000052180757504 }
this.line.bracket.fHi one of { 0.0, 1.0000008713578785 }
this.line.bracket.fMid one of { 0.0, 1.0000000094193149 }
this.line.evaluations.count one of { 0, 2 }
this.line.searchMin one of { -1.618034, 0.0 }
this.line.searchMax one of { 0.0, 1.0 }
this.line.searchStart == 0.0
this.evaluations.maximalCount == 1000
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.doOptimize():::EXIT173
this.line.bracket.mid == orig(this.line.bracket.mid)
this.line.searchStart == orig(this.line.searchStart)
this.line.bracket.lo == -1.618034
this.line.bracket.hi == 1.0
this.line.bracket.mid == 0.0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal has only one value
this.line.goal has only one value
this.line.searchMin == -1.618034
this.line.searchMax == 1.0
this.line.searchStart == 0.0
this.evaluations.count one of { 17, 38, 64 }
this.goal has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.doOptimize():::EXIT175
this.relativeThreshold == 1.0E-9
this.absoluteThreshold == 2.220446049250313E-16
this.line.bracket.fLo one of { -301.13274202515595, -1.6180340251559997 }
this.line.bracket.fHi one of { -789.9937987355802, 0.0 }
this.line.bracket.fMid == 1.0
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold == 1.0E-9
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold == 2.220446049250313E-16
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal has only one value
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] elements one of { -19.0, 1.0 }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] one of { [-19.0, -19.0], [1.0, 1.0] }
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function has only one value
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizerTest$2.class
this.line.evaluations.count == 5
this.line.goal has only one value
this.evaluations.count one of { 17, 21 }
this.goal has only one value
this.start[] elements one of { -19.0, 1.0 }
this.start[] one of { [-19.0, -19.0], [1.0, 1.0] }
this.function has only one value
this.function.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizerTest$2.class
orig(this.line.bracket.lo) == 0.0
orig(this.line.bracket.hi) == 0.0
orig(this.line.bracket.fLo) == 0.0
orig(this.line.bracket.fHi) == 0.0
orig(this.line.bracket.fMid) == 0.0
orig(this.line.evaluations.maximalCount) == 0
orig(this.line.evaluations.count) == 0
orig(this.line.goal) == null
orig(this.line.searchMin) == 0.0
orig(this.line.searchMax) == 0.0
orig(this.line.function) == null
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.doOptimize():::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE)
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
this.line == orig(this.line)
this.line.bracket == orig(this.line.bracket)
this.line.bracket.growLimit == orig(this.line.bracket.growLimit)
this.line.bracket.evaluations == orig(this.line.bracket.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[])
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName())
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE)
this.line.relativeThreshold == orig(this.line.relativeThreshold)
this.line.absoluteThreshold == orig(this.line.absoluteThreshold)
this.line.checker == orig(this.line.checker)
this.line.checker.getClass().getName() == orig(this.line.checker.getClass().getName())
this.line.evaluations == orig(this.line.evaluations)
this.line.evaluations.maxCountCallback == orig(this.line.evaluations.maxCountCallback)
this.line.evaluations.maxCountCallback.getClass().getName() == orig(this.line.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.line.function.getClass().getName() == orig(this.line.function.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.checker == orig(this.checker)
this.goal == orig(this.goal)
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.line.bracket.lo one of { -1.618034, 2.6180339999999998 }
this.line.bracket.hi one of { 1.0, 48.12461197484474 }
this.line.bracket.mid one of { 0.0, 20.000000000000284 }
this.line.bracket.fMid one of { -1.9999999999956777, 1.0000000094193149, 1.000000009419315E10 }
this.line.evaluations.maximalCount == 2147483647
this.line.evaluations.count one of { 2, 5 }
this.line.searchMin one of { -1.618034, 2.6180339999999998 }
this.line.searchMax one of { 1.0, 48.12461197484474 }
this.line.searchStart one of { 0.0, 20.000000000000284 }
this.evaluations.maximalCount == 1000
return.key.getClass().getName() == double[].class
return.value.getClass().getName() == java.lang.Double.class
this.line.bracket.hi >= orig(this.line.bracket.hi)
this.line.bracket.mid >= orig(this.line.bracket.mid)
this.line.bracket.fLo != orig(this.line.bracket.fLo)
this.line.bracket.fMid != orig(this.line.bracket.fMid)
this.line.evaluations.maximalCount >= orig(this.line.evaluations.maximalCount)
this.line.evaluations.count >= orig(this.line.evaluations.count)
this.line.searchMax >= orig(this.line.searchMax)
this.line.searchStart >= orig(this.line.searchStart)
this.evaluations.count > orig(this.evaluations.count)
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.newPointAndDirection(double[], double[], double):::ENTER
this.line.bracket.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
this.line.evaluations.maximalCount == 2147483647
this.line.evaluations.count one of { 2, 5, 7 }
this.line.searchMin one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
this.evaluations.maximalCount == 1000
size(p[]) == 2
size(d[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizer.newPointAndDirection(double[], double[], double):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.MIN_RELATIVE_TOLERANCE)
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
this.line == orig(this.line)
this.line.bracket == orig(this.line.bracket)
this.line.bracket.growLimit == orig(this.line.bracket.growLimit)
this.line.bracket.evaluations == orig(this.line.bracket.evaluations)
this.line.bracket.lo == orig(this.line.bracket.lo)
this.line.bracket.hi == orig(this.line.bracket.hi)
this.line.bracket.mid == orig(this.line.bracket.mid)
this.line.bracket.fLo == orig(this.line.bracket.fLo)
this.line.bracket.fHi == orig(this.line.bracket.fHi)
this.line.bracket.fMid == orig(this.line.bracket.fMid)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.relativeThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.absoluteThreshold)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.line)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.evaluations)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.checker)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.goal)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[] == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.start[])
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function)
org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName() == orig(org.apache.commons.math3.optimization.direct.PowellOptimizer.this.function.getClass().getName())
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE)
this.line.relativeThreshold == orig(this.line.relativeThreshold)
this.line.absoluteThreshold == orig(this.line.absoluteThreshold)
this.line.checker == orig(this.line.checker)
this.line.checker.getClass().getName() == orig(this.line.checker.getClass().getName())
this.line.evaluations == orig(this.line.evaluations)
this.line.evaluations.maximalCount == orig(this.line.evaluations.maximalCount)
this.line.evaluations.count == orig(this.line.evaluations.count)
this.line.evaluations.maxCountCallback == orig(this.line.evaluations.maxCountCallback)
this.line.evaluations.maxCountCallback.getClass().getName() == orig(this.line.evaluations.maxCountCallback.getClass().getName())
this.line.goal == orig(this.line.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.line.searchMin == orig(this.line.searchMin)
this.line.searchMax == orig(this.line.searchMax)
this.line.searchStart == orig(this.line.searchStart)
this.line.function == orig(this.line.function)
this.line.function.getClass().getName() == orig(this.line.function.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.checker == orig(this.checker)
this.goal == orig(this.goal)
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
p[] == orig(p[])
d[] == orig(d[])
this.line.bracket.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
this.line.evaluations.maximalCount == 2147483647
this.line.evaluations.count one of { 2, 5, 7 }
this.line.searchMin one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
this.evaluations.maximalCount == 1000
return.getClass().getName() == double[][].class
return[] elements != null
size(return[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$1:::OBJECT
this has only one value
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$1.(org.apache.commons.math3.optimization.direct.PowellOptimizerTest):::ENTER
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$1.(org.apache.commons.math3.optimization.direct.PowellOptimizerTest):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$1.value(double[]):::ENTER
size(x[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$1.value(double[]):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this)
x[] == orig(x[])
return >= 1.0
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$2:::OBJECT
this has only one value
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$2.(org.apache.commons.math3.optimization.direct.PowellOptimizerTest):::ENTER
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$2.(org.apache.commons.math3.optimization.direct.PowellOptimizerTest):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$2.value(double[]):::ENTER
size(x[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$2.value(double[]):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this)
x[] == orig(x[])
return <= 1.0
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$3:::OBJECT
this has only one value
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$3.(org.apache.commons.math3.optimization.direct.PowellOptimizerTest):::ENTER
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$3.(org.apache.commons.math3.optimization.direct.PowellOptimizerTest):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$3.value(double[]):::ENTER
size(x[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$3.value(double[]):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this)
x[] == orig(x[])
return >= 1.0000000094193149
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$4:::OBJECT
this has only one value
this.val$func has only one value
this.val$func.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizerTest$3.class
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$4.(org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.analysis.MultivariateFunction):::ENTER
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizerTest$3.class
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$4.(org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.analysis.MultivariateFunction):::EXIT
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$4.value(double[]):::ENTER
size(x[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest$4.value(double[]):::EXIT
this.val$func == orig(this.val$func)
this.val$func.getClass().getName() == orig(this.val$func.getClass().getName())
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this == orig(org.apache.commons.math3.optimization.direct.PowellOptimizerTest.this)
x[] == orig(x[])
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest:::OBJECT
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.PowellOptimizerTest():::EXIT
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.doTest(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], org.apache.commons.math3.optimization.GoalType, double, double):::ENTER
optimum[] elements one of { 0.0, 1.0 }
optimum[] one of { [0.0, 0.0], [1.0, 1.0] }
optimum[] sorted by ==
init[] sorted by ==
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
fTol == 1.0E-9
pointTol one of { 1.0E-8, 1.0E-7, 1.0E-5 }
size(optimum[]) == 2
size(init[]) == 2
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.doTest(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], org.apache.commons.math3.optimization.GoalType, double, double):::EXIT
optimum[] == orig(optimum[])
init[] == orig(init[])
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
optimum[] elements one of { 0.0, 1.0 }
optimum[] one of { [0.0, 0.0], [1.0, 1.0] }
optimum[] sorted by ==
init[] sorted by ==
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testMaximizeQuadratic():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testMaximizeQuadratic():::EXIT
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testQuadratic():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testQuadratic():::EXIT
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testRelativeToleranceOnScaledValues():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testRelativeToleranceOnScaledValues():::EXIT
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testSumSinc():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testSumSinc():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:::OBJECT
this.checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
this.evaluations.maximalCount >= 0
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.BaseAbstractUnivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker):::ENTER
checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.BaseAbstractUnivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.goal == null
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.computeObjectiveValue(double):::ENTER
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.computeObjectiveValue(double):::EXIT
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count >= 1
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getConvergenceChecker():::ENTER
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getConvergenceChecker():::EXIT
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
return.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getEvaluations():::ENTER
this.getClass().getName() == org.apache.commons.math3.optimization.univariate.BrentOptimizer.class
this.checker == null
this.goal has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getEvaluations():::EXIT
this.checker == orig(this.checker)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.checker == null
this.goal has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getGoalType():::ENTER
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getGoalType():::EXIT
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getMax():::ENTER
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getMax():::EXIT
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getMaxEvaluations():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math3.optimization.univariate.BrentOptimizer.class
this.checker == null
this.evaluations has only one value
this.evaluations.maximalCount == 200
this.evaluations.count == 24
this.evaluations.maxCountCallback has only one value
this.goal has only one value
this.searchMin == 4.0
this.searchMax == 5.0
this.searchStart == 4.5
this.function has only one value
this.function.getClass().getName() == org.apache.commons.math3.analysis.function.Sin.class
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getMaxEvaluations():::EXIT
this.checker == orig(this.checker)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.checker == null
this.evaluations has only one value
this.evaluations.maximalCount == 200
this.evaluations.count == 24
this.evaluations.maxCountCallback has only one value
this.goal has only one value
this.searchMin == 4.0
this.searchMax == 5.0
this.searchStart == 4.5
this.function has only one value
this.function.getClass().getName() == org.apache.commons.math3.analysis.function.Sin.class
return == 200
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getMin():::ENTER
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getMin():::EXIT
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getStartValue():::ENTER
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.getStartValue():::EXIT
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double):::ENTER
this.getClass().getName() == org.apache.commons.math3.optimization.univariate.BrentOptimizer.class
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double):::EXIT
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.function.getClass().getName() == orig(this.function.getClass().getName())
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
this.evaluations.count != orig(this.evaluations.count)
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double, double):::ENTER
===========================================================================
org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double, double):::EXIT
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.function.getClass().getName() == orig(this.function.getClass().getName())
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder:::CLASS
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder:::OBJECT
this.growLimit == 100.0
this.evaluations.maximalCount == 50
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.BracketFinder():::EXIT
this.evaluations.count == 0
this.lo == 0.0
this.hi == 0.0
this.mid == 0.0
this.fLo == 0.0
this.fHi == 0.0
this.fMid == 0.0
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.BracketFinder(double, int):::ENTER
growLimit == 100.0
maxEvaluations == 50
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.BracketFinder(double, int):::EXIT
this.evaluations.count == 0
this.lo == 0.0
this.hi == 0.0
this.mid == 0.0
this.fLo == 0.0
this.fHi == 0.0
this.fMid == 0.0
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.eval(org.apache.commons.math3.analysis.UnivariateFunction, double):::ENTER
f.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.class
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.eval(org.apache.commons.math3.analysis.UnivariateFunction, double):::EXIT
this.growLimit == orig(this.growLimit)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.lo == orig(this.lo)
this.hi == orig(this.hi)
this.mid == orig(this.mid)
this.fLo == orig(this.fLo)
this.fHi == orig(this.fHi)
this.fMid == orig(this.fMid)
this.evaluations.count >= 1
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.getHi():::ENTER
this.evaluations.count one of { 3, 5 }
this.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.getHi():::EXIT
this.growLimit == orig(this.growLimit)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.lo == orig(this.lo)
this.hi == orig(this.hi)
this.mid == orig(this.mid)
this.fLo == orig(this.fLo)
this.fHi == orig(this.fHi)
this.fMid == orig(this.fMid)
this.evaluations.count one of { 3, 5 }
this.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.getLo():::ENTER
this.evaluations.count one of { 3, 5 }
this.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.getLo():::EXIT
this.growLimit == orig(this.growLimit)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.lo == orig(this.lo)
this.hi == orig(this.hi)
this.mid == orig(this.mid)
this.fLo == orig(this.fLo)
this.fHi == orig(this.fHi)
this.fMid == orig(this.fMid)
this.evaluations.count one of { 3, 5 }
this.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
return one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.getMid():::ENTER
this.evaluations.count one of { 3, 5 }
this.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.getMid():::EXIT
this.growLimit == orig(this.growLimit)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.lo == orig(this.lo)
this.hi == orig(this.hi)
this.mid == orig(this.mid)
this.fLo == orig(this.fLo)
this.fHi == orig(this.fHi)
this.fMid == orig(this.fMid)
this.evaluations.count one of { 3, 5 }
this.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.search(org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double):::ENTER
this.evaluations.count one of { 0, 3, 5 }
func.getClass().getName() == org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1.class
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
xA == 0.0
xB == 1.0
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.BracketFinder.search(org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double):::EXIT
this.growLimit == orig(this.growLimit)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.evaluations.count one of { 3, 5 }
this.lo one of { -4.2360680251559995, -1.618034, 2.6180339999999998 }
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer:::CLASS
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == 0.3819660112501051
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == 4.440892098500626E-16
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer:::OBJECT
this.absoluteThreshold one of { 4.9E-324, 1.0E-14, 1.0E-8 }
this.checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
this.evaluations.maximalCount >= 0
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.BrentOptimizer(double, double):::ENTER
abs one of { 1.0E-14, 1.0E-8 }
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.BrentOptimizer(double, double):::EXIT
this.absoluteThreshold one of { 1.0E-14, 1.0E-8 }
this.checker == null
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.goal == null
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.BrentOptimizer(double, double, org.apache.commons.math3.optimization.ConvergenceChecker):::ENTER
abs one of { 4.9E-324, 1.0E-14, 1.0E-8 }
checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.BrentOptimizer(double, double, org.apache.commons.math3.optimization.ConvergenceChecker):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.goal == null
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, boolean):::ENTER
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, boolean):::EXIT294
this.goal has only one value
orig(isMinim) == true
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, boolean):::EXIT296
this.relativeThreshold one of { 1.0E-15, 1.0E-12, 1.0E-10 }
this.absoluteThreshold one of { 4.9E-324, 1.0E-14 }
this.evaluations.maximalCount one of { 100, 2147483647 }
this.evaluations.count one of { 5, 27, 49 }
this.goal has only one value
this.searchMax one of { 0.3, 1.0, 48.12461197484474 }
this.searchStart one of { 0.0, 0.25, 20.000000000000284 }
a.value one of { -399.0, 0.04433426954946637, 1.0 }
b.value one of { -399.0, 0.04433426954946637, 1.0 }
return.value one of { -399.0, 0.04433426954946637, 1.0 }
orig(isMinim) == false
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, boolean):::EXIT
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE)
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
a.point == orig(a.point)
a.value == orig(a.value)
b.point == orig(b.point)
b.value == orig(b.value)
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.doOptimize():::ENTER
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.doOptimize():::EXIT230
this.relativeThreshold one of { 1.0E-15, 1.0E-10 }
this.absoluteThreshold one of { 4.9E-324, 1.0E-14 }
this.evaluations.maximalCount one of { 200, 2147483647 }
this.evaluations.count one of { 2, 5, 7 }
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.doOptimize():::EXIT267
this.absoluteThreshold one of { 1.0E-14, 1.0E-8 }
this.checker == null
this.searchMax >= -0.2
return.value >= -1.0
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizer.doOptimize():::EXIT
org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.GOLDEN_SECTION)
org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizer.MIN_RELATIVE_TOLERANCE)
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
(this.evaluations.count one of { 2, 5, 7 })  ==>  (this.absoluteThreshold one of { 4.9E-324, 1.0E-14 })
(this.evaluations.count one of { 2, 5, 7 })  ==>  (this.checker.getClass().getName() == org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.class)
(this.evaluations.count one of { 2, 5, 7 })  ==>  (this.evaluations.maximalCount one of { 200, 2147483647 })
(this.evaluations.count one of { 2, 5, 7 })  ==>  (this.relativeThreshold one of { 1.0E-15, 1.0E-10 })
orig(this.evaluations.count) % this.evaluations.count == 0
this.evaluations.count > orig(this.evaluations.count)
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$1:::OBJECT
this has only one value
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$1.(org.apache.commons.math3.optimization.univariate.BrentOptimizerTest):::ENTER
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$1.(org.apache.commons.math3.optimization.univariate.BrentOptimizerTest):::EXIT
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$1.value(double):::ENTER
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$1.value(double):::EXIT
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$2:::OBJECT
this has only one value
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$2.(org.apache.commons.math3.optimization.univariate.BrentOptimizerTest):::ENTER
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$2.(org.apache.commons.math3.optimization.univariate.BrentOptimizerTest):::EXIT
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$2.value(double):::ENTER
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest$2.value(double):::EXIT
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this == orig(org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest:::OBJECT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.BrentOptimizerTest():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testBoundaries():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testBoundaries():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath832():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath832():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMinEndpoints():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMinEndpoints():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMax():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMax():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMin():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMin():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testSinMin():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testSinMin():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testSinMinWithValueChecker():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testSinMinWithValueChecker():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker:::CLASS
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD == 1.1102230246251565E-14
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker:::OBJECT
this.relativeThreshold one of { 1.0E-5, 3.1622776601683795E-5 }
this.absoluteThreshold one of { 1.0E-50, 1.0E-14, 1.4901161193847656E-8 }
===========================================================================
org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.SimpleUnivariateValueChecker(double, double):::ENTER
relativeThreshold one of { 1.0E-5, 3.1622776601683795E-5 }
absoluteThreshold one of { 1.0E-50, 1.0E-14, 1.4901161193847656E-8 }
===========================================================================
org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.SimpleUnivariateValueChecker(double, double):::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.converged(int, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair):::ENTER
iteration >= 0
===========================================================================
org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.converged(int, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair):::EXIT
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD == orig(org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD)
org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD == orig(org.apache.commons.math3.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD)
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
previous.point == orig(previous.point)
previous.value == orig(previous.value)
current.point == orig(current.point)
current.value == orig(current.value)
(return == true)  ==>  (orig(iteration) one of { 0, 3, 5 })
===========================================================================
org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.converged(int, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair):::EXIT;condition="return == true"
return == true
orig(iteration) one of { 0, 3, 5 }
===========================================================================
org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.converged(int, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1:::OBJECT
this.val$goal has only one value
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer.getClass().getName() == org.apache.commons.math3.optimization.univariate.BrentOptimizer.class
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.maxEvaluations == 0
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.totalEvaluations one of { 5, 74, 252 }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.starts one of { 5, 10 }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator.getClass().getName() == org.apache.commons.math3.random.JDKRandomGenerator.class
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima.getClass().getName() == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair[].class
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value elements one of { -0.9999999999999999, -0.04433426954946637 }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value sorted by ==
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
size(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[]) one of { 5, 10 }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1.(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer, org.apache.commons.math3.optimization.GoalType):::ENTER
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer.getClass().getName() == org.apache.commons.math3.optimization.univariate.BrentOptimizer.class
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.maxEvaluations == 0
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.totalEvaluations one of { 5, 74, 252 }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.starts one of { 5, 10 }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator.getClass().getName() == org.apache.commons.math3.random.JDKRandomGenerator.class
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima.getClass().getName() == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair[].class
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].point one of { [-32.9867228516541, 54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535], [-0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612935976, -0.27195612888883375] }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value elements one of { -0.9999999999999999, -0.04433426954946637 }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value one of { [-0.9999999999999999, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946638, -0.04433426954946637] }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value sorted by ==
$hidden$2 has only one value
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
size(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[]) one of { 5, 10 }
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1.(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer, org.apache.commons.math3.optimization.GoalType):::EXIT
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer.getClass().getName() == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer.getClass().getName())
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.maxEvaluations == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.maxEvaluations)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.totalEvaluations == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.totalEvaluations)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.starts == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.starts)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator.getClass().getName() == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator.getClass().getName())
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima.getClass().getName() == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima.getClass().getName())
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[] == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[])
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].point == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].point)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].point one of { [-32.9867228516541, 54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535], [-0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612935976, -0.27195612888883375] }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value one of { [-0.9999999999999999, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946638, -0.04433426954946637] }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1.compare(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair):::ENTER
o1.value one of { -1.0, -0.04433426954946637 }
o2.value one of { -0.9999999999999999, -0.04433426954946637 }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1.compare(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair):::EXIT190
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this has only one value
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer has only one value
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.totalEvaluations == 5
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.starts == 5
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator has only one value
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima has only one value
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[] contains only nulls and has only one value, of length 5
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[] elements == null
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].getClass().getName() == [null, null, null, null, null]
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].getClass().getName() elements == null
return == 0
orig(this) has only one value
orig(o1) == null
orig(o2) == null
size(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[]) == 5
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1.compare(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair):::EXIT196
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.totalEvaluations one of { 74, 252 }
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[] elements != null
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].getClass().getName() elements == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].getClass().getName() one of { [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair], [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair] }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1.compare(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair):::EXIT
this.val$goal == orig(this.val$goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer.getClass().getName() == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optimizer.getClass().getName())
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.maxEvaluations == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.maxEvaluations)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.totalEvaluations == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.totalEvaluations)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.starts == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.starts)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator.getClass().getName() == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.generator.getClass().getName())
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima.getClass().getName() == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima.getClass().getName())
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[] == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[])
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].point == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].point)
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.this.optima[].value)
o1.point == orig(o1.point)
o1.value == orig(o1.value)
o2.point == orig(o2.point)
o2.value == orig(o2.value)
o1.value one of { -1.0, -0.04433426954946637 }
o2.value one of { -0.9999999999999999, -0.04433426954946637 }
return one of { -1, 0 }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer:::OBJECT
this.optimizer.getClass().getName() == org.apache.commons.math3.optimization.univariate.BrentOptimizer.class
this.maxEvaluations == 0
this.totalEvaluations >= 0
this.starts one of { 5, 10 }
this.generator.getClass().getName() == org.apache.commons.math3.random.JDKRandomGenerator.class
this.optima.getClass().getName() == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair[].class
this.optima[].value elements one of { -1.0, -0.04433426954946638 }
this.optima[].value sorted by ==
size(this.optima[]) one of { 5, 10 }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.UnivariateMultiStartOptimizer(org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer, int, org.apache.commons.math3.random.RandomGenerator):::ENTER
optimizer.getClass().getName() == org.apache.commons.math3.optimization.univariate.BrentOptimizer.class
starts one of { 5, 10 }
generator.getClass().getName() == org.apache.commons.math3.random.JDKRandomGenerator.class
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.UnivariateMultiStartOptimizer(org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer, int, org.apache.commons.math3.random.RandomGenerator):::EXIT
this.totalEvaluations == 0
this.optima == null
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.getEvaluations():::ENTER
this.totalEvaluations one of { 74, 252 }
this.optima[].getClass().getName() elements == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class
this.optima[].getClass().getName() one of { [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair], [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair] }
this.optima[].point one of { [-0.27195612935976, -0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612888883375], [54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535, -32.9867228516541] }
this.optima[].value one of { [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.9999999999999999], [-0.04433426954946638, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637] }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.getEvaluations():::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.maxEvaluations == orig(this.maxEvaluations)
this.totalEvaluations == orig(this.totalEvaluations)
this.starts == orig(this.starts)
this.generator == orig(this.generator)
this.generator.getClass().getName() == orig(this.generator.getClass().getName())
this.optima == orig(this.optima)
this.optima.getClass().getName() == orig(this.optima.getClass().getName())
this.optima[] == orig(this.optima[])
this.optima[].point == orig(this.optima[].point)
this.optima[].value == orig(this.optima[].value)
this.totalEvaluations one of { 74, 252 }
this.optima[].getClass().getName() elements == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class
this.optima[].getClass().getName() one of { [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair], [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair] }
this.optima[].point one of { [-0.27195612935976, -0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612888883375], [54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535, -32.9867228516541] }
this.optima[].value one of { [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.9999999999999999], [-0.04433426954946638, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637] }
return one of { 74, 252 }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.getOptima():::ENTER
this.totalEvaluations one of { 5, 74, 252 }
this.optima[].point one of { [-0.27195612935976, -0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612888883375], [54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535, -32.9867228516541] }
this.optima[].value one of { [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.9999999999999999], [-0.04433426954946638, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637] }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.getOptima():::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.maxEvaluations == orig(this.maxEvaluations)
this.totalEvaluations == orig(this.totalEvaluations)
this.starts == orig(this.starts)
this.generator == orig(this.generator)
this.generator.getClass().getName() == orig(this.generator.getClass().getName())
this.optima == orig(this.optima)
this.optima.getClass().getName() == orig(this.optima.getClass().getName())
this.optima[] == orig(this.optima[])
this.optima[].point == orig(this.optima[].point)
this.optima[].value == orig(this.optima[].value)
this.totalEvaluations one of { 5, 74, 252 }
this.optima[].point one of { [-0.27195612935976, -0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612888883375], [54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535, -32.9867228516541] }
this.optima[].value one of { [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.9999999999999999], [-0.04433426954946638, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637] }
return.getClass().getName() == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair[].class
return[].point one of { [-0.27195612935976, -0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612888883375], [54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535, -32.9867228516541] }
return[].value elements one of { -1.0, -0.04433426954946638 }
return[].value one of { [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.9999999999999999], [-0.04433426954946638, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637] }
return[].value sorted by ==
size(return[]) one of { 5, 10 }
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double):::ENTER
this.totalEvaluations == 0
this.optima == null
maxEval == 300
goal has only one value
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
min one of { -100.0, -0.3 }
max one of { -0.2, 100.0 }
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.maxEvaluations == orig(this.maxEvaluations)
this.starts == orig(this.starts)
this.generator == orig(this.generator)
this.generator.getClass().getName() == orig(this.generator.getClass().getName())
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.totalEvaluations one of { 74, 252 }
this.optima[].getClass().getName() elements == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class
this.optima[].getClass().getName() one of { [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair], [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair] }
this.optima[].point one of { [-0.27195612935976, -0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612888883375], [54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535, -32.9867228516541] }
this.optima[].value one of { [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.9999999999999999], [-0.04433426954946638, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637] }
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
return.point one of { -0.27195612935976, 54.977871432318764 }
return.value one of { -1.0, -0.04433426954946638 }
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double, double):::ENTER
this.totalEvaluations == 0
this.optima == null
maxEval == 300
goal has only one value
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
min one of { -100.0, -0.3 }
max one of { -0.2, 100.0 }
startValue one of { -0.25, 0.0 }
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double, double):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.maxEvaluations == orig(this.maxEvaluations)
this.starts == orig(this.starts)
this.generator == orig(this.generator)
this.generator.getClass().getName() == orig(this.generator.getClass().getName())
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.totalEvaluations one of { 74, 252 }
this.optima[].getClass().getName() elements == org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class
this.optima[].getClass().getName() one of { [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair], [org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair] }
this.optima[].point one of { [-0.27195612935976, -0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612888883375], [54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535, -32.9867228516541] }
this.optima[].value one of { [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.9999999999999999], [-0.04433426954946638, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637] }
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
return.point one of { -0.27195612935976, 54.977871432318764 }
return.value one of { -1.0, -0.04433426954946638 }
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.sortPairs(org.apache.commons.math3.optimization.GoalType):::ENTER
this.totalEvaluations one of { 5, 74, 252 }
this.optima[].point one of { [-32.9867228516541, 54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535], [-0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612935976, -0.27195612888883375] }
this.optima[].value one of { [-0.9999999999999999, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946638, -0.04433426954946637] }
goal has only one value
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.sortPairs(org.apache.commons.math3.optimization.GoalType):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.maxEvaluations == orig(this.maxEvaluations)
this.totalEvaluations == orig(this.totalEvaluations)
this.starts == orig(this.starts)
this.generator == orig(this.generator)
this.generator.getClass().getName() == orig(this.generator.getClass().getName())
this.optima == orig(this.optima)
this.optima.getClass().getName() == orig(this.optima.getClass().getName())
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
size(this.optima[]) == orig(size(this.optima[]))
this.totalEvaluations one of { 5, 74, 252 }
this.optima[].point one of { [-0.27195612935976, -0.2719561278056452, -0.27195612960057564, -0.27195612622726606, -0.27195612888883375], [54.977871432318764, -64.40264940503282, -26.703537547536786, -20.420352241755285, -58.11946409720817, 10.99557429271387, 23.56194490884686, -20.420352241639648, 42.411500814980535, -32.9867228516541] }
this.optima[].value one of { [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.9999999999999999], [-0.04433426954946638, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637, -0.04433426954946637] }
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
8.607871655095551E15 * this.optima[].value - 8.607871655095552E15 * orig(this.optima[].value) == 0
this.optima[].value == orig(this.optima[].value) (elementwise)
this.optima[].value is the reverse of orig(this.optima[].value)
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest$1:::OBJECT
this has only one value
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest$1.(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest):::ENTER
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest$1.(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest):::EXIT
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.this == orig(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.this)
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest$LocalException:::CLASS
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest$LocalException:::OBJECT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest$LocalException.LocalException():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest:::OBJECT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.UnivariateMultiStartOptimizerTest():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testBadFunction():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testBadFunction():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testQuinticMin():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testQuinticMin():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testSinMin():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testSinMin():::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:::CLASS
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:::OBJECT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.UnivariatePointValuePair(double, double):::ENTER
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.UnivariatePointValuePair(double, double):::EXIT
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.getPoint():::ENTER
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.getPoint():::EXIT
this.point == orig(this.point)
this.value == orig(this.value)
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.getValue():::ENTER
===========================================================================
org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.getValue():::EXIT
this.point == orig(this.point)
this.value == orig(this.value)
===========================================================================
org.apache.commons.math3.random.JDKRandomGenerator:::CLASS
===========================================================================
org.apache.commons.math3.random.JDKRandomGenerator:::OBJECT
===========================================================================
org.apache.commons.math3.random.JDKRandomGenerator.JDKRandomGenerator():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic:::OBJECT
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic:::OBJECT
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.AbstractUnivariateStatistic():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.getDataRef():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math3.stat.descriptive.rank.Percentile.class
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.getDataRef():::EXIT
this.storedData == orig(this.storedData)
return == null
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int):::ENTER
values[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
begin == 0
length == 200
size(values[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int):::EXIT
this.storedData == orig(this.storedData)
values[] == orig(values[])
values[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
return == true
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::ENTER
values[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
begin == 0
length == 200
size(values[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::EXIT184
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::EXIT184;condition="return == true"
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::EXIT
this.storedData == orig(this.storedData)
values[] == orig(values[])
values[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
return == true
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics:::CLASS
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME has only one value
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString == "setQuantile"
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics:::OBJECT
this.windowSize == -1
this.eDA.contractionCriteria == 2.5
this.eDA.expansionFactor == 2.0
this.eDA.expansionMode == 0
this.eDA.initialCapacity == 16
this.eDA.numElements >= 0
this.eDA.startIndex == 0
this.meanImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.moment.Mean.class
this.geometricMeanImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.moment.GeometricMean.class
this.kurtosisImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.moment.Kurtosis.class
this.maxImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.rank.Max.class
this.minImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.rank.Min.class
this.percentileImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.rank.Percentile.class
this.skewnessImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.moment.Skewness.class
this.varianceImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.moment.Variance.class
this.sumsqImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.class
this.sumImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.summary.Sum.class
size(this.eDA.internalArray[]) is a power of 2
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.DescriptiveStatistics():::EXIT
this.eDA.internalArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eDA.internalArray[] elements == 0.0
this.eDA.numElements == 0
size(this.eDA.internalArray[]) == 16
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.addValue(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.addValue(double):::EXIT
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME == orig(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME)
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString == orig(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString)
this.windowSize == orig(this.windowSize)
this.eDA == orig(this.eDA)
this.eDA.contractionCriteria == orig(this.eDA.contractionCriteria)
this.eDA.expansionFactor == orig(this.eDA.expansionFactor)
this.eDA.expansionMode == orig(this.eDA.expansionMode)
this.eDA.initialCapacity == orig(this.eDA.initialCapacity)
this.eDA.startIndex == orig(this.eDA.startIndex)
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.geometricMeanImpl == orig(this.geometricMeanImpl)
this.geometricMeanImpl.getClass().getName() == orig(this.geometricMeanImpl.getClass().getName())
this.kurtosisImpl == orig(this.kurtosisImpl)
this.kurtosisImpl.getClass().getName() == orig(this.kurtosisImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.percentileImpl == orig(this.percentileImpl)
this.percentileImpl.getClass().getName() == orig(this.percentileImpl.getClass().getName())
this.skewnessImpl == orig(this.skewnessImpl)
this.skewnessImpl.getClass().getName() == orig(this.skewnessImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.eDA.numElements - orig(this.eDA.numElements) - 1 == 0
size(this.eDA.internalArray[]) != orig(size(this.eDA.internalArray[]))-1
size(this.eDA.internalArray[])-1 != orig(size(this.eDA.internalArray[]))
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic):::ENTER
this.eDA.internalArray[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eDA.numElements == 200
size(this.eDA.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic):::EXIT
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME == orig(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME)
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString == orig(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString)
this.windowSize == orig(this.windowSize)
this.eDA == orig(this.eDA)
this.eDA.contractionCriteria == orig(this.eDA.contractionCriteria)
this.eDA.expansionFactor == orig(this.eDA.expansionFactor)
this.eDA.expansionMode == orig(this.eDA.expansionMode)
this.eDA.initialCapacity == orig(this.eDA.initialCapacity)
this.eDA.internalArray == orig(this.eDA.internalArray)
this.eDA.internalArray[] == orig(this.eDA.internalArray[])
this.eDA.numElements == orig(this.eDA.numElements)
this.eDA.startIndex == orig(this.eDA.startIndex)
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.geometricMeanImpl == orig(this.geometricMeanImpl)
this.geometricMeanImpl.getClass().getName() == orig(this.geometricMeanImpl.getClass().getName())
this.kurtosisImpl == orig(this.kurtosisImpl)
this.kurtosisImpl.getClass().getName() == orig(this.kurtosisImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.percentileImpl == orig(this.percentileImpl)
this.percentileImpl.getClass().getName() == orig(this.percentileImpl.getClass().getName())
this.skewnessImpl == orig(this.skewnessImpl)
this.skewnessImpl.getClass().getName() == orig(this.skewnessImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.eDA.internalArray[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eDA.numElements == 200
return one of { -0.2719561280931953, 23.0 }
size(this.eDA.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getMean():::ENTER
this has only one value
this.eDA has only one value
this.eDA.internalArray has only one value
this.eDA.internalArray[] == [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eDA.internalArray[] elements one of { -0.2719561297938153, 0.0 }
this.eDA.numElements == 200
this.meanImpl has only one value
this.geometricMeanImpl has only one value
this.kurtosisImpl has only one value
this.maxImpl has only one value
this.minImpl has only one value
this.percentileImpl has only one value
this.skewnessImpl has only one value
this.varianceImpl has only one value
this.sumsqImpl has only one value
this.sumImpl has only one value
size(this.eDA.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getMean():::EXIT
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME == orig(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME)
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString == orig(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString)
this.windowSize == orig(this.windowSize)
this.eDA == orig(this.eDA)
this.eDA.contractionCriteria == orig(this.eDA.contractionCriteria)
this.eDA.expansionFactor == orig(this.eDA.expansionFactor)
this.eDA.expansionMode == orig(this.eDA.expansionMode)
this.eDA.initialCapacity == orig(this.eDA.initialCapacity)
this.eDA.internalArray == orig(this.eDA.internalArray)
this.eDA.internalArray[] == orig(this.eDA.internalArray[])
this.eDA.numElements == orig(this.eDA.numElements)
this.eDA.startIndex == orig(this.eDA.startIndex)
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.geometricMeanImpl == orig(this.geometricMeanImpl)
this.geometricMeanImpl.getClass().getName() == orig(this.geometricMeanImpl.getClass().getName())
this.kurtosisImpl == orig(this.kurtosisImpl)
this.kurtosisImpl.getClass().getName() == orig(this.kurtosisImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.percentileImpl == orig(this.percentileImpl)
this.percentileImpl.getClass().getName() == orig(this.percentileImpl.getClass().getName())
this.skewnessImpl == orig(this.skewnessImpl)
this.skewnessImpl.getClass().getName() == orig(this.skewnessImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.eDA has only one value
this.eDA.internalArray has only one value
this.eDA.internalArray[] == [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eDA.internalArray[] elements one of { -0.2719561297938153, 0.0 }
this.eDA.numElements == 200
this.meanImpl has only one value
this.geometricMeanImpl has only one value
this.kurtosisImpl has only one value
this.maxImpl has only one value
this.minImpl has only one value
this.percentileImpl has only one value
this.skewnessImpl has only one value
this.varianceImpl has only one value
this.sumsqImpl has only one value
this.sumImpl has only one value
return == -0.2719561280931953
size(this.eDA.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getPercentile(double):::ENTER
this has only one value
this.eDA has only one value
this.eDA.internalArray has only one value
this.eDA.internalArray[] == [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eDA.internalArray[] elements >= 0.0
this.eDA.numElements == 200
this.meanImpl has only one value
this.geometricMeanImpl has only one value
this.kurtosisImpl has only one value
this.maxImpl has only one value
this.minImpl has only one value
this.percentileImpl has only one value
this.skewnessImpl has only one value
this.varianceImpl has only one value
this.sumsqImpl has only one value
this.sumImpl has only one value
p == 50.0
size(this.eDA.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.getPercentile(double):::EXIT
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME == orig(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME)
org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString == orig(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.SET_QUANTILE_METHOD_NAME.toString)
this.windowSize == orig(this.windowSize)
this.eDA == orig(this.eDA)
this.eDA.contractionCriteria == orig(this.eDA.contractionCriteria)
this.eDA.expansionFactor == orig(this.eDA.expansionFactor)
this.eDA.expansionMode == orig(this.eDA.expansionMode)
this.eDA.initialCapacity == orig(this.eDA.initialCapacity)
this.eDA.internalArray == orig(this.eDA.internalArray)
this.eDA.internalArray[] == orig(this.eDA.internalArray[])
this.eDA.numElements == orig(this.eDA.numElements)
this.eDA.startIndex == orig(this.eDA.startIndex)
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.geometricMeanImpl == orig(this.geometricMeanImpl)
this.geometricMeanImpl.getClass().getName() == orig(this.geometricMeanImpl.getClass().getName())
this.kurtosisImpl == orig(this.kurtosisImpl)
this.kurtosisImpl.getClass().getName() == orig(this.kurtosisImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.percentileImpl == orig(this.percentileImpl)
this.percentileImpl.getClass().getName() == orig(this.percentileImpl.getClass().getName())
this.skewnessImpl == orig(this.skewnessImpl)
this.skewnessImpl.getClass().getName() == orig(this.skewnessImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.eDA has only one value
this.eDA.internalArray has only one value
this.eDA.internalArray[] == [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eDA.internalArray[] elements >= 0.0
this.eDA.numElements == 200
this.meanImpl has only one value
this.geometricMeanImpl has only one value
this.kurtosisImpl has only one value
this.maxImpl has only one value
this.minImpl has only one value
this.percentileImpl has only one value
this.skewnessImpl has only one value
this.varianceImpl has only one value
this.sumsqImpl has only one value
this.sumImpl has only one value
return == 23.0
size(this.eDA.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FirstMoment:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FirstMoment:::OBJECT
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FirstMoment.FirstMoment():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FourthMoment:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FourthMoment:::OBJECT
this.m4 == Double.NaN
this.m3 == Double.NaN
this.nDevSq == Double.NaN
this.m2 == Double.NaN
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FourthMoment.FourthMoment():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.GeometricMean:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.GeometricMean:::OBJECT
this.sumOfLogs.getClass().getName() == org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.class
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.GeometricMean.GeometricMean():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Kurtosis:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Kurtosis:::OBJECT
this.moment.m4 == Double.NaN
this.moment.m3 == Double.NaN
this.moment.nDevSq == Double.NaN
this.moment.m2 == Double.NaN
this.moment.n == 0
this.moment.m1 == Double.NaN
this.moment.dev == Double.NaN
this.moment.nDev == Double.NaN
this.moment.storedData == null
this.incMoment == true
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Kurtosis.Kurtosis():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean:::OBJECT
this.moment.n == 0
this.moment.m1 == Double.NaN
this.moment.dev == Double.NaN
this.moment.nDev == Double.NaN
this.moment.storedData == null
this.incMoment == true
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean.Mean():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean.evaluate(double[], int, int):::ENTER
this has only one value
this.moment has only one value
values has only one value
values[] == [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
values[] elements one of { -0.2719561297938153, 0.0 }
begin == 0
length == 200
size(values[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean.evaluate(double[], int, int):::EXIT169
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean.evaluate(double[], int, int):::EXIT
this.moment == orig(this.moment)
this.moment.n == orig(this.moment.n)
this.moment.storedData == orig(this.moment.storedData)
this.incMoment == orig(this.incMoment)
this.storedData == orig(this.storedData)
values[] == orig(values[])
this.moment has only one value
values[] == [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
values[] elements one of { -0.2719561297938153, 0.0 }
return == -0.2719561280931953
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.SecondMoment:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.SecondMoment:::OBJECT
this.m2 == Double.NaN
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.SecondMoment.SecondMoment():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Skewness:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Skewness:::OBJECT
this.moment.m3 == Double.NaN
this.moment.nDevSq == Double.NaN
this.moment.m2 == Double.NaN
this.moment.n == 0
this.moment.m1 == Double.NaN
this.moment.dev == Double.NaN
this.moment.nDev == Double.NaN
this.moment.storedData == null
this.incMoment == true
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Skewness.Skewness():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.ThirdMoment:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.ThirdMoment:::OBJECT
this.m3 == Double.NaN
this.nDevSq == Double.NaN
this.m2 == Double.NaN
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.ThirdMoment.ThirdMoment():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance:::OBJECT
this.moment.m2 == Double.NaN
this.moment.n == 0
this.moment.m1 == Double.NaN
this.moment.dev == Double.NaN
this.moment.nDev == Double.NaN
this.moment.storedData == null
this.incMoment == true
this.isBiasCorrected == true
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance.Variance():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max:::OBJECT
this.n == 0
this.value == Double.NaN
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max.Max():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min:::OBJECT
this.n == 0
this.value == Double.NaN
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min.Min():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile:::OBJECT
this.quantile one of { 0.0, 50.0 }
this.cachedPivots == null
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.Percentile():::EXIT
this.quantile == 50.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.Percentile(double):::ENTER
p == 50.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.Percentile(double):::EXIT
this.quantile == 50.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.evaluate(double[], int, int):::ENTER
this has only one value
this.quantile == 50.0
values has only one value
values[] == [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
values[] elements >= 0.0
start == 0
length == 200
size(values[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.evaluate(double[], int, int):::EXIT
this.quantile == orig(this.quantile)
this.cachedPivots == orig(this.cachedPivots)
this.storedData == orig(this.storedData)
values[] == orig(values[])
this.quantile == 50.0
values[] == [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
values[] elements >= 0.0
return == 23.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.evaluate(double[], int, int, double):::ENTER
this has only one value
this.quantile == 50.0
values has only one value
values[] == [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
values[] elements >= 0.0
begin == 0
length == 200
p == 50.0
size(values[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.evaluate(double[], int, int, double):::EXIT295
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.evaluate(double[], int, int, double):::EXIT
this.quantile == orig(this.quantile)
this.cachedPivots == orig(this.cachedPivots)
this.storedData == orig(this.storedData)
values[] == orig(values[])
this.quantile == 50.0
values[] == [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
values[] elements >= 0.0
return == 23.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.insertionSort(double[], int, int):::ENTER
this has only one value
this.quantile == 50.0
work has only one value
work[] one of { [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 22.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 21.0, 22.0, 22.0, 21.0, 21.0, 22.0, 22.0, 22.0, 21.0, 20.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 25.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 23.0, 23.0, 24.0, 25.0, 24.0, 26.0, 24.0, 26.0, 24.0, 24.0, 24.0, 24.0, 24.0, 27.0, 24.0, 26.0, 26.0, 25.0, 24.0, 27.0, 24.0, 25.0, 24.0, 24.0, 23.0, 25.0, 23.0, 25.0, 23.0, 24.0, 25.0, 24.0, 26.0, 25.0, 26.0, 26.0, 24.0, 26.0, 26.0, 27.0, 24.0, 23.0, 25.0, 26.0, 25.0, 23.0, 24.0, 26.0, 26.0, 24.0, 26.0, 24.0, 27.0, 34.0, 28.0, 27.0, 33.0, 31.0, 30.0, 29.0, 28.0, 27.0, 28.0, 34.0, 35.0, 28.0, 28.0, 33.0, 28.0, 31.0, 28.0, 27.0, 28.0, 28.0, 29.0, 31.0, 33.0, 28.0, 29.0, 28.0, 30.0, 31.0], [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 22.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 21.0, 22.0, 22.0, 21.0, 21.0, 22.0, 22.0, 22.0, 21.0, 20.0, 21.0, 21.0, 21.0, 21.0, 22.0, 23.0, 22.0, 22.0, 22.0, 22.0, 23.0, 22.0, 23.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 25.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 23.0, 23.0, 24.0, 25.0, 24.0, 26.0, 24.0, 26.0, 24.0, 24.0, 24.0, 24.0, 24.0, 27.0, 24.0, 26.0, 26.0, 25.0, 24.0, 27.0, 24.0, 25.0, 24.0, 24.0, 23.0, 25.0, 23.0, 25.0, 23.0, 24.0, 25.0, 24.0, 26.0, 25.0, 26.0, 26.0, 24.0, 26.0, 26.0, 27.0, 24.0, 23.0, 25.0, 26.0, 25.0, 23.0, 24.0, 26.0, 26.0, 24.0, 26.0, 24.0, 27.0, 34.0, 28.0, 27.0, 33.0, 31.0, 30.0, 29.0, 28.0, 27.0, 28.0, 34.0, 35.0, 28.0, 28.0, 33.0, 28.0, 31.0, 28.0, 27.0, 28.0, 28.0, 29.0, 31.0, 33.0, 28.0, 29.0, 28.0, 30.0, 31.0] }
begin == 90
end == 102
size(work[]) == 200
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.insertionSort(double[], int, int):::EXIT
this.quantile == orig(this.quantile)
this.cachedPivots == orig(this.cachedPivots)
this.storedData == orig(this.storedData)
this.quantile == 50.0
work[] == [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 22.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 21.0, 22.0, 22.0, 21.0, 21.0, 22.0, 22.0, 22.0, 21.0, 20.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 25.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 23.0, 23.0, 24.0, 25.0, 24.0, 26.0, 24.0, 26.0, 24.0, 24.0, 24.0, 24.0, 24.0, 27.0, 24.0, 26.0, 26.0, 25.0, 24.0, 27.0, 24.0, 25.0, 24.0, 24.0, 23.0, 25.0, 23.0, 25.0, 23.0, 24.0, 25.0, 24.0, 26.0, 25.0, 26.0, 26.0, 24.0, 26.0, 26.0, 27.0, 24.0, 23.0, 25.0, 26.0, 25.0, 23.0, 24.0, 26.0, 26.0, 24.0, 26.0, 24.0, 27.0, 34.0, 28.0, 27.0, 33.0, 31.0, 30.0, 29.0, 28.0, 27.0, 28.0, 34.0, 35.0, 28.0, 28.0, 33.0, 28.0, 31.0, 28.0, 27.0, 28.0, 28.0, 29.0, 31.0, 33.0, 28.0, 29.0, 28.0, 30.0, 31.0]
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.medianOf3(double[], int, int):::ENTER
this has only one value
this.quantile == 50.0
work has only one value
begin one of { 0, 65, 90 }
end one of { 109, 170, 200 }
size(work[]) == 200
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.medianOf3(double[], int, int):::EXIT371
work[] == [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 27.0, 21.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 24.0, 21.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 30.0, 21.0, 25.0, 26.0, 28.0, 21.0, 29.0, 28.0, 24.0, 24.0, 31.0, 24.0, 26.0, 24.0, 22.0, 22.0, 26.0, 24.0, 23.0, 29.0, 28.0, 26.0, 25.0, 25.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 21.0, 27.0, 21.0, 28.0, 23.0, 23.0, 22.0, 23.0, 23.0, 25.0, 31.0, 23.0, 22.0, 28.0, 33.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 22.0, 21.0, 25.0, 24.0, 28.0, 24.0, 22.0, 24.0, 24.0, 22.0, 25.0, 23.0, 35.0, 34.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 26.0, 28.0, 29.0, 26.0, 31.0, 24.0, 33.0, 25.0, 27.0, 23.0, 22.0, 24.0, 26.0, 26.0, 24.0, 21.0, 24.0, 28.0, 34.0, 23.0, 26.0, 23.0, 27.0, 30.0, 26.0, 23.0, 25.0, 21.0, 21.0, 22.0, 27.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 26.0]
return == 65
orig(begin) == 65
orig(end) == 200
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.medianOf3(double[], int, int):::EXIT375
work[] == [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 23.0, 21.0, 26.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 24.0, 21.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 23.0, 21.0, 25.0, 26.0, 22.0, 21.0, 26.0, 27.0, 24.0, 24.0, 24.0, 24.0, 26.0, 24.0, 22.0, 22.0, 26.0, 24.0, 23.0, 23.0, 26.0, 26.0, 25.0, 25.0, 23.0, 21.0, 21.0, 23.0, 25.0, 23.0, 21.0, 24.0, 21.0, 22.0, 23.0, 23.0, 22.0, 23.0, 23.0, 25.0, 24.0, 23.0, 22.0, 22.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 24.0, 22.0, 21.0, 25.0, 24.0, 27.0, 24.0, 22.0, 24.0, 24.0, 22.0, 25.0, 23.0, 22.0, 21.0, 24.0, 21.0, 23.0, 23.0, 25.0, 26.0, 26.0, 23.0, 26.0, 26.0, 27.0, 24.0, 23.0, 25.0, 26.0, 23.0, 22.0, 24.0, 26.0, 26.0, 24.0, 21.0, 24.0, 27.0, 34.0, 28.0, 27.0, 33.0, 31.0, 30.0, 29.0, 28.0, 27.0, 28.0, 34.0, 35.0, 28.0, 28.0, 33.0, 28.0, 31.0, 28.0, 27.0, 28.0, 28.0, 29.0, 31.0, 33.0, 28.0, 29.0, 28.0, 30.0, 31.0]
return == 65
orig(begin) == 65
orig(end) == 170
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.medianOf3(double[], int, int):::EXIT377
work[] one of { [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 22.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 21.0, 22.0, 22.0, 21.0, 21.0, 22.0, 22.0, 22.0, 21.0, 20.0, 21.0, 21.0, 21.0, 21.0, 22.0, 23.0, 22.0, 23.0, 22.0, 22.0, 23.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 22.0, 23.0, 23.0, 22.0, 23.0, 25.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 23.0, 23.0, 24.0, 25.0, 24.0, 26.0, 24.0, 26.0, 24.0, 24.0, 24.0, 24.0, 24.0, 27.0, 24.0, 26.0, 26.0, 25.0, 24.0, 27.0, 24.0, 25.0, 24.0, 24.0, 23.0, 25.0, 23.0, 25.0, 23.0, 24.0, 25.0, 24.0, 26.0, 25.0, 26.0, 26.0, 24.0, 26.0, 26.0, 27.0, 24.0, 23.0, 25.0, 26.0, 25.0, 23.0, 24.0, 26.0, 26.0, 24.0, 26.0, 24.0, 27.0, 34.0, 28.0, 27.0, 33.0, 31.0, 30.0, 29.0, 28.0, 27.0, 28.0, 34.0, 35.0, 28.0, 28.0, 33.0, 28.0, 31.0, 28.0, 27.0, 28.0, 28.0, 29.0, 31.0, 33.0, 28.0, 29.0, 28.0, 30.0, 31.0], [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 23.0, 21.0, 21.0, 22.0, 21.0, 23.0, 23.0, 22.0, 21.0, 23.0, 21.0, 23.0, 23.0, 21.0, 21.0, 22.0, 23.0, 22.0, 21.0, 22.0, 21.0, 22.0, 21.0, 22.0, 22.0, 23.0, 21.0, 21.0, 20.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 22.0, 23.0, 23.0, 22.0, 21.0, 21.0, 21.0, 21.0, 23.0, 25.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 23.0, 23.0, 24.0, 25.0, 24.0, 26.0, 24.0, 26.0, 24.0, 24.0, 24.0, 24.0, 24.0, 27.0, 24.0, 26.0, 26.0, 25.0, 24.0, 27.0, 24.0, 25.0, 24.0, 24.0, 23.0, 25.0, 23.0, 25.0, 23.0, 24.0, 25.0, 24.0, 26.0, 25.0, 26.0, 26.0, 24.0, 26.0, 26.0, 27.0, 24.0, 23.0, 25.0, 26.0, 25.0, 23.0, 24.0, 26.0, 26.0, 24.0, 26.0, 24.0, 27.0, 34.0, 28.0, 27.0, 33.0, 31.0, 30.0, 29.0, 28.0, 27.0, 28.0, 34.0, 35.0, 28.0, 28.0, 33.0, 28.0, 31.0, 28.0, 27.0, 28.0, 28.0, 29.0, 31.0, 33.0, 28.0, 29.0, 28.0, 30.0, 31.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0] }
return one of { 86, 99, 199 }
orig(end) one of { 109, 200 }
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.medianOf3(double[], int, int):::EXIT
this.quantile == orig(this.quantile)
this.cachedPivots == orig(this.cachedPivots)
this.storedData == orig(this.storedData)
work[] == orig(work[])
this.quantile == 50.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.partition(double[], int, int, int):::ENTER
this has only one value
this.quantile == 50.0
work has only one value
begin one of { 0, 65, 90 }
end one of { 109, 170, 200 }
size(work[]) == 200
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.partition(double[], int, int, int):::EXIT
this.quantile == orig(this.quantile)
this.cachedPivots == orig(this.cachedPivots)
this.storedData == orig(this.storedData)
this.quantile == 50.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.select(double[], int[], int):::ENTER
this has only one value
this.quantile == 50.0
work has only one value
work[] one of { [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 22.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 21.0, 22.0, 22.0, 21.0, 21.0, 22.0, 22.0, 22.0, 21.0, 20.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 25.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 23.0, 23.0, 24.0, 25.0, 24.0, 26.0, 24.0, 26.0, 24.0, 24.0, 24.0, 24.0, 24.0, 27.0, 24.0, 26.0, 26.0, 25.0, 24.0, 27.0, 24.0, 25.0, 24.0, 24.0, 23.0, 25.0, 23.0, 25.0, 23.0, 24.0, 25.0, 24.0, 26.0, 25.0, 26.0, 26.0, 24.0, 26.0, 26.0, 27.0, 24.0, 23.0, 25.0, 26.0, 25.0, 23.0, 24.0, 26.0, 26.0, 24.0, 26.0, 24.0, 27.0, 34.0, 28.0, 27.0, 33.0, 31.0, 30.0, 29.0, 28.0, 27.0, 28.0, 34.0, 35.0, 28.0, 28.0, 33.0, 28.0, 31.0, 28.0, 27.0, 28.0, 28.0, 29.0, 31.0, 33.0, 28.0, 29.0, 28.0, 30.0, 31.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0] }
pivotsHeap has only one value
pivotsHeap[] one of {}
pivotsHeap[] elements >= -1
k one of { 99, 100 }
size(work[]) == 200
size(pivotsHeap[]) == 1023
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.select(double[], int[], int):::EXIT348
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.select(double[], int[], int):::EXIT
this.quantile == orig(this.quantile)
this.cachedPivots == orig(this.cachedPivots)
this.storedData == orig(this.storedData)
this.quantile == 50.0
work[] == [20.0, 16.0, 20.0, 15.0, 14.0, 18.0, 20.0, 19.0, 19.0, 17.0, 19.0, 19.0, 16.0, 18.0, 16.0, 19.0, 15.0, 16.0, 12.0, 15.0, 16.0, 15.0, 17.0, 18.0, 18.0, 17.0, 15.0, 19.0, 15.0, 15.0, 20.0, 13.0, 20.0, 20.0, 20.0, 15.0, 13.0, 15.0, 17.0, 17.0, 16.0, 18.0, 19.0, 16.0, 19.0, 13.0, 17.0, 15.0, 19.0, 18.0, 14.0, 20.0, 19.0, 19.0, 20.0, 14.0, 19.0, 20.0, 13.0, 13.0, 18.0, 17.0, 18.0, 17.0, 20.0, 22.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 21.0, 22.0, 22.0, 21.0, 21.0, 22.0, 22.0, 22.0, 21.0, 20.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 25.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 23.0, 23.0, 24.0, 25.0, 24.0, 26.0, 24.0, 26.0, 24.0, 24.0, 24.0, 24.0, 24.0, 27.0, 24.0, 26.0, 26.0, 25.0, 24.0, 27.0, 24.0, 25.0, 24.0, 24.0, 23.0, 25.0, 23.0, 25.0, 23.0, 24.0, 25.0, 24.0, 26.0, 25.0, 26.0, 26.0, 24.0, 26.0, 26.0, 27.0, 24.0, 23.0, 25.0, 26.0, 25.0, 23.0, 24.0, 26.0, 26.0, 24.0, 26.0, 24.0, 27.0, 34.0, 28.0, 27.0, 33.0, 31.0, 30.0, 29.0, 28.0, 27.0, 28.0, 34.0, 35.0, 28.0, 28.0, 33.0, 28.0, 31.0, 28.0, 27.0, 28.0, 28.0, 29.0, 31.0, 33.0, 28.0, 29.0, 28.0, 30.0, 31.0]
pivotsHeap[] == [64, -1, 170, -1, -1, 109, -1, -1, -1, -1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
pivotsHeap[] elements >= -1
return == 23.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.setQuantile(double):::ENTER
p == 50.0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Percentile.setQuantile(double):::EXIT
this.cachedPivots == orig(this.cachedPivots)
this.storedData == orig(this.storedData)
this.quantile == 50.0
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum:::OBJECT
this.n == 0
this.value == 0.0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum.Sum():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum.evaluate(double[], int, int):::ENTER
this has only one value
values has only one value
values[] == [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
values[] elements one of { -0.2719561297938153, 0.0 }
begin == 0
length == 200
size(values[]) == 256
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum.evaluate(double[], int, int):::EXIT
this.n == orig(this.n)
this.value == orig(this.value)
this.storedData == orig(this.storedData)
values[] == orig(values[])
values[] == [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
values[] elements one of { -0.2719561297938153, 0.0 }
return == -54.391225618639055
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfLogs:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfLogs:::OBJECT
this.n == 0
this.value == 0.0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.SumOfLogs():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfSquares:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfSquares:::OBJECT
this.n == 0
this.value == 0.0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.SumOfSquares():::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite:::OBJECT
this.finalK >= 1
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.CodyWaite(double, double):::ENTER
xb == 0.0
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.CodyWaite(double, double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getK():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getK():::EXIT
this.finalK == orig(this.finalK)
this.finalRemA == orig(this.finalRemA)
this.finalRemB == orig(this.finalRemB)
return >= 1
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getRemA():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getRemA():::EXIT
this.finalK == orig(this.finalK)
this.finalRemA == orig(this.finalRemA)
this.finalRemB == orig(this.finalRemB)
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getRemB():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getRemB():::EXIT
this.finalK == orig(this.finalK)
this.finalRemA == orig(this.finalRemA)
this.finalRemB == orig(this.finalRemB)
===========================================================================
org.apache.commons.math3.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math3.util.FastMath.cosQ(double, double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.cosQ(double, double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.polyCosine(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.polyCosine(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.polySine(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.polySine(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.sinQ(double, double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.sinQ(double, double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.sqrt(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.sqrt(double):::EXIT
===========================================================================
org.apache.commons.math3.util.Incrementor$1:::OBJECT
===========================================================================
org.apache.commons.math3.util.Incrementor$1.():::EXIT
===========================================================================
org.apache.commons.math3.util.Incrementor:::OBJECT
this.maximalCount >= 0
this.count >= 0
this.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor(int):::ENTER
max == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor(int):::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor(int, org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback):::ENTER
max == 0
cb.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor(int, org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback):::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.getCount():::ENTER
===========================================================================
org.apache.commons.math3.util.Incrementor.getCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
===========================================================================
org.apache.commons.math3.util.Incrementor.getMaximalCount():::ENTER
this has only one value
this.maximalCount == 200
this.count == 24
this.maxCountCallback has only one value
===========================================================================
org.apache.commons.math3.util.Incrementor.getMaximalCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.maximalCount == 200
this.count == 24
this.maxCountCallback has only one value
return == 200
===========================================================================
org.apache.commons.math3.util.Incrementor.incrementCount():::ENTER
===========================================================================
org.apache.commons.math3.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.count >= 1
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.resetCount():::ENTER
===========================================================================
org.apache.commons.math3.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.count == 0
this.count <= orig(this.count)
===========================================================================
org.apache.commons.math3.util.Incrementor.setMaximalCount(int):::ENTER
===========================================================================
org.apache.commons.math3.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
===========================================================================
org.apache.commons.math3.util.Pair:::OBJECT
this.key.getClass().getName() == double[].class
this.value.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.util.Pair.Pair(java.lang.Object, java.lang.Object):::ENTER
k.getClass().getName() == double[].class
v.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.util.Pair.Pair(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math3.util.Pair.getKey():::ENTER
===========================================================================
org.apache.commons.math3.util.Pair.getKey():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
return.getClass().getName() == double[].class
===========================================================================
org.apache.commons.math3.util.Pair.getValue():::ENTER
===========================================================================
org.apache.commons.math3.util.Pair.getValue():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
return.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.util.Precision:::CLASS
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double):::ENTER
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double):::EXIT
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::ENTER
maxUlps == 1
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray:::CLASS
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray:::OBJECT
this.contractionCriteria == 2.5
this.expansionFactor == 2.0
this.expansionMode == 0
this.initialCapacity == 16
this.numElements >= 0
this.startIndex == 0
size(this.internalArray[]) is a power of 2
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.ResizableDoubleArray():::EXIT
this.internalArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.internalArray[] elements == 0.0
this.numElements == 0
size(this.internalArray[]) == 16
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.addElement(double):::ENTER
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.addElement(double):::EXIT
this.contractionCriteria == orig(this.contractionCriteria)
this.expansionFactor == orig(this.expansionFactor)
this.expansionMode == orig(this.expansionMode)
this.initialCapacity == orig(this.initialCapacity)
this.startIndex == orig(this.startIndex)
this.numElements - orig(this.numElements) - 1 == 0
size(this.internalArray[]) != orig(size(this.internalArray[]))-1
size(this.internalArray[])-1 != orig(size(this.internalArray[]))
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.contract():::ENTER
this.internalArray[] elements one of { -0.2719561297938153, 0.0, 26.0 }
this.internalArray[] one of { [-0.2719561297938153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.numElements == 1
size(this.internalArray[]) == 16
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.contract():::EXIT
this.contractionCriteria == orig(this.contractionCriteria)
this.expansionFactor == orig(this.expansionFactor)
this.expansionMode == orig(this.expansionMode)
this.initialCapacity == orig(this.initialCapacity)
this.numElements == orig(this.numElements)
this.startIndex == orig(this.startIndex)
this.internalArray[] elements one of { -0.2719561297938153, 0.0, 26.0 }
this.internalArray[] one of { [-0.2719561297938153, 0.0], [26.0, 0.0] }
this.numElements == 1
size(this.internalArray[]) == 2
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.expand():::ENTER
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.expand():::EXIT
this.contractionCriteria == orig(this.contractionCriteria)
this.expansionFactor == orig(this.expansionFactor)
this.expansionMode == orig(this.expansionMode)
this.initialCapacity == orig(this.initialCapacity)
this.numElements == orig(this.numElements)
this.startIndex == orig(this.startIndex)
this.internalArray[] > orig(this.internalArray[]) (lexically)
this.internalArray[] >= orig(this.internalArray[]) (lexically)
size(this.internalArray[]) - 2 * orig(size(this.internalArray[])) == 0
size(this.internalArray[])-1 > orig(size(this.internalArray[]))
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.getInternalValues():::ENTER
this.internalArray[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.numElements == 200
size(this.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.getInternalValues():::EXIT
this.contractionCriteria == orig(this.contractionCriteria)
this.expansionFactor == orig(this.expansionFactor)
this.expansionMode == orig(this.expansionMode)
this.initialCapacity == orig(this.initialCapacity)
this.internalArray == orig(this.internalArray)
this.internalArray[] == orig(this.internalArray[])
this.numElements == orig(this.numElements)
this.startIndex == orig(this.startIndex)
this.internalArray[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.numElements == 200
return[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
size(this.internalArray[]) == 256
size(return[]) == 256
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.getNumElements():::ENTER
this.internalArray[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.numElements == 200
size(this.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.getNumElements():::EXIT
this.contractionCriteria == orig(this.contractionCriteria)
this.expansionFactor == orig(this.expansionFactor)
this.expansionMode == orig(this.expansionMode)
this.initialCapacity == orig(this.initialCapacity)
this.internalArray == orig(this.internalArray)
this.internalArray[] == orig(this.internalArray[])
this.numElements == orig(this.numElements)
this.startIndex == orig(this.startIndex)
this.internalArray[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.numElements == 200
return == 200
size(this.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.shouldContract():::ENTER
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.shouldContract():::EXIT801
(this.numElements == 1)  <==>  (return == true)
(this.numElements == 1)  ==>  (size(this.internalArray[]) == 16)
(this.numElements == 1)  ==>  (this.internalArray[] elements one of { -0.2719561297938153, 0.0, 26.0 })
(this.numElements == 1)  ==>  (this.internalArray[] one of { [-0.2719561297938153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.shouldContract():::EXIT801;condition="return == true"
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.shouldContract():::EXIT801;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.shouldContract():::EXIT
this.contractionCriteria == orig(this.contractionCriteria)
this.expansionFactor == orig(this.expansionFactor)
this.expansionMode == orig(this.expansionMode)
this.initialCapacity == orig(this.initialCapacity)
this.internalArray == orig(this.internalArray)
this.internalArray[] == orig(this.internalArray[])
this.numElements == orig(this.numElements)
this.startIndex == orig(this.startIndex)
(this.numElements == 1)  <==>  (return == true)
(this.numElements == 1)  ==>  (size(this.internalArray[]) == 16)
(this.numElements == 1)  ==>  (this.internalArray[] elements one of { -0.2719561297938153, 0.0, 26.0 })
(this.numElements == 1)  ==>  (this.internalArray[] one of { [-0.2719561297938153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.shouldContract():::EXIT;condition="return == true"
this.internalArray[] elements one of { -0.2719561297938153, 0.0, 26.0 }
this.internalArray[] one of { [-0.2719561297938153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.numElements == 1
return == true
size(this.internalArray[]) == 16
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.shouldContract():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.start():::ENTER
this.internalArray[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.numElements == 200
size(this.internalArray[]) == 256
===========================================================================
org.apache.commons.math3.util.ResizableDoubleArray.start():::EXIT
this.contractionCriteria == orig(this.contractionCriteria)
this.expansionFactor == orig(this.expansionFactor)
this.expansionMode == orig(this.expansionMode)
this.initialCapacity == orig(this.initialCapacity)
this.internalArray == orig(this.internalArray)
this.internalArray[] == orig(this.internalArray[])
this.numElements == orig(this.numElements)
this.startIndex == orig(this.startIndex)
this.internalArray[] one of { [-0.2719561297938153, -0.2719561279876667, -0.27195612774119055, -0.2719561287347124, -0.27195612829830573, -0.27195612868030355, -0.27195612768447763, -0.27195612903273375, -0.27195612752670656, -0.2719561294121619, -0.2719561286130912, -0.27195612862678964, -0.27195612838628924, -0.27195612789678486, -0.27195612770034644, -0.271956127958801, -0.2719561279955665, -0.2719561278382791, -0.2719561284368847, -0.27195613001906743, -0.2719561279343363, -0.27195612795619045, -0.27195612807230896, -0.2719561280204898, -0.27195612755289095, -0.27195612608956726, -0.2719561279551604, -0.27195612886125464, -0.27195612788051915, -0.27195612759965987, -0.27195612831165306, -0.2719561273421423, -0.2719561256011507, -0.2719561280162594, -0.27195612663474417, -0.2719561283038108, -0.27195612796137625, -0.27195612800568364, -0.27195612649590756, -0.2719561274861237, -0.27195612777284095, -0.27195612774172573, -0.2719561273297809, -0.2719561278646909, -0.27195612806416203, -0.2719561272796198, -0.27195612811474484, -0.2719561284546552, -0.27195612785788337, -0.2719561277061762, -0.2719561279901978, -0.2719561286040924, -0.27195612871857394, -0.271956124984156, -0.27195612794972107, -0.2719561285201973, -0.2719561304928433, -0.27195612673734765, -0.27195613058554435, -0.27195612964909116, -0.27195612802797925, -0.2719561282836224, -0.27195612793079516, -0.2719561283678578, -0.2719561281561543, -0.2719561270236774, -0.2719561280644737, -0.2719561264497752, -0.2719561280317013, -0.2719561277793686, -0.27195612805327196, -0.27195612804514613, -0.27195612805780406, -0.27195612760337967, -0.2719561276503011, -0.2719561284667906, -0.27195612954326487, -0.2719561280025965, -0.2719561284078132, -0.27195612688896353, -0.27195612857472706, -0.27195612796672813, -0.27195612763842064, -0.27195612827844445, -0.271956129031434, -0.2719561277109242, -0.27195612758159154, -0.2719561277690774, -0.2719561297922064, -0.2719561280252886, -0.27195612779062406, -0.27195612918096373, -0.2719561281029778, -0.2719561293977147, -0.2719561292826988, -0.27195612734931685, -0.27195612750553616, -0.2719561279363507, -0.2719561280205529, -0.2719561278683003, -0.2719561280625332, -0.27195612774339895, -0.27195612813618125, -0.27195612950015485, -0.27195612753409265, -0.27195612819011267, -0.27195612800144875, -0.2719561268125107, -0.2719561287549516, -0.2719561281084584, -0.2719561284504714, -0.27195612746545383, -0.27195612872689195, -0.2719561283085302, -0.27195612860342533, -0.2719561279363277, -0.27195612968726335, -0.2719561289301466, -0.2719561283284115, -0.27195612849948797, -0.271956127935267, -0.27195612614191605, -0.271956129098642, -0.2719561287837834, -0.27195612753696774, -0.27195612972630506, -0.2719561276826896, -0.2719561265034362, -0.2719561277783715, -0.27195612792873686, -0.2719561286423827, -0.27195612592673213, -0.27195612855411244, -0.27195612645658457, -0.27195612731616164, -0.2719561278251097, -0.27195612714038714, -0.27195612785303347, -0.2719561288977115, -0.27195612894510307, -0.2719561280433908, -0.2719561277581545, -0.2719561288371837, -0.2719561276467905, -0.2719561278179185, -0.271956128022523, -0.2719561262587666, -0.27195612853446344, -0.2719561314195252, -0.27195612691195264, -0.27195612852778955, -0.2719561274581931, -0.27195612765939065, -0.2719561280160956, -0.2719561269717458, -0.27195612648690165, -0.271956128089168, -0.27195612938807884, -0.27195612802749175, -0.2719561280489009, -0.27195612823148424, -0.27195612824985094, -0.2719561275681727, -0.2719561278776387, -0.271956129295141, -0.27195612836811445, -0.2719561272471514, -0.2719561280966963, -0.2719561282220721, -0.2719561280011339, -0.27195612820358017, -0.2719561279499413, -0.2719561290022369, -0.2719561278177523, -0.27195612804485947, -0.27195612827208054, -0.27195612809050745, -0.2719561297552376, -0.2719561282907652, -0.2719561283538782, -0.27195612884879605, -0.27195612777390726, -0.27195613009294334, -0.27195612796215973, -0.2719561297642145, -0.27195612916726014, -0.27195612926063595, -0.2719561282751199, -0.27195612776421896, -0.2719561276604067, -0.27195613057586615, -0.27195612883359177, -0.2719561278020291, -0.27195612755193815, -0.2719561275096873, -0.27195612583815515, -0.2719561271586239, -0.2719561276917022, -0.27195612719450896, -0.27195612809502084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [26.0, 16.0, 20.0, 27.0, 25.0, 23.0, 30.0, 26.0, 34.0, 28.0, 24.0, 26.0, 27.0, 18.0, 33.0, 19.0, 24.0, 26.0, 29.0, 26.0, 16.0, 15.0, 17.0, 18.0, 34.0, 35.0, 15.0, 23.0, 25.0, 22.0, 28.0, 24.0, 25.0, 22.0, 33.0, 22.0, 22.0, 23.0, 28.0, 27.0, 16.0, 18.0, 21.0, 25.0, 28.0, 13.0, 24.0, 26.0, 19.0, 18.0, 14.0, 22.0, 24.0, 31.0, 24.0, 24.0, 21.0, 28.0, 26.0, 13.0, 30.0, 21.0, 24.0, 21.0, 20.0, 27.0, 17.0, 31.0, 23.0, 21.0, 25.0, 23.0, 22.0, 21.0, 18.0, 17.0, 26.0, 24.0, 25.0, 23.0, 25.0, 23.0, 18.0, 21.0, 25.0, 13.0, 20.0, 19.0, 29.0, 28.0, 14.0, 20.0, 19.0, 24.0, 26.0, 19.0, 22.0, 20.0, 15.0, 17.0, 23.0, 29.0, 19.0, 26.0, 25.0, 16.0, 23.0, 28.0, 21.0, 23.0, 25.0, 23.0, 19.0, 17.0, 21.0, 17.0, 15.0, 23.0, 13.0, 23.0, 23.0, 25.0, 31.0, 23.0, 15.0, 28.0, 20.0, 24.0, 21.0, 21.0, 23.0, 22.0, 28.0, 20.0, 21.0, 20.0, 13.0, 20.0, 24.0, 15.0, 24.0, 24.0, 22.0, 15.0, 19.0, 17.0, 18.0, 24.0, 28.0, 23.0, 23.0, 27.0, 26.0, 15.0, 28.0, 12.0, 16.0, 31.0, 15.0, 16.0, 25.0, 16.0, 23.0, 22.0, 24.0, 26.0, 19.0, 19.0, 21.0, 24.0, 17.0, 19.0, 23.0, 19.0, 23.0, 27.0, 20.0, 26.0, 18.0, 14.0, 21.0, 21.0, 22.0, 15.0, 24.0, 20.0, 22.0, 24.0, 22.0, 24.0, 21.0, 26.0, 23.0, 24.0, 33.0, 27.0, 26.0, 22.0, 23.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.numElements == 200
return == 0
size(this.internalArray[]) == 256
