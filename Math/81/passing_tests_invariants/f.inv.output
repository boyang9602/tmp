===========================================================================
org.apache.commons.math.MathRuntimeException$4:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::OBJECT
this.val$pattern.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
this.val$arguments.getClass().getName() == java.lang.Object[].class
this.val$arguments[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String] }
size(this.val$arguments[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::ENTER
$hidden$1.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
$hidden$2.getClass().getName() == java.lang.Object[].class
size($hidden$2[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$2[] == orig($hidden$2[])
$hidden$1.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
===========================================================================
org.apache.commons.math.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException:::OBJECT
this.pattern has only one value
this.pattern.toString == "matrix is singular"
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.MathRuntimeException.MathRuntimeException(java.lang.String, java.lang.Object[]):::ENTER
pattern has only one value
pattern.toString == "matrix is singular"
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.MathRuntimeException.MathRuntimeException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString == "matrix is singular"
arguments[] == []
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1:::OBJECT
this.columnSum == 0.0
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.(org.apache.commons.math.linear.AbstractRealMatrix):::ENTER
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.(org.apache.commons.math.linear.AbstractRealMatrix):::EXIT
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.endRow == 0.0
this.maxColSum == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.end():::ENTER
this.endRow >= 1.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.end():::EXIT
this.endRow == orig(this.endRow)
this.columnSum == orig(this.columnSum)
this.maxColSum == orig(this.maxColSum)
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.endRow >= 1.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.start(int, int, int, int, int, int):::ENTER
this.endRow == 0.0
this.maxColSum == 0.0
rows >= 2
columns >= 2
startRow == 0
endRow >= 1
startColumn == 0
endColumn >= 1
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.start(int, int, int, int, int, int):::EXIT
this.columnSum == orig(this.columnSum)
this.maxColSum == orig(this.maxColSum)
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.endRow >= 1.0
this.maxColSum == 0.0
orig(this.endRow) % this.endRow == 0
this.endRow > orig(this.endRow)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.visit(int, int, double):::ENTER
this.endRow >= 1.0
this.maxColSum == 0.0
row >= 0
column >= 0
value == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.visit(int, int, double):::EXIT
this.endRow == orig(this.endRow)
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.endRow >= 1.0
this.maxColSum == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5:::OBJECT
this.val$out.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName()
this.val$out.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::ENTER
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == $hidden$2.getClass().getName()
org.apache.commons.math.linear.AbstractRealMatrix.this != null
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
$hidden$2 != null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::EXIT
this.val$out == orig($hidden$2)
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
this.val$out.getClass().getName() == orig($hidden$2.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.val$out != null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::EXIT
this.val$out == orig(this.val$out)
this.val$out.getClass().getName() == orig(this.val$out.getClass().getName())
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension >= 2
columnDimension >= 2
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getColumn(int):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getColumn(int):::EXIT
this.lu == orig(this.lu)
return != null
size(return[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getColumnVector(int):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getColumnVector(int):::EXIT
this.lu == orig(this.lu)
return != null
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getNorm():::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getNorm():::EXIT
this.lu == orig(this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::EXIT
this.lu == orig(this.lu)
return == true
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.operate(org.apache.commons.math.linear.RealVector):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
v != null
this.getClass().getName() != v.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.operate(org.apache.commons.math.linear.RealVector):::EXIT701
return.getClass().getName() == orig(v.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.operate(org.apache.commons.math.linear.RealVector):::EXIT720
orig(v.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.operate(org.apache.commons.math.linear.RealVector):::EXIT
this.lu == orig(this.lu)
(orig(v.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVector.class)  <==>  (return.getClass().getName() == orig(v.getClass().getName()))
return != null
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setColumnVector(int, org.apache.commons.math.linear.RealVector):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column >= 0
vector != null
vector.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.getClass().getName() != vector.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setColumnVector(int, org.apache.commons.math.linear.RealVector):::EXIT
this.lu == orig(this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setRowVector(int, org.apache.commons.math.linear.RealVector):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
vector != null
vector.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.getClass().getName() != vector.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setRowVector(int, org.apache.commons.math.linear.RealVector):::EXIT
this.lu == orig(this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::EXIT
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.getClass().getName())
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
visitor != null
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
this.getClass().getName() != visitor.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.lu == orig(this.lu)
return == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
visitor.getClass().getName() == org.apache.commons.math.linear.SingularValueDecompositionImpl$1.class
startRow == 0
endRow one of { 1, 3 }
startColumn == 0
endColumn == 3
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int):::EXIT
this.lu == orig(this.lu)
return == 0.0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.lu == null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::ENTER
d != null
d.getClass().getName() == double[][].class
d[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::EXIT
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
this.data != null
d[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::ENTER
d != null
d.getClass().getName() == double[][].class
d[] elements != null
copyArray == false
size(d[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::EXIT
this.data == orig(d)
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
this.data != null
d[] elements != null
size(this.data[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::ENTER
rowDimension >= 2
columnDimension >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::EXIT
orig(rowDimension) == size(this.data[])
this.data != null
orig(columnDimension) != size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.addToEntry(int, int, double):::ENTER
this.data != null
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.addToEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this.data == null
in != null
in.getClass().getName() == double[][].class
in[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
this.data.getClass().getName() == orig(in.getClass().getName())
this.lu == orig(this.lu)
in[] == orig(in[])
this.data != null
in[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyOut():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyOut():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == return.getClass().getName()
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.data.getClass().getName())
this.data != null
return != null
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::ENTER
columnDimension == size(this.data[])
this.data != null
rowDimension >= 2
size(this.data[]) >= 2
rowDimension >= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
orig(columnDimension) == size(this.data[])
this.data != null
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
orig(columnDimension) >= 2
this.data.getClass().getName() != return.getClass().getName()
orig(rowDimension) >= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getData():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getData():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == return.getClass().getName()
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.data.getClass().getName())
this.data != null
return != null
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::ENTER
this.data != null
row >= 0
column >= 0
size(this.data[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
size(this.data[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == size(this.data[])
return == orig(size(this.data[]))
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
this.data.getClass().getName() == m.data.getClass().getName()
this.data != null
m != null
m.data != null
m.data[] elements != null
m.lu == null
size(this.data[]) >= 2
size(m.data[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == m.data.getClass().getName()
this.data.getClass().getName() == return.data.getClass().getName()
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(m.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
m.data == orig(m.data)
m.data[] == orig(m.data[])
m.lu == orig(m.lu)
this.data != null
m.data != null
m.data[] elements != null
m.lu == null
return != null
return.data != null
return.data[] elements != null
return.lu == null
size(this.data[]) >= 2
size(m.data[]) >= 2
size(return.data[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::ENTER
this.data != null
m != null
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.data[]) >= 2
this.data.getClass().getName() != m.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT254
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(m.getClass().getName())
this.data != null
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.data[]) >= 2
this.data.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiplyEntry(int, int, double):::ENTER
row one of { 0, 1 }
column one of { 0, 1, 2 }
factor one of { 0.33333333333333337, 1.0 }
size(this.data[]) == 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiplyEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
size(this.data[]) == 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.operate(double[]):::ENTER
this.data != null
v != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.operate(double[]):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
v[] == orig(v[])
this.data != null
return != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::ENTER
this.data != null
row >= 0
column >= 0
size(this.data[]) >= 2
row <= size(this.data[])-1
column <= size(this.data[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
size(this.data[]) >= 2
orig(row) <= size(this.data[])-1
orig(column) <= size(this.data[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
this.data == null
subMatrix != null
subMatrix.getClass().getName() == double[][].class
subMatrix[] elements != null
row == 0
column == 0
row <= size(subMatrix[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
this.data.getClass().getName() == orig(subMatrix.getClass().getName())
this.lu == orig(this.lu)
subMatrix[] == orig(subMatrix[])
size(this.data[]) == orig(size(subMatrix[]))
this.data != null
subMatrix[] elements != null
orig(row) <= size(subMatrix[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
this.data.getClass().getName() == m.data.getClass().getName()
this.data != null
m != null
m.data != null
m.data[] elements != null
m.lu == null
size(this.data[]) >= 2
size(m.data[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == m.data.getClass().getName()
this.data.getClass().getName() == return.data.getClass().getName()
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(m.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
m.data == orig(m.data)
m.data[] == orig(m.data[])
m.lu == orig(m.lu)
this.data != null
m.data != null
m.data[] elements != null
m.lu == null
return != null
return.data != null
return.data[] elements != null
return.lu == null
size(this.data[]) >= 2
size(m.data[]) >= 2
size(return.data[]) >= 2
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::ENTER
this.data != null
m != null
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.data[]) >= 2
this.data.getClass().getName() != m.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::EXIT214
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(m.getClass().getName())
this.data != null
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.data[]) >= 2
this.data.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this.data != null
visitor != null
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$1.class
size(this.data[]) >= 2
this.data.getClass().getName() != visitor.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
size(this.data[]) >= 2
this.data.getClass().getName() != orig(visitor.getClass().getName())
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this.data != null
visitor != null
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
size(this.data[]) >= 2
this.data.getClass().getName() != visitor.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
return == 0.0
size(this.data[]) >= 2
this.data.getClass().getName() != orig(visitor.getClass().getName())
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int):::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 4
visitor.getClass().getName() == org.apache.commons.math.linear.SingularValueDecompositionImpl$1.class
startRow == 0
endRow one of { 1, 3 }
startColumn == 0
endColumn == 3
size(this.data[]) == 4
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
this.data[] contains no nulls and has only one value, of length 4
return == 0.0
size(this.data[]) == 4
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::CLASS
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::OBJECT
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::ENTER
size(d[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::EXIT
d[] == orig(d[])
size(this.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::ENTER
copyArray == false
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::ENTER
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
deep == true
size(v.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
v.data == orig(v.data)
v.data[] == orig(v.data[])
size(this.data[]) == 6
size(v.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::ENTER
n one of { 2, 6 }
size(this.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(org.apache.commons.math.linear.RealVector):::ENTER
this.data[] elements != 0
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.class
size(this.data[]) == 6
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != v.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
size(this.data[]) == 6
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != orig(v.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::ENTER
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::ENTER
this.data[] elements != 0
v[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
size(v[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
this.data[] elements != 0
v[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.ArrayRealVector):::ENTER
this.data[] elements != 0
v.data[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
size(v.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
this.data[] elements != 0
v.data[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
size(v.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::ENTER
this.data[] elements != 0
size(this.data[]) == 6
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != v.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT870
orig(v.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT877
orig(v.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
size(this.data[]) == 6
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != orig(v.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDataRef():::ENTER
size(this.data[]) one of { 2, 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDataRef():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) one of { 2, 5, 6 }
size(return[]) one of { 2, 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getEntry(int):::ENTER
index >= 0
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getEntry(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::ENTER
size(this.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapMultiplyToSelf(double):::ENTER
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapMultiplyToSelf(double):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
size(this.data[]) == orig(size(this.data[]))
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.setEntry(int, double):::ENTER
index one of { 0, 1 }
size(this.data[]) == 2
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.setEntry(int, double):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
size(this.data[]) == orig(size(this.data[]))
size(this.data[]) == 2
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::ENTER
size(this.data[]) one of { 2, 6 }
size(v[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) one of { 2, 6 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::ENTER
size(this.data[]) one of { 2, 6 }
size(v.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
size(this.data[]) one of { 2, 6 }
size(v.data[]) one of { 2, 6 }
size(return.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::ENTER
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) one of { 2, 6 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != v.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT269
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == orig(v.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) one of { 2, 6 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl:::OBJECT
size(this.data[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.RealVectorTestImpl(double[]):::ENTER
size(d[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.RealVectorTestImpl(double[]):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.getDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.getDimension():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
return one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.getEntry(int):::ENTER
index >= 0
size(this.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.getEntry(int):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer:::OBJECT
this.householderVectors.getClass().getName() == double[][].class
this.householderVectors[] elements != null
this.cachedU.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedB == null
this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) >= 2
size(this.main[]) one of { 2, 3, 4 }
size(this.secondary[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.BiDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.BiDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::EXIT
this.cachedU == null
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getMainDiagonalRef():::ENTER
this.cachedU == null
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getMainDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
this.cachedU == null
this.cachedV == null
size(return[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getSecondaryDiagonalRef():::ENTER
this.cachedU == null
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getSecondaryDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
this.cachedU == null
this.cachedV == null
size(return[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getU():::ENTER
this.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.secondary[] one of { [0.0], [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.secondary[] sorted by >
this.cachedU == null
this.cachedV == null
size(this.householderVectors[]) one of { 2, 3, 4 }
size(this.main[]) one of { 2, 3 }
size(this.secondary[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getU():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
this.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.secondary[] one of { [0.0], [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.secondary[] sorted by >
this.cachedV == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) one of { 2, 3, 4 }
size(this.main[]) one of { 2, 3 }
size(this.secondary[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getV():::ENTER
this.cachedV == null
size(this.householderVectors[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getV():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedU == orig(this.cachedU)
this.cachedU.getClass().getName() == orig(this.cachedU.getClass().getName())
this.cachedB == orig(this.cachedB)
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.transformToLowerBiDiagonal():::ENTER
this.main[] elements == 0.0
this.main[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.secondary[] elements == 0.0
this.secondary[] one of { [0.0, 0.0], [0.0, 0.0, 0.0] }
this.cachedU == null
this.cachedV == null
size(this.householderVectors[]) one of { 3, 4 }
size(this.main[]) one of { 3, 4 }
size(this.secondary[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.transformToLowerBiDiagonal():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
size(this.main[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.secondary[]))
this.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [1.6656841689812205, 1.0143130258126063] }
this.secondary[] elements <= 1.6656841689812205
this.cachedU == null
this.cachedV == null
size(this.householderVectors[]) one of { 3, 4 }
size(this.main[]) one of { 3, 4 }
size(this.secondary[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.transformToUpperBiDiagonal():::ENTER
this.main[] elements == 0.0
this.main[] one of { [0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.secondary[] elements == 0.0
this.secondary[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0] }
this.cachedU == null
this.cachedV == null
size(this.householderVectors[]) one of { 2, 4, 6 }
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.transformToUpperBiDiagonal():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
size(this.main[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.secondary[]))
this.cachedU == null
this.cachedV == null
size(this.householderVectors[]) one of { 2, 4, 6 }
this.secondary[] >= orig(this.secondary[]) (lexically)
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix:::OBJECT
this.blocks != null
this.blocks.getClass().getName() == double[][].class
this.blocks[] elements != null
this.rows == 200
this.columns == 200
this.blockRows == 4
this.blockColumns == 4
this.lu == null
size(this.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(double[][]):::ENTER
rawData.getClass().getName() == double[][].class
size(rawData[]) == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(double[][]):::EXIT
rawData[] == orig(rawData[])
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int):::ENTER
rows == 200
columns == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::ENTER
rows == 200
columns == 200
blockData.getClass().getName() == double[][].class
copyArray == false
size(blockData[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::EXIT
blockData[] == orig(blockData[])
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockHeight(int):::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockHeight(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return one of { 44, 52 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockWidth(int):::ENTER
blockColumn >= 0
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockWidth(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return one of { 44, 52 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.createBlocksLayout(int, int):::ENTER
rows == 200
columns == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.createBlocksLayout(int, int):::EXIT
return.getClass().getName() == double[][].class
size(return[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumnDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getData():::ENTER
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getData():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
return has only one value
return.getClass().getName() == double[][].class
return[] contains no nulls and has only one value, of length 200
size(return[]) == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getEntry(int, int):::ENTER
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getEntry(int, int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
return != 0
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getRowDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.BlockRealMatrix):::ENTER
m.blocks.getClass().getName() == double[][].class
m.rows == 200
m.columns == 200
m.blockRows == 4
m.blockColumns == 4
m.lu == null
size(m.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.BlockRealMatrix):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
m.blocks == orig(m.blocks)
m.blocks.getClass().getName() == orig(m.blocks.getClass().getName())
m.blocks[] == orig(m.blocks[])
m.rows == orig(m.rows)
m.columns == orig(m.columns)
m.blockRows == orig(m.blockRows)
m.blockColumns == orig(m.blockColumns)
m.lu == orig(m.lu)
m.blocks.getClass().getName() == double[][].class
m.rows == 200
m.columns == 200
m.blockRows == 4
m.blockColumns == 4
m.lu == null
return.blocks.getClass().getName() == double[][].class
return.rows == 200
return.columns == 200
return.blockRows == 4
return.blockColumns == 4
return.lu == null
size(m.blocks[]) == 16
size(return.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT503
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return.blocks.getClass().getName() == double[][].class
return.rows == 200
return.columns == 200
return.blockRows == 4
return.blockColumns == 4
return.lu == null
size(return.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.toBlocksLayout(double[][]):::ENTER
rawData.getClass().getName() == double[][].class
size(rawData[]) == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.toBlocksLayout(double[][]):::EXIT
rawData[] == orig(rawData[])
return.getClass().getName() == double[][].class
size(return[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.transpose():::ENTER
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.transpose():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
return has only one value
return.blocks has only one value
return.blocks.getClass().getName() == double[][].class
return.blocks[] contains no nulls and has only one value, of length 16
return.rows == 200
return.columns == 200
return.blockRows == 4
return.blockColumns == 4
return.lu == null
size(return.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor:::OBJECT
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.DefaultRealMatrixPreservingVisitor():::EXIT
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::EXIT
return == 0.0
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::ENTER
rows >= 2
columns >= 2
startRow == 0
endRow >= 1
startColumn == 0
endColumn >= 1
rows > endRow
rows != endColumn
columns >= endRow
columns - endColumn - 1 == 0
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver:::OBJECT
this.realEigenvalues[] sorted by >
this.imagEigenvalues[] elements == 0.0
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
this.eigenvectors[] elements != null
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] }
this.eigenvectors[].data elements != null
size(this.realEigenvalues[]) one of { 5, 6 }
size(this.imagEigenvalues[]) one of { 5, 6 }
size(this.eigenvectors[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.Solver(double[], double[], org.apache.commons.math.linear.ArrayRealVector[]):::ENTER
imagEigenvalues[] elements == 0.0
imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
size(realEigenvalues[]) one of { 5, 6 }
size(imagEigenvalues[]) one of { 5, 6 }
size(eigenvectors[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.Solver(double[], double[], org.apache.commons.math.linear.ArrayRealVector[]):::EXIT
realEigenvalues[] == orig(realEigenvalues[])
imagEigenvalues[] == orig(imagEigenvalues[])
eigenvectors[] == orig(eigenvectors[])
eigenvectors[].data == orig(eigenvectors[].data)
imagEigenvalues[] elements == 0.0
imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.getInverse():::ENTER
this has only one value
this.realEigenvalues has only one value
this.realEigenvalues[] == [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 5
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.getInverse():::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.realEigenvalues has only one value
this.realEigenvalues[] == [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 5
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::ENTER
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT509
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 5
return == false
orig(this) has only one value
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT509;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT512
this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] }
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT512;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  <==>  (return == false)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (orig(this) has only one value)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (size(this.eigenvectors[]) == 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (size(this.imagEigenvalues[]) == 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (size(this.realEigenvalues[]) == 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.eigenvectors has only one value)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.eigenvectors[] contains no nulls and has only one value, of length 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.eigenvectors[].data contains no nulls and has only one value, of length 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector])
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.imagEigenvalues has only one value)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0])
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.realEigenvalues has only one value)
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  <==>  (return == true)
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (size(this.eigenvectors[]) one of { 5, 6 })
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (size(this.imagEigenvalues[]) one of { 5, 6 })
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (size(this.realEigenvalues[]) one of { 5, 6 })
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] })
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT;condition="return == true"
this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] }
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT;condition="not(return == true)"
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 5
return == false
orig(this) has only one value
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(double[]):::ENTER
this has only one value
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.realEigenvalues[] elements >= 0.36369252905610266
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
b[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
size(b[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(double[]):::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
b[] == orig(b[])
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.realEigenvalues[] elements >= 0.36369252905610266
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
b[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
return[] one of { [0.9999999999997948, 2.0000000000000577, 3.999999999999727, 8.000000000000608, 16.000000000000064, 32.00000000000034], [0.9999999999999649, 2.000000000000007, 3.000000000000001, 8.494593917163229E-14, -2.233456475320139E-15, 4.0849268412301853E-14], [1.9999999999999951, -0.9999999999999991, 1.999999999999988, -0.9999999999999828, 2.000000000000004, -0.9999999999999942] }
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
size(return[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealMatrix):::ENTER
this has only one value
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
b has only one value
b.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealMatrix):::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.realEigenvalues[] elements >= 0.36369252905610266
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealVector):::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.realEigenvalues[] elements >= 0.36369252905610266
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::OBJECT
this.splitTolerance == 2.2250738585072014E-308
this.squaredSecondary[] elements >= 0.0
this.transformer.householderVectors.getClass().getName() == double[][].class
this.transformer.householderVectors[] elements != null
this.transformer.cachedQ.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.transformer.cachedQt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.transformer.cachedT == null
this.upperSpectra >= 0.0
this.sigma >= 0.0
this.tau == 0.0
this.pingPong one of { 0, 1 }
this.qMax == 0.0
this.eMin >= 0.0
this.tType one of { -2, -1, 0 }
this.dMin == 0.0
this.dMin1 >= 0.0
this.dMin2 >= 0.0
this.dN == 0.0
this.dN1 >= 0.0
this.dN2 >= 0.0
this.g == 0.0
this.realEigenvalues[] sorted by >=
this.imagEigenvalues[] elements == 0.0
this.eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
this.eigenvectors[] elements != null
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].data elements != null
this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedD.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedVt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.main[]) >= 1
size(this.transformer.householderVectors[]) >= 1
size(this.transformer.main[]) >= 1
size(this.realEigenvalues[]) >= 1
size(this.imagEigenvalues[]) >= 1
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::ENTER
splitTolerance == 2.2250738585072014E-308
size(main[]) >= 2
size(secondary[]) >= 1
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::EXIT
main[] == orig(main[])
secondary[] == orig(secondary[])
this.transformer == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) >= 2
size(this.secondary[]) >= 1
size(this.squaredSecondary[]) >= 1
size(this.realEigenvalues[]) >= 2
size(this.imagEigenvalues[]) >= 2
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(org.apache.commons.math.linear.RealMatrix, double):::ENTER
splitTolerance == 2.2250738585072014E-308
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(org.apache.commons.math.linear.RealMatrix, double):::EXIT
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.sigmaLow == 0.0
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::ENTER
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.work[] elements == 0.0
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedT == orig(this.transformer.cachedT)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.sigma == 0.0
this.sigmaLow == 0.0
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
orig(this.upperSpectra) % this.upperSpectra == 0
this.upperSpectra > orig(this.upperSpectra)
orig(this.minPivot) % this.minPivot == 0
orig(this.minPivot) == this.minPivot**2
this.minPivot == orig(this.minPivot)**2
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::ENTER
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedT == orig(this.transformer.cachedT)
this.minPivot == orig(this.minPivot)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.qMax == orig(this.qMax)
this.dMin == orig(this.dMin)
this.dN == orig(this.dN)
this.g == orig(this.g)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.sigmaLow == 0.0
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
orig(this.upperSpectra) % this.upperSpectra == 0
this.upperSpectra > orig(this.upperSpectra)
orig(this.minPivot) % this.minPivot == 0
orig(this.minPivot) == this.minPivot**2
this.minPivot == orig(this.minPivot)**2
this.sigma >= orig(this.sigma)
this.pingPong >= orig(this.pingPong)
this.eMin >= orig(this.eMin)
this.tType <= orig(this.tType)
this.dMin1 >= orig(this.dMin1)
this.dMin2 >= orig(this.dMin2)
this.dN1 >= orig(this.dN1)
this.dN2 >= orig(this.dN2)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getD():::ENTER
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.cachedVt == null
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getD():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.cachedV == orig(this.cachedV)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedD.getClass().getName() == orig(this.cachedD.getClass().getName())
this.cachedVt == orig(this.cachedVt)
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::ENTER
this has only one value
this.main has only one value
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary has only one value
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.secondary[] elements != 0
this.squaredSecondary has only one value
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 6
this.transformer.main has only one value
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary has only one value
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.transformer.secondary[] elements != 0
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.work has only one value
this.work[] one of { [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932], [2.0020000103936577, 0.9999999999999997, 8.533798493190963E-24, 8.533798493197168E-21, 1.0030000103936572, 9.999999999992725E-4, 0.0, 4.041731596144979E-21, 1.002000010393658, 0.0, 9.999999999992725E-4, 9.999984071019884E-4, 0.0020000103936573593, 0.0, 0.002642668607682132, 0.0013269351371628176, 0.0010000103936571184, 1.5777218104420236E-30, 1.870588261705347E-7, 1.8893157510071672E-7, 1.0393657686729643E-8, 0.0, 3.0937773380520616E-7, 2.47038510057482E-7, 1.1038361430635582, 0.22263886988105908, -0.2552545490253508, 1.7555178883626812, 0.8391024864687489, 1.9987937859746876, 2.140058197351134, 2.149975038293427, 0.6466561924473226, 2.165394965693685, 1.2443350659831158, 2.004945915505932] }
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues has only one value
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName())
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.main has only one value
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary has only one value
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.secondary[] elements != 0
this.squaredSecondary has only one value
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 6
this.transformer.main has only one value
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary has only one value
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.transformer.secondary[] elements != 0
this.transformer.cachedQ has only one value
this.transformer.cachedQt has only one value
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.work has only one value
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues has only one value
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
this.cachedV == null
this.cachedD == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
this.eigenvectors[] == orig(this.eigenvectors[]) (elementwise)
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName()) (elementwise)
this.eigenvectors[].data == orig(this.eigenvectors[].data) (elementwise)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalue(int):::ENTER
this.upperSpectra >= 1.072
this.minPivot one of { 2.2250738585072014E-308, 3.20410635625037E-306, 6.61969654843869E-300 }
this.sigma one of { 0.0, 0.10000000053147409, 1.002000010393658 }
this.sigmaLow == 0.0
this.eMin one of { 0.0, 9.999999999992725E-4, 0.20000241125791965 }
this.dMin1 one of { 0.0, 9.999999999992725E-4, 0.20000060281629697 }
this.dMin2 one of { 0.0, 0.7999903550846043, 0.9999999999999997 }
this.dN1 one of { 0.0, 9.999999999992725E-4, 0.20000060281629697 }
this.dN2 one of { 0.0, 0.7999903550846043, 0.9999999999999997 }
this.realEigenvalues[] sorted by >
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
this.cachedV == null
this.cachedD == null
this.cachedVt == null
i >= 0
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalue(int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.upperSpectra >= 1.072
this.minPivot one of { 2.2250738585072014E-308, 3.20410635625037E-306, 6.61969654843869E-300 }
this.sigma one of { 0.0, 0.10000000053147409, 1.002000010393658 }
this.sigmaLow == 0.0
this.eMin one of { 0.0, 9.999999999992725E-4, 0.20000241125791965 }
this.dMin1 one of { 0.0, 9.999999999992725E-4, 0.20000060281629697 }
this.dMin2 one of { 0.0, 0.7999903550846043, 0.9999999999999997 }
this.dN1 one of { 0.0, 9.999999999992725E-4, 0.20000060281629697 }
this.dN2 one of { 0.0, 0.7999903550846043, 0.9999999999999997 }
this.realEigenvalues[] sorted by >
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::ENTER
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) >= 2
size(this.secondary[]) >= 1
size(this.squaredSecondary[]) >= 1
size(this.transformer.householderVectors[]) one of { 3, 6, 200 }
size(this.transformer.main[]) one of { 3, 6, 200 }
size(this.transformer.secondary[]) one of { 2, 5, 199 }
size(this.realEigenvalues[]) >= 2
size(this.imagEigenvalues[]) >= 2
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
return[] sorted by >=
size(this.main[]) >= 2
size(this.secondary[]) >= 1
size(this.squaredSecondary[]) >= 1
size(this.transformer.householderVectors[]) one of { 3, 6, 200 }
size(this.transformer.main[]) one of { 3, 6, 200 }
size(this.transformer.secondary[]) one of { 2, 5, 199 }
size(this.realEigenvalues[]) >= 2
size(this.imagEigenvalues[]) >= 2
size(return[]) >= 2
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getSolver():::ENTER
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.sigma one of { 1.002000010393658, 2.0000000010676713, 32.61784401148372 }
this.tType one of { -2, -1 }
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
size(this.squaredSecondary[]) one of { 4, 5 }
size(this.transformer.householderVectors[]) one of { 5, 6 }
size(this.transformer.main[]) one of { 5, 6 }
size(this.transformer.secondary[]) one of { 4, 5 }
size(this.work[]) one of { 30, 36 }
size(this.realEigenvalues[]) one of { 5, 6 }
size(this.imagEigenvalues[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getSolver():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.sigma one of { 1.002000010393658, 2.0000000010676713, 32.61784401148372 }
this.tType one of { -2, -1 }
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] }
this.cachedV == null
this.cachedD == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl$Solver.class
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
size(this.squaredSecondary[]) one of { 4, 5 }
size(this.transformer.householderVectors[]) one of { 5, 6 }
size(this.transformer.main[]) one of { 5, 6 }
size(this.transformer.secondary[]) one of { 4, 5 }
size(this.work[]) one of { 30, 36 }
size(this.realEigenvalues[]) one of { 5, 6 }
size(this.imagEigenvalues[]) one of { 5, 6 }
size(this.eigenvectors[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getV():::ENTER
this.sigma one of { 0.0, 1.002000010393658, 12.000000020145311 }
this.sigmaLow == 0.0
this.eMin one of { 0.0, 9.999999999992725E-4, 48.00033313129392 }
this.dMin1 one of { 0.0, 9.999999999992725E-4, 48.00006662634914 }
this.dMin2 one of { 0.0, 0.9999999999999997, 239.9983343550771 }
this.dN1 one of { 0.0, 9.999999999992725E-4, 48.00006662634914 }
this.dN2 one of { 0.0, 0.9999999999999997, 239.9983343550771 }
this.cachedD == null
this.cachedVt == null
size(this.transformer.householderVectors[]) one of { 3, 6 }
size(this.transformer.main[]) one of { 3, 6 }
size(this.transformer.secondary[]) one of { 2, 5 }
size(this.eigenvectors[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getV():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName())
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.sigma one of { 0.0, 1.002000010393658, 12.000000020145311 }
this.sigmaLow == 0.0
this.eMin one of { 0.0, 9.999999999992725E-4, 48.00033313129392 }
this.dMin1 one of { 0.0, 9.999999999992725E-4, 48.00006662634914 }
this.dMin2 one of { 0.0, 0.9999999999999997, 239.9983343550771 }
this.dN1 one of { 0.0, 9.999999999992725E-4, 48.00006662634914 }
this.dN2 one of { 0.0, 0.9999999999999997, 239.9983343550771 }
this.cachedD == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) one of { 3, 6 }
size(this.transformer.main[]) one of { 3, 6 }
size(this.transformer.secondary[]) one of { 2, 5 }
this.eigenvectors[] == orig(this.eigenvectors[]) (elementwise)
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName()) (elementwise)
this.eigenvectors[].data == orig(this.eigenvectors[].data) (elementwise)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getVT():::ENTER
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getVT():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.cachedV == orig(this.cachedV)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedD == orig(this.cachedD)
this.cachedD.getClass().getName() == orig(this.cachedD.getClass().getName())
this.cachedVt.getClass().getName() == orig(this.cachedVt.getClass().getName())
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::ENTER
this.main == null
this.secondary == null
this.squaredSecondary == null
this.transformer == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT227
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT227;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.squaredSecondary == orig(this.squaredSecondary)
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.main == null
this.secondary == null
this.squaredSecondary == null
this.transformer == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.transformToTridiagonal(org.apache.commons.math.linear.RealMatrix):::ENTER
this.main == null
this.secondary == null
this.squaredSecondary == null
this.transformer == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.transformToTridiagonal(org.apache.commons.math.linear.RealMatrix):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest:::OBJECT
this.refValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
this.refValues[] sorted by >
this.matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.refValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.checkEigenValues(double[], org.apache.commons.math.linear.EigenDecomposition, double):::ENTER
targetValues[] one of { [2.0, 0.0, 12.0], [2.0, 1.0, -1.0], [8.0, -1.0, -1.0] }
targetValues[] elements >= -1.0
ed.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
tolerance == 1.0E-12
size(targetValues[]) == 3
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.checkEigenValues(double[], org.apache.commons.math.linear.EigenDecomposition, double):::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
targetValues[] == orig(targetValues[])
targetValues[] one of { [2.0, 0.0, 12.0], [2.0, 1.0, -1.0], [8.0, -1.0, -1.0] }
targetValues[] elements >= -1.0
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.checkEigenVector(double[], org.apache.commons.math.linear.EigenDecomposition, double):::ENTER
ed.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
tolerance == 1.0E-12
size(eigenVector[]) == 3
this.matrix.getClass().getName() != ed.getClass().getName()
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.checkEigenVector(double[], org.apache.commons.math.linear.EigenDecomposition, double):::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
eigenVector[] == orig(eigenVector[])
this.matrix.getClass().getName() != orig(ed.getClass().getName())
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int):::ENTER
diagonal != null
rows >= size(diagonal[])
columns >= size(diagonal[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int):::EXIT
diagonal[] == orig(diagonal[])
return != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int):::ENTER
r != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int):::EXIT
return != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[]):::ENTER
r != null
eigenValues != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[]):::EXIT
eigenValues[] == orig(eigenValues[])
return != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.isIncludedColumn(double[], org.apache.commons.math.linear.RealMatrix, double):::ENTER
this.matrix.getClass().getName() == searchMatrix.getClass().getName()
tolerance == 1.0E-12
size(column[]) == 3
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.isIncludedColumn(double[], org.apache.commons.math.linear.RealMatrix, double):::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.matrix.getClass().getName() == orig(searchMatrix.getClass().getName())
column[] == orig(column[])
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.isIncludedColumn(double[], org.apache.commons.math.linear.RealMatrix, double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.isIncludedValue(double, double[], double):::ENTER
this.refValues != null
this.matrix != null
searchArray != null
tolerance == 1.0E-12
size(searchArray[]) == 3
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.isIncludedValue(double, double[], double):::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
searchArray[] == orig(searchArray[])
this.refValues != null
this.matrix != null
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.isIncludedValue(double, double[], double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.setUp():::ENTER
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.setUp():::EXIT
this.refValues != null
this.matrix != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.suite():::EXIT
return != null
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown():::ENTER
this.refValues != null
this.matrix != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown():::EXIT
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testAEqualVDVt():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testAEqualVDVt():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testBigMatrix():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testBigMatrix():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDiagonal():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDiagonal():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension1():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension1():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension2():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension2():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension3():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension3():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithSplit():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithSplit():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithoutSplit():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithoutSplit():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimensions():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimensions():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDistinctEigenvalues():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDistinctEigenvalues():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvalues():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvalues():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvectors():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvectors():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testRepeatedEigenvalue():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testRepeatedEigenvalue():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testTridiagonal():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testTridiagonal():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testVOrthogonal():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testVOrthogonal():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testZeroDivide():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testZeroDivide():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest:::OBJECT
this.refValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
this.refValues[] sorted by >
this.matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.refValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.EigenSolverTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.EigenSolverTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.setUp():::ENTER
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.setUp():::EXIT
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.tearDown():::ENTER
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.tearDown():::EXIT
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testInvertible():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testInvertible():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testNonInvertible():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testNonInvertible():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testSolve():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testSolve():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testSolveDimensionErrors():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testSolveDimensionErrors():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.InvalidMatrixException:::CLASS
===========================================================================
org.apache.commons.math.linear.InvalidMatrixException:::OBJECT
this.pattern has only one value
this.pattern.toString == "matrix is singular"
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(java.lang.String, java.lang.Object[]):::ENTER
pattern has only one value
pattern.toString == "matrix is singular"
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString == "matrix is singular"
arguments[] == []
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m != null
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column >= 0
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == right.getClass().getName()
left != null
right != null
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkRowIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m != null
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
row >= 0
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkRowIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix, int, int, int, int):::ENTER
m has only one value
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
startRow == 0
endRow one of { 1, 3 }
startColumn == 0
endColumn == 3
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix, int, int, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == right.getClass().getName()
left != null
left.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
right != null
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealDiagonalMatrix(double[]):::ENTER
diagonal[] one of { [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [2.9999999999999996, 0.9999999999999998], [4.000000000000002, 2.9999999999999987, 2.0000000000000004] }
diagonal[] sorted by >
size(diagonal[]) one of { 2, 3, 6 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealDiagonalMatrix(double[]):::EXIT
diagonal[] == orig(diagonal[])
diagonal[] one of { [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [2.9999999999999996, 0.9999999999999998], [4.000000000000002, 2.9999999999999987, 2.0000000000000004] }
diagonal[] sorted by >
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int):::ENTER
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int):::EXIT
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::ENTER
data != null
data.getClass().getName() == double[][].class
data[] elements != null
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::EXIT
data[] == orig(data[])
data[] elements != null
return != null
return.getClass().getName() != orig(data.getClass().getName())
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(int, int):::ENTER
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(int, int):::EXIT
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::OBJECT
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.separator has only one value
this.separator.toString == "; "
this.trimmedPrefix has only one value
this.trimmedPrefix.toString == "{"
this.trimmedSuffix has only one value
this.trimmedSuffix.toString == "}"
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
separator.toString == orig(separator.toString)
prefix.toString == "{"
suffix.toString == "}"
separator.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.SingularMatrixException:::CLASS
===========================================================================
org.apache.commons.math.linear.SingularMatrixException:::OBJECT
this.pattern has only one value
this.pattern.toString == "matrix is singular"
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.linear.SingularMatrixException.SingularMatrixException():::EXIT
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1:::OBJECT
this.val$data.getClass().getName() == double[][].class
this.val$data[] elements != null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m == 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n == 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName() == double[][].class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] elements != null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] sorted by <
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] elements >= 1.9999999999999993
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] sorted by >
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.val$data[]) one of { 2, 4 }
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1.(org.apache.commons.math.linear.SingularValueDecompositionImpl, double[][]):::ENTER
org.apache.commons.math.linear.SingularValueDecompositionImpl.this has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m == 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n == 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName() == double[][].class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
$hidden$2.getClass().getName() == double[][].class
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[]) == 4
size($hidden$2[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1.(org.apache.commons.math.linear.SingularValueDecompositionImpl, double[][]):::EXIT
org.apache.commons.math.linear.SingularValueDecompositionImpl.this == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName())
$hidden$2[] == orig($hidden$2[])
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1.visit(int, int, double):::ENTER
row >= 0
column >= 0
value one of { -0.49999999999999994, 0.5000000000000001 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1.visit(int, int, double):::EXIT
this.val$data == orig(this.val$data)
this.val$data.getClass().getName() == orig(this.val$data.getClass().getName())
this.val$data[] == orig(this.val$data[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName())
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver:::OBJECT
this.singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
this.singularValues[] sorted by >
this.uT.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.v.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.Solver(double[], org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.linear.RealMatrix, boolean):::ENTER
singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
uT.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
v.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.Solver(double[], org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.linear.RealMatrix, boolean):::EXIT
singularValues[] == orig(singularValues[])
singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.solve(double[]):::ENTER
this has only one value
this.singularValues has only one value
this.singularValues[] == [2.9999999999999996, 0.9999999999999998]
this.singularValues[] elements one of { 0.9999999999999998, 2.9999999999999996 }
this.uT has only one value
this.v has only one value
this.nonSingular == true
b[] one of { [1.0, 0.0], [2.0, -5.0], [3.0, 1.0] }
size(b[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.solve(double[]):::EXIT
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.uT == orig(this.uT)
this.uT.getClass().getName() == orig(this.uT.getClass().getName())
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.nonSingular == orig(this.nonSingular)
b[] == orig(b[])
this.singularValues has only one value
this.singularValues[] == [2.9999999999999996, 0.9999999999999998]
this.singularValues[] elements one of { 0.9999999999999998, 2.9999999999999996 }
this.uT has only one value
this.v has only one value
this.nonSingular == true
b[] one of { [1.0, 0.0], [2.0, -5.0], [3.0, 1.0] }
return[] one of { [-3.5066666666666677, 3.1200000000000023], [-0.3866666666666665, 1.9600000000000009], [-0.31999999999999995, 0.7600000000000005] }
size(return[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealMatrix):::ENTER
this has only one value
this.singularValues has only one value
this.singularValues[] == [2.9999999999999996, 0.9999999999999998]
this.singularValues[] elements one of { 0.9999999999999998, 2.9999999999999996 }
this.uT has only one value
this.v has only one value
this.nonSingular == true
b has only one value
b.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealMatrix):::EXIT
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.uT == orig(this.uT)
this.uT.getClass().getName() == orig(this.uT.getClass().getName())
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.nonSingular == orig(this.nonSingular)
this.singularValues has only one value
this.singularValues[] == [2.9999999999999996, 0.9999999999999998]
this.singularValues[] elements one of { 0.9999999999999998, 2.9999999999999996 }
this.uT has only one value
this.v has only one value
this.nonSingular == true
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.singularValues has only one value
this.singularValues[] == [2.9999999999999996, 0.9999999999999998]
this.singularValues[] elements one of { 0.9999999999999998, 2.9999999999999996 }
this.uT has only one value
this.v has only one value
this.nonSingular == true
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealVector):::EXIT
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.uT == orig(this.uT)
this.uT.getClass().getName() == orig(this.uT.getClass().getName())
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.nonSingular == orig(this.nonSingular)
this.singularValues has only one value
this.singularValues[] == [2.9999999999999996, 0.9999999999999998]
this.singularValues[] elements one of { 0.9999999999999998, 2.9999999999999996 }
this.uT has only one value
this.v has only one value
this.nonSingular == true
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl:::OBJECT
this.n >= 2
this.transformer.householderVectors.getClass().getName() == double[][].class
this.transformer.householderVectors[] elements != null
this.transformer.cachedU.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.transformer.cachedB == null
this.transformer.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.mainTridiagonal[] elements >= 0.0
this.eigenDecomposition.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
this.singularValues[] elements >= 0.0
this.singularValues[] sorted by >
this.cachedU.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedUt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedS.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedVt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.main[]) one of { 2, 3, 4 }
size(this.transformer.secondary[]) one of { 1, 2, 3 }
size(this.mainBidiagonal[]) one of { 2, 3, 4 }
size(this.secondaryBidiagonal[]) one of { 1, 2, 3 }
size(this.mainTridiagonal[]) one of { 2, 3, 4 }
size(this.secondaryTridiagonal[]) one of { 1, 2, 3 }
size(this.singularValues[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.SingularValueDecompositionImpl(org.apache.commons.math.linear.RealMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.SingularValueDecompositionImpl(org.apache.commons.math.linear.RealMatrix):::EXIT
this.transformer.cachedU == null
this.transformer.cachedV == null
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getConditionNumber():::ENTER
this.m == 2
this.n == 2
this.transformer.main[] == [-2.473863375370596, -1.2126781251816645]
this.transformer.main[] elements one of { -2.473863375370596, -1.2126781251816645 }
this.transformer.secondary[] == [1.5522280002325306]
this.transformer.secondary[] elements == 1.5522280002325306
this.transformer.cachedU == null
this.transformer.cachedV == null
this.mainBidiagonal[] == [-2.473863375370596, -1.2126781251816645]
this.mainBidiagonal[] elements one of { -2.473863375370596, -1.2126781251816645 }
this.secondaryBidiagonal[] == [1.5522280002325306]
this.secondaryBidiagonal[] elements == 1.5522280002325306
this.mainTridiagonal[] == [6.119999999999999, 3.8799999999999977]
this.mainTridiagonal[] elements one of { 3.8799999999999977, 6.119999999999999 }
this.secondaryTridiagonal[] == [-3.8399999999999985]
this.secondaryTridiagonal[] elements == -3.8399999999999985
this.singularValues[] == [2.9999999999999996, 0.9999999999999998]
this.singularValues[] elements one of { 0.9999999999999998, 2.9999999999999996 }
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV == null
this.cachedVt == null
size(this.transformer.householderVectors[]) == 2
size(this.transformer.main[]) == 2
size(this.transformer.secondary[]) == 1
size(this.mainBidiagonal[]) == 2
size(this.secondaryBidiagonal[]) == 1
size(this.mainTridiagonal[]) == 2
size(this.secondaryTridiagonal[]) == 1
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getConditionNumber():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV == orig(this.transformer.cachedV)
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedV == orig(this.cachedV)
this.cachedVt == orig(this.cachedVt)
this.m == 2
this.n == 2
this.transformer.main[] == [-2.473863375370596, -1.2126781251816645]
this.transformer.main[] elements one of { -2.473863375370596, -1.2126781251816645 }
this.transformer.secondary[] == [1.5522280002325306]
this.transformer.secondary[] elements == 1.5522280002325306
this.transformer.cachedU == null
this.transformer.cachedV == null
this.mainBidiagonal[] == [-2.473863375370596, -1.2126781251816645]
this.mainBidiagonal[] elements one of { -2.473863375370596, -1.2126781251816645 }
this.secondaryBidiagonal[] == [1.5522280002325306]
this.secondaryBidiagonal[] elements == 1.5522280002325306
this.mainTridiagonal[] == [6.119999999999999, 3.8799999999999977]
this.mainTridiagonal[] elements one of { 3.8799999999999977, 6.119999999999999 }
this.secondaryTridiagonal[] == [-3.8399999999999985]
this.secondaryTridiagonal[] elements == -3.8399999999999985
this.singularValues[] == [2.9999999999999996, 0.9999999999999998]
this.singularValues[] elements one of { 0.9999999999999998, 2.9999999999999996 }
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV == null
this.cachedVt == null
return == 3.0000000000000004
size(this.transformer.householderVectors[]) == 2
size(this.transformer.main[]) == 2
size(this.transformer.secondary[]) == 1
size(this.mainBidiagonal[]) == 2
size(this.secondaryBidiagonal[]) == 1
size(this.mainTridiagonal[]) == 2
size(this.secondaryTridiagonal[]) == 1
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getCovariance(double):::ENTER
this has only one value
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.transformer.cachedU == null
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
this.cachedU == null
this.cachedUt == null
this.cachedS == null
minSingularValue one of { 0.0, 6.0 }
size(this.transformer.householderVectors[]) == 4
size(this.transformer.main[]) == 4
size(this.transformer.secondary[]) == 3
size(this.mainBidiagonal[]) == 4
size(this.secondaryBidiagonal[]) == 3
size(this.mainTridiagonal[]) == 4
size(this.secondaryTridiagonal[]) == 3
size(this.singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getCovariance(double):::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV.getClass().getName() == orig(this.transformer.cachedV.getClass().getName())
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedVt.getClass().getName() == orig(this.cachedVt.getClass().getName())
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.transformer.cachedU == null
this.transformer.cachedV has only one value
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV has only one value
this.cachedVt has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) == 4
size(this.transformer.main[]) == 4
size(this.transformer.secondary[]) == 3
size(this.mainBidiagonal[]) == 4
size(this.secondaryBidiagonal[]) == 3
size(this.mainTridiagonal[]) == 4
size(this.secondaryTridiagonal[]) == 3
size(this.singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getRank():::ENTER
this.m == 2
this.n == 2
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.transformer.secondary[] elements one of { 0.0, 1.5522280002325306 }
this.transformer.secondary[] one of { [0.0], [1.5522280002325306] }
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.secondaryBidiagonal[] elements one of { 0.0, 1.5522280002325306 }
this.secondaryBidiagonal[] one of { [0.0], [1.5522280002325306] }
this.mainTridiagonal[] one of { [1.0, 0.0], [6.119999999999999, 3.8799999999999977] }
this.secondaryTridiagonal[] elements one of { -3.8399999999999985, 0.0 }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [0.0] }
this.singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
this.cachedS == null
this.cachedVt == null
size(this.transformer.householderVectors[]) == 2
size(this.transformer.main[]) == 2
size(this.transformer.secondary[]) == 1
size(this.mainBidiagonal[]) == 2
size(this.secondaryBidiagonal[]) == 1
size(this.mainTridiagonal[]) == 2
size(this.secondaryTridiagonal[]) == 1
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getRank():::EXIT307
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getRank():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedU.getClass().getName() == orig(this.transformer.cachedU.getClass().getName())
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV == orig(this.transformer.cachedV)
this.transformer.cachedV.getClass().getName() == orig(this.transformer.cachedV.getClass().getName())
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedU.getClass().getName() == orig(this.cachedU.getClass().getName())
this.cachedUt == orig(this.cachedUt)
this.cachedUt.getClass().getName() == orig(this.cachedUt.getClass().getName())
this.cachedS == orig(this.cachedS)
this.cachedV == orig(this.cachedV)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedVt == orig(this.cachedVt)
this.m == 2
this.n == 2
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.transformer.secondary[] elements one of { 0.0, 1.5522280002325306 }
this.transformer.secondary[] one of { [0.0], [1.5522280002325306] }
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.secondaryBidiagonal[] elements one of { 0.0, 1.5522280002325306 }
this.secondaryBidiagonal[] one of { [0.0], [1.5522280002325306] }
this.mainTridiagonal[] one of { [1.0, 0.0], [6.119999999999999, 3.8799999999999977] }
this.secondaryTridiagonal[] elements one of { -3.8399999999999985, 0.0 }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [0.0] }
this.singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
this.cachedS == null
this.cachedVt == null
return one of { 1, 2 }
size(this.transformer.householderVectors[]) == 2
size(this.transformer.main[]) == 2
size(this.transformer.secondary[]) == 1
size(this.mainBidiagonal[]) == 2
size(this.secondaryBidiagonal[]) == 1
size(this.mainTridiagonal[]) == 2
size(this.secondaryTridiagonal[]) == 1
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getS():::ENTER
this.m one of { 2, 3, 4 }
this.n one of { 2, 3, 4 }
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.transformer.secondary[] elements one of { 1.0143130258126063, 1.5522280002325306, 1.6656841689812205 }
this.transformer.secondary[] one of { [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.transformer.secondary[] sorted by >
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.secondaryBidiagonal[] elements one of { 1.0143130258126063, 1.5522280002325306, 1.6656841689812205 }
this.secondaryBidiagonal[] one of { [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.secondaryBidiagonal[] sorted by >
this.mainTridiagonal[] one of { [6.119999999999999, 3.8799999999999977], [10.0672, 10.240907537383363, 8.691892462616643] }
this.secondaryTridiagonal[] elements one of { -3.8399999999999985, 2.77158204542755, 5.285024518391565 }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [5.285024518391565, 2.77158204542755] }
this.secondaryTridiagonal[] sorted by >
this.singularValues[] one of { [2.9999999999999996, 0.9999999999999998], [4.000000000000002, 2.9999999999999987, 2.0000000000000004] }
this.cachedUt == null
this.cachedVt == null
size(this.transformer.householderVectors[]) one of { 2, 3, 4 }
size(this.transformer.main[]) one of { 2, 3 }
size(this.transformer.secondary[]) one of { 1, 2 }
size(this.mainBidiagonal[]) one of { 2, 3 }
size(this.secondaryBidiagonal[]) one of { 1, 2 }
size(this.mainTridiagonal[]) one of { 2, 3 }
size(this.secondaryTridiagonal[]) one of { 1, 2 }
size(this.singularValues[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getS():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedU.getClass().getName() == orig(this.transformer.cachedU.getClass().getName())
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV == orig(this.transformer.cachedV)
this.transformer.cachedV.getClass().getName() == orig(this.transformer.cachedV.getClass().getName())
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedU.getClass().getName() == orig(this.cachedU.getClass().getName())
this.cachedUt == orig(this.cachedUt)
this.cachedS.getClass().getName() == orig(this.cachedS.getClass().getName())
this.cachedV == orig(this.cachedV)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedVt == orig(this.cachedVt)
this.m one of { 2, 3, 4 }
this.n one of { 2, 3, 4 }
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.transformer.secondary[] elements one of { 1.0143130258126063, 1.5522280002325306, 1.6656841689812205 }
this.transformer.secondary[] one of { [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.transformer.secondary[] sorted by >
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.secondaryBidiagonal[] elements one of { 1.0143130258126063, 1.5522280002325306, 1.6656841689812205 }
this.secondaryBidiagonal[] one of { [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.secondaryBidiagonal[] sorted by >
this.mainTridiagonal[] one of { [6.119999999999999, 3.8799999999999977], [10.0672, 10.240907537383363, 8.691892462616643] }
this.secondaryTridiagonal[] elements one of { -3.8399999999999985, 2.77158204542755, 5.285024518391565 }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [5.285024518391565, 2.77158204542755] }
this.secondaryTridiagonal[] sorted by >
this.singularValues[] one of { [2.9999999999999996, 0.9999999999999998], [4.000000000000002, 2.9999999999999987, 2.0000000000000004] }
this.cachedUt == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) one of { 2, 3, 4 }
size(this.transformer.main[]) one of { 2, 3 }
size(this.transformer.secondary[]) one of { 1, 2 }
size(this.mainBidiagonal[]) one of { 2, 3 }
size(this.secondaryBidiagonal[]) one of { 1, 2 }
size(this.mainTridiagonal[]) one of { 2, 3 }
size(this.secondaryTridiagonal[]) one of { 1, 2 }
size(this.singularValues[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getSingularValues():::ENTER
this.m one of { 4, 6 }
this.n one of { 4, 6 }
this.transformer.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.transformer.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.transformer.cachedU == null
this.transformer.cachedV == null
this.mainBidiagonal[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondaryBidiagonal[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.mainTridiagonal[] one of { [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158], [1763.0389393800722, 13480.620910336705, 4.0128834306225425, 1.0012048526079087], [5508.979925544135, 9733.403344402757, 5.249084965368742, 1.0415830877409737] }
this.secondaryTridiagonal[] one of { [-101.24722218411725, -45.37683086462475, 11.736783389292189], [4871.564637986937, 5.774463704534038, -0.002927289786995455], [7321.604496183605, -0.031606838611053976, -0.41649347576462753] }
this.singularValues[] one of { [16.0, 8.000000000000002, 4.0, 1.9999999999999993], [123.45600000000002, 2.3, 1.0009999999998886, 0.9989999999997505], [123.45600000000002, 2.300000000000006, 1.000999999999996, 0.9989999999999997] }
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV == null
this.cachedVt == null
size(this.transformer.householderVectors[]) one of { 4, 6 }
size(this.transformer.main[]) == 4
size(this.transformer.secondary[]) == 3
size(this.mainBidiagonal[]) == 4
size(this.secondaryBidiagonal[]) == 3
size(this.mainTridiagonal[]) == 4
size(this.secondaryTridiagonal[]) == 3
size(this.singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getSingularValues():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV == orig(this.transformer.cachedV)
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedV == orig(this.cachedV)
this.cachedVt == orig(this.cachedVt)
this.m one of { 4, 6 }
this.n one of { 4, 6 }
this.transformer.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.transformer.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.transformer.cachedU == null
this.transformer.cachedV == null
this.mainBidiagonal[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondaryBidiagonal[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.mainTridiagonal[] one of { [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158], [1763.0389393800722, 13480.620910336705, 4.0128834306225425, 1.0012048526079087], [5508.979925544135, 9733.403344402757, 5.249084965368742, 1.0415830877409737] }
this.secondaryTridiagonal[] one of { [-101.24722218411725, -45.37683086462475, 11.736783389292189], [4871.564637986937, 5.774463704534038, -0.002927289786995455], [7321.604496183605, -0.031606838611053976, -0.41649347576462753] }
this.singularValues[] one of { [16.0, 8.000000000000002, 4.0, 1.9999999999999993], [123.45600000000002, 2.3, 1.0009999999998886, 0.9989999999997505], [123.45600000000002, 2.300000000000006, 1.000999999999996, 0.9989999999999997] }
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV == null
this.cachedVt == null
return[] one of { [16.0, 8.000000000000002, 4.0, 1.9999999999999993], [123.45600000000002, 2.3, 1.0009999999998886, 0.9989999999997505], [123.45600000000002, 2.300000000000006, 1.000999999999996, 0.9989999999999997] }
size(this.transformer.householderVectors[]) one of { 4, 6 }
size(this.transformer.main[]) == 4
size(this.transformer.secondary[]) == 3
size(this.mainBidiagonal[]) == 4
size(this.secondaryBidiagonal[]) == 3
size(this.mainTridiagonal[]) == 4
size(this.secondaryTridiagonal[]) == 3
size(this.singularValues[]) == 4
size(return[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getSolver():::ENTER
this.m == 2
this.n == 2
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.transformer.secondary[] elements one of { 0.0, 1.5522280002325306 }
this.transformer.secondary[] one of { [0.0], [1.5522280002325306] }
this.transformer.cachedU == null
this.transformer.cachedV == null
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.secondaryBidiagonal[] elements one of { 0.0, 1.5522280002325306 }
this.secondaryBidiagonal[] one of { [0.0], [1.5522280002325306] }
this.mainTridiagonal[] one of { [1.0, 0.0], [6.119999999999999, 3.8799999999999977] }
this.secondaryTridiagonal[] elements one of { -3.8399999999999985, 0.0 }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [0.0] }
this.singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV == null
this.cachedVt == null
size(this.transformer.householderVectors[]) == 2
size(this.transformer.main[]) == 2
size(this.transformer.secondary[]) == 1
size(this.mainBidiagonal[]) == 2
size(this.secondaryBidiagonal[]) == 1
size(this.mainTridiagonal[]) == 2
size(this.secondaryTridiagonal[]) == 1
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getSolver():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedB == orig(this.transformer.cachedB)
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedS == orig(this.cachedS)
this.cachedVt == orig(this.cachedVt)
this.m == 2
this.n == 2
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.transformer.secondary[] elements one of { 0.0, 1.5522280002325306 }
this.transformer.secondary[] one of { [0.0], [1.5522280002325306] }
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.secondaryBidiagonal[] elements one of { 0.0, 1.5522280002325306 }
this.secondaryBidiagonal[] one of { [0.0], [1.5522280002325306] }
this.mainTridiagonal[] one of { [1.0, 0.0], [6.119999999999999, 3.8799999999999977] }
this.secondaryTridiagonal[] elements one of { -3.8399999999999985, 0.0 }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [0.0] }
this.singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
this.cachedS == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.class
size(this.transformer.householderVectors[]) == 2
size(this.transformer.main[]) == 2
size(this.transformer.secondary[]) == 1
size(this.mainBidiagonal[]) == 2
size(this.secondaryBidiagonal[]) == 1
size(this.mainTridiagonal[]) == 2
size(this.secondaryTridiagonal[]) == 1
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getU():::ENTER
this.m one of { 2, 3, 4 }
this.n one of { 2, 3, 4 }
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.transformer.secondary[] one of { [0.0], [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.transformer.secondary[] sorted by >
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.secondaryBidiagonal[] one of { [0.0], [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.secondaryBidiagonal[] sorted by >
this.mainTridiagonal[] one of { [1.0, 0.0], [6.119999999999999, 3.8799999999999977], [10.0672, 10.240907537383363, 8.691892462616643] }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [0.0], [5.285024518391565, 2.77158204542755] }
this.secondaryTridiagonal[] sorted by >
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998], [4.000000000000002, 2.9999999999999987, 2.0000000000000004] }
this.cachedUt == null
this.cachedVt == null
size(this.transformer.householderVectors[]) one of { 2, 3, 4 }
size(this.transformer.main[]) one of { 2, 3 }
size(this.transformer.secondary[]) one of { 1, 2 }
size(this.mainBidiagonal[]) one of { 2, 3 }
size(this.secondaryBidiagonal[]) one of { 1, 2 }
size(this.mainTridiagonal[]) one of { 2, 3 }
size(this.secondaryTridiagonal[]) one of { 1, 2 }
size(this.singularValues[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getU():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU.getClass().getName() == orig(this.transformer.cachedU.getClass().getName())
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV == orig(this.transformer.cachedV)
this.transformer.cachedV.getClass().getName() == orig(this.transformer.cachedV.getClass().getName())
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU.getClass().getName() == orig(this.cachedU.getClass().getName())
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedS.getClass().getName() == orig(this.cachedS.getClass().getName())
this.cachedV == orig(this.cachedV)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedVt == orig(this.cachedVt)
this.m one of { 2, 3, 4 }
this.n one of { 2, 3, 4 }
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.transformer.secondary[] one of { [0.0], [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.transformer.secondary[] sorted by >
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0], [3.1728851224083106, 2.7324721017036393, -2.768223536545327] }
this.secondaryBidiagonal[] one of { [0.0], [1.5522280002325306], [1.6656841689812205, 1.0143130258126063] }
this.secondaryBidiagonal[] sorted by >
this.mainTridiagonal[] one of { [1.0, 0.0], [6.119999999999999, 3.8799999999999977], [10.0672, 10.240907537383363, 8.691892462616643] }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [0.0], [5.285024518391565, 2.77158204542755] }
this.secondaryTridiagonal[] sorted by >
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998], [4.000000000000002, 2.9999999999999987, 2.0000000000000004] }
this.cachedUt == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) one of { 2, 3, 4 }
size(this.transformer.main[]) one of { 2, 3 }
size(this.transformer.secondary[]) one of { 1, 2 }
size(this.mainBidiagonal[]) one of { 2, 3 }
size(this.secondaryBidiagonal[]) one of { 1, 2 }
size(this.mainTridiagonal[]) one of { 2, 3 }
size(this.secondaryTridiagonal[]) one of { 1, 2 }
size(this.singularValues[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getUT():::ENTER
this.m == 2
this.n == 2
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.transformer.secondary[] elements one of { 0.0, 1.5522280002325306 }
this.transformer.secondary[] one of { [0.0], [1.5522280002325306] }
this.transformer.cachedU == null
this.transformer.cachedV == null
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.secondaryBidiagonal[] elements one of { 0.0, 1.5522280002325306 }
this.secondaryBidiagonal[] one of { [0.0], [1.5522280002325306] }
this.mainTridiagonal[] one of { [1.0, 0.0], [6.119999999999999, 3.8799999999999977] }
this.secondaryTridiagonal[] elements one of { -3.8399999999999985, 0.0 }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [0.0] }
this.singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV == null
this.cachedVt == null
size(this.transformer.householderVectors[]) == 2
size(this.transformer.main[]) == 2
size(this.transformer.secondary[]) == 1
size(this.mainBidiagonal[]) == 2
size(this.secondaryBidiagonal[]) == 1
size(this.mainTridiagonal[]) == 2
size(this.secondaryTridiagonal[]) == 1
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getUT():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV == orig(this.transformer.cachedV)
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedS == orig(this.cachedS)
this.cachedV == orig(this.cachedV)
this.cachedVt == orig(this.cachedVt)
this.m == 2
this.n == 2
this.transformer.main[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.transformer.secondary[] elements one of { 0.0, 1.5522280002325306 }
this.transformer.secondary[] one of { [0.0], [1.5522280002325306] }
this.transformer.cachedV == null
this.mainBidiagonal[] one of { [-2.473863375370596, -1.2126781251816645], [-1.0, 0.0] }
this.secondaryBidiagonal[] elements one of { 0.0, 1.5522280002325306 }
this.secondaryBidiagonal[] one of { [0.0], [1.5522280002325306] }
this.mainTridiagonal[] one of { [1.0, 0.0], [6.119999999999999, 3.8799999999999977] }
this.secondaryTridiagonal[] elements one of { -3.8399999999999985, 0.0 }
this.secondaryTridiagonal[] one of { [-3.8399999999999985], [0.0] }
this.singularValues[] elements one of { 0.0, 1.0, 2.9999999999999996 }
this.singularValues[] one of { [1.0, 0.0], [2.9999999999999996, 0.9999999999999998] }
this.cachedS == null
this.cachedV == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) == 2
size(this.transformer.main[]) == 2
size(this.transformer.secondary[]) == 1
size(this.mainBidiagonal[]) == 2
size(this.secondaryBidiagonal[]) == 1
size(this.mainTridiagonal[]) == 2
size(this.secondaryTridiagonal[]) == 1
size(this.singularValues[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getV():::ENTER
this.m one of { 2, 3, 4 }
this.n one of { 2, 3, 4 }
this.cachedVt == null
size(this.transformer.householderVectors[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getV():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedU.getClass().getName() == orig(this.transformer.cachedU.getClass().getName())
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV.getClass().getName() == orig(this.transformer.cachedV.getClass().getName())
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedU.getClass().getName() == orig(this.cachedU.getClass().getName())
this.cachedUt == orig(this.cachedUt)
this.cachedUt.getClass().getName() == orig(this.cachedUt.getClass().getName())
this.cachedS == orig(this.cachedS)
this.cachedS.getClass().getName() == orig(this.cachedS.getClass().getName())
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedVt == orig(this.cachedVt)
this.m one of { 2, 3, 4 }
this.n one of { 2, 3, 4 }
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getVT():::ENTER
this has only one value
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.transformer.cachedU == null
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
this.cachedU == null
this.cachedUt == null
this.cachedS == null
size(this.transformer.householderVectors[]) == 4
size(this.transformer.main[]) == 4
size(this.transformer.secondary[]) == 3
size(this.mainBidiagonal[]) == 4
size(this.secondaryBidiagonal[]) == 3
size(this.mainTridiagonal[]) == 4
size(this.secondaryTridiagonal[]) == 3
size(this.singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getVT():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV.getClass().getName() == orig(this.transformer.cachedV.getClass().getName())
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedVt.getClass().getName() == orig(this.cachedVt.getClass().getName())
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.transformer.cachedU == null
this.transformer.cachedV has only one value
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV has only one value
this.cachedVt has only one value
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) == 4
size(this.transformer.main[]) == 4
size(this.transformer.secondary[]) == 3
size(this.mainBidiagonal[]) == 4
size(this.secondaryBidiagonal[]) == 3
size(this.mainTridiagonal[]) == 4
size(this.secondaryTridiagonal[]) == 3
size(this.singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest:::CLASS
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest:::OBJECT
this.testSquare.getClass().getName() == double[][].class
this.testSquare[] elements != null
this.testNonSquare.getClass().getName() == double[][].class
this.testNonSquare[] elements != null
size(this.testSquare[]) == 2
size(this.testNonSquare[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.SingularValueDecompositionImplTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.SingularValueDecompositionImplTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.checkAEqualUSVt(org.apache.commons.math.linear.RealMatrix):::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.checkAEqualUSVt(org.apache.commons.math.linear.RealMatrix):::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.checkOrthogonal(org.apache.commons.math.linear.RealMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.checkOrthogonal(org.apache.commons.math.linear.RealMatrix):::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.createTestMatrix(java.util.Random, int, int, double[]):::ENTER
rows one of { 4, 6 }
columns one of { 4, 6 }
singularValues[] == [123.456, 2.3, 1.001, 0.999]
size(singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.createTestMatrix(java.util.Random, int, int, double[]):::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
singularValues[] == orig(singularValues[])
singularValues[] == [123.456, 2.3, 1.001, 0.999]
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.suite():::ENTER
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testAEqualUSVt():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testAEqualUSVt():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testConditionNumber():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testConditionNumber():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testDimensions():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testDimensions():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testHadamard():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testHadamard():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMatricesValues1():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMatricesValues1():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMatricesValues2():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMatricesValues2():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreColumns():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreColumns():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreRows():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreRows():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testUOrthogonal():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testUOrthogonal():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testVOrthogonal():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testVOrthogonal():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest:::CLASS
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest:::OBJECT
this.testSquare.getClass().getName() == double[][].class
this.testSquare[] elements != null
size(this.testSquare[]) == 2
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.SingularValueSolverTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.SingularValueSolverTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.suite():::ENTER
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.testConditionNumber():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.testConditionNumber():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.testSolve():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.testSolve():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.testSolveDimensionErrors():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.testSolveDimensionErrors():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.testSolveSingularityErrors():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.SingularValueSolverTest.testSolveSingularityErrors():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer:::OBJECT
this.householderVectors.getClass().getName() == double[][].class
this.householderVectors[] elements != null
this.cachedQ.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedQt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedT == null
size(this.householderVectors[]) >= 1
size(this.main[]) >= 1
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.TriDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::ENTER
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.TriDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::EXIT
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getMainDiagonalRef():::ENTER
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getMainDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == orig(this.cachedQ)
this.cachedQt == orig(this.cachedQt)
this.cachedT == orig(this.cachedT)
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQ():::ENTER
size(this.householderVectors[]) one of { 3, 5, 6 }
size(this.main[]) one of { 3, 5, 6 }
size(this.secondary[]) one of { 2, 4, 5 }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQ():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ.getClass().getName() == orig(this.cachedQ.getClass().getName())
this.cachedQt.getClass().getName() == orig(this.cachedQt.getClass().getName())
this.cachedT == orig(this.cachedT)
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) one of { 3, 5, 6 }
size(this.main[]) one of { 3, 5, 6 }
size(this.secondary[]) one of { 2, 4, 5 }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQT():::ENTER
this.cachedQ == null
this.cachedQt == null
size(this.householderVectors[]) one of { 3, 5, 6 }
size(this.main[]) one of { 3, 5, 6 }
size(this.secondary[]) one of { 2, 4, 5 }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQT():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == orig(this.cachedQ)
this.cachedT == orig(this.cachedT)
this.cachedQ == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) one of { 3, 5, 6 }
size(this.main[]) one of { 3, 5, 6 }
size(this.secondary[]) one of { 2, 4, 5 }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getSecondaryDiagonalRef():::ENTER
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getSecondaryDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == orig(this.cachedQ)
this.cachedQt == orig(this.cachedQt)
this.cachedT == orig(this.cachedT)
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.transform():::ENTER
this.main[] elements == 0.0
this.secondary[] elements == 0.0
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.transform():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.cachedQ == orig(this.cachedQ)
this.cachedQt == orig(this.cachedQt)
this.cachedT == orig(this.cachedT)
size(this.main[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.secondary[]))
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.util.CompositeFormat:::CLASS
===========================================================================
org.apache.commons.math.util.CompositeFormat:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealVectorFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat.CompositeFormat():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
