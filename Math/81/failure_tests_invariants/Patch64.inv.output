===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5:::OBJECT
this.val$out.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName()
this has only one value
this.val$out has only one value
this.val$out.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this has only one value
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::ENTER
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == $hidden$2.getClass().getName()
org.apache.commons.math.linear.AbstractRealMatrix.this has only one value
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
$hidden$2 has only one value
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::EXIT
this.val$out == orig($hidden$2)
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
this.val$out.getClass().getName() == orig($hidden$2.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::EXIT
this.val$out == orig(this.val$out)
this.val$out.getClass().getName() == orig(this.val$out.getClass().getName())
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension == columnDimension
rowDimension == 6
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::EXIT
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this has only one value
visitor has only one value
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.lu == orig(this.lu)
return == 0.0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.lu == null
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::ENTER
d.getClass().getName() == double[][].class
size(d[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::EXIT
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::ENTER
d.getClass().getName() == double[][].class
copyArray == false
size(d[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::EXIT
this.data == orig(d)
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::ENTER
rowDimension == columnDimension
rowDimension == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::EXIT
orig(rowDimension) == size(this.data[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
this.data[orig(rowDimension)-1] has only one value
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this.data == null
in.getClass().getName() == double[][].class
size(in[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
this.data.getClass().getName() == orig(in.getClass().getName())
this.lu == orig(this.lu)
in[] == orig(in[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::ENTER
rowDimension == size(this.data[])
columnDimension == size(this.data[])
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
this.data[rowDimension-1] has only one value
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
orig(rowDimension) == orig(columnDimension)
orig(rowDimension) == size(this.data[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
orig(rowDimension) == 6
this.data[orig(rowDimension)-1] has only one value
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == size(this.data[])
return == orig(size(this.data[]))
return == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == size(this.data[])
return == orig(size(this.data[]))
return == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
this.data.getClass().getName() == m.data.getClass().getName()
m.lu == null
size(m.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == m.data.getClass().getName()
this.data.getClass().getName() == return.data.getClass().getName()
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(m.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
m.data == orig(m.data)
m.data[] == orig(m.data[])
m.lu == orig(m.lu)
m.lu == null
return.lu == null
size(m.data[]) == 6
size(return.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT254
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(m.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::ENTER
this has only one value
this.data has only one value
this.data != null
this.data[] contains no nulls and has only one value, of length 6
row >= 0
column >= 0
value != 0
row <= size(this.data[])-1
column <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
this.data != null
this.data[] contains no nulls and has only one value, of length 6
orig(row) <= size(this.data[])-1
orig(column) <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
this.data == null
subMatrix.getClass().getName() == double[][].class
row == 0
column == 0
size(subMatrix[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
this.data.getClass().getName() == orig(subMatrix.getClass().getName())
this.lu == orig(this.lu)
subMatrix[] == orig(subMatrix[])
size(this.data[]) == orig(size(subMatrix[]))
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
visitor has only one value
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
return == 0.0
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::CLASS
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::OBJECT
size(this.data[]) == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::ENTER
size(d[]) == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::ENTER
copyArray == false
size(d[]) == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::ENTER
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
deep == true
size(v.data[]) == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
v.data == orig(v.data)
v.data[] == orig(v.data[])
size(v.data[]) == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::ENTER
n == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::ENTER
size(v[]) == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::ENTER
size(v.data[]) == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
size(v.data[]) == 5
size(return.data[]) == 5
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::ENTER
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT269
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == orig(v.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.DefaultRealMatrixPreservingVisitor():::EXIT
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::EXIT
return == 0.0
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::ENTER
rows == columns
endRow == endColumn
rows == 6
startRow == 0
endRow == 5
startColumn == 0
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::OBJECT
this has only one value
this.splitTolerance == 2.2250738585072014E-308
this.main has only one value
this.main[] == [22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437]
this.secondary has only one value
this.secondary[] == [13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225]
this.squaredSecondary has only one value
this.squaredSecondary[] == [170.1590863021566, 35.731593464377134, 8.433744453054118, 51.22315398891756]
this.transformer == null
this.lowerSpectra one of { 0.0, 8.511990402834282 }
this.upperSpectra one of { 0.0, 65.67695023133969 }
this.minPivot == 3.7861653471839945E-306
this.sigma one of { 0.0, 38.39807540474629 }
this.sigmaLow == 1.604422277047874E-15
this.tau == 9.466330862652142E-30
this.pingPong one of { 0, 1 }
this.qMax == 0.0
this.eMin one of { 0.0, 0.9204193966914582 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 0.9204191749659458 }
this.dMin2 one of { 0.0, 29.508125041069142 }
this.dN == 0.0
this.dN1 one of { 0.0, 0.9204191749659458 }
this.dN2 one of { 0.0, 29.508125041069142 }
this.g == 0.0
this.realEigenvalues[] == [82.04441197864547, 53.45669876814309, 52.53627960031589, 18.847969621995247, 14.13820426087657]
this.realEigenvalues[] sorted by >
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.imagEigenvalues[] elements == 0.0
this.eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].data contains no nulls and has only one value, of length 5
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) == 5
size(this.secondary[]) == 4
size(this.squaredSecondary[]) == 4
size(this.work[]) == 30
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::ENTER
main has only one value
main[] == [22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437]
secondary has only one value
secondary[] == [13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225]
splitTolerance == 2.2250738585072014E-308
size(main[]) == 5
size(secondary[]) == 4
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::EXIT
main[] == orig(main[])
secondary[] == orig(secondary[])
this.lowerSpectra == 8.511990402834282
this.upperSpectra == 65.67695023133969
this.sigma == 38.39807540474629
this.work has only one value
this.work[] == [67.90620778307587, 29.508125041069142, 2.2172551239450627E-7, 7.108396176963922E-6, 39.318494572573485, 0.9204193966914582, 3.1578826298790355E-53, 3.070435385160656E-24, 38.39807540474629, 9.466330862652142E-30, 0.9204193966914582, 0.9204265049193185, 4.709765426425641, 5.6005827406004954E-15, 0.040863839194798454, 0.024539343751247774, 6.530696497843094E-8, 9.629649721936179E-35, 0.026921970845079562, 0.007765391958076072, 9.285650579525987, 27.632760218233127, 8.511990402834282, 44.40574808855629, 73.02097239781025, 35.37465870955321, 65.67695023133969, 26.275354257255128, 64.52800061846604, 87.33504295637849]
this.pingPong == 1
this.eMin == 0.9204193966914582
this.tType == -2
this.dMin1 == 0.9204191749659458
this.dMin2 == 29.508125041069142
this.dN1 == 0.9204191749659458
this.dN2 == 29.508125041069142
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors == null
main[] == [22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437]
secondary[] == [13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::ENTER
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.work[] elements == 0.0
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.lowerSpectra == 8.511990402834282
this.upperSpectra == 65.67695023133969
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.285650579525987, 27.632760218233127, 8.511990402834282, 44.40574808855629, 73.02097239781025, 35.37465870955321, 65.67695023133969, 26.275354257255128, 64.52800061846604, 87.33504295637849]
this.work[] elements >= 0.0
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::ENTER
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.sigma == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.minPivot == orig(this.minPivot)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.qMax == orig(this.qMax)
this.dMin == orig(this.dMin)
this.dN == orig(this.dN)
this.g == orig(this.g)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.lowerSpectra == 8.511990402834282
this.upperSpectra == 65.67695023133969
this.sigma == 38.39807540474629
this.work has only one value
this.work[] == [67.90620778307587, 29.508125041069142, 2.2172551239450627E-7, 7.108396176963922E-6, 39.318494572573485, 0.9204193966914582, 3.1578826298790355E-53, 3.070435385160656E-24, 38.39807540474629, 9.466330862652142E-30, 0.9204193966914582, 0.9204265049193185, 4.709765426425641, 5.6005827406004954E-15, 0.040863839194798454, 0.024539343751247774, 6.530696497843094E-8, 9.629649721936179E-35, 0.026921970845079562, 0.007765391958076072, 9.285650579525987, 27.632760218233127, 8.511990402834282, 44.40574808855629, 73.02097239781025, 35.37465870955321, 65.67695023133969, 26.275354257255128, 64.52800061846604, 87.33504295637849]
this.pingPong == 1
this.eMin == 0.9204193966914582
this.tType == -2
this.dMin1 == 0.9204191749659458
this.dMin2 == 29.508125041069142
this.dN1 == 0.9204191749659458
this.dN2 == 29.508125041069142
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::ENTER
this.lowerSpectra == 8.511990402834282
this.upperSpectra == 65.67695023133969
this.sigma == 38.39807540474629
this.work has only one value
this.work[] one of { [-14.13820426087657, 8.191950383663027, 1.5923563320192826, 3.552713678800501E-15, 3.552713678800501E-15, 0.6280001403529384, -27.28955477036071, 11.74515231793415, -0.5089411171290001, 13.15135050948415, 20.771498645975704, -1.9648638444484954, -16.265065988122714, 0.21322625764074488, 13.619762489869897, 2.1268617272461476, 3.0422418115273944, 0.07342271943022248, -53.179424359825006, 0.7756406188267846, 9.227256935189498, 39.041220098949, 39.553029473808365, 0.10837456971482332, -79.22864075460532, 4.7478465603489894E-11, 65.67695023133969, 65.09043649377622, 66.0398034162178, 87.33504295637849], [67.90620778307587, 29.508125041069142, 2.2172551239450627E-7, 7.108396176963922E-6, 39.318494572573485, 0.9204193966914582, 3.1578826298790355E-53, 3.070435385160656E-24, 38.39807540474629, 9.466330862652142E-30, 0.9204193966914582, 0.9204265049193185, 4.709765426425641, 5.6005827406004954E-15, 0.040863839194798454, 0.024539343751247774, 6.530696497843094E-8, 9.629649721936179E-35, 0.026921970845079562, 0.007765391958076072, 9.285650579525987, 27.632760218233127, 8.511990402834282, 44.40574808855629, 73.02097239781025, 35.37465870955321, 65.67695023133969, 26.275354257255128, 64.52800061846604, 87.33504295637849] }
this.pingPong == 1
this.eMin == 0.9204193966914582
this.tType == -2
this.dMin1 == 0.9204191749659458
this.dMin2 == 29.508125041069142
this.dN1 == 0.9204191749659458
this.dN2 == 29.508125041069142
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName())
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.lowerSpectra == 8.511990402834282
this.upperSpectra == 65.67695023133969
this.sigma == 38.39807540474629
this.work has only one value
this.work[] == [-14.13820426087657, 8.191950383663027, 1.5923563320192826, 3.552713678800501E-15, 3.552713678800501E-15, 0.6280001403529384, -27.28955477036071, 11.74515231793415, -0.5089411171290001, 13.15135050948415, 20.771498645975704, -1.9648638444484954, -16.265065988122714, 0.21322625764074488, 13.619762489869897, 2.1268617272461476, 3.0422418115273944, 0.07342271943022248, -53.179424359825006, 0.7756406188267846, 9.227256935189498, 39.041220098949, 39.553029473808365, 0.10837456971482332, -79.22864075460532, 4.7478465603489894E-11, 65.67695023133969, 65.09043649377622, 66.0398034162178, 87.33504295637849]
this.pingPong == 1
this.eMin == 0.9204193966914582
this.tType == -2
this.dMin1 == 0.9204191749659458
this.dMin2 == 29.508125041069142
this.dN1 == 0.9204191749659458
this.dN2 == 29.508125041069142
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors has only one value
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[] == orig(this.eigenvectors[]) (elementwise)
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName()) (elementwise)
this.eigenvectors[].data == orig(this.eigenvectors[].data) (elementwise)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::ENTER
this.lowerSpectra == 8.511990402834282
this.upperSpectra == 65.67695023133969
this.sigma == 38.39807540474629
this.work has only one value
this.work[] == [67.90620778307587, 29.508125041069142, 2.2172551239450627E-7, 7.108396176963922E-6, 39.318494572573485, 0.9204193966914582, 3.1578826298790355E-53, 3.070435385160656E-24, 38.39807540474629, 9.466330862652142E-30, 0.9204193966914582, 0.9204265049193185, 4.709765426425641, 5.6005827406004954E-15, 0.040863839194798454, 0.024539343751247774, 6.530696497843094E-8, 9.629649721936179E-35, 0.026921970845079562, 0.007765391958076072, 9.285650579525987, 27.632760218233127, 8.511990402834282, 44.40574808855629, 73.02097239781025, 35.37465870955321, 65.67695023133969, 26.275354257255128, 64.52800061846604, 87.33504295637849]
this.pingPong == 1
this.eMin == 0.9204193966914582
this.tType == -2
this.dMin1 == 0.9204191749659458
this.dMin2 == 29.508125041069142
this.dN1 == 0.9204191749659458
this.dN2 == 29.508125041069142
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.lowerSpectra == 8.511990402834282
this.upperSpectra == 65.67695023133969
this.sigma == 38.39807540474629
this.work has only one value
this.work[] == [67.90620778307587, 29.508125041069142, 2.2172551239450627E-7, 7.108396176963922E-6, 39.318494572573485, 0.9204193966914582, 3.1578826298790355E-53, 3.070435385160656E-24, 38.39807540474629, 9.466330862652142E-30, 0.9204193966914582, 0.9204265049193185, 4.709765426425641, 5.6005827406004954E-15, 0.040863839194798454, 0.024539343751247774, 6.530696497843094E-8, 9.629649721936179E-35, 0.026921970845079562, 0.007765391958076072, 9.285650579525987, 27.632760218233127, 8.511990402834282, 44.40574808855629, 73.02097239781025, 35.37465870955321, 65.67695023133969, 26.275354257255128, 64.52800061846604, 87.33504295637849]
this.pingPong == 1
this.eMin == 0.9204193966914582
this.tType == -2
this.dMin1 == 0.9204191749659458
this.dMin2 == 29.508125041069142
this.dN1 == 0.9204191749659458
this.dN2 == 29.508125041069142
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors == null
return has only one value
return[] == [82.04441197864547, 53.45669876814309, 52.53627960031589, 18.847969621995247, 14.13820426087657]
size(return[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest:::OBJECT
this.refValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
this.matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.refValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int):::ENTER
rows == columns
rows == size(diagonal[])
diagonal has only one value
diagonal[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
rows == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int):::EXIT
diagonal[] == orig(diagonal[])
diagonal[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int):::ENTER
r has only one value
size == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[]):::ENTER
r has only one value
eigenValues has only one value
eigenValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
size(eigenValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[]):::EXIT
eigenValues[] == orig(eigenValues[])
eigenValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.setUp():::ENTER
this has only one value
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.setUp():::EXIT
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown():::EXIT
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == right.getClass().getName()
left.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::ENTER
data.getClass().getName() == double[][].class
size(data[]) == 6
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::EXIT
data[] == orig(data[])
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::OBJECT
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.separator has only one value
this.separator.toString == "; "
this.trimmedPrefix has only one value
this.trimmedPrefix.toString == "{"
this.trimmedSuffix has only one value
this.trimmedSuffix.toString == "}"
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
separator.toString == orig(separator.toString)
prefix.toString == "{"
suffix.toString == "}"
separator.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat:::CLASS
===========================================================================
org.apache.commons.math.util.CompositeFormat:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealVectorFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat.CompositeFormat():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
