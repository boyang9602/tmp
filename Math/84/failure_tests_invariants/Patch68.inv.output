===========================================================================
org.apache.commons.math.optimization.GoalType:::OBJECT
===========================================================================
org.apache.commons.math.optimization.GoalType.GoalType(java.lang.String, int):::ENTER
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
$hidden$2 one of { 0, 1 }
===========================================================================
org.apache.commons.math.optimization.GoalType.GoalType(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair:::CLASS
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair:::OBJECT
size(this.point[]) == 2
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double):::ENTER
value == Double.NaN
size(point[]) == 2
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double):::EXIT
point[] == orig(point[])
this.value == Double.NaN
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double, boolean):::ENTER
copyArray == false
size(point[]) == 2
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double, boolean):::EXIT
point[] == orig(point[])
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getPoint():::ENTER
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getPoint():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
size(return[]) == 2
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getPointRef():::ENTER
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getPointRef():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
size(return[]) == 2
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getValue():::ENTER
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getValue():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker:::CLASS
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker:::OBJECT
this.relativeThreshold one of { 1.0E-15, 1.1102230246251565E-14, 1.0E-11 }
this.absoluteThreshold one of { 2.2250738585072014E-306, 1.0E-30 }
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker.SimpleScalarValueChecker():::EXIT
this.relativeThreshold == 1.1102230246251565E-14
this.absoluteThreshold == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker.SimpleScalarValueChecker(double, double):::ENTER
relativeThreshold one of { 1.0E-15, 1.0E-11 }
absoluteThreshold == 1.0E-30
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker.SimpleScalarValueChecker(double, double):::EXIT
this.relativeThreshold one of { 1.0E-15, 1.0E-11 }
this.absoluteThreshold == 1.0E-30
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker.converged(int, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair):::ENTER
iteration >= 1
size(previous.point[]) == 2
size(current.point[]) == 2
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker.converged(int, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair):::EXIT
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
previous.point == orig(previous.point)
previous.point[] == orig(previous.point[])
previous.value == orig(previous.value)
current.point == orig(current.point)
current.point[] == orig(current.point[])
current.value == orig(current.value)
size(previous.point[]) == 2
size(current.point[]) == 2
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker.converged(int, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.optimization.SimpleScalarValueChecker.converged(int, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1:::OBJECT
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectional.class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex.getClass().getName() == org.apache.commons.math.optimization.RealPointValuePair[].class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[] elements != null
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].getClass().getName() == [org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair]
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].getClass().getName() elements == org.apache.commons.math.optimization.RealPointValuePair.class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].point elements != null
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleScalarValueChecker.class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxIterations one of { 100, 200 }
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.iterations >= 0
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxEvaluations one of { 1000, 2147483647 }
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration.getClass().getName() == double[][].class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration[] elements != null
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
size(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[]) == 3
size(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1.(org.apache.commons.math.optimization.direct.DirectSearchOptimizer, org.apache.commons.math.optimization.GoalType):::ENTER
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectional.class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex.getClass().getName() == org.apache.commons.math.optimization.RealPointValuePair[].class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].getClass().getName() == [org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair]
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].getClass().getName() elements == org.apache.commons.math.optimization.RealPointValuePair.class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value elements one of { -0.7290400707042696, -0.2373295333127166, 0.23732953331340972 }
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value one of { [-0.7290400707042696, -0.7290400707018319, -0.7290400706977185], [-0.2373295333127166, -0.23732953331093967, -0.23732953330732695], [0.23732953331340972, 0.237329533313121, 0.2373295333125909] }
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value sorted by ==
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleScalarValueChecker.class
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxIterations one of { 100, 200 }
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxEvaluations one of { 1000, 2147483647 }
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration.getClass().getName() == double[][].class
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
size(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[]) == 3
size(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration[]) == 2
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1.(org.apache.commons.math.optimization.direct.DirectSearchOptimizer, org.apache.commons.math.optimization.GoalType):::EXIT
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[] == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[])
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].point == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].point)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.f == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.f)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.f.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.f.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxIterations == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxIterations)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.iterations == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.iterations)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxEvaluations == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxEvaluations)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.evaluations == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.evaluations)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration[] == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration[])
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value elements one of { -0.7290400707042696, -0.2373295333127166, 0.23732953331340972 }
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value one of { [-0.7290400707042696, -0.7290400707018319, -0.7290400706977185], [-0.2373295333127166, -0.23732953331093967, -0.23732953330732695], [0.23732953331340972, 0.237329533313121, 0.2373295333125909] }
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value sorted by ==
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1.compare(org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair):::ENTER
size(o1.point[]) == 2
size(o2.point[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1.compare(org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair):::EXIT
this.val$goalType == orig(this.val$goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[] == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[])
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].point == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].point)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.simplex[].value)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.f == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.f)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.f.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.f.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.checker.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxIterations == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxIterations)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.iterations == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.iterations)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxEvaluations == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.maxEvaluations)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.evaluations == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.evaluations)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration)
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration.getClass().getName() == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration.getClass().getName())
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration[] == orig(org.apache.commons.math.optimization.direct.DirectSearchOptimizer.this.startConfiguration[])
o1.point == orig(o1.point)
o1.point[] == orig(o1.point[])
o1.value == orig(o1.value)
o2.point == orig(o2.point)
o2.point[] == orig(o2.point[])
o2.value == orig(o2.value)
return one of { -1, 0, 1 }
size(o1.point[]) == 2
size(o2.point[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer:::OBJECT
this.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectional.class
this.simplex.getClass().getName() == org.apache.commons.math.optimization.RealPointValuePair[].class
this.simplex[] elements != null
this.simplex[].getClass().getName() == [org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair]
this.simplex[].getClass().getName() elements == org.apache.commons.math.optimization.RealPointValuePair.class
this.simplex[].point elements != null
this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleScalarValueChecker.class
this.maxIterations >= 0
this.iterations >= 0
this.maxEvaluations one of { 0, 1000, 2147483647 }
this.evaluations >= 0
this.startConfiguration.getClass().getName() == double[][].class
this.startConfiguration[] elements != null
size(this.simplex[]) == 3
size(this.startConfiguration[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.DirectSearchOptimizer():::EXIT
this.simplex == null
this.f == null
this.maxIterations == 2147483647
this.iterations == 0
this.maxEvaluations == 2147483647
this.evaluations == 0
this.startConfiguration == null
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.buildSimplex(double[]):::ENTER
this.simplex[].value elements one of { -0.7290400707042696, -0.2373295333127166, 0.23732953331340972 }
this.simplex[].value one of { [-0.7290400707042696, -0.7290400707018319, -0.7290400706977185], [-0.2373295333127166, -0.23732953331093967, -0.23732953330732695], [0.23732953331340972, 0.237329533313121, 0.2373295333125909] }
this.simplex[].value sorted by ==
this.maxIterations one of { 100, 200 }
this.iterations == 0
this.maxEvaluations one of { 1000, 2147483647 }
this.evaluations == 0
startPoint[] elements one of { -3.0, 0.0, 1.0 }
startPoint[] one of { [-3.0, 0.0], [0.0, 0.0], [1.0, 0.0] }
size(startPoint[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.buildSimplex(double[]):::EXIT
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.simplex[].getClass().getName() == orig(this.simplex[].getClass().getName())
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.startConfiguration == orig(this.startConfiguration)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
this.startConfiguration[] == orig(this.startConfiguration[])
startPoint[] == orig(startPoint[])
size(this.simplex[]) == orig(size(this.simplex[]))
this.simplex[].value == [NaN, NaN, NaN]
this.simplex[].value elements == Double.NaN
this.maxIterations one of { 100, 200 }
this.iterations == 0
this.maxEvaluations one of { 1000, 2147483647 }
this.evaluations == 0
startPoint[] elements one of { -3.0, 0.0, 1.0 }
startPoint[] one of { [-3.0, 0.0], [0.0, 0.0], [1.0, 0.0] }
this.simplex[].getClass().getName() == orig(this.simplex[].getClass().getName()) (elementwise)
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.evaluate(double[]):::ENTER
this.maxIterations one of { 100, 200 }
this.maxEvaluations one of { 1000, 2147483647 }
size(x[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.evaluate(double[]):::EXIT
this.simplex == orig(this.simplex)
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.simplex[] == orig(this.simplex[])
this.simplex[].point == orig(this.simplex[].point)
this.simplex[].value == orig(this.simplex[].value)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.startConfiguration == orig(this.startConfiguration)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
this.startConfiguration[] == orig(this.startConfiguration[])
x[] == orig(x[])
this.maxIterations one of { 100, 200 }
this.maxEvaluations one of { 1000, 2147483647 }
this.evaluations >= 1
this.evaluations - orig(this.evaluations) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.evaluateSimplex(java.util.Comparator):::ENTER
this.maxIterations one of { 100, 200 }
this.maxEvaluations one of { 1000, 2147483647 }
comparator.getClass().getName() == org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1.class
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.evaluateSimplex(java.util.Comparator):::EXIT
this.simplex == orig(this.simplex)
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.startConfiguration == orig(this.startConfiguration)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
this.startConfiguration[] == orig(this.startConfiguration[])
size(this.simplex[]) == orig(size(this.simplex[]))
this.maxIterations one of { 100, 200 }
this.maxEvaluations one of { 1000, 2147483647 }
this.evaluations > orig(this.evaluations)
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.getEvaluations():::ENTER
this has only one value
this.simplex[].value sorted by ==
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.class
this.maxIterations == 200
this.maxEvaluations == 2147483647
this.startConfiguration has only one value
this.startConfiguration[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.getEvaluations():::EXIT
this.simplex == orig(this.simplex)
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.simplex[] == orig(this.simplex[])
this.simplex[].point == orig(this.simplex[].point)
this.simplex[].value == orig(this.simplex[].value)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.startConfiguration == orig(this.startConfiguration)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
this.startConfiguration[] == orig(this.startConfiguration[])
this.simplex[].value sorted by ==
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.class
this.maxIterations == 200
this.maxEvaluations == 2147483647
this.startConfiguration has only one value
this.startConfiguration[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.incrementIterationsCounter():::ENTER
this.maxIterations one of { 100, 200 }
this.maxEvaluations one of { 1000, 2147483647 }
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.incrementIterationsCounter():::EXIT
this.simplex == orig(this.simplex)
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.simplex[] == orig(this.simplex[])
this.simplex[].point == orig(this.simplex[].point)
this.simplex[].value == orig(this.simplex[].value)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.startConfiguration == orig(this.startConfiguration)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
this.startConfiguration[] == orig(this.startConfiguration[])
this.maxIterations one of { 100, 200 }
this.iterations >= 1
this.maxEvaluations one of { 1000, 2147483647 }
this.iterations - orig(this.iterations) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.optimize(org.apache.commons.math.analysis.MultivariateRealFunction, org.apache.commons.math.optimization.GoalType, double[]):::ENTER
this.simplex[].value elements one of { -0.7290400707042696, -0.2373295333127166, 0.23732953331340972 }
this.simplex[].value one of { [-0.7290400707042696, -0.7290400707018319, -0.7290400706977185], [-0.2373295333127166, -0.23732953331093967, -0.23732953330732695], [0.23732953331340972, 0.237329533313121, 0.2373295333125909] }
this.simplex[].value sorted by ==
this.f.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.class
this.maxIterations one of { 100, 200 }
this.maxEvaluations one of { 1000, 2147483647 }
this.startConfiguration[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
startPoint[] elements one of { -3.0, 0.0, 1.0 }
startPoint[] one of { [-3.0, 0.0], [0.0, 0.0], [1.0, 0.0] }
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
size(startPoint[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.optimize(org.apache.commons.math.analysis.MultivariateRealFunction, org.apache.commons.math.optimization.GoalType, double[]):::EXIT
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.simplex[].getClass().getName() == orig(this.simplex[].getClass().getName())
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
startPoint[] == orig(startPoint[])
size(this.simplex[]) == orig(size(this.simplex[]))
this.simplex[].value sorted by ==
this.maxIterations one of { 100, 200 }
this.maxEvaluations one of { 1000, 2147483647 }
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
startPoint[] elements one of { -3.0, 0.0, 1.0 }
startPoint[] one of { [-3.0, 0.0], [0.0, 0.0], [1.0, 0.0] }
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
size(return.point[]) == 2
this.simplex[].getClass().getName() == orig(this.simplex[].getClass().getName()) (elementwise)
this.startConfiguration[] == orig(this.startConfiguration[]) (elementwise)
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker):::ENTER
this.simplex[] contains no nulls and has only one value, of length 3
this.simplex[].point contains no nulls and has only one value, of length 3
this.simplex[].value == [0.23732953331340972, 0.237329533313121, 0.2373295333125909]
this.simplex[].value elements == 0.23732953331340972
this.f.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.class
this.maxIterations one of { 0, 200, 2147483647 }
this.iterations one of { 0, 32 }
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations one of { 0, 131 }
this.startConfiguration[] contains no nulls and has only one value, of length 2
checker.getClass().getName() == org.apache.commons.math.optimization.SimpleScalarValueChecker.class
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker):::EXIT
this.simplex == orig(this.simplex)
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.simplex[] == orig(this.simplex[])
this.simplex[].point == orig(this.simplex[].point)
this.simplex[].value == orig(this.simplex[].value)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.startConfiguration == orig(this.startConfiguration)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
this.startConfiguration[] == orig(this.startConfiguration[])
this.simplex[] contains no nulls and has only one value, of length 3
this.simplex[].point contains no nulls and has only one value, of length 3
this.simplex[].value == [0.23732953331340972, 0.237329533313121, 0.2373295333125909]
this.simplex[].value elements == 0.23732953331340972
this.f.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.class
this.maxIterations one of { 0, 200, 2147483647 }
this.iterations one of { 0, 32 }
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations one of { 0, 131 }
this.startConfiguration[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setMaxEvaluations(int):::ENTER
this.simplex == null
this.f == null
this.maxIterations one of { 100, 2147483647 }
this.iterations == 0
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations == 0
this.startConfiguration == null
maxEvaluations one of { 1000, 2147483647 }
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setMaxEvaluations(int):::EXIT
this.simplex == orig(this.simplex)
this.f == orig(this.f)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.evaluations == orig(this.evaluations)
this.startConfiguration == orig(this.startConfiguration)
this.simplex == null
this.f == null
this.maxIterations one of { 100, 2147483647 }
this.iterations == 0
this.maxEvaluations one of { 1000, 2147483647 }
this.evaluations == 0
this.startConfiguration == null
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setMaxIterations(int):::ENTER
this.simplex == null
this.f == null
this.maxIterations one of { 0, 2147483647 }
this.iterations == 0
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations == 0
this.startConfiguration == null
maxIterations one of { 100, 200, 2147483647 }
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setMaxIterations(int):::EXIT
this.simplex == orig(this.simplex)
this.f == orig(this.f)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.iterations == orig(this.iterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.startConfiguration == orig(this.startConfiguration)
this.simplex == null
this.f == null
this.maxIterations one of { 100, 200, 2147483647 }
this.iterations == 0
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations == 0
this.startConfiguration == null
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setStartConfiguration(double[]):::ENTER
this.simplex == null
this.f == null
this.maxIterations one of { 100, 200 }
this.iterations == 0
this.maxEvaluations one of { 1000, 2147483647 }
this.evaluations == 0
this.startConfiguration == null
steps[] elements one of { 0.2, 1.0 }
steps[] one of { [0.2, 0.2], [1.0, 1.0] }
steps[] sorted by ==
size(steps[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.DirectSearchOptimizer.setStartConfiguration(double[]):::EXIT
this.simplex == orig(this.simplex)
this.f == orig(this.f)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
steps[] == orig(steps[])
this.simplex == null
this.f == null
this.maxIterations one of { 100, 200 }
this.iterations == 0
this.maxEvaluations one of { 1000, 2147483647 }
this.evaluations == 0
steps[] elements one of { 0.2, 1.0 }
steps[] one of { [0.2, 0.2], [1.0, 1.0] }
steps[] sorted by ==
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectional:::OBJECT
this.khi == 2.0
this.gamma == 0.5
this.simplex.getClass().getName() == org.apache.commons.math.optimization.RealPointValuePair[].class
this.simplex[] elements != null
this.simplex[].getClass().getName() == [org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair]
this.simplex[].getClass().getName() elements == org.apache.commons.math.optimization.RealPointValuePair.class
this.simplex[].point elements != null
this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleScalarValueChecker.class
this.maxIterations one of { 100, 200, 2147483647 }
this.iterations >= 0
this.maxEvaluations one of { 1000, 2147483647 }
this.startConfiguration.getClass().getName() == double[][].class
this.startConfiguration[] elements != null
size(this.simplex[]) == 3
size(this.startConfiguration[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectional.MultiDirectional():::EXIT
this.simplex == null
this.f == null
this.maxIterations == 2147483647
this.iterations == 0
this.maxEvaluations == 2147483647
this.evaluations == 0
this.startConfiguration == null
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectional.evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[], double, java.util.Comparator):::ENTER
this.maxIterations one of { 100, 200 }
this.iterations >= 1
original.getClass().getName() == org.apache.commons.math.optimization.RealPointValuePair[].class
original[] elements != null
original[].point elements != null
coeff one of { 0.5, 1.0, 2.0 }
comparator.getClass().getName() == org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1.class
size(original[]) == 3
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectional.evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[], double, java.util.Comparator):::EXIT
this.khi == orig(this.khi)
this.gamma == orig(this.gamma)
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.startConfiguration == orig(this.startConfiguration)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
this.startConfiguration[] == orig(this.startConfiguration[])
original[] == orig(original[])
original[].point == orig(original[].point)
original[].value == orig(original[].value)
size(this.simplex[]) == orig(size(this.simplex[]))
this.maxIterations one of { 100, 200 }
this.iterations >= 1
original[] elements != null
original[].point elements != null
size(return.point[]) == 2
this.evaluations - orig(this.evaluations) - 2 == 0
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(java.util.Comparator):::ENTER
this.maxIterations one of { 100, 200 }
comparator.getClass().getName() == org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1.class
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(java.util.Comparator):::EXIT84
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.class
this.maxIterations == 200
this.maxEvaluations == 2147483647
this.startConfiguration has only one value
this.startConfiguration[] contains no nulls and has only one value, of length 2
orig(this) has only one value
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(java.util.Comparator):::EXIT90
this.simplex[].value elements != 0
orig(this.simplex[].value) elements != 0
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(java.util.Comparator):::EXIT
this.khi == orig(this.khi)
this.gamma == orig(this.gamma)
this.simplex.getClass().getName() == orig(this.simplex.getClass().getName())
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.maxIterations == orig(this.maxIterations)
this.maxEvaluations == orig(this.maxEvaluations)
this.startConfiguration == orig(this.startConfiguration)
this.startConfiguration.getClass().getName() == orig(this.startConfiguration.getClass().getName())
this.startConfiguration[] == orig(this.startConfiguration[])
size(this.simplex[]) == orig(size(this.simplex[]))
this.maxIterations one of { 100, 200 }
this.iterations >= 1
this.iterations - orig(this.iterations) - 1 == 0
this.evaluations - orig(this.evaluations) - 4 == 0
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$2:::CLASS
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$2:::OBJECT
this has only one value
org.apache.commons.math.optimization.direct.MultiDirectionalTest.this has only one value
org.apache.commons.math.optimization.direct.MultiDirectionalTest.this.count == 0
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.(org.apache.commons.math.optimization.direct.MultiDirectionalTest):::ENTER
org.apache.commons.math.optimization.direct.MultiDirectionalTest.this has only one value
org.apache.commons.math.optimization.direct.MultiDirectionalTest.this.count == 0
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.(org.apache.commons.math.optimization.direct.MultiDirectionalTest):::EXIT
org.apache.commons.math.optimization.direct.MultiDirectionalTest.this == orig(org.apache.commons.math.optimization.direct.MultiDirectionalTest.this)
org.apache.commons.math.optimization.direct.MultiDirectionalTest.this.count == orig(org.apache.commons.math.optimization.direct.MultiDirectionalTest.this.count)
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.value(double[]):::ENTER
size(variables[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$2.value(double[]):::EXIT
org.apache.commons.math.optimization.direct.MultiDirectionalTest.this == orig(org.apache.commons.math.optimization.direct.MultiDirectionalTest.this)
org.apache.commons.math.optimization.direct.MultiDirectionalTest.this.count == orig(org.apache.commons.math.optimization.direct.MultiDirectionalTest.this.count)
variables[] == orig(variables[])
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D:::OBJECT
this has only one value
this.maximumPosition has only one value
this.maximumPosition[] == [0.0, 0.0]
this.maximumPosition[] elements == 0.0
this.std == 1.0
size(this.maximumPosition[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D.Gaussian2D(double, double, double):::ENTER
xOpt == 0.0
yOpt == 0.0
std == 1.0
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D.Gaussian2D(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D.getMaximum():::ENTER
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D.getMaximum():::EXIT
this.maximumPosition == orig(this.maximumPosition)
this.maximumPosition[] == orig(this.maximumPosition[])
this.std == orig(this.std)
return == 0.15915494309189535
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D.getMaximumPosition():::ENTER
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D.getMaximumPosition():::EXIT
this.maximumPosition == orig(this.maximumPosition)
this.maximumPosition[] == orig(this.maximumPosition[])
this.std == orig(this.std)
return[] == [0.0, 0.0]
return[] elements == 0.0
size(return[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D.value(double[]):::ENTER
size(point[]) == 2
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest$Gaussian2D.value(double[]):::EXIT
this.maximumPosition == orig(this.maximumPosition)
this.maximumPosition[] == orig(this.maximumPosition[])
this.std == orig(this.std)
point[] == orig(point[])
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest:::OBJECT
this.count == 0
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest.MultiDirectionalTest():::EXIT
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283():::EXIT
this.count == orig(this.count)
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMinimizeMaximize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMinimizeMaximize():::EXIT
this.count == orig(this.count)
