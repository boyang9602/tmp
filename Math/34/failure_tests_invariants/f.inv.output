===========================================================================
org.apache.commons.math3.genetics.AbstractListChromosome:::CLASS
===========================================================================
org.apache.commons.math3.genetics.AbstractListChromosome:::OBJECT
this.getClass().getName() == org.apache.commons.math3.genetics.DummyBinaryChromosome.class
this.representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.representation[].getClass().getName() elements == java.lang.Integer.class
this.representation.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.fitness == -Infinity
size(this.representation[]) == 3
===========================================================================
org.apache.commons.math3.genetics.AbstractListChromosome.AbstractListChromosome(java.util.List):::ENTER
representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
representation[].getClass().getName() elements == java.lang.Integer.class
representation.getClass().getName() == java.util.ArrayList.class
size(representation[]) == 3
===========================================================================
org.apache.commons.math3.genetics.AbstractListChromosome.AbstractListChromosome(java.util.List):::EXIT
representation[] == orig(representation[])
representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
representation[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.genetics.BinaryChromosome:::CLASS
===========================================================================
org.apache.commons.math3.genetics.BinaryChromosome:::OBJECT
this.getClass().getName() == org.apache.commons.math3.genetics.DummyBinaryChromosome.class
this.representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.representation[].getClass().getName() elements == java.lang.Integer.class
this.representation.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.fitness == -Infinity
size(this.representation[]) == 3
===========================================================================
org.apache.commons.math3.genetics.BinaryChromosome.BinaryChromosome(java.util.List):::ENTER
representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
representation[].getClass().getName() elements == java.lang.Integer.class
representation.getClass().getName() == java.util.ArrayList.class
size(representation[]) == 3
===========================================================================
org.apache.commons.math3.genetics.BinaryChromosome.BinaryChromosome(java.util.List):::EXIT
representation[] == orig(representation[])
representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
representation[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.genetics.BinaryChromosome.checkValidity(java.util.List):::ENTER
this.representation == null
chromosomeRepresentation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
chromosomeRepresentation[].getClass().getName() elements == java.lang.Integer.class
chromosomeRepresentation.getClass().getName() == java.util.ArrayList.class
size(chromosomeRepresentation[]) == 3
===========================================================================
org.apache.commons.math3.genetics.BinaryChromosome.checkValidity(java.util.List):::EXIT
this.representation == orig(this.representation)
this.fitness == orig(this.fitness)
chromosomeRepresentation[] == orig(chromosomeRepresentation[])
this.representation == null
chromosomeRepresentation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
chromosomeRepresentation[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.genetics.BinaryChromosome.randomBinaryRepresentation(int):::ENTER
length == 3
===========================================================================
org.apache.commons.math3.genetics.BinaryChromosome.randomBinaryRepresentation(int):::EXIT
return[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
return[].getClass().getName() elements == java.lang.Integer.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 3
===========================================================================
org.apache.commons.math3.genetics.Chromosome:::CLASS
===========================================================================
org.apache.commons.math3.genetics.Chromosome:::OBJECT
this.getClass().getName() == org.apache.commons.math3.genetics.DummyBinaryChromosome.class
this.fitness == -Infinity
===========================================================================
org.apache.commons.math3.genetics.Chromosome.Chromosome():::EXIT
===========================================================================
org.apache.commons.math3.genetics.DummyBinaryChromosome:::CLASS
===========================================================================
org.apache.commons.math3.genetics.DummyBinaryChromosome:::OBJECT
this.representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.representation[].getClass().getName() elements == java.lang.Integer.class
this.representation.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.fitness == -Infinity
size(this.representation[]) == 3
===========================================================================
org.apache.commons.math3.genetics.DummyBinaryChromosome.DummyBinaryChromosome(java.util.List):::ENTER
representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
representation[].getClass().getName() elements == java.lang.Integer.class
representation.getClass().getName() == java.util.ArrayList.class
size(representation[]) == 3
===========================================================================
org.apache.commons.math3.genetics.DummyBinaryChromosome.DummyBinaryChromosome(java.util.List):::EXIT
representation[] == orig(representation[])
representation[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
representation[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.genetics.GeneticAlgorithm:::CLASS
org.apache.commons.math3.genetics.GeneticAlgorithm.randomGenerator has only one value
org.apache.commons.math3.genetics.GeneticAlgorithm.randomGenerator.getClass().getName() == org.apache.commons.math3.random.JDKRandomGenerator.class
===========================================================================
org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator():::ENTER
===========================================================================
org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator():::EXIT
org.apache.commons.math3.genetics.GeneticAlgorithm.randomGenerator == orig(org.apache.commons.math3.genetics.GeneticAlgorithm.randomGenerator)
org.apache.commons.math3.genetics.GeneticAlgorithm.randomGenerator.getClass().getName() == orig(org.apache.commons.math3.genetics.GeneticAlgorithm.randomGenerator.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math3.random.JDKRandomGenerator.class
===========================================================================
org.apache.commons.math3.genetics.ListPopulation:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math3.genetics.ListPopulationTest$12.class
this.chromosomes has only one value
this.chromosomes[].getClass().getName() elements == org.apache.commons.math3.genetics.DummyBinaryChromosome.class
this.chromosomes[].getClass().getName() one of { [], [org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome] }
this.chromosomes.getClass().getName() == java.util.ArrayList.class
this.populationLimit == 10
size(this.chromosomes[]) one of { 0, 3 }
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.ListPopulation(int):::ENTER
populationLimit == 10
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.ListPopulation(int):::EXIT
this.chromosomes[] == []
this.chromosomes[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.ListPopulation(java.util.List, int):::ENTER
chromosomes has only one value
chromosomes[] == []
chromosomes[].getClass().getName() == []
chromosomes.getClass().getName() == java.util.Collections$EmptyList.class
populationLimit == 10
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.ListPopulation(java.util.List, int):::EXIT
chromosomes[] == orig(chromosomes[])
this.chromosomes[] == []
this.chromosomes[].getClass().getName() == []
chromosomes[] == []
chromosomes[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.addChromosomes(java.util.Collection):::ENTER
this.chromosomes[] == []
this.chromosomes[].getClass().getName() == []
chromosomeColl has only one value
chromosomeColl.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.addChromosomes(java.util.Collection):::EXIT
this.chromosomes == orig(this.chromosomes)
this.chromosomes.getClass().getName() == orig(this.chromosomes.getClass().getName())
this.populationLimit == orig(this.populationLimit)
this.chromosomes[] contains no nulls and has only one value, of length 3
this.chromosomes[].getClass().getName() == [org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome]
size(this.chromosomes[]) == 3
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.getChromosomes():::ENTER
this.chromosomes[] contains no nulls and has only one value, of length 3
this.chromosomes[].getClass().getName() == [org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome]
size(this.chromosomes[]) == 3
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.getChromosomes():::EXIT
this.chromosomes == orig(this.chromosomes)
this.chromosomes[] == orig(this.chromosomes[])
this.chromosomes.getClass().getName() == orig(this.chromosomes.getClass().getName())
this.populationLimit == orig(this.populationLimit)
this.chromosomes[] contains no nulls and has only one value, of length 3
this.chromosomes[].getClass().getName() == [org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome]
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome]
return[].getClass().getName() elements == org.apache.commons.math3.genetics.DummyBinaryChromosome.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
size(this.chromosomes[]) == 3
size(return[]) == 3
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.iterator():::ENTER
this.chromosomes[] contains no nulls and has only one value, of length 3
this.chromosomes[].getClass().getName() == [org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome]
size(this.chromosomes[]) == 3
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.iterator():::EXIT
this.chromosomes == orig(this.chromosomes)
this.chromosomes[] == orig(this.chromosomes[])
this.chromosomes.getClass().getName() == orig(this.chromosomes.getClass().getName())
this.populationLimit == orig(this.populationLimit)
this.chromosomes[] contains no nulls and has only one value, of length 3
this.chromosomes[].getClass().getName() == [org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome, org.apache.commons.math3.genetics.DummyBinaryChromosome]
return has only one value
return.getClass().getName() == java.util.Collections$UnmodifiableCollection$1.class
size(this.chromosomes[]) == 3
===========================================================================
org.apache.commons.math3.genetics.ListPopulationTest$12:::OBJECT
this has only one value
org.apache.commons.math3.genetics.ListPopulationTest.this has only one value
this.chromosomes has only one value
this.chromosomes[] == []
this.chromosomes[].getClass().getName() == []
this.chromosomes.getClass().getName() == java.util.ArrayList.class
this.populationLimit == 10
===========================================================================
org.apache.commons.math3.genetics.ListPopulationTest$12.(org.apache.commons.math3.genetics.ListPopulationTest, int):::ENTER
org.apache.commons.math3.genetics.ListPopulationTest.this has only one value
x0 == 10
===========================================================================
org.apache.commons.math3.genetics.ListPopulationTest$12.(org.apache.commons.math3.genetics.ListPopulationTest, int):::EXIT
org.apache.commons.math3.genetics.ListPopulationTest.this == orig(org.apache.commons.math3.genetics.ListPopulationTest.this)
===========================================================================
org.apache.commons.math3.genetics.ListPopulationTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.genetics.ListPopulationTest.ListPopulationTest():::EXIT
===========================================================================
org.apache.commons.math3.random.JDKRandomGenerator:::CLASS
===========================================================================
org.apache.commons.math3.random.JDKRandomGenerator:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.random.JDKRandomGenerator.JDKRandomGenerator():::EXIT
