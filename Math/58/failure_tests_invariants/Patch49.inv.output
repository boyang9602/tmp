===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.Parametric():::EXIT
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.gradient(double, double[]):::ENTER
x >= 0.0
param has only one value
size(param[]) == 3
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.gradient(double, double[]):::EXIT
param[] == orig(param[])
size(return[]) == 3
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(double[]):::ENTER
param has only one value
size(param[]) == 3
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(double[]):::EXIT
param[] == orig(param[])
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.value(double, double[]):::ENTER
x >= 0.0
param has only one value
size(param[]) == 3
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.value(double, double[]):::EXIT
param[] == orig(param[])
===========================================================================
org.apache.commons.math.analysis.function.Gaussian.value(double, double, double):::ENTER
norm <= 1.0
===========================================================================
org.apache.commons.math.analysis.function.Gaussian.value(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException:::OBJECT
this has only one value
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 3
this.arguments[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.arguments[].getClass().getName() elements == java.lang.Double.class
size(this.arguments[]) == 3
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
specific == null
general has only one value
general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
args has only one value
args.getClass().getName() == java.lang.Object[].class
args[] contains no nulls and has only one value, of length 2
size(args[]) == 2
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException:::OBJECT
this has only one value
this.argument has only one value
this.argument.getClass().getName() == java.lang.Double.class
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 3
this.arguments[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.arguments[].getClass().getName() elements == java.lang.Double.class
size(this.arguments[]) == 3
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
specific == null
general has only one value
general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
wrong has only one value
wrong.getClass().getName() == java.lang.Double.class
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] contains no nulls and has only one value, of length 2
size(arguments[]) == 2
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
arguments[] == orig(arguments[])
arguments[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.exception.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathRuntimeException:::OBJECT
this has only one value
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 3
this.arguments[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.arguments[].getClass().getName() elements == java.lang.Double.class
size(this.arguments[]) == 3
===========================================================================
org.apache.commons.math.exception.MathRuntimeException.MathRuntimeException(java.lang.Throwable, org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
cause == null
specific == null
general has only one value
general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] contains no nulls and has only one value, of length 2
size(arguments[]) == 2
===========================================================================
org.apache.commons.math.exception.MathRuntimeException.MathRuntimeException(java.lang.Throwable, org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
arguments[] == orig(arguments[])
arguments[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.exception.OutOfRangeException:::CLASS
===========================================================================
org.apache.commons.math.exception.OutOfRangeException:::OBJECT
this has only one value
this.lo has only one value
this.lo.getClass().getName() == java.lang.Double.class
this.hi has only one value
this.hi.getClass().getName() == java.lang.Double.class
this.argument has only one value
this.argument.getClass().getName() == java.lang.Double.class
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 3
this.arguments[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.arguments[].getClass().getName() elements == java.lang.Double.class
size(this.arguments[]) == 3
===========================================================================
org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(java.lang.Number, java.lang.Number, java.lang.Number):::ENTER
wrong has only one value
wrong.getClass().getName() == java.lang.Double.class
lo has only one value
lo.getClass().getName() == java.lang.Double.class
hi has only one value
hi.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, java.lang.Number):::ENTER
specific == null
wrong has only one value
wrong.getClass().getName() == java.lang.Double.class
lo has only one value
lo.getClass().getName() == java.lang.Double.class
hi has only one value
hi.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
size(array[]) == 2
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
return.getClass().getName() == java.lang.Object[].class
size(return[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats:::OBJECT
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker:::CLASS
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
this.relativeThreshold == 1.1102230246251565E-14
this.absoluteThreshold == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.AbstractConvergenceChecker():::EXIT
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.getAbsoluteThreshold():::ENTER
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.getAbsoluteThreshold():::EXIT
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
return == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.getRelativeThreshold():::ENTER
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.getRelativeThreshold():::EXIT
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
return == 1.1102230246251565E-14
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker:::CLASS
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker:::OBJECT
this has only one value
this.relativeThreshold == 1.1102230246251565E-14
this.absoluteThreshold == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.SimpleVectorialValueChecker():::EXIT
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::ENTER
previous != null
previous.point != null
previous.value != null
previous.value[] sorted by <
current != null
current.point != null
current.value != null
current.value[] sorted by <
size(previous.point[]) == 3
size(previous.value[]) == 27
size(current.point[]) == 3
size(current.value[]) == 27
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::EXIT85
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::EXIT85;condition="not(return == true)"
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::EXIT
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
previous.point == orig(previous.point)
previous.point[] == orig(previous.point[])
previous.value == orig(previous.value)
previous.value[] == orig(previous.value[])
current.point == orig(current.point)
current.point[] == orig(current.point[])
current.value == orig(current.value)
current.value[] == orig(current.value[])
previous.point != null
previous.value != null
previous.value[] sorted by <
current.point != null
current.value != null
current.value[] sorted by <
return == false
size(previous.point[]) == 3
size(previous.value[]) == 27
size(current.point[]) == 3
size(current.value[]) == 27
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair:::CLASS
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair:::OBJECT
this.point != null
this.value != null
this.value[] sorted by <
size(this.point[]) == 3
size(this.value[]) == 27
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.VectorialPointValuePair(double[], double[]):::ENTER
point has only one value
point != null
value != null
value[] sorted by <
size(point[]) == 3
size(value[]) == 27
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.VectorialPointValuePair(double[], double[]):::EXIT
point[] == orig(point[])
value[] == orig(value[])
value[] sorted by <
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.getPointRef():::ENTER
this has only one value
this.point has only one value
this.point[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
this.point[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
this.value has only one value
this.value[] == [2.4550320774701523E-25, 1.2056576524748216E-24, 5.744669955783827E-24, 2.655708463112317E-23, 1.1911595914202177E-22, 5.183627033690221E-22, 2.1886271364328373E-21, 8.965696899049393E-21, 3.563449144966306E-20, 1.3741410616760886E-19, 5.141221426128679E-19, 1.8662745763025452E-18, 6.5729300483664594E-18, 2.2460360385762534E-17, 7.446439578982742E-17, 2.3952721171945046E-16, 7.475414653645141E-16, 2.263549288179718E-15, 6.6499573988780025E-15, 1.8954922372539005E-14, 5.24202872828907E-14, 1.4065365519966238E-13, 3.6616504935452297E-13, 9.248621224362916E-13, 2.266477113091129E-12, 5.38889748534944E-12, 1.2431477421007367E-11]
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.getPointRef():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
this.value[] == orig(this.value[])
this.point has only one value
this.point[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
this.point[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
this.value has only one value
this.value[] == [2.4550320774701523E-25, 1.2056576524748216E-24, 5.744669955783827E-24, 2.655708463112317E-23, 1.1911595914202177E-22, 5.183627033690221E-22, 2.1886271364328373E-21, 8.965696899049393E-21, 3.563449144966306E-20, 1.3741410616760886E-19, 5.141221426128679E-19, 1.8662745763025452E-18, 6.5729300483664594E-18, 2.2460360385762534E-17, 7.446439578982742E-17, 2.3952721171945046E-16, 7.475414653645141E-16, 2.263549288179718E-15, 6.6499573988780025E-15, 1.8954922372539005E-14, 5.24202872828907E-14, 1.4065365519966238E-13, 3.6616504935452297E-13, 9.248621224362916E-13, 2.266477113091129E-12, 5.38889748534944E-12, 1.2431477421007367E-11]
return has only one value
return[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
return[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.getValueRef():::ENTER
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.getValueRef():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
this.value[] == orig(this.value[])
return != null
return[] sorted by <
size(return[]) == 27
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
this.evaluations has only one value
this.evaluations != null
this.evaluations.maximalCount one of { 0, 2147483647 }
this.evaluations.count >= 0
this.checker has only one value
this.checker != null
this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
this.target[] == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
this.target[] elements <= 1.2431632654852931E-11
this.target[] elements >= 1.1143831578403364E-29
this.target[] sorted by <
this.weight[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
this.weight[] elements == 1.0
this.start[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
this.start[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
this.function.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
size(this.target[]) == 27
size(this.weight[]) == 27
size(this.start[]) == 3
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer():::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer(org.apache.commons.math.optimization.ConvergenceChecker):::ENTER
checker has only one value
checker.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer(org.apache.commons.math.optimization.ConvergenceChecker):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.computeObjectiveValue(double[]):::ENTER
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
point has only one value
point != null
size(point[]) == 3
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.computeObjectiveValue(double[]):::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
point[] == orig(point[])
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
return != null
return[] sorted by <
size(return[]) == 27
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getConvergenceChecker():::ENTER
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 1
this.target has only one value
this.weight has only one value
this.start has only one value
this.function has only one value
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getConvergenceChecker():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 1
this.target has only one value
this.weight has only one value
this.start has only one value
this.function has only one value
return has only one value
return.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getTargetRef():::ENTER
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getTargetRef():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
return has only one value
return != null
return[] == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
return[] elements <= 1.2431632654852931E-11
return[] elements >= 1.1143831578403364E-29
return[] sorted by <
size(return[]) == 27
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getWeightRef():::ENTER
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getWeightRef():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
return has only one value
return != null
return[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
return[] elements == 1.0
size(return[]) == 27
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.optimize(int, org.apache.commons.math.analysis.MultivariateVectorialFunction, double[], double[], double[]):::ENTER
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
maxEval == 2147483647
f has only one value
f.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
t has only one value
t[] == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
w has only one value
w[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
w[] elements == 1.0
startPoint has only one value
startPoint[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
startPoint[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
size(t[]) == 27
size(w[]) == 27
size(startPoint[]) == 3
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.optimize(int, org.apache.commons.math.analysis.MultivariateVectorialFunction, double[], double[], double[]):::EXIT
this.evaluations == orig(this.evaluations)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
t[] == orig(t[])
w[] == orig(w[])
startPoint[] == orig(startPoint[])
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 667
this.target has only one value
this.weight has only one value
this.start has only one value
this.function has only one value
t[] == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
w[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
w[] elements == 1.0
startPoint[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
startPoint[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
return has only one value
return.point has only one value
return.point[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
return.point[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
return.value has only one value
return.value[] == [2.4550320774701523E-25, 1.2056576524748216E-24, 5.744669955783827E-24, 2.655708463112317E-23, 1.1911595914202177E-22, 5.183627033690221E-22, 2.1886271364328373E-21, 8.965696899049393E-21, 3.563449144966306E-20, 1.3741410616760886E-19, 5.141221426128679E-19, 1.8662745763025452E-18, 6.5729300483664594E-18, 2.2460360385762534E-17, 7.446439578982742E-17, 2.3952721171945046E-16, 7.475414653645141E-16, 2.263549288179718E-15, 6.6499573988780025E-15, 1.8954922372539005E-14, 5.24202872828907E-14, 1.4065365519966238E-13, 3.6616504935452297E-13, 9.248621224362916E-13, 2.266477113091129E-12, 5.38889748534944E-12, 1.2431477421007367E-11]
size(return.point[]) == 3
size(return.value[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1:::OBJECT
this has only one value
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this has only one value
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f has only one value
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
org.apache.commons.math.optimization.fitting.CurveFitter.this has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] contains no nulls and has only one value, of length 27
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] elements != null
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == java.util.ArrayList.class
size(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction):::ENTER
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this has only one value
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f has only one value
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
org.apache.commons.math.optimization.fitting.CurveFitter.this has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] contains no nulls and has only one value, of length 27
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == java.util.ArrayList.class
size(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction):::EXIT
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this)
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f)
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.value(double[]):::ENTER
point has only one value
size(point[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.value(double[]):::EXIT
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this)
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f)
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
point[] == orig(point[])
return.getClass().getName() == double[][].class
return[] elements != null
size(return[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction:::OBJECT
this has only one value
this.f has only one value
this.f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
org.apache.commons.math.optimization.fitting.CurveFitter.this has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] contains no nulls and has only one value, of length 27
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] elements != null
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == java.util.ArrayList.class
size(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.TheoreticalValuesFunction(org.apache.commons.math.optimization.fitting.CurveFitter, org.apache.commons.math.analysis.ParametricUnivariateRealFunction):::ENTER
org.apache.commons.math.optimization.fitting.CurveFitter.this has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations has only one value
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] contains no nulls and has only one value, of length 27
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == java.util.ArrayList.class
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
size(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.TheoreticalValuesFunction(org.apache.commons.math.optimization.fitting.CurveFitter, org.apache.commons.math.analysis.ParametricUnivariateRealFunction):::EXIT
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.jacobian():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.jacobian():::EXIT
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.value(double[]):::ENTER
point has only one value
size(point[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.value(double[]):::EXIT
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
point[] == orig(point[])
return[] sorted by <
size(return[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter:::OBJECT
this has only one value
this.optimizer has only one value
this.optimizer != null
this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
this.observations has only one value
this.observations != null
this.observations[] elements != null
this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
this.observations.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.CurveFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer):::ENTER
optimizer has only one value
optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.CurveFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer):::EXIT
this.observations[] == []
this.observations[].getClass().getName() == []
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double):::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
size(this.observations[])-1 == orig(size(this.observations[]))
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double, double):::ENTER
weight == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double, double):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
size(this.observations[])-1 == orig(size(this.observations[]))
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.fit(int, org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[]):::ENTER
this.observations[] contains no nulls and has only one value, of length 27
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
maxEval == 2147483647
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
initialGuess has only one value
initialGuess[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
initialGuess[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
size(this.observations[]) == 27
size(initialGuess[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.fit(int, org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[]):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations[] == orig(this.observations[])
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
initialGuess[] == orig(initialGuess[])
this.observations[] contains no nulls and has only one value, of length 27
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
initialGuess[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
initialGuess[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
return has only one value
return[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
return[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
size(this.observations[]) == 27
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[]):::ENTER
this.observations[] contains no nulls and has only one value, of length 27
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
initialGuess has only one value
initialGuess[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
initialGuess[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
size(this.observations[]) == 27
size(initialGuess[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[]):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations[] == orig(this.observations[])
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
initialGuess[] == orig(initialGuess[])
this.observations[] contains no nulls and has only one value, of length 27
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
initialGuess[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
initialGuess[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
return has only one value
return[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
return[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
size(this.observations[]) == 27
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.getObservations():::ENTER
this.observations[] contains no nulls and has only one value, of length 27
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
size(this.observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.getObservations():::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations[] == orig(this.observations[])
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] contains no nulls and has only one value, of length 27
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
return has only one value
return.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
return[] contains no nulls and has only one value, of length 27
return[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
return[].weight elements == 1.0
return[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
return[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
size(this.observations[]) == 27
size(return[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1:::OBJECT
this has only one value
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this has only one value
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations has only one value
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[] contains no nulls and has only one value, of length 27
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[] elements != null
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight elements == 1.0
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x elements >= 0.0
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x sorted by <
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y sorted by <
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters == null
size(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser):::ENTER
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this has only one value
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations has only one value
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[] contains no nulls and has only one value, of length 27
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight elements == 1.0
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters == null
size(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser):::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[]) (elementwise)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight) (elementwise)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight is the reverse of orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x) (elementwise)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y) (elementwise)
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.compare(org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint):::ENTER
p1.weight == 1.0
p2.weight == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.compare(org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint):::EXIT317
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.compare(org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint):::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[])
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters)
p1.weight == orig(p1.weight)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p2.weight == orig(p2.weight)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
p1.weight == 1.0
p2.weight == 1.0
return == 1
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:::OBJECT
this has only one value
this.observations has only one value
this.observations != null
this.observations.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
this.observations[] contains no nulls and has only one value, of length 27
this.observations[] elements != null
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
this.observations[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
this.observations[].weight elements == 1.0
this.observations[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
this.observations[].x elements >= 0.0
this.observations[].x sorted by <
this.observations[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
this.observations[].y sorted by <
this.parameters[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
this.parameters[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
size(this.observations[]) == 27
size(this.parameters[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.ParameterGuesser(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::ENTER
observations has only one value
observations.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
observations[] contains no nulls and has only one value, of length 27
observations[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
observations[].weight elements == 1.0
observations[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
observations[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
size(observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.ParameterGuesser(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::EXIT
observations[] == orig(observations[])
observations[].weight == orig(observations[].weight)
observations[].x == orig(observations[].x)
observations[].y == orig(observations[].y)
this.parameters == null
observations[] contains no nulls and has only one value, of length 27
observations[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
observations[].weight elements == 1.0
observations[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
observations[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.basicGuess(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::ENTER
this.parameters == null
points has only one value
points.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
points[] contains no nulls and has only one value, of length 27
points[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
points[].weight elements == 1.0
points[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
points[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
size(points[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.basicGuess(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
points[] == orig(points[])
points[].weight == orig(points[].weight)
points[].x == orig(points[].x)
points[].y == orig(points[].y)
this.parameters == null
points[] contains no nulls and has only one value, of length 27
points[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
points[].weight elements == 1.0
points[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
points[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
return has only one value
return[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
return[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.createWeightedObservedPointComparator():::ENTER
this.parameters == null
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.createWeightedObservedPointComparator():::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
this.parameters == null
return has only one value
return.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.class
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.findMaxY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::ENTER
this.parameters == null
points has only one value
points.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
points[] contains no nulls and has only one value, of length 27
points[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
points[].weight elements == 1.0
points[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
points[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
size(points[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.findMaxY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
points[] == orig(points[])
points[].weight == orig(points[].weight)
points[].x == orig(points[].x)
points[].y == orig(points[].y)
this.parameters == null
points[] contains no nulls and has only one value, of length 27
points[].weight == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
points[].weight elements == 1.0
points[].x == [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]
points[].y == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
return == 26
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.guess():::ENTER
this.parameters == null
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.guess():::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters has only one value
return has only one value
return[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
return[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.isBetween(double, double, double):::ENTER
this.parameters == null
value == 13.000000000006215
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.isBetween(double, double, double):::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
this.parameters == null
return == false
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.isBetween(double, double, double):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter:::OBJECT
this has only one value
this.optimizer has only one value
this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
this.observations has only one value
this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
this.observations[].getClass().getName() one of { [], [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint] }
this.observations.getClass().getName() == java.util.ArrayList.class
size(this.observations[]) one of { 0, 27 }
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter.GaussianFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer):::ENTER
optimizer has only one value
optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter.GaussianFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer):::EXIT
this.observations[] == []
this.observations[].getClass().getName() == []
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter.fit():::ENTER
this.observations[] contains no nulls and has only one value, of length 27
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
size(this.observations[]) == 27
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter.fit():::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations[] == orig(this.observations[])
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] contains no nulls and has only one value, of length 27
this.observations[].getClass().getName() == [org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint]
return has only one value
return[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
return[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
size(this.observations[]) == 27
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest:::CLASS
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName()
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName()
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName()
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName()
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == double[][].class
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] contains no nulls and has only one value, of length 30
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] contains no nulls and has only one value, of length 31
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] contains no nulls and has only one value, of length 46
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] contains no nulls and has only one value, of length 14
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] contains no nulls and has only one value, of length 12
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[]) == 30
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[]) == 31
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[]) == 46
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[]) == 14
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[]) == 12
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.GaussianFitterTest():::EXIT
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testMath519():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testMath519():::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[])
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint:::CLASS
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint:::OBJECT
this.weight == 1.0
this.x >= 0.0
this.y <= 1.2431632654852931E-11
this.y >= 1.1143831578403364E-29
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.WeightedObservedPoint(double, double, double):::ENTER
weight == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.WeightedObservedPoint(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getWeight():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getWeight():::EXIT
this.weight == orig(this.weight)
this.x == orig(this.x)
this.y == orig(this.y)
return == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getX():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getX():::EXIT
this.weight == orig(this.weight)
this.x == orig(this.x)
this.y == orig(this.y)
return >= 0.0
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getY():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getY():::EXIT
this.weight == orig(this.weight)
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
this.weightedResidualJacobian.getClass().getName() == double[][].class
this.weightedResidualJacobian[] elements != null
this.cols one of { 0, 3 }
this.rows one of { 0, 27 }
this.objective[] sorted by <=
this.residuals[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.residuals[] elements == 0.0
this.jF.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.class
this.jacobianEvaluations >= 0
this.evaluations has only one value
this.evaluations != null
this.evaluations.maximalCount one of { 0, 2147483647 }
this.evaluations.count >= 0
this.checker has only one value
this.checker != null
this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
this.target[] == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
this.target[] elements <= 1.2431632654852931E-11
this.target[] elements >= 1.1143831578403364E-29
this.target[] sorted by <
this.weight[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
this.weight[] elements == 1.0
this.start[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
this.start[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
this.function.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
size(this.weightedResidualJacobian[]) == 27
size(this.point[]) == 3
size(this.objective[]) == 27
size(this.residuals[]) == 27
size(this.weightedResiduals[]) == 27
size(this.target[]) == 27
size(this.weight[]) == 27
size(this.start[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.AbstractLeastSquaresOptimizer():::EXIT
this.weightedResidualJacobian == null
this.cols == 0
this.rows == 0
this.point == null
this.objective == null
this.residuals == null
this.weightedResiduals == null
this.cost == 0.0
this.jF == null
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(int, org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction, double[], double[], double[]):::ENTER
this.weightedResidualJacobian == null
this.cols == 0
this.rows == 0
this.point == null
this.objective == null
this.residuals == null
this.weightedResiduals == null
this.cost == 0.0
this.jF == null
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
maxEval == 2147483647
f has only one value
f.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
target has only one value
target[] == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
weights has only one value
weights[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
weights[] elements == 1.0
startPoint has only one value
startPoint[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
startPoint[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
size(target[]) == 27
size(weights[]) == 27
size(startPoint[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(int, org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction, double[], double[], double[]):::EXIT
this.cost == orig(this.cost)
this.evaluations == orig(this.evaluations)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
target[] == orig(target[])
weights[] == orig(weights[])
startPoint[] == orig(startPoint[])
this.weightedResidualJacobian has only one value
this.weightedResidualJacobian[] contains no nulls and has only one value, of length 27
this.cols == 3
this.rows == 27
this.point has only one value
this.point[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
this.point[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
this.objective has only one value
this.objective[] == [2.4550320774701523E-25, 1.2056576524748216E-24, 5.744669955783827E-24, 2.655708463112317E-23, 1.1911595914202177E-22, 5.183627033690221E-22, 2.1886271364328373E-21, 8.965696899049393E-21, 3.563449144966306E-20, 1.3741410616760886E-19, 5.141221426128679E-19, 1.8662745763025452E-18, 6.5729300483664594E-18, 2.2460360385762534E-17, 7.446439578982742E-17, 2.3952721171945046E-16, 7.475414653645141E-16, 2.263549288179718E-15, 6.6499573988780025E-15, 1.8954922372539005E-14, 5.24202872828907E-14, 1.4065365519966238E-13, 3.6616504935452297E-13, 9.248621224362916E-13, 2.266477113091129E-12, 5.38889748534944E-12, 1.2431477421007367E-11]
this.residuals has only one value
this.weightedResiduals has only one value
this.weightedResiduals[] == [-2.4549206391543684E-25, -1.205162371071337E-24, -5.7334986085718966E-24, -2.6386636491496807E-23, -1.1713748748453855E-22, -4.997324669611554E-22, -2.04042180738186E-21, -7.941500513586109E-21, -2.9359414082989934E-20, -1.0279601622228392E-19, -3.4005089576571084E-19, -1.0606057809471478E-18, -3.1127361023743883E-18, -8.57703401175101E-18, -2.2125445953116262E-17, -5.3219297066813016E-17, -1.1866554257230307E-16, -2.431058961199325E-16, -4.511884603018478E-16, -7.40728903932746E-16, -1.028522827505987E-15, -1.0893809092045105E-15, -5.944787097090653E-16, 5.132100416862678E-16, 1.1588883855668523E-15, -8.514757657547625E-16, 1.5523384556406558E-16]
this.cost == 2.40465567827277E-15
this.jF has only one value
this.jacobianEvaluations == 509
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 667
this.target has only one value
this.weight has only one value
this.start has only one value
this.function has only one value
target[] == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
weights[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
weights[] elements == 1.0
startPoint[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
startPoint[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
return has only one value
return.point has only one value
return.point[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
return.point[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
return.value has only one value
return.value[] == [2.4550320774701523E-25, 1.2056576524748216E-24, 5.744669955783827E-24, 2.655708463112317E-23, 1.1911595914202177E-22, 5.183627033690221E-22, 2.1886271364328373E-21, 8.965696899049393E-21, 3.563449144966306E-20, 1.3741410616760886E-19, 5.141221426128679E-19, 1.8662745763025452E-18, 6.5729300483664594E-18, 2.2460360385762534E-17, 7.446439578982742E-17, 2.3952721171945046E-16, 7.475414653645141E-16, 2.263549288179718E-15, 6.6499573988780025E-15, 1.8954922372539005E-14, 5.24202872828907E-14, 1.4065365519966238E-13, 3.6616504935452297E-13, 9.248621224362916E-13, 2.266477113091129E-12, 5.38889748534944E-12, 1.2431477421007367E-11]
size(return.point[]) == 3
size(return.value[]) == 27
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateJacobian():::ENTER
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateJacobian():::EXIT
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
size(this.weightedResidualJacobian[]) == orig(size(this.weightedResidualJacobian[]))
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
this.jacobianEvaluations - orig(this.jacobianEvaluations) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateResidualsAndCost():::ENTER
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective[] elements == 0.0
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.weightedResiduals[] elements == 0.0
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateResidualsAndCost():::EXIT
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
size(this.objective[]) == orig(size(this.objective[]))
size(this.weightedResiduals[]) == orig(size(this.weightedResiduals[]))
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
this.cost % orig(this.cost) == 0
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:::OBJECT
this has only one value
this.solvedCols one of { 0, 3 }
this.beta[] elements >= 0.0
this.permutation[] elements one of { 0, 1, 2 }
this.permutation[] one of { [0, 0, 0], [0, 2, 1] }
this.rank one of { 0, 3 }
this.initialStepBoundFactor == 100.0
this.costRelativeTolerance == 1.0E-10
this.parRelativeTolerance == 1.0E-10
this.orthoTolerance == 1.0E-10
this.qrRankingThreshold == 2.2250738585072014E-308
this.weightedResidualJacobian.getClass().getName() == double[][].class
this.weightedResidualJacobian[] elements != null
this.cols one of { 0, 3 }
this.rows one of { 0, 27 }
this.objective[] sorted by <=
this.residuals[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.residuals[] elements == 0.0
this.jF.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.class
this.jacobianEvaluations >= 0
this.evaluations has only one value
this.evaluations != null
this.evaluations.maximalCount one of { 0, 2147483647 }
this.evaluations.count >= 0
this.checker has only one value
this.checker != null
this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
this.target[] == [1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11]
this.target[] elements <= 1.2431632654852931E-11
this.target[] elements >= 1.1143831578403364E-29
this.target[] sorted by <
this.weight[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
this.weight[] elements == 1.0
this.start[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
this.start[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
this.function.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
size(this.diagR[]) == 3
size(this.jacNorm[]) == 3
size(this.beta[]) == 3
size(this.permutation[]) == 3
size(this.lmDir[]) == 3
size(this.weightedResidualJacobian[]) == 27
size(this.point[]) == 3
size(this.objective[]) == 27
size(this.residuals[]) == 27
size(this.weightedResiduals[]) == 27
size(this.target[]) == 27
size(this.weight[]) == 27
size(this.start[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer():::EXIT
this.solvedCols == 0
this.diagR == null
this.jacNorm == null
this.beta == null
this.permutation == null
this.rank == 0
this.lmPar == 0.0
this.lmDir == null
this.weightedResidualJacobian == null
this.cols == 0
this.rows == 0
this.point == null
this.objective == null
this.residuals == null
this.weightedResiduals == null
this.cost == 0.0
this.jF == null
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double, double, double, double, double):::ENTER
initialStepBoundFactor == 100.0
costRelativeTolerance == 1.0E-10
parRelativeTolerance == 1.0E-10
orthoTolerance == 1.0E-10
threshold == 2.2250738585072014E-308
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double, double, double, double, double):::EXIT
this.solvedCols == 0
this.diagR == null
this.jacNorm == null
this.beta == null
this.permutation == null
this.rank == 0
this.lmPar == 0.0
this.lmDir == null
this.weightedResidualJacobian == null
this.cols == 0
this.rows == 0
this.point == null
this.objective == null
this.residuals == null
this.weightedResiduals == null
this.cost == 0.0
this.jF == null
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMDirection(double[], double[], double[], double[]):::ENTER
this.solvedCols == 3
this.diagR has only one value
this.diagR != null
this.jacNorm has only one value
this.jacNorm != null
this.beta has only one value
this.beta != null
this.permutation has only one value
this.permutation != null
this.permutation[] == [0, 2, 1]
this.rank == 3
this.lmDir has only one value
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
qy has only one value
qy != null
diag has only one value
diag != null
lmDiag has only one value
lmDiag != null
work has only one value
work != null
size(qy[]) == 27
size(diag[]) == 3
size(lmDiag[]) == 3
size(work[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMDirection(double[], double[], double[], double[]):::EXIT
this.solvedCols == orig(this.solvedCols)
this.diagR == orig(this.diagR)
this.diagR[] == orig(this.diagR[])
this.jacNorm == orig(this.jacNorm)
this.jacNorm[] == orig(this.jacNorm[])
this.beta == orig(this.beta)
this.beta[] == orig(this.beta[])
this.permutation == orig(this.permutation)
this.permutation[] == orig(this.permutation[])
this.rank == orig(this.rank)
this.lmPar == orig(this.lmPar)
this.lmDir == orig(this.lmDir)
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
qy[] == orig(qy[])
diag[] == orig(diag[])
size(this.lmDir[]) == orig(size(this.lmDir[]))
this.solvedCols == 3
this.diagR has only one value
this.diagR != null
this.jacNorm has only one value
this.jacNorm != null
this.beta has only one value
this.beta != null
this.permutation has only one value
this.permutation != null
this.permutation[] == [0, 2, 1]
this.rank == 3
this.lmDir has only one value
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
this.lmDir[] >= orig(this.lmDir[]) (elementwise)
orig(work[]) % work[] == 0 (elementwise)
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[]):::ENTER
this.solvedCols == 3
this.diagR has only one value
this.diagR != null
this.jacNorm has only one value
this.jacNorm != null
this.beta has only one value
this.beta != null
this.permutation has only one value
this.permutation != null
this.permutation[] == [0, 2, 1]
this.rank == 3
this.lmDir has only one value
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
qy has only one value
qy != null
diag has only one value
diag != null
work1 has only one value
work1 != null
work2 has only one value
work2 != null
work3 has only one value
work3 != null
size(qy[]) == 27
size(diag[]) == 3
size(work1[]) == 3
size(work2[]) == 3
size(work3[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[]):::EXIT509
this.lmPar == orig(this.lmPar)
work2[] == orig(work2[])
work3[] == orig(work3[])
this.lmPar == 0.0
this.objective[] elements == 0.0
this.weightedResiduals[] elements == 0.0
this.cost one of { 2.4048042958089354E-15, 3.528128301680216E-11 }
work2[] elements one of { 0.0, 1.6043114651789787E-5, 1.606964248877428E-5 }
work2[] one of { [0.0, 0.0, 0.0], [1.6043114651789787E-5, 2.096722315347747E-12, 5.316677543265736E-15], [1.606964248877428E-5, 2.0969465620154518E-12, 5.6809391741883786E-15] }
work3[] elements == 0.0
work3[] one of { [-4.542930790614779E-9, -4.4431341253322836E-14, -2.168223945106606E-14], [-3.003422576904085E-9, -2.930738592906587E-14, -1.4301414555308478E-14], [0.0, 0.0, 0.0] }
orig(this.lmPar) == 0.0
orig(work1[]) elements == 0.0
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[]):::EXIT589
this.objective[] sorted by <
orig(this.lmPar) % this.lmPar == 0
this.lmDir[] < orig(this.lmDir[]) (lexically)
this.lmDir[] <= orig(this.lmDir[]) (lexically)
work1[] % orig(work1[]) == 0 (elementwise)
work1[] > orig(work1[]) (lexically)
work1[] >= orig(work1[]) (lexically)
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[]):::EXIT624
this.lmPar == orig(this.lmPar)
this.objective[] sorted by <
this.lmDir[] < orig(this.lmDir[]) (lexically)
this.lmDir[] <= orig(this.lmDir[]) (lexically)
work1[] % orig(work1[]) == 0 (elementwise)
work1[] < orig(work1[]) (lexically)
work1[] <= orig(work1[]) (lexically)
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[]):::EXIT
this.solvedCols == orig(this.solvedCols)
this.diagR == orig(this.diagR)
this.diagR[] == orig(this.diagR[])
this.jacNorm == orig(this.jacNorm)
this.jacNorm[] == orig(this.jacNorm[])
this.beta == orig(this.beta)
this.beta[] == orig(this.beta[])
this.permutation == orig(this.permutation)
this.permutation[] == orig(this.permutation[])
this.rank == orig(this.rank)
this.lmDir == orig(this.lmDir)
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
qy[] == orig(qy[])
diag[] == orig(diag[])
size(this.lmDir[]) == orig(size(this.lmDir[]))
this.solvedCols == 3
this.diagR has only one value
this.diagR != null
this.jacNorm has only one value
this.jacNorm != null
this.beta has only one value
this.beta != null
this.permutation has only one value
this.permutation != null
this.permutation[] == [0, 2, 1]
this.rank == 3
this.lmDir has only one value
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
this.lmPar >= orig(this.lmPar)
orig(work1[]) % work1[] == 0 (elementwise)
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize():::ENTER
this.solvedCols == 0
this.diagR == null
this.jacNorm == null
this.beta == null
this.permutation == null
this.rank == 0
this.lmPar == 0.0
this.lmDir == null
this.weightedResidualJacobian has only one value
this.weightedResidualJacobian[] contains no nulls and has only one value, of length 27
this.cols == 3
this.rows == 27
this.point has only one value
this.point[] == [1.2431632654852931E-11, 26.0, 11.041183403744247]
this.point[] elements one of { 1.2431632654852931E-11, 11.041183403744247, 26.0 }
this.objective == null
this.residuals has only one value
this.weightedResiduals has only one value
this.weightedResiduals[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.weightedResiduals[] elements == 0.0
this.cost == Infinity
this.jF has only one value
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.target has only one value
this.weight has only one value
this.start has only one value
this.function has only one value
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize():::EXIT435
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize():::EXIT
this.lmPar == orig(this.lmPar)
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
size(this.weightedResidualJacobian[]) == orig(size(this.weightedResidualJacobian[]))
size(this.point[]) == orig(size(this.point[]))
this.solvedCols == 3
this.diagR has only one value
this.diagR[] == [1.6006834904128115E-5, 3.685172284077798E-15, 2.0962290461603287E-12]
this.diagR[] elements one of { 3.685172284077798E-15, 2.0962290461603287E-12, 1.6006834904128115E-5 }
this.jacNorm has only one value
this.jacNorm[] == [1.6006834904128115E-5, 1.1401007731133753E-11, 5.432136562649379E-11]
this.jacNorm[] elements one of { 1.1401007731133753E-11, 5.432136562649379E-11, 1.6006834904128115E-5 }
this.beta has only one value
this.beta[] == [3.9029147817360992E9, 7.363501970879759E28, 2.275739413489366E23]
this.beta[] elements one of { 3.9029147817360992E9, 2.275739413489366E23, 7.363501970879759E28 }
this.permutation has only one value
this.permutation[] == [0, 2, 1]
this.rank == 3
this.lmPar == 0.0
this.lmDir has only one value
this.lmDir[] == [6.752784229364064E-15, 1.856626949415413E-8, 1.9080301436468022E-9]
this.lmDir[] elements one of { 6.752784229364064E-15, 1.9080301436468022E-9, 1.856626949415413E-8 }
this.weightedResidualJacobian has only one value
this.weightedResidualJacobian[] contains no nulls and has only one value, of length 27
this.cols == 3
this.rows == 27
this.point has only one value
this.point[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
this.point[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
this.objective has only one value
this.objective[] == [2.4550320774701523E-25, 1.2056576524748216E-24, 5.744669955783827E-24, 2.655708463112317E-23, 1.1911595914202177E-22, 5.183627033690221E-22, 2.1886271364328373E-21, 8.965696899049393E-21, 3.563449144966306E-20, 1.3741410616760886E-19, 5.141221426128679E-19, 1.8662745763025452E-18, 6.5729300483664594E-18, 2.2460360385762534E-17, 7.446439578982742E-17, 2.3952721171945046E-16, 7.475414653645141E-16, 2.263549288179718E-15, 6.6499573988780025E-15, 1.8954922372539005E-14, 5.24202872828907E-14, 1.4065365519966238E-13, 3.6616504935452297E-13, 9.248621224362916E-13, 2.266477113091129E-12, 5.38889748534944E-12, 1.2431477421007367E-11]
this.residuals has only one value
this.weightedResiduals has only one value
this.weightedResiduals[] == [-2.4549206391543684E-25, -1.205162371071337E-24, -5.7334986085718966E-24, -2.6386636491496807E-23, -1.1713748748453855E-22, -4.997324669611554E-22, -2.04042180738186E-21, -7.941500513586109E-21, -2.9359414082989934E-20, -1.0279601622228392E-19, -3.4005089576571084E-19, -1.0606057809471478E-18, -3.1127361023743883E-18, -8.57703401175101E-18, -2.2125445953116262E-17, -5.3219297066813016E-17, -1.1866554257230307E-16, -2.431058961199325E-16, -4.511884603018478E-16, -7.40728903932746E-16, -1.028522827505987E-15, -1.0893809092045105E-15, -5.944787097090653E-16, 5.132100416862678E-16, 1.1588883855668523E-15, -8.514757657547625E-16, 1.5523384556406558E-16]
this.cost == 2.40465567827277E-15
this.jF has only one value
this.jacobianEvaluations == 509
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 667
this.target has only one value
this.weight has only one value
this.start has only one value
this.function has only one value
return has only one value
return.point has only one value
return.point[] == [8.605257236528445E-7, 53.157279254737354, 5.752146227237436]
return.point[] elements one of { 8.605257236528445E-7, 5.752146227237436, 53.157279254737354 }
return.value has only one value
return.value[] == [2.4550320774701523E-25, 1.2056576524748216E-24, 5.744669955783827E-24, 2.655708463112317E-23, 1.1911595914202177E-22, 5.183627033690221E-22, 2.1886271364328373E-21, 8.965696899049393E-21, 3.563449144966306E-20, 1.3741410616760886E-19, 5.141221426128679E-19, 1.8662745763025452E-18, 6.5729300483664594E-18, 2.2460360385762534E-17, 7.446439578982742E-17, 2.3952721171945046E-16, 7.475414653645141E-16, 2.263549288179718E-15, 6.6499573988780025E-15, 1.8954922372539005E-14, 5.24202872828907E-14, 1.4065365519966238E-13, 3.6616504935452297E-13, 9.248621224362916E-13, 2.266477113091129E-12, 5.38889748534944E-12, 1.2431477421007367E-11]
size(return.point[]) == 3
size(return.value[]) == 27
this.weightedResiduals[] == orig(this.weightedResiduals[]) (elementwise)
this.weightedResiduals[] is the reverse of orig(this.weightedResiduals[])
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qTy(double[]):::ENTER
this.solvedCols == 3
this.diagR has only one value
this.diagR != null
this.jacNorm has only one value
this.jacNorm != null
this.beta has only one value
this.beta != null
this.permutation has only one value
this.permutation != null
this.permutation[] == [0, 2, 1]
this.rank == 3
this.lmDir has only one value
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
y has only one value
y != null
size(y[]) == 27
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qTy(double[]):::EXIT
this.solvedCols == orig(this.solvedCols)
this.diagR == orig(this.diagR)
this.diagR[] == orig(this.diagR[])
this.jacNorm == orig(this.jacNorm)
this.jacNorm[] == orig(this.jacNorm[])
this.beta == orig(this.beta)
this.beta[] == orig(this.beta[])
this.permutation == orig(this.permutation)
this.permutation[] == orig(this.permutation[])
this.rank == orig(this.rank)
this.lmPar == orig(this.lmPar)
this.lmDir == orig(this.lmDir)
this.lmDir[] == orig(this.lmDir[])
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.solvedCols == 3
this.diagR has only one value
this.diagR != null
this.jacNorm has only one value
this.jacNorm != null
this.beta has only one value
this.beta != null
this.permutation has only one value
this.permutation != null
this.permutation[] == [0, 2, 1]
this.rank == 3
this.lmDir has only one value
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qrDecomposition():::ENTER
this.solvedCols == 3
this.diagR has only one value
this.diagR != null
this.jacNorm has only one value
this.jacNorm != null
this.beta has only one value
this.beta != null
this.permutation has only one value
this.permutation != null
this.lmDir has only one value
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qrDecomposition():::EXIT834
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qrDecomposition():::EXIT
this.solvedCols == orig(this.solvedCols)
this.diagR == orig(this.diagR)
this.jacNorm == orig(this.jacNorm)
this.beta == orig(this.beta)
this.permutation == orig(this.permutation)
this.lmPar == orig(this.lmPar)
this.lmDir == orig(this.lmDir)
this.lmDir[] == orig(this.lmDir[])
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
size(this.diagR[]) == orig(size(this.diagR[]))
size(this.jacNorm[]) == orig(size(this.jacNorm[]))
size(this.beta[]) == orig(size(this.beta[]))
size(this.permutation[]) == orig(size(this.permutation[]))
this.solvedCols == 3
this.diagR has only one value
this.diagR != null
this.jacNorm has only one value
this.jacNorm != null
this.beta has only one value
this.beta != null
this.permutation has only one value
this.permutation != null
this.permutation[] == [0, 2, 1]
this.rank == 3
this.lmDir has only one value
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.rows == 27
this.point has only one value
this.point != null
this.objective != null
this.objective[] sorted by <
this.residuals has only one value
this.residuals != null
this.weightedResiduals != null
this.jF has only one value
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target has only one value
this.target != null
this.weight has only one value
this.weight != null
this.start has only one value
this.start != null
this.function has only one value
this.function != null
this.permutation[] >= orig(this.permutation[]) (elementwise)
this.rank >= orig(this.rank)
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.exp(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.exp(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::ENTER
extra == 0.0
hiPrec == null
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::EXIT821
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a[] sorted by >
b[] sorted by >
size(a[]) == 2
size(b[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] sorted by >
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return[] sorted by >=
size(return[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] sorted by >=
result[] <= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
size(split[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
b[] elements <= 2.0
ans[] sorted by >=
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
result[] elements <= 1.0
size(in[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::EXIT
===========================================================================
org.apache.commons.math.util.Incrementor:::OBJECT
this has only one value
this.maximalCount one of { 0, 2147483647 }
this.count >= 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::ENTER
this.maximalCount == 2147483647
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maximalCount == 2147483647
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::ENTER
this.maximalCount == 2147483647
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maximalCount == 2147483647
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::ENTER
this.maximalCount == 0
this.count == 0
max == 2147483647
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maximalCount == 2147483647
this.count == 0
