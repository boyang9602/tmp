===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric:::OBJECT
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.Parametric():::EXIT
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.gradient(double, double[]):::ENTER
size(param[]) == 3
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.gradient(double, double[]):::EXIT
param[] == orig(param[])
size(return[]) == 3
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(double[]):::ENTER
size(param[]) == 3
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(double[]):::EXIT
param[] == orig(param[])
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.value(double, double[]):::ENTER
size(param[]) == 3
===========================================================================
org.apache.commons.math.analysis.function.Gaussian$Parametric.value(double, double[]):::EXIT
param[] == orig(param[])
return >= 0.0
===========================================================================
org.apache.commons.math.analysis.function.Gaussian.value(double, double, double):::ENTER
norm >= 1.0
i2s2 >= 0.01232261654328792
===========================================================================
org.apache.commons.math.analysis.function.Gaussian.value(double, double, double):::EXIT
return >= 0.0
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException:::OBJECT
this.specific == null
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Integer, java.lang.Integer] }
size(this.arguments[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
specific == null
general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 2
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException:::OBJECT
this.specific == null
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Integer, java.lang.Integer] }
size(this.arguments[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
specific == null
general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
arguments[] == orig(arguments[])
===========================================================================
org.apache.commons.math.exception.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathRuntimeException:::OBJECT
this.specific == null
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Integer, java.lang.Integer] }
size(this.arguments[]) one of { 2, 3 }
===========================================================================
org.apache.commons.math.exception.MathRuntimeException.MathRuntimeException(java.lang.Throwable, org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
cause == null
specific == null
general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) == 2
===========================================================================
org.apache.commons.math.exception.MathRuntimeException.MathRuntimeException(java.lang.Throwable, org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
arguments[] == orig(arguments[])
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException:::CLASS
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException:::OBJECT
this.min has only one value
this.min.getClass().getName() == java.lang.Integer.class
this.boundIsAllowed == true
this.argument.getClass().getName() == java.lang.Integer.class
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
this.arguments[].getClass().getName() elements == java.lang.Integer.class
size(this.arguments[]) == 2
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(java.lang.Number, java.lang.Number, boolean):::ENTER
wrong.getClass().getName() == java.lang.Integer.class
min has only one value
min.getClass().getName() == java.lang.Integer.class
boundIsAllowed == true
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(java.lang.Number, java.lang.Number, boolean):::EXIT
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, boolean):::ENTER
specific == null
wrong.getClass().getName() == java.lang.Integer.class
min has only one value
min.getClass().getName() == java.lang.Integer.class
boundIsAllowed == true
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, boolean):::EXIT
===========================================================================
org.apache.commons.math.exception.OutOfRangeException:::CLASS
===========================================================================
org.apache.commons.math.exception.OutOfRangeException:::OBJECT
this.lo.getClass().getName() == java.lang.Double.class
this.hi.getClass().getName() == java.lang.Double.class
this.argument.getClass().getName() == java.lang.Double.class
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.arguments[].getClass().getName() elements == java.lang.Double.class
size(this.arguments[]) == 3
===========================================================================
org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(java.lang.Number, java.lang.Number, java.lang.Number):::ENTER
wrong.getClass().getName() == java.lang.Double.class
lo.getClass().getName() == java.lang.Double.class
hi.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, java.lang.Number):::ENTER
specific == null
wrong.getClass().getName() == java.lang.Double.class
lo.getClass().getName() == java.lang.Double.class
hi.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
size(array[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
return.getClass().getName() == java.lang.Object[].class
size(return[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats:::OBJECT
this.sourceFormat != null
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
$hidden$1 != null
sourceFormat != null
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker:::CLASS
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker:::OBJECT
this.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
this.relativeThreshold == 1.1102230246251565E-14
this.absoluteThreshold == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.AbstractConvergenceChecker():::EXIT
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.getAbsoluteThreshold():::ENTER
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.getAbsoluteThreshold():::EXIT
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
return == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.getRelativeThreshold():::ENTER
===========================================================================
org.apache.commons.math.optimization.AbstractConvergenceChecker.getRelativeThreshold():::EXIT
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
return == 1.1102230246251565E-14
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker:::CLASS
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker:::OBJECT
this.relativeThreshold == 1.1102230246251565E-14
this.absoluteThreshold == 2.2250738585072014E-306
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.SimpleVectorialValueChecker():::EXIT
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::ENTER
iteration >= 1
previous != null
previous.point != null
previous.value != null
previous.value[] elements >= 0.0
current != null
current.point != null
current.value != null
current.value[] elements >= 0.0
size(previous.point[]) == 3
size(current.point[]) == 3
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::EXIT85
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::EXIT85;condition="not(return == true)"
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::EXIT
this.relativeThreshold == orig(this.relativeThreshold)
this.absoluteThreshold == orig(this.absoluteThreshold)
previous.point == orig(previous.point)
previous.point[] == orig(previous.point[])
previous.value == orig(previous.value)
previous.value[] == orig(previous.value[])
current.point == orig(current.point)
current.point[] == orig(current.point[])
current.value == orig(current.value)
current.value[] == orig(current.value[])
previous.point != null
previous.value != null
previous.value[] elements >= 0.0
current.point != null
current.value != null
current.value[] elements >= 0.0
return == false
size(previous.point[]) == 3
size(current.point[]) == 3
===========================================================================
org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair:::CLASS
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair:::OBJECT
this.point != null
this.value != null
this.value[] elements >= 0.0
size(this.point[]) == 3
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.VectorialPointValuePair(double[], double[]):::ENTER
point != null
value != null
value[] elements >= 0.0
size(point[]) == 3
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.VectorialPointValuePair(double[], double[]):::EXIT
point[] == orig(point[])
value[] == orig(value[])
value[] elements >= 0.0
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.getPointRef():::ENTER
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.getPointRef():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
this.value[] == orig(this.value[])
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.getValueRef():::ENTER
===========================================================================
org.apache.commons.math.optimization.VectorialPointValuePair.getValueRef():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
this.value[] == orig(this.value[])
return != null
return[] elements >= 0.0
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer:::OBJECT
this.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
this.evaluations != null
this.evaluations.maximalCount one of { 0, 2147483647 }
this.evaluations.count >= 0
this.checker != null
this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
this.weight[] elements == 1.0
this.function.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
size(this.start[]) == 3
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer():::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer(org.apache.commons.math.optimization.ConvergenceChecker):::ENTER
checker.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer(org.apache.commons.math.optimization.ConvergenceChecker):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.computeObjectiveValue(double[]):::ENTER
this.evaluations.maximalCount == 2147483647
this.target != null
this.weight != null
this.start != null
this.function != null
point != null
size(point[]) == 3
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.computeObjectiveValue(double[]):::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
point[] == orig(point[])
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
return != null
return[] elements >= 0.0
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getConvergenceChecker():::ENTER
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 1
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getConvergenceChecker():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 1
return.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getTargetRef():::ENTER
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getTargetRef():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
return != null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getWeightRef():::ENTER
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getWeightRef():::EXIT
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
return != null
return[] elements == 1.0
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.optimize(int, org.apache.commons.math.analysis.MultivariateVectorialFunction, double[], double[], double[]):::ENTER
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
maxEval == 2147483647
f.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
w[] elements == 1.0
size(startPoint[]) == 3
===========================================================================
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.optimize(int, org.apache.commons.math.analysis.MultivariateVectorialFunction, double[], double[], double[]):::EXIT
this.evaluations == orig(this.evaluations)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
t[] == orig(t[])
w[] == orig(w[])
startPoint[] == orig(startPoint[])
this.evaluations.maximalCount == 2147483647
w[] elements == 1.0
return.value[] elements >= 0.0
size(return.point[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1:::OBJECT
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] elements != null
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction):::ENTER
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction):::EXIT
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this)
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f)
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.value(double[]):::ENTER
size(point[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.value(double[]):::EXIT
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this)
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f)
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.this.f.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
point[] == orig(point[])
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction:::OBJECT
this.f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] elements != null
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.TheoreticalValuesFunction(org.apache.commons.math.optimization.fitting.CurveFitter, org.apache.commons.math.analysis.ParametricUnivariateRealFunction):::ENTER
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == java.util.ArrayList.class
f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.TheoreticalValuesFunction(org.apache.commons.math.optimization.fitting.CurveFitter, org.apache.commons.math.analysis.ParametricUnivariateRealFunction):::EXIT
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.jacobian():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.jacobian():::EXIT
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
return.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.value(double[]):::ENTER
size(point[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.value(double[]):::EXIT
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer)
org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.optimizer.getClass().getName())
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations)
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[] == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations[])
org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.CurveFitter.this.observations.getClass().getName())
point[] == orig(point[])
return[] elements >= 0.0
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter:::OBJECT
this.optimizer != null
this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
this.observations != null
this.observations[] elements != null
this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
this.observations.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.CurveFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer):::ENTER
optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.CurveFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer):::EXIT
this.observations[] == []
this.observations[].getClass().getName() == []
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double):::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
size(this.observations[])-1 == orig(size(this.observations[]))
size(this.observations[]) >= 1
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double, double):::ENTER
weight == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double, double):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
size(this.observations[])-1 == orig(size(this.observations[]))
size(this.observations[]) >= 1
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.fit(int, org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[]):::ENTER
maxEval == 2147483647
f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
size(initialGuess[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.fit(int, org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[]):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations[] == orig(this.observations[])
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
initialGuess[] == orig(initialGuess[])
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[]):::ENTER
f.getClass().getName() == org.apache.commons.math.analysis.function.Gaussian$Parametric.class
size(initialGuess[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[]):::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations[] == orig(this.observations[])
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
initialGuess[] == orig(initialGuess[])
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.getObservations():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.CurveFitter.getObservations():::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations[] == orig(this.observations[])
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
return.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
return[].weight elements == 1.0
return[].x sorted by <
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1:::OBJECT
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[] elements != null
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight elements == 1.0
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x sorted by <
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters == null
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser):::ENTER
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight elements == 1.0
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters == null
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser):::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[]) (elementwise)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight) (elementwise)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight)**2 (elementwise)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight is the reverse of orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight)
orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight) == org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight**2 (elementwise)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x) (elementwise)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y) (elementwise)
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.compare(org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint):::ENTER
p1.weight == 1.0
p2.weight == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.compare(org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint):::EXIT317
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.compare(org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint):::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[])
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].weight)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].x)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.observations[].y)
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters == orig(org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.this.parameters)
p1.weight == orig(p1.weight)
p1.x == orig(p1.x)
p1.y == orig(p1.y)
p2.weight == orig(p2.weight)
p2.x == orig(p2.x)
p2.y == orig(p2.y)
p1.weight == 1.0
p2.weight == 1.0
return == 1
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:::OBJECT
this.observations != null
this.observations.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
this.observations[] elements != null
this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
this.observations[].weight elements == 1.0
this.observations[].x sorted by <
size(this.parameters[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.ParameterGuesser(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::ENTER
observations.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
observations[].weight elements == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.ParameterGuesser(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::EXIT
observations[] == orig(observations[])
observations[].weight == orig(observations[].weight)
observations[].x == orig(observations[].x)
observations[].y == orig(observations[].y)
this.parameters == null
observations[].weight elements == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.basicGuess(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::ENTER
this.parameters == null
points.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
points[].weight elements == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.basicGuess(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
points[] == orig(points[])
points[].weight == orig(points[].weight)
points[].x == orig(points[].x)
points[].y == orig(points[].y)
this.parameters == null
points[].weight elements == 1.0
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.createWeightedObservedPointComparator():::ENTER
this.parameters == null
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.createWeightedObservedPointComparator():::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
this.parameters == null
return.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1.class
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.findMaxY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::ENTER
this.parameters == null
points.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
points[].weight elements == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.findMaxY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]):::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
points[] == orig(points[])
points[].weight == orig(points[].weight)
points[].x == orig(points[].x)
points[].y == orig(points[].y)
this.parameters == null
points[].weight elements == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.getInterpolationPointsForY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double):::ENTER
this.parameters == null
points.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
points[].weight elements == 1.0
points[].x sorted by <
idxStep one of { -1, 1 }
y one of { 141638.175, 1790265.02663491 }
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.getInterpolationPointsForY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double):::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
points[] == orig(points[])
points[].weight == orig(points[].weight)
points[].x == orig(points[].x)
points[].y == orig(points[].y)
this.parameters == null
points[].weight elements == 1.0
points[].x sorted by <
return.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
return[].weight == [1.0, 1.0]
return[].weight elements == 1.0
return[].x sorted by <
size(return[]) == 2
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.guess():::ENTER
this.parameters == null
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.guess():::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.interpolateXAtY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double):::ENTER
this.parameters == null
points.getClass().getName() == org.apache.commons.math.optimization.fitting.WeightedObservedPoint[].class
points[].weight elements == 1.0
points[].x sorted by <
idxStep one of { -1, 1 }
y one of { 141638.175, 1790265.02663491 }
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.interpolateXAtY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double):::EXIT235
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.interpolateXAtY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double):::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
points[] == orig(points[])
points[].weight == orig(points[].weight)
points[].x == orig(points[].x)
points[].y == orig(points[].y)
this.parameters == null
points[].weight elements == 1.0
points[].x sorted by <
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.isBetween(double, double, double):::ENTER
this.parameters == null
value one of { 141638.175, 1790265.02663491 }
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.isBetween(double, double, double):::EXIT
this.observations == orig(this.observations)
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
this.observations[] == orig(this.observations[])
this.observations[].weight == orig(this.observations[].weight)
this.observations[].x == orig(this.observations[].x)
this.observations[].y == orig(this.observations[].y)
this.parameters == orig(this.parameters)
this.parameters == null
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.isBetween(double, double, double):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser.isBetween(double, double, double):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter:::OBJECT
this.optimizer != null
this.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
this.observations != null
this.observations[] elements != null
this.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
this.observations.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter.GaussianFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer):::ENTER
optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter.GaussianFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer):::EXIT
this.observations[] == []
this.observations[].getClass().getName() == []
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter.fit():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitter.fit():::EXIT
this.optimizer == orig(this.optimizer)
this.optimizer.getClass().getName() == orig(this.optimizer.getClass().getName())
this.observations == orig(this.observations)
this.observations[] == orig(this.observations[])
this.observations.getClass().getName() == orig(this.observations.getClass().getName())
size(return[]) == 3
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest:::CLASS
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName()
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName()
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName()
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName()
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == double[][].class
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] contains no nulls and has only one value, of length 30
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] elements != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] contains no nulls and has only one value, of length 31
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] elements != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] contains no nulls and has only one value, of length 46
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] elements != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] contains no nulls and has only one value, of length 14
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] elements != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 has only one value
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 != null
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] contains no nulls and has only one value, of length 12
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] elements != null
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[]) == 30
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[]) == 31
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[]) == 46
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[]) == 14
size(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[]) == 12
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest:::OBJECT
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.GaussianFitterTest():::EXIT
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.addDatasetToGaussianFitter(double[][], org.apache.commons.math.optimization.fitting.GaussianFitter):::ENTER
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == points.getClass().getName()
fitter.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
fitter.observations[] == []
fitter.observations[].getClass().getName() == []
fitter.observations.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.addDatasetToGaussianFitter(double[][], org.apache.commons.math.optimization.fitting.GaussianFitter):::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(points.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[])
points[] == orig(points[])
fitter.optimizer == orig(fitter.optimizer)
fitter.optimizer.getClass().getName() == orig(fitter.optimizer.getClass().getName())
fitter.observations == orig(fitter.observations)
fitter.observations.getClass().getName() == orig(fitter.observations.getClass().getName())
fitter.optimizer.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
fitter.observations[].getClass().getName() elements == org.apache.commons.math.optimization.fitting.WeightedObservedPoint.class
fitter.observations.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit01():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit01():::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[])
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit04():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit04():::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[])
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit05():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit05():::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[])
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit06():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit06():::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[])
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit07():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit07():::EXIT
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1.getClass().getName() == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5.getClass().getName())
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET1[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET2[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET3[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET4[])
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5 == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5)
org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[] == orig(org.apache.commons.math.optimization.fitting.GaussianFitterTest.DATASET5[])
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint:::CLASS
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint:::OBJECT
this.weight == 1.0
this.x != 0
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.WeightedObservedPoint(double, double, double):::ENTER
weight == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.WeightedObservedPoint(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getWeight():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getWeight():::EXIT
this.weight == orig(this.weight)
this.x == orig(this.x)
this.y == orig(this.y)
return == 1.0
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getX():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getX():::EXIT
this.weight == orig(this.weight)
this.x == orig(this.x)
this.y == orig(this.y)
return != 0
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getY():::ENTER
===========================================================================
org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getY():::EXIT
this.weight == orig(this.weight)
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:::OBJECT
this.getClass().getName() == org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.class
this.weightedResidualJacobian.getClass().getName() == double[][].class
this.weightedResidualJacobian[] elements != null
this.cols one of { 0, 3 }
this.rows >= 0
this.objective[] elements >= 0.0
this.residuals[] elements == 0.0
this.cost >= 0.0
this.jF.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.class
this.jacobianEvaluations >= 0
this.evaluations != null
this.evaluations.maximalCount one of { 0, 2147483647 }
this.evaluations.count >= 0
this.checker != null
this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
this.weight[] elements == 1.0
this.function.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
size(this.point[]) == 3
size(this.start[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.AbstractLeastSquaresOptimizer():::EXIT
this.weightedResidualJacobian == null
this.cols == 0
this.rows == 0
this.point == null
this.objective == null
this.residuals == null
this.weightedResiduals == null
this.cost == 0.0
this.jF == null
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(int, org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction, double[], double[], double[]):::ENTER
this.weightedResidualJacobian == null
this.cols == 0
this.rows == 0
this.point == null
this.objective == null
this.residuals == null
this.weightedResiduals == null
this.cost == 0.0
this.jF == null
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
maxEval == 2147483647
f.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
weights[] elements == 1.0
size(startPoint[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(int, org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction, double[], double[], double[]):::EXIT
this.evaluations == orig(this.evaluations)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
target[] == orig(target[])
weights[] == orig(weights[])
startPoint[] == orig(startPoint[])
this.cols == 3
this.evaluations.maximalCount == 2147483647
weights[] elements == 1.0
return.value[] elements >= 0.0
size(return.point[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateJacobian():::ENTER
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateJacobian():::EXIT
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
size(this.weightedResidualJacobian[]) == orig(size(this.weightedResidualJacobian[]))
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.jacobianEvaluations >= 1
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
this.jacobianEvaluations - orig(this.jacobianEvaluations) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateResidualsAndCost():::ENTER
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.evaluations.maximalCount == 2147483647
this.target != null
this.weight != null
this.start != null
this.function != null
===========================================================================
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateResidualsAndCost():::EXIT
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
size(this.objective[]) == orig(size(this.objective[]))
size(this.weightedResiduals[]) == orig(size(this.weightedResiduals[]))
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
this.cost <= orig(this.cost)
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:::OBJECT
this.solvedCols one of { 0, 3 }
this.jacNorm[] elements >= 0.0
this.permutation[] elements one of { 0, 1, 2 }
this.permutation[] one of { [0, 0, 0], [1, 2, 0], [2, 1, 0] }
this.rank one of { 0, 3 }
this.lmPar == 0.0
this.initialStepBoundFactor == 100.0
this.costRelativeTolerance == 1.0E-10
this.parRelativeTolerance == 1.0E-10
this.orthoTolerance == 1.0E-10
this.qrRankingThreshold == 2.2250738585072014E-308
this.weightedResidualJacobian.getClass().getName() == double[][].class
this.weightedResidualJacobian[] elements != null
this.cols one of { 0, 3 }
this.rows >= 0
this.objective[] elements >= 0.0
this.residuals[] elements == 0.0
this.cost >= 0.0
this.jF.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1.class
this.jacobianEvaluations >= 0
this.evaluations != null
this.evaluations.maximalCount one of { 0, 2147483647 }
this.evaluations.count >= 0
this.checker != null
this.checker.getClass().getName() == org.apache.commons.math.optimization.SimpleVectorialValueChecker.class
this.weight[] elements == 1.0
this.function.getClass().getName() == org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.class
size(this.diagR[]) == 3
size(this.jacNorm[]) == 3
size(this.beta[]) == 3
size(this.permutation[]) == 3
size(this.lmDir[]) == 3
size(this.point[]) == 3
size(this.start[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer():::EXIT
this.solvedCols == 0
this.diagR == null
this.jacNorm == null
this.beta == null
this.permutation == null
this.rank == 0
this.lmDir == null
this.weightedResidualJacobian == null
this.cols == 0
this.rows == 0
this.point == null
this.objective == null
this.residuals == null
this.weightedResiduals == null
this.cost == 0.0
this.jF == null
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double, double, double, double, double):::ENTER
initialStepBoundFactor == 100.0
costRelativeTolerance == 1.0E-10
parRelativeTolerance == 1.0E-10
orthoTolerance == 1.0E-10
threshold == 2.2250738585072014E-308
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double, double, double, double, double):::EXIT
this.solvedCols == 0
this.diagR == null
this.jacNorm == null
this.beta == null
this.permutation == null
this.rank == 0
this.lmDir == null
this.weightedResidualJacobian == null
this.cols == 0
this.rows == 0
this.point == null
this.objective == null
this.residuals == null
this.weightedResiduals == null
this.cost == 0.0
this.jF == null
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.target == null
this.weight == null
this.start == null
this.function == null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[]):::ENTER
this.solvedCols == 3
this.diagR != null
this.jacNorm != null
this.beta != null
this.permutation != null
this.permutation[] one of { [1, 2, 0], [2, 1, 0] }
this.rank == 3
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.jacobianEvaluations >= 1
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
qy != null
diag != null
work1 != null
work2 != null
work2[] == [0.0, 0.0, 0.0]
work2[] elements == 0.0
work3 != null
work3[] == [0.0, 0.0, 0.0]
work3[] elements == 0.0
size(diag[]) == 3
size(work1[]) == 3
size(work2[]) == 3
size(work3[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[]):::EXIT509
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[]):::EXIT
this.solvedCols == orig(this.solvedCols)
this.diagR == orig(this.diagR)
this.diagR[] == orig(this.diagR[])
this.jacNorm == orig(this.jacNorm)
this.jacNorm[] == orig(this.jacNorm[])
this.beta == orig(this.beta)
this.beta[] == orig(this.beta[])
this.permutation == orig(this.permutation)
this.permutation[] == orig(this.permutation[])
this.rank == orig(this.rank)
this.lmPar == orig(this.lmPar)
this.lmDir == orig(this.lmDir)
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
qy[] == orig(qy[])
diag[] == orig(diag[])
work2[] == orig(work2[])
work3[] == orig(work3[])
size(this.lmDir[]) == orig(size(this.lmDir[]))
this.solvedCols == 3
this.diagR != null
this.jacNorm != null
this.beta != null
this.permutation != null
this.permutation[] one of { [1, 2, 0], [2, 1, 0] }
this.rank == 3
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.jacobianEvaluations >= 1
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
work2[] == [0.0, 0.0, 0.0]
work2[] elements == 0.0
work3[] == [0.0, 0.0, 0.0]
work3[] elements == 0.0
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize():::ENTER
this.solvedCols == 0
this.diagR == null
this.jacNorm == null
this.beta == null
this.permutation == null
this.rank == 0
this.lmDir == null
this.cols == 3
this.objective == null
this.weightedResiduals[] elements == 0.0
this.cost == Infinity
this.jacobianEvaluations == 0
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize():::EXIT435
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize():::EXIT
this.lmPar == orig(this.lmPar)
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
size(this.weightedResidualJacobian[]) == orig(size(this.weightedResidualJacobian[]))
size(this.point[]) == orig(size(this.point[]))
size(this.weightedResiduals[]) == orig(size(this.weightedResiduals[]))
this.solvedCols == 3
this.permutation[] == [2, 1, 0]
this.rank == 3
this.cols == 3
this.evaluations.maximalCount == 2147483647
return.value[] elements >= 0.0
size(return.point[]) == 3
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qTy(double[]):::ENTER
this.solvedCols == 3
this.diagR != null
this.jacNorm != null
this.beta != null
this.permutation != null
this.permutation[] one of { [1, 2, 0], [2, 1, 0] }
this.rank == 3
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.jacobianEvaluations >= 1
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
y != null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qTy(double[]):::EXIT
this.solvedCols == orig(this.solvedCols)
this.diagR == orig(this.diagR)
this.diagR[] == orig(this.diagR[])
this.jacNorm == orig(this.jacNorm)
this.jacNorm[] == orig(this.jacNorm[])
this.beta == orig(this.beta)
this.beta[] == orig(this.beta[])
this.permutation == orig(this.permutation)
this.permutation[] == orig(this.permutation[])
this.rank == orig(this.rank)
this.lmPar == orig(this.lmPar)
this.lmDir == orig(this.lmDir)
this.lmDir[] == orig(this.lmDir[])
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.solvedCols == 3
this.diagR != null
this.jacNorm != null
this.beta != null
this.permutation != null
this.permutation[] one of { [1, 2, 0], [2, 1, 0] }
this.rank == 3
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.jacobianEvaluations >= 1
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qrDecomposition():::ENTER
this.solvedCols == 3
this.diagR != null
this.jacNorm != null
this.beta != null
this.permutation != null
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.jacobianEvaluations >= 1
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qrDecomposition():::EXIT834
===========================================================================
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qrDecomposition():::EXIT
this.solvedCols == orig(this.solvedCols)
this.diagR == orig(this.diagR)
this.jacNorm == orig(this.jacNorm)
this.beta == orig(this.beta)
this.permutation == orig(this.permutation)
this.lmPar == orig(this.lmPar)
this.lmDir == orig(this.lmDir)
this.lmDir[] == orig(this.lmDir[])
this.initialStepBoundFactor == orig(this.initialStepBoundFactor)
this.costRelativeTolerance == orig(this.costRelativeTolerance)
this.parRelativeTolerance == orig(this.parRelativeTolerance)
this.orthoTolerance == orig(this.orthoTolerance)
this.qrRankingThreshold == orig(this.qrRankingThreshold)
this.weightedResidualJacobian == orig(this.weightedResidualJacobian)
this.weightedResidualJacobian.getClass().getName() == orig(this.weightedResidualJacobian.getClass().getName())
this.weightedResidualJacobian[] == orig(this.weightedResidualJacobian[])
this.cols == orig(this.cols)
this.rows == orig(this.rows)
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.objective == orig(this.objective)
this.objective[] == orig(this.objective[])
this.residuals == orig(this.residuals)
this.residuals[] == orig(this.residuals[])
this.weightedResiduals == orig(this.weightedResiduals)
this.weightedResiduals[] == orig(this.weightedResiduals[])
this.cost == orig(this.cost)
this.jF == orig(this.jF)
this.jF.getClass().getName() == orig(this.jF.getClass().getName())
this.jacobianEvaluations == orig(this.jacobianEvaluations)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.checker == orig(this.checker)
this.checker.getClass().getName() == orig(this.checker.getClass().getName())
this.target == orig(this.target)
this.target[] == orig(this.target[])
this.weight == orig(this.weight)
this.weight[] == orig(this.weight[])
this.start == orig(this.start)
this.start[] == orig(this.start[])
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
size(this.diagR[]) == orig(size(this.diagR[]))
size(this.jacNorm[]) == orig(size(this.jacNorm[]))
size(this.beta[]) == orig(size(this.beta[]))
size(this.permutation[]) == orig(size(this.permutation[]))
this.solvedCols == 3
this.diagR != null
this.jacNorm != null
this.beta != null
this.permutation != null
this.permutation[] one of { [1, 2, 0], [2, 1, 0] }
this.rank == 3
this.lmDir != null
this.weightedResidualJacobian != null
this.cols == 3
this.point != null
this.objective != null
this.residuals != null
this.weightedResiduals != null
this.jF != null
this.jacobianEvaluations >= 1
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.target != null
this.weight != null
this.start != null
this.function != null
this.rank >= orig(this.rank)
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.exp(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.exp(double):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::ENTER
extra == 0.0
hiPrec == null
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::EXIT724
return == 0.0
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::EXIT734
return one of { 6.808E-320, 4.223075510890667E-309 }
orig(x) one of { -746.8476354840376, -734.9091219108085, -710.0582300785037 }
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::EXIT821
===========================================================================
org.apache.commons.math.util.FastMath.exp(double, double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a[] sorted by >
b[] sorted by >
size(a[]) == 2
size(b[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] sorted by >
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return[] sorted by >=
size(return[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] sorted by >=
result[] <= orig(result[]) (lexically)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
size(split[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
b[] elements <= 2.0
ans[] sorted by >=
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
result[] elements <= 1.0
size(in[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::EXIT
===========================================================================
org.apache.commons.math.util.Incrementor:::OBJECT
this.maximalCount one of { 0, 2147483647 }
this.count >= 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::ENTER
this.maximalCount == 2147483647
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maximalCount == 2147483647
this.count >= 1
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::ENTER
this.maximalCount == 2147483647
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maximalCount == 2147483647
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::ENTER
this.maximalCount == 0
this.count == 0
max == 2147483647
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maximalCount == 2147483647
this.count == 0
