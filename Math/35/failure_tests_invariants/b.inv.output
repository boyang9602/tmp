===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulation:::OBJECT
this.elitismRate one of { -0.25, 1.25 }
this.chromosomes[] == []
this.chromosomes[].getClass().getName() == []
this.populationLimit == 100
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulation.ElitisticListPopulation(int, double):::ENTER
populationLimit == 100
elitismRate one of { -0.25, 1.25 }
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulation.ElitisticListPopulation(int, double):::EXIT
this.chromosomes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulation.ElitisticListPopulation(java.util.List, int, double):::ENTER
chromosomes has only one value
chromosomes[] == []
chromosomes[].getClass().getName() == []
chromosomes.getClass().getName() == java.util.Collections$EmptyList.class
populationLimit == 100
elitismRate one of { -0.25, 1.25 }
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulation.ElitisticListPopulation(java.util.List, int, double):::EXIT
chromosomes[] == orig(chromosomes[])
this.chromosomes has only one value
this.chromosomes.getClass().getName() == java.util.Collections$EmptyList.class
chromosomes[] == []
chromosomes[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest:::CLASS
org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter == 0
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest:::OBJECT
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.ElitisticListPopulationTest():::EXIT
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.testChromosomeListConstructorTooHigh():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.testChromosomeListConstructorTooHigh():::EXIT
org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter == orig(org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter)
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.testChromosomeListConstructorTooLow():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.testChromosomeListConstructorTooLow():::EXIT
org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter == orig(org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter)
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.testConstructorTooHigh():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.testConstructorTooHigh():::EXIT
org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter == orig(org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter)
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.testConstructorTooLow():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.genetics.ElitisticListPopulationTest.testConstructorTooLow():::EXIT
org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter == orig(org.apache.commons.math3.genetics.ElitisticListPopulationTest.counter)
===========================================================================
org.apache.commons.math3.genetics.ListPopulation:::OBJECT
this.getClass().getName() == org.apache.commons.math3.genetics.ElitisticListPopulation.class
this.chromosomes[] == []
this.chromosomes[].getClass().getName() == []
this.populationLimit == 100
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.ListPopulation(int):::ENTER
populationLimit == 100
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.ListPopulation(int):::EXIT
this.chromosomes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.ListPopulation(java.util.List, int):::ENTER
chromosomes has only one value
chromosomes[] == []
chromosomes[].getClass().getName() == []
chromosomes.getClass().getName() == java.util.Collections$EmptyList.class
populationLimit == 100
===========================================================================
org.apache.commons.math3.genetics.ListPopulation.ListPopulation(java.util.List, int):::EXIT
chromosomes[] == orig(chromosomes[])
this.chromosomes has only one value
this.chromosomes.getClass().getName() == java.util.Collections$EmptyList.class
chromosomes[] == []
chromosomes[].getClass().getName() == []
