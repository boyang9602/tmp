===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl:::OBJECT
this has only one value
this.data.getClass().getName() == double[][].class
this.data[] contains no nulls and has only one value, of length 2
this.data[] elements != null
this.lu == null
size(this.data[]) == 2
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][]):::ENTER
d has only one value
d.getClass().getName() == double[][].class
d[] contains no nulls and has only one value, of length 2
size(d[]) == 2
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][]):::EXIT
d[] == orig(d[])
this.data has only one value
d[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.copyIn(double[][]):::ENTER
this.data == null
in has only one value
in.getClass().getName() == double[][].class
in[] contains no nulls and has only one value, of length 2
size(in[]) == 2
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.copyIn(double[][]):::EXIT
this.lu == orig(this.lu)
in[] == orig(in[])
this.data has only one value
in[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension():::ENTER
this.data has only one value
this.data != null
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
this.data != null
return == 5
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.getEntry(int, int):::ENTER
this.data has only one value
this.data != null
row one of { 0, 1 }
column >= 0
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.getEntry(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
this.data != null
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.getRowDimension():::ENTER
this.data has only one value
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
return == 2
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.setEntry(int, int, double):::ENTER
this.data has only one value
row one of { 0, 1 }
value >= 0.0
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][], int, int):::ENTER
this.data == null
subMatrix has only one value
subMatrix.getClass().getName() == double[][].class
subMatrix[] contains no nulls and has only one value, of length 2
row == 0
column == 0
size(subMatrix[]) == 2
===========================================================================
org.apache.commons.math.linear.RealMatrixImpl.setSubMatrix(double[][], int, int):::EXIT
this.lu == orig(this.lu)
subMatrix[] == orig(subMatrix[])
this.data has only one value
subMatrix[] contains no nulls and has only one value, of length 2
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::OBJECT
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.separator has only one value
this.separator.toString == "; "
this.trimmedPrefix has only one value
this.trimmedPrefix.toString == "{"
this.trimmedSuffix has only one value
this.trimmedSuffix.toString == "}"
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
separator.toString == orig(separator.toString)
prefix.toString == "{"
suffix.toString == "}"
separator.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorImpl:::CLASS
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix != null
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix != null
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator != null
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix != null
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix != null
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator != null
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format != null
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorImpl:::OBJECT
this.data != null
this.data[] elements one of { -3.0, 1.0, 3.0 }
this.data[] one of { [-3.0], [1.0], [3.0] }
size(this.data[]) == 1
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.RealVectorImpl(double[]):::ENTER
d[] elements one of { -3.0, 1.0, 3.0 }
d[] one of { [-3.0], [1.0], [3.0] }
size(d[]) == 1
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.RealVectorImpl(double[]):::EXIT
d[] == orig(d[])
d[] elements one of { -3.0, 1.0, 3.0 }
d[] one of { [-3.0], [1.0], [3.0] }
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.checkVectorDimensions(int):::ENTER
this has only one value
this.data has only one value
this.data[] == [3.0]
this.data[] elements == 3.0
n == 1
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.checkVectorDimensions(int):::EXIT
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [3.0]
this.data[] elements == 3.0
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.dotProduct(double[]):::ENTER
this has only one value
this.data has only one value
this.data[] == [3.0]
this.data[] elements == 3.0
v has only one value
v[] == [10.0]
v[] elements == 10.0
size(v[]) == 1
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.dotProduct(double[]):::EXIT
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
this.data has only one value
this.data[] == [3.0]
this.data[] elements == 3.0
v[] == [10.0]
v[] elements == 10.0
return == 30.0
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.getData():::ENTER
this.data[] elements one of { -3.0, 1.0 }
this.data[] one of { [-3.0], [1.0] }
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.getData():::EXIT
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements one of { -3.0, 1.0 }
this.data[] one of { [-3.0], [1.0] }
return[] elements one of { -3.0, 1.0 }
return[] one of { [-3.0], [1.0] }
size(return[]) == 1
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.getDimension():::ENTER
this has only one value
this.data has only one value
this.data[] == [3.0]
this.data[] elements == 3.0
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.getDimension():::EXIT
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [3.0]
this.data[] elements == 3.0
return == 1
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.mapMultiply(double):::ENTER
this has only one value
this.data has only one value
this.data[] == [3.0]
this.data[] elements == 3.0
d == -1.0
===========================================================================
org.apache.commons.math.linear.RealVectorImpl.mapMultiply(double):::EXIT
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.RealVectorImpl.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [3.0]
this.data[] elements == 3.0
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
===========================================================================
org.apache.commons.math.optimization.GoalType:::OBJECT
===========================================================================
org.apache.commons.math.optimization.GoalType.GoalType(java.lang.String, int):::ENTER
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
$hidden$2 one of { 0, 1 }
===========================================================================
org.apache.commons.math.optimization.GoalType.GoalType(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair:::CLASS
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair:::OBJECT
this has only one value
this.point has only one value
this.point[] == [10.0]
this.point[] elements == 10.0
this.value == 30.0
size(this.point[]) == 1
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double):::ENTER
point has only one value
point[] == [10.0]
point[] elements == 10.0
value == 30.0
size(point[]) == 1
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.RealPointValuePair(double[], double):::EXIT
point[] == orig(point[])
point[] == [10.0]
point[] elements == 10.0
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getPoint():::ENTER
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getPoint():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
return has only one value
return[] == [10.0]
return[] elements == 10.0
size(return[]) == 1
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getValue():::ENTER
===========================================================================
org.apache.commons.math.optimization.RealPointValuePair.getValue():::EXIT
this.point == orig(this.point)
this.point[] == orig(this.point[])
this.value == orig(this.value)
return == 30.0
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.optimization.linear.SimplexSolver.class
this.maxIterations one of { 0, 100 }
this.iterations one of { 0, 1 }
this.f.coefficients has only one value
this.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
this.f.constantTerm == 0.0
this.constraints.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
this.restrictToNonNegative == false
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.AbstractLinearOptimizer():::EXIT
this.maxIterations == 100
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.incrementIterationsCounter():::ENTER
this.maxIterations == 100
this.iterations == 0
this.f has only one value
this.constraints has only one value
this.goalType has only one value
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.incrementIterationsCounter():::EXIT
this.maxIterations == orig(this.maxIterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.maxIterations == 100
this.iterations == 1
this.f has only one value
this.constraints has only one value
this.goalType has only one value
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.optimize(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math.optimization.GoalType, boolean):::ENTER
this.maxIterations == 100
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
f has only one value
f.coefficients has only one value
f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
f.constantTerm == 0.0
constraints has only one value
constraints.getClass().getName() == java.util.ArrayList.class
goalType has only one value
restrictToNonNegative == false
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.optimize(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math.optimization.GoalType, boolean):::EXIT
this.maxIterations == orig(this.maxIterations)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
f.coefficients == orig(f.coefficients)
f.coefficients.getClass().getName() == orig(f.coefficients.getClass().getName())
f.constantTerm == orig(f.constantTerm)
this.maxIterations == 100
this.iterations == 1
this.f has only one value
this.constraints has only one value
this.goalType has only one value
f.coefficients has only one value
f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
f.constantTerm == 0.0
return has only one value
return.point has only one value
return.point[] == [10.0]
return.point[] elements == 10.0
return.value == 30.0
size(return.point[]) == 1
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.setMaxIterations(int):::ENTER
this.maxIterations == 0
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
maxIterations == 100
===========================================================================
org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.setMaxIterations(int):::EXIT
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.constraints == orig(this.constraints)
this.goalType == orig(this.goalType)
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.maxIterations == 100
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint:::OBJECT
this.coefficients has only one value
this.coefficients != null
this.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
this.relationship has only one value
this.relationship != null
this.relationship.stringValue has only one value
this.relationship.stringValue != null
this.relationship.stringValue.toString == "<="
this.value == 10.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(double[], org.apache.commons.math.optimization.linear.Relationship, double):::ENTER
coefficients has only one value
coefficients[] == [1.0]
coefficients[] elements == 1.0
relationship has only one value
relationship.stringValue has only one value
relationship.stringValue.toString == "<="
value == 10.0
size(coefficients[]) == 1
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(double[], org.apache.commons.math.optimization.linear.Relationship, double):::EXIT
coefficients[] == orig(coefficients[])
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
coefficients[] == [1.0]
coefficients[] elements == 1.0
relationship.stringValue has only one value
relationship.stringValue.toString == "<="
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(org.apache.commons.math.linear.RealVector, org.apache.commons.math.optimization.linear.Relationship, double):::ENTER
coefficients has only one value
coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
relationship has only one value
relationship.stringValue has only one value
relationship.stringValue.toString == "<="
value == 10.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.LinearConstraint(org.apache.commons.math.linear.RealVector, org.apache.commons.math.optimization.linear.Relationship, double):::EXIT
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
relationship.stringValue has only one value
relationship.stringValue.toString == "<="
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getCoefficients():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getCoefficients():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getRelationship():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getRelationship():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return has only one value
return.stringValue has only one value
return.stringValue.toString == "<="
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getValue():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearConstraint.getValue():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return == 10.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction:::OBJECT
this has only one value
this.coefficients has only one value
this.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
this.constantTerm == 0.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(double[], double):::ENTER
coefficients has only one value
coefficients[] == [3.0]
coefficients[] elements == 3.0
constantTerm == 0.0
size(coefficients[]) == 1
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(double[], double):::EXIT
coefficients[] == orig(coefficients[])
coefficients[] == [3.0]
coefficients[] elements == 3.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(org.apache.commons.math.linear.RealVector, double):::ENTER
coefficients has only one value
coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
constantTerm == 0.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(org.apache.commons.math.linear.RealVector, double):::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getCoefficients():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getCoefficients():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getConstantTerm():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getConstantTerm():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
return == 0.0
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getValue(double[]):::ENTER
point has only one value
point[] == [10.0]
point[] elements == 10.0
size(point[]) == 1
===========================================================================
org.apache.commons.math.optimization.linear.LinearObjectiveFunction.getValue(double[]):::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
point[] == orig(point[])
point[] == [10.0]
point[] elements == 10.0
return == 30.0
===========================================================================
org.apache.commons.math.optimization.linear.Relationship:::OBJECT
this.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.Relationship.Relationship(java.lang.String, int, java.lang.String):::ENTER
$hidden$1.toString one of { "EQ", "GEQ", "LEQ" }
$hidden$2 one of { 0, 1, 2 }
stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.Relationship.Relationship(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
stringValue.toString == orig(stringValue.toString)
$hidden$1.toString one of { "EQ", "GEQ", "LEQ" }
stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver:::OBJECT
this has only one value
this.epsilon == 1.0E-6
this.maxIterations == 100
this.iterations one of { 0, 1 }
this.f.coefficients has only one value
this.f.coefficients != null
this.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
this.f.constantTerm == 0.0
this.constraints.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MAXIMIZE != null
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE != null
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES != null
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
this.restrictToNonNegative == false
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.SimplexSolver():::EXIT
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.SimplexSolver(double):::ENTER
epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.SimplexSolver(double):::EXIT
this.iterations == 0
this.f == null
this.constraints == null
this.goalType == null
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.doIteration(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.iterations == 0
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.doIteration(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
this.iterations == 1
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize():::ENTER
this.iterations == 0
this.f has only one value
this.constraints has only one value
this.goalType has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize():::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.iterations == 1
this.f has only one value
this.constraints has only one value
this.goalType has only one value
return has only one value
return.point has only one value
return.point[] == [10.0]
return.point[] elements == 10.0
return.value == 30.0
size(return.point[]) == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.iterations == 1
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
this.iterations == 1
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
return has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.getPivotRow(int, org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.iterations == 1
this.f has only one value
this.constraints has only one value
this.goalType has only one value
col == 1
tableau has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.getPivotRow(int, org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
this.iterations == 1
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
return has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT151
this.iterations == 0
return == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT151;condition="not(return == true)"
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT154
this.iterations == 1
return == true
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT154;condition="return == true"
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
(this.iterations == 0)  <==>  (return == false)
(this.iterations == 1)  <==>  (return == true)
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT;condition="return == true"
this.iterations == 1
return == true
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.isOptimal(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT;condition="not(return == true)"
this.iterations == 0
return == false
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math.optimization.linear.SimplexTableau):::ENTER
this.iterations == 0
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT168
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.goalType == orig(this.goalType)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.restrictToNonNegative == orig(this.restrictToNonNegative)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
this.iterations == 0
this.f has only one value
this.constraints has only one value
this.goalType has only one value
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == false
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
tableau.numDecisionVariables == 2
tableau.numSlackVariables == 1
tableau.numArtificialVariables == 0
tableau.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.SimplexSolverTest():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint():::ENTER
===========================================================================
org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint():::EXIT
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau:::CLASS
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau:::OBJECT
this has only one value
this.f has only one value
this.f != null
this.f.coefficients has only one value
this.f.coefficients != null
this.f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
this.f.constantTerm == 0.0
this.constraints has only one value
this.constraints != null
this.constraints.getClass().getName() == java.util.ArrayList.class
this.restrictToNonNegative == false
this.tableau.getClass().getName() == org.apache.commons.math.linear.RealMatrixImpl.class
this.numDecisionVariables one of { 0, 2 }
this.numSlackVariables one of { 0, 1 }
this.numArtificialVariables == 0
this.epsilon == 1.0E-6
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.SimplexTableau(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math.optimization.GoalType, boolean, double):::ENTER
f has only one value
f.coefficients has only one value
f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
f.constantTerm == 0.0
constraints has only one value
constraints.getClass().getName() == java.util.ArrayList.class
goalType has only one value
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
restrictToNonNegative == false
epsilon == 1.0E-6
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.SimplexTableau(org.apache.commons.math.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math.optimization.GoalType, boolean, double):::EXIT
f.coefficients == orig(f.coefficients)
f.coefficients.getClass().getName() == orig(f.coefficients.getClass().getName())
f.constantTerm == orig(f.constantTerm)
org.apache.commons.math.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math.optimization.GoalType.MAXIMIZE)
org.apache.commons.math.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math.optimization.GoalType.MINIMIZE)
org.apache.commons.math.optimization.GoalType.$VALUES == orig(org.apache.commons.math.optimization.GoalType.$VALUES)
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math.optimization.GoalType.$VALUES[])
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
f.coefficients has only one value
f.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
f.constantTerm == 0.0
org.apache.commons.math.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math.optimization.GoalType.$VALUES has only one value
org.apache.commons.math.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math.optimization.GoalType[].class
org.apache.commons.math.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math.optimization.GoalType, org.apache.commons.math.optimization.GoalType]
org.apache.commons.math.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math.optimization.GoalType.class
size(org.apache.commons.math.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.copyArray(double[], double[], int):::ENTER
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
src[] elements one of { -3.0, 1.0 }
src[] one of { [-3.0], [1.0] }
dest[] elements one of { 0.0, 1.0 }
dest[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0] }
destPos == 1
size(src[]) == 1
size(dest[]) == 5
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.copyArray(double[], double[], int):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
src[] == orig(src[])
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
src[] elements one of { -3.0, 1.0 }
src[] one of { [-3.0], [1.0] }
dest[] elements one of { -3.0, 0.0, 1.0 }
dest[] one of { [0.0, 1.0, 0.0, 0.0, 0.0], [1.0, -3.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.createTableau(boolean):::ENTER
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
maximize == true
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.createTableau(boolean):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
return has only one value
return.getClass().getName() == double[][].class
return[] contains no nulls and has only one value, of length 2
size(return[]) == 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.discardArtificialVariables():::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.discardArtificialVariables():::EXIT293
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.discardArtificialVariables():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.divideRow(int, double):::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
dividendRow == 1
divisor == 1.0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.divideRow(int, double):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int):::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
col one of { 1, 2 }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int):::EXIT285
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship):::ENTER
this.tableau == null
this.numDecisionVariables == 2
relationship.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
this.tableau == null
this.numDecisionVariables == 2
relationship.stringValue.toString one of { "<=", "=", ">=" }
return one of { 0, 1 }
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getEntry(int, int):::ENTER
this.tableau has only one value
this.tableau != null
this.numDecisionVariables == 2
this.numSlackVariables == 1
row one of { 0, 1 }
column >= 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getEntry(int, int):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.tableau != null
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getHeight():::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getHeight():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
return == 2
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(org.apache.commons.math.linear.RealVector):::ENTER
coefficients has only one value
coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(org.apache.commons.math.linear.RealVector):::EXIT
return == 3.0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNormalizedConstraints():::ENTER
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNormalizedConstraints():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.apache.commons.math.optimization.linear.LinearConstraint]
return[].getClass().getName() elements == org.apache.commons.math.optimization.linear.LinearConstraint.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumArtificialVariables():::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumArtificialVariables():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
return == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumObjectiveFunctions():::ENTER
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumObjectiveFunctions():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.numDecisionVariables == 2
this.numSlackVariables == 1
return == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumVariables():::ENTER
this.tableau == null
this.numDecisionVariables == 0
this.numSlackVariables == 0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getNumVariables():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau == null
this.numDecisionVariables == 0
this.numSlackVariables == 0
return == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getOriginalNumDecisionVariables():::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getOriginalNumDecisionVariables():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
return == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getRhsOffset():::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getRhsOffset():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
return == 4
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getSlackVariableOffset():::ENTER
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getSlackVariableOffset():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
return == 3
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getSolution():::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getSolution():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
return has only one value
return.point has only one value
return.point[] == [10.0]
return.point[] elements == 10.0
return.value == 30.0
size(return.point[]) == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getWidth():::ENTER
this.tableau has only one value
this.tableau != null
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.getWidth():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.tableau != null
this.numDecisionVariables == 2
this.numSlackVariables == 1
return == 5
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.initialize():::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.initialize():::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.normalize(org.apache.commons.math.optimization.linear.LinearConstraint):::ENTER
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
constraint has only one value
constraint.coefficients has only one value
constraint.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
constraint.relationship has only one value
constraint.relationship.stringValue has only one value
constraint.relationship.stringValue.toString == "<="
constraint.value == 10.0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.normalize(org.apache.commons.math.optimization.linear.LinearConstraint):::EXIT218
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.normalize(org.apache.commons.math.optimization.linear.LinearConstraint):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
constraint.coefficients == orig(constraint.coefficients)
constraint.coefficients.getClass().getName() == orig(constraint.coefficients.getClass().getName())
constraint.relationship == orig(constraint.relationship)
constraint.relationship.stringValue == orig(constraint.relationship.stringValue)
constraint.relationship.stringValue.toString == orig(constraint.relationship.stringValue.toString)
constraint.value == orig(constraint.value)
this.tableau == null
this.numDecisionVariables == 2
this.numSlackVariables == 1
constraint.coefficients has only one value
constraint.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
constraint.relationship has only one value
constraint.relationship.stringValue has only one value
constraint.relationship.stringValue.toString == "<="
constraint.value == 10.0
return has only one value
return.coefficients has only one value
return.coefficients.getClass().getName() == org.apache.commons.math.linear.RealVectorImpl.class
return.relationship has only one value
return.relationship.stringValue has only one value
return.relationship.stringValue.toString == "<="
return.value == 10.0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.subtractRow(int, int, double):::ENTER
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
minuendRow == 0
subtrahendRow == 1
multiple == -3.0
===========================================================================
org.apache.commons.math.optimization.linear.SimplexTableau.subtractRow(int, int, double):::EXIT
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.tableau has only one value
this.numDecisionVariables == 2
this.numSlackVariables == 1
===========================================================================
org.apache.commons.math.util.CompositeFormat:::CLASS
===========================================================================
org.apache.commons.math.util.CompositeFormat:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealVectorFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat.CompositeFormat():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::ENTER
y one of { -3.0, 0.0 }
eps == 1.0E-6
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::EXIT368
return == 0
orig(x) == 0.0
orig(y) == 0.0
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::EXIT370
return == -1
orig(x) == -3.0
orig(y) == 0.0
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::EXIT372
return == 1
orig(x) one of { 0.0, 1.0, 3.0 }
===========================================================================
org.apache.commons.math.util.MathUtils.compareTo(double, double, double):::EXIT
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::ENTER
y one of { -3.0, 0.0 }
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::EXIT
(return == false)  ==>  (orig(y) one of { -3.0, 0.0 })
(return == true)  ==>  (orig(x) == 0.0)
(return == true)  ==>  (orig(y) == 0.0)
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::EXIT;condition="return == true"
return == true
orig(x) == 0.0
orig(y) == 0.0
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, double):::ENTER
y one of { -3.0, 0.0 }
eps == 1.0E-6
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, double):::EXIT
(return == false)  ==>  (orig(y) one of { -3.0, 0.0 })
(return == true)  ==>  (orig(x) == 0.0)
(return == true)  ==>  (orig(y) == 0.0)
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, double):::EXIT;condition="return == true"
return == true
orig(x) == 0.0
orig(y) == 0.0
===========================================================================
org.apache.commons.math.util.MathUtils.equals(double, double, double):::EXIT;condition="not(return == true)"
return == false
