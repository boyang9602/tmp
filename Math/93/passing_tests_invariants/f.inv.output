===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionTest.class
this.distribution.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
this.tolerance one of { 1.0E-12, 1.0E-4 }
this.densityTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.densityTestPoints[] elements >= -1
this.densityTestValues[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
this.cumulativeTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.cumulativeTestPoints[] elements >= -1
this.cumulativeTestValues[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestPoints[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestValues[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.inverseCumulativeTestValues[] elements >= -1
size(this.densityTestPoints[]) == 9
size(this.densityTestValues[]) == 9
size(this.cumulativeTestPoints[]) == 9
size(this.cumulativeTestValues[]) == 9
size(this.inverseCumulativeTestPoints[]) == 9
size(this.inverseCumulativeTestValues[]) == 9
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double):::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
tolerance == 1.0E-12
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double):::EXIT
this.distribution == orig(this.distribution)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testDensities():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testDensities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::CLASS
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == 2.5066282746310002
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::OBJECT
this has only one value
this.mean one of { 0.0, 4.0 }
this.standardDeviation one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl():::EXIT
this.mean == 0.0
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::ENTER
mean == 0.0
sd == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(sd)
this.mean == 0.0
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::ENTER
this.mean == 0.0
this.standardDeviation == 1.0
mean one of { 0.0, 4.0 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(mean)
this.standardDeviation == orig(this.standardDeviation)
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::ENTER
this.standardDeviation == 1.0
sd one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(sd)
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl:::OBJECT
this has only one value
this.normal.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.mean one of { 0.0, 4.0 }
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double):::ENTER
p == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double):::EXIT
this.mean == orig(p)
this.normal has only one value
this.mean == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double, org.apache.commons.math.distribution.NormalDistribution):::ENTER
p == 4.0
z has only one value
z.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double, org.apache.commons.math.distribution.NormalDistribution):::EXIT
this.normal == orig(z)
this.normal.getClass().getName() == orig(z.getClass().getName())
this.mean == orig(p)
this.normal has only one value
this.mean == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.getMean():::ENTER
this.normal has only one value
this.mean == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.getMean():::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(this.mean)
this.normal has only one value
this.mean == 4.0
return == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.probability(int):::ENTER
this.normal has only one value
this.mean == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.probability(int):::EXIT107
return == 0.0
orig(x) == -1
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.probability(int):::EXIT109
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.probability(int):::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(this.mean)
(return == 0.0)  <==>  (orig(x) == -1)
this.normal has only one value
this.mean == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double):::ENTER
this.normal has only one value
this.mean == 0.0
p == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double):::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(p)
this.normal has only one value
this.mean == 4.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.setNormal(org.apache.commons.math.distribution.NormalDistribution):::ENTER
this.normal == null
this.mean == 0.0
value has only one value
value.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.setNormal(org.apache.commons.math.distribution.NormalDistribution):::EXIT
this.normal == orig(value)
this.normal.getClass().getName() == orig(value.getClass().getName())
this.mean == orig(this.mean)
this.normal has only one value
this.mean == 0.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest:::CLASS
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
this.tolerance == 1.0E-12
this.densityTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.densityTestPoints[] elements >= -1
this.densityTestPoints[] sorted by <
this.densityTestValues[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
this.cumulativeTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.cumulativeTestPoints[] elements >= -1
this.cumulativeTestValues[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestPoints[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestValues == null
size(this.densityTestPoints[]) == 9
size(this.densityTestValues[]) == 9
size(this.cumulativeTestPoints[]) == 9
size(this.cumulativeTestValues[]) == 9
size(this.inverseCumulativeTestPoints[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
return has only one value
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
return has only one value
return[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
return has only one value
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestValues():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
return has only one value
return[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution():::ENTER
this has only one value
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
return has only one value
return.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints == null
return has only one value
return[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
return has only one value
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
size(return[]) == 9
===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
org.apache.commons.math.util.MathUtils.factorials has only one value
org.apache.commons.math.util.MathUtils.factorials != null
org.apache.commons.math.util.MathUtils.factorials[] == [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000]
org.apache.commons.math.util.MathUtils.factorials[] elements >= 1
org.apache.commons.math.util.MathUtils.factorials[] sorted by <=
size(org.apache.commons.math.util.MathUtils.factorials[]) == 21
===========================================================================
org.apache.commons.math.util.MathUtils.factorial(int):::ENTER
===========================================================================
org.apache.commons.math.util.MathUtils.factorial(int):::EXIT
org.apache.commons.math.util.MathUtils.factorials == orig(org.apache.commons.math.util.MathUtils.factorials)
org.apache.commons.math.util.MathUtils.factorials[] == orig(org.apache.commons.math.util.MathUtils.factorials[])
===========================================================================
org.apache.commons.math.util.MathUtils.factorialDouble(int):::ENTER
===========================================================================
org.apache.commons.math.util.MathUtils.factorialDouble(int):::EXIT380
===========================================================================
org.apache.commons.math.util.MathUtils.factorialDouble(int):::EXIT382
return == Infinity
orig(n) == 171
===========================================================================
org.apache.commons.math.util.MathUtils.factorialDouble(int):::EXIT
org.apache.commons.math.util.MathUtils.factorials == orig(org.apache.commons.math.util.MathUtils.factorials)
org.apache.commons.math.util.MathUtils.factorials[] == orig(org.apache.commons.math.util.MathUtils.factorials[])
(return == Infinity)  <==>  (orig(n) == 171)
===========================================================================
org.apache.commons.math.util.MathUtils.factorialLog(int):::ENTER
n == 171
===========================================================================
org.apache.commons.math.util.MathUtils.factorialLog(int):::EXIT409
===========================================================================
org.apache.commons.math.util.MathUtils.factorialLog(int):::EXIT
org.apache.commons.math.util.MathUtils.factorials == orig(org.apache.commons.math.util.MathUtils.factorials)
org.apache.commons.math.util.MathUtils.factorials[] == orig(org.apache.commons.math.util.MathUtils.factorials[])
return == 711.7147258022902
===========================================================================
org.apache.commons.math.util.MathUtilsTest:::OBJECT
===========================================================================
org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.util.MathUtilsTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.util.MathUtilsTest.testFactorialFail():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.util.MathUtilsTest.testFactorialFail():::EXIT
